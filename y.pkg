# y.pkg
#
#
# package pc = mythryl_compiler::profiling_control; pc::set_compiler_to_add_per_fun_call_counters_to_deep_syntax ();
# make "y.lib";
# pc::set_compiler_to_not_add_per_fun_call_counters_to_deep_syntax (); pc::start_sigvtalrm_time_profiler ();
# y::run();
# pc::stop_sigvtalrm_time_profiler ();  pc::write_per_fun_time_profile_report  file::stdout;
# apply (fn { fun_name, call_count, cpu_seconds } = printf "Function %s was called %d times and used %g CPU seconds.\n" fun_name call_count cpu_seconds) (pc::get_per_fun_timing_stats_sorted_by_cpu_time_then_callcount ());
#

package y {
    fun inner_loop1 (1, z) => z; 
	inner_loop1 (i, z)
	    =>
	    if (i & 1 == 0)   inner_loop1( i - 1, z + 2.00);
	    else              inner_loop1( i - 1, z - 1.00);
	    fi;
    end;
    fun outer_loop1 (1, z) => z;
	outer_loop1 (i, z) => outer_loop1( i - 1, inner_loop1( 1000000, z ) );
    end;
    #
    fun inner_loop2 (1, z) => z; 
	inner_loop2 (i, z)
	    =>
	    if (i & 1 == 0)   inner_loop2( i - 1, z + 2.00);
	    else              inner_loop2( i - 1, z - 1.00);
	    fi;
    end;
    fun outer_loop2 (1, z) => z;
	outer_loop2 (i, z) => outer_loop2( i - 1, inner_loop2( 1000000, z ) );
    end;
    fun run ()
	=
	{
	    printf "loop1 %g\n" (outer_loop1 (1000, 1.0));
	    printf "loop2 %g\n" (outer_loop2 (1000, 1.0));
	};
};
#

