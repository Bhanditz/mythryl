# y.pkg
#
# 2012-02-27 CrT:
#   This package tests the new posix-threads support in the Mythryl codebase.
#
# I run it by doing
#
#     linux%  gdb --args bin/mythryl-runtime-intel32 --shebang bin/mythryld
#     (gdb) run
#     eval:  make "y.lib";
#     eval:  y::run ();
#
# It can of course also be run without using gdb: 
#  
#     linux%  my 
#     eval:  make "y.lib";  
#     eval:  y::run ();  
#  
# (See additional comments at foot of file.)
#

package y {

    include int_red_black_map;					# int_red_black_map		is from   src/lib/src/int-red-black-map.pkg

    fun assert (bool_value, bool_string)
        =
	if (not bool_value)
	   #
	   printf "Assertion '%s' failed.\n" bool_string;
	   winix::process::exit 1;
	fi;


    # When debugging uncomment the following lines and
    # add more log_if calls as appropriate:
    #
#   file::set_logger_to (file::LOG_TO_FILE "xyzzy.log");
#   log_if = file::log_if file::compiler_logging;
#   log_if .{ "Top of script"; }; 

    loops = 3;

    limit = 1 * 1000;

    fun subpthread_fn id ()
	=
	{
	    for (loop = 0;  loop < loops;  ++loop) {

                printf "loop %d  thread %d\n" loop id;

		# Create a map by successive appends:
		#
		my test_map
		    =
		    for (m = empty, i = 0;  i < limit;  ++i; m) {

			m = set (m, i, i);

			assert (all_invariants_hold m,				"all_invariants_hold m");
			assert (not (is_empty m),				"not (is_empty m)");
			assert (the (first_val_else_null m) == 0,		"the (first_val_else_null m) == 0");
			assert (     vals_count m  == i+1,			"vals_count m  == i+1");

			assert (#1 (the (first_keyval_else_null m)) == 0,	"#1 (the (first_keyval_else_null m)) == 0");
			assert (#2 (the (first_keyval_else_null m)) == 0,	"#2 (the (first_keyval_else_null m)) == 0");

		    };

		# Check resulting map's contents:
		#
		for (i = 0;  i < limit;  ++i) {
		    #
		    assert ((the (get (test_map, i))) == i,			sprintf "(the (get (test_map, %d))) == %d" i i);
		};

		# Try removing at all possible positions in map:
		#
		for (map' = test_map, i = 0;   i < limit;   ++i) {

		    my (map'', value) = drop (map', i);

		    assert (all_invariants_hold map'',				"all_invariants_hold map''");
		};

		assert (is_empty empty,						"is_empty empty");
	    };

	    pthread::pthread_exit ();
	};	


    fun run ()
	=
	{
#	    heap_debug::breakpoint_1 ();

	    subpthread0 = pthread::spawn_pthread  (subpthread_fn 0);
	    subpthread1 = pthread::spawn_pthread  (subpthread_fn 1);
	    subpthread2 = pthread::spawn_pthread  (subpthread_fn 2);
	    subpthread3 = pthread::spawn_pthread  (subpthread_fn 3);
	    subpthread4 = pthread::spawn_pthread  (subpthread_fn 4);
	    subpthread5 = pthread::spawn_pthread  (subpthread_fn 5);

	    pthread::join_pthread  subpthread0;
	    pthread::join_pthread  subpthread1;
	    pthread::join_pthread  subpthread2;
	    pthread::join_pthread  subpthread3;
	    pthread::join_pthread  subpthread4;
	    pthread::join_pthread  subpthread5;
	};
};
#

################################################################
# Useful gdb commands
#     break do_breakpoint_1
#     c                       # Continue
#     s                       # single-step
#     p                       # print
#     l                       # list (sourcecode)
#     info registers
#     info threads
#     info all-registers
#     thread 2                # Etc -- switch threads.
#     p/x $eax
#     p/x $pc
#     x/i $pc
#     p/x ramlog_next_entry_to_write
#     print expr              # Including fn calls.
#     call  expr              # same as above except result is not printed.
#
# package pc = mythryl_compiler::profiling_control; pc::set_compiler_to_add_per_fun_call_counters_to_deep_syntax ();
# make "y.lib";
# pc::set_compiler_to_not_add_per_fun_call_counters_to_deep_syntax (); pc::start_sigvtalrm_time_profiler ();
# y::run();
# pc::stop_sigvtalrm_time_profiler ();  pc::write_per_fun_time_profile_report  file::stdout;
# apply (fn { fun_name, call_count, cpu_seconds } = printf "Function %s was called %d times and used %g CPU seconds.\n" fun_name call_count cpu_seconds) (pc::get_per_fun_timing_stats_sorted_by_cpu_time_then_callcount ());
