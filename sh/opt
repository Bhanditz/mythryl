#!/usr/bin/mythryl
#
# Add a C library binding to the C and Mythryl codebase.
#
# This script should be invoked from the root sourcetree dirctory.
#
# Arguments are library names (i.e., names of directories under src/opt):
#
#     sh/opt add gtk opengl
#
# To add all available libraries use the special arg 'all':
#
#     sh/opt add all

# To remove all libraries:
#
#     sh/opt drop all

stipulate
    package cmd =  commandline;							# commandline		is from   src/lib/std/commandline.pkg
    package gj  =  opt_junk;							# opt_junk		is from   src/lib/make-library-glue/opt-junk.pkg
    package lms =  list_mergesort;						# list_mergesort	is from   src/lib/src/list-mergesort.pkg
    package lp  =  library_patchpoints;						# library_patchpoints	is from   src/lib/make-library-glue/library-patchpoints.pkg
    package paf =  patchfile;							# patchfile		is from   src/lib/make-library-glue/patchfile.pkg
    package pfj =  planfile_junk;						# planfile_junk		is from   src/lib/make-library-glue/planfile-junk.pkg
    package pfs =  patchfiles;							# patchfiles		is from   src/lib/make-library-glue/patchfile.pkg
    package plf =  planfile;							# planfile		is from   src/lib/make-library-glue/planfile.pkg
    package psx =  posixlib;							# posixlib		is from   src/lib/std/src/psx/posixlib.pkg
    package sm  =  string_map;							# string_map		is from   src/lib/src/string-map.pkg

    keys_list				=  sm::keys_list;
    vals_list				=  sm::vals_list;

    sort_list_and_drop_duplicates	=  lms::sort_list_and_drop_duplicates;

    print_strings			=  gj::print_strings;
    validate_opt_selections		=  gj::validate_opt_selections;

    get_only_patch			=  paf::get_only_patch;
    print_patchfile			=  paf::print_patchfile;
    read_patchfile			=  paf::read_patchfile;
    set_only_patch			=  paf::set_only_patch;
    write_patchfile			=  paf::write_patchfile;

    =~     =  regex::(=~);

herein

    Op = ADD | DROP | NADA;

    fun usage ()
	=
	{   printf "Usage: opt add  arg ...  where 'arg' is either a subdirectory in src/opt or the special word 'all'.\n";
	    printf "   or: opt drop arg ...  where 'arg' is either a subdirectory in src/opt or the special word 'all'.\n";
	    printf "   or: opt               to display current opt module configuration.\n";
	    exit_x(1);
	};

    available_opt_modules =   gj::find_available_opt_modules ();		# Find all subdirs of src/opt.
										# Returns a map from keys like
										# "opengl" to paths like "src/opt/opengl":

    possible_selections    =  sm::keys_list  available_opt_modules;

    selected_opt_modules__filename
	=
	gj::validate__selected_opt_modules__file ();				# Create $HOME/.mythryl/selected-opt-modules if it doesn't exist -- or die trying.

    selected_opt_modules__file
	=
	read_patchfile  selected_opt_modules__filename;

    old_opt_selections =  get_only_patch  selected_opt_modules__file;

    old_opt_selections =  map  trim  old_opt_selections;			# Drop trailing newlines.

    new_opt_selections =  cmd::get_commandline_arguments ();


    my (op, new_opt_selections)
	=
	case new_opt_selections
	    #
	    "add"  ! rest   => (ADD,   rest);
	    "drop" ! rest   => (DROP,  rest);
	    [] 		    => (NADA,  []);
	    _		    => usage ();
	esac;

    new_opt_selections
	=
	validate_opt_selections  new_opt_selections  available_opt_modules   usage;

    old_opt_selections
	=
	sort_list_and_drop_duplicates
	    string::compare
	    old_opt_selections;

    final_opt_selections							# [ "opengl", "gtk" ], say.
	=
	case op
	    #
	    NADA => old_opt_selections;

	    ADD  => sort_list_and_drop_duplicates
			string::compare
			(old_opt_selections @ new_opt_selections);

	    DROP => {	
			opt_selections_to_drop
			    =
			    sort_list_and_drop_duplicates
				string::compare
				new_opt_selections;

			list::filter  want_this_one  old_opt_selections
			where
			    fun want_this_one  opt						# Return TRUE unless 'opt' is in 'opt_selections_to_drop'.
				=
				not (list::exists (fn element =   element == opt)  opt_selections_to_drop);
			end;
		    };
	esac;

    printf "\n";
    printf "All opt module selections: ";    apply (fn m = printf " %s" m)   possible_selections;	printf "\n"; 
    printf "Old opt module selections: ";    apply (fn m = printf " %s" m)   old_opt_selections;	printf "\n";
    printf "New opt module selections: ";    apply (fn m = printf " %s" m) final_opt_selections;	printf "\n";
    printf "\n";

    if (old_opt_selections == final_opt_selections)
	#
	printf "No net change in opt selections -- nothing to do, so exit(0)ing.\n\n";
	exit(0);
    fi;    

    # Clear out of doc/tex all .tex files coming from opt modules.
    # Later we'll re-install those which we actually want.
    #
    apply'
	(sm::keys_list  available_opt_modules)
	#
	(fn glu =								# 'glu' will be something like   "src/opt/opengl"
	    apply'
		((dir::file_names ("src/opt/" + glu + "/doc/tex"))	except _ = [])
		#
		(fn filename
		    =
		    if (filename =~ ./\.tex$/)
			#
			installed_copy =  "doc/tex/" + filename;

			if (dir::is_file  installed_copy)
			    printf "Removing     %-75s copy in   %s\n"  ("src/opt/" + glu + "/doc/tex/" + filename)  (installed_copy + ",");
			    psx::unlink installed_copy;
			fi;
		    fi
		)
	);
    printf "\n";

    planfile_paths								# [ "src/opt/opengl/etc/opengl-integration.plan", "src/opt/gtk/etc/gtk-integration.plan" ], say.
	=
	fold_forward
	    (fn (opt_name, result)						# opt_name will be "opengl" or such.
		=
		{   opt_dir = the (sm::get (available_opt_modules, opt_name));
		    #
		    (opt_dir + "/etc/" + opt_name + "-integration.plan")  !  result;
		}
	    ) 
	    []
	    final_opt_selections;

    paragraph_defs
	=
	plf::digest_paragraph_definitions
	    (sm::empty: plf::Digested_Paragraph_Definitions(Int))
	    "sh/opt"
	    [ lp::append_to_patch__definition ];

    plan =  plf::read_planfiles  paragraph_defs  planfile_paths;		# Load into memory all changes to be made to patchfiles.
    
    patchfiles =  pfs::load_patchfiles  lp::patchfile_paths;			# Load into memory all the files which we will be patching.
    patchfiles =  pfs::empty_all_patches  patchfiles;				# Clear current contents of patches to make way for the new contents.
    patchfiles =  plf::map_patchfiles_per_plan  0  patchfiles  plan;		# Patch all patchfiles per plans.  ('0' arg is unused.)

    summary    =  pfs::write_patchfiles  patchfiles;

    summary    =  sort_list_and_drop_duplicates
		      string::compare
		      summary;


    # Copy into doc/tex all .tex files in our selected opt modules.
    #
    apply'
	final_opt_selections
	#
	(fn glu =								# 'glu' will be something like   "src/opt/opengl"
	    apply'
		((dir::file_names ("src/opt/" + glu + "/doc/tex"))	except _ = [])
		#
		(fn filename
		    =
		    if (filename =~ ./\.tex$/)
			#
			from =   "src/opt/" + glu + "/doc/tex/" + filename;
			to   =   "doc/tex/"                     + filename;

			printf "Installing   %-75s copy as   %s\n"  from  to;

			psx::copy_file { from, to };

			();
		    fi
		)
	);

    printf "\nPatch summary:\n\n";
    apply (fn s = printf "    %s\n" s) summary;
    printf "\n";

    # Remember opt selections:
    #
    stipulate
	final_opt_selections'	    =  (map  (fn s = s + "\n")  final_opt_selections);
    herein
	selected_opt_modules__file =  set_only_patch  selected_opt_modules__file  final_opt_selections';
	write_patchfile  selected_opt_modules__file;
    end;

    if (dir::is_file  "bin/mythryld")
	#
	psx::unlink "bin/mythryld";
	printf "Removed obsoleted bin/mythryld\n";
    fi;
    
    if (dir::is_file  "bin/mythryld-previous")
	#
	psx::unlink "bin/mythryld-previous";
	printf "Removed obsoleted bin/mythryld-previous\n";
    fi;

    apply'
        (dir::file_names "bin")
        (fn filename
	    =
	    if (filename =~ ./^mythryl-runtime/)
		filepath = "bin/" + filename;
		psx::unlink filepath;
		printf "Removed obsoleted %s\n" filepath;
	    fi
	);

    case final_opt_selections
	#
	[] =>	    printf "\n\nCodebase now configured without any opt modules.\n\n";
	#
	_  =>   {   printf "\n\nCodebase now reconfigured to support the following opt modules:\n\n";
		    apply  (fn m = printf "    %s\n" m)  final_opt_selections;
		    printf "\n";
		};
    esac;

    printf "\nNext you may want to build from the newly-patched codebase by doing:\n\n";
    printf "    make clean\n";
    printf "    make compiler\n";
    printf "    make rest\n";
    printf "    sudo make install\n";
    printf "    make check\n";
    printf "\n";
    
    exit(0);
end;
