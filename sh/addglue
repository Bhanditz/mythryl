#!/usr/bin/mythryl
#
#     sh/addglue all
#     sh/addglue gtk opengl
#
# Add a C library binding to the C and Mythryl codebase and recompile.
#
# This script should be invoked from the root sourcetree dirctory.
#
# Arguments are library names (i.e., names of directories under src/glu):
#
#     sh/addglue gtk opengl
#
# To add all available libraries use the special arg 'all':
#
#     sh/addglue all

stipulate
    package cmd =  commandline;							# commandline		is from   src/lib/std/commandline.pkg
    package gj  =  glue_junk;							# glue_junk		is from   src/lib/make-library-glue/glue-junk.pkg
    package pf  =  patchable_file;						# patchable_file	is from   src/lib/make-library-glue/patchable-file.pkg
    package sm  =  string_map;							# string_map		is from   src/lib/src/string-map.pkg
    #
    keys_list			=  sm::keys_list;
    vals_list			=  sm::vals_list;
    #
    print_strings		=  gj::print_strings;
    validate_glue_selections	=  gj::validate_glue_selections;
    #
    get_patch			=  pf::get_patch;
    print_patchable_file	=  pf::print_patchable_file;
    read_patchable_file		=  pf::read_patchable_file;
    set_patch			=  pf::set_patch;
    write_patchable_file	=  pf::write_patchable_file;
herein
    fun usage ()
	=
	{
	    printf "Usage: addglue arg...  where 'arg' is either a subdirectory in src/glu or the special word 'all'.\n";
	    exit(1);
	};

    available_glue_modules =   gj::find_available_glue_modules ();		# Find all subdirs of src/glu.



    selected_glue_modules__filename
	=
	gj::validate__selected_glue_modules__file ();				# Create $HOME/.mythryl/selected-glue-modules if it doesn't exist -- or die trying.

    selected_glue_modules__file
	=
	read_patchable_file  selected_glue_modules__filename;

#   print_patchable_file  selected_glue_modules__file;

    old_glue_selections =  get_patch  selected_glue_modules__file;

    old_glue_selections =  map  trim  old_glue_selections;			# Drop trailing newlines.

    printf "Old glue selections: ";
    print_strings old_glue_selections;
    printf "\n";    




    new_glue_selections =  cmd::get_commandline_arguments ();

    printf "new_glue_selections: ";
    print_strings new_glue_selections;
    printf "\n";    

    new_glue_selections
	=
	validate_glue_selections  new_glue_selections  available_glue_modules   usage;

    printf "new_glue_selections after validation: ";
    print_strings new_glue_selections;
    printf "\n";    



    new_glue_selections =  map  (fn s = s + "\n")  new_glue_selections;		# Add trailing newlines.

    selected_glue_modules__file
	=
	set_patch  selected_glue_modules__file  new_glue_selections;



    write_patchable_file  selected_glue_modules__file;


    keys =  keys_list  available_glue_modules;

    printf "Available glue modules: ";
    print_strings keys;
    printf "\n";    

    vals =  vals_list  available_glue_modules;

    printf "Glue module directories: ";
    print_strings vals;
    printf "\n";    

    exit(0);
end;