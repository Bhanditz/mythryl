#!/usr/bin/mythryl
#
#     sh/addglue all
#     sh/addglue gtk opengl
#
# Add a C library binding to the C and Mythryl codebase and recompile.
#
# This script should be invoked from the root sourcetree dirctory.
#
# Arguments are library names (i.e., names of directories under src/glu):
#
#     sh/addglue gtk opengl
#
# To add all available libraries use the special arg 'all':
#
#     sh/addglue all

stipulate
    package cmd =  commandline;							# commandline		is from   src/lib/std/commandline.pkg
    package gj  =  glue_junk;							# glue_junk		is from   src/lib/make-library-glue/glue-junk.pkg
    package lms =  list_mergesort;						# list_mergesort	is from   src/lib/src/list-mergesort.pkg
    package lp  =  library_patchpoints;						# library_patchpoints	is from   src/lib/make-library-glue/library-patchpoints.pkg
    package paf =  patchfile;							# patchfile		is from   src/lib/make-library-glue/patchfile.pkg
    package pfj =  planfile_junk;						# planfile_junk		is from   src/lib/make-library-glue/planfile-junk.pkg
    package pfs =  patchfiles;							# patchfiles		is from   src/lib/make-library-glue/patchfile.pkg
    package plf =  planfile;							# planfile		is from   src/lib/make-library-glue/planfile.pkg
    package sm  =  string_map;							# string_map		is from   src/lib/src/string-map.pkg
    #
    keys_list				=  sm::keys_list;
    vals_list				=  sm::vals_list;
    #
    sort_list_and_drop_duplicates	=  lms::sort_list_and_drop_duplicates;
    #
    print_strings			=  gj::print_strings;
    validate_glue_selections		=  gj::validate_glue_selections;
    #
    get_only_patch			=  paf::get_only_patch;
    print_patchfile			=  paf::print_patchfile;
    read_patchfile			=  paf::read_patchfile;
    set_only_patch			=  paf::set_only_patch;
    write_patchfile			=  paf::write_patchfile;
herein
    fun usage ()
	=
	{   printf "Usage: addglue arg...  where 'arg' is either a subdirectory in src/glu or the special word 'all'.\n";
	    exit(1);
	};

    available_glue_modules =   gj::find_available_glue_modules ();		# Find all subdirs of src/glu.
										# Returns a map from keys like
										# "opengl" to paths like "src/glu/opengl":


    selected_glue_modules__filename
	=
	gj::validate__selected_glue_modules__file ();				# Create $HOME/.mythryl/selected-glue-modules if it doesn't exist -- or die trying.

    selected_glue_modules__file
	=
	read_patchfile  selected_glue_modules__filename;

    old_glue_selections =  get_only_patch  selected_glue_modules__file;

    old_glue_selections =  map  trim  old_glue_selections;			# Drop trailing newlines.

    new_glue_selections =  cmd::get_commandline_arguments ();

    new_glue_selections
	=
	validate_glue_selections  new_glue_selections  available_glue_modules   usage;

    final_glue_selections							# [ "opengl", "gtk" ], say.
	=
	sort_list_and_drop_duplicates
	    string::compare
	    (old_glue_selections @ new_glue_selections);

    planfile_paths								# [ "src/glu/opengl/etc/integration.plan", "src/glu/gtk/etc/integration.plan" ], say.
	=
	fold_forward
	    (fn (glue_name, result)						# glue_name will be "opengl" or such.
		=
		{   glue_dir = the (sm::get (available_glue_modules, glue_name));
		    #
		    (glue_dir + "/etc/integration.plan")  !  result;
		}
	    ) 
	    []
	    final_glue_selections;

    paragraph_defs
	=
	plf::digest_paragraph_definitions
	    (sm::empty: plf::Digested_Paragraph_Definitions(Int))
	    "sh/addglue"
	    [ lp::append_to_patch__definition ];

    plan =  plf::read_planfiles  paragraph_defs  planfile_paths;		# Load into memory all changes to be made to patchfiles.
    
    patchfiles =  pfs::load_patchfiles  lp::patchfile_paths;			# Load into memory all the files which we will be patching.
    patchfiles =  pfs::empty_all_patches  patchfiles;				# Clear current contents of patches to make way for the new contents.
    patchfiles =  plf::map_patchfiles_per_plan  0  patchfiles  plan;		# Patch all patchfiles per plans.  ('0' arg is unused.)

    summary    =  pfs::write_patchfiles  patchfiles;

    printf "\nPatch summary:\n";
    apply (fn s = printf "    %s\n" s) summary;
    printf "\n";

    # Remember glue selections:
    #
    final_glue_selections	=  (map  (fn s = s + "\n")  final_glue_selections);
    selected_glue_modules__file =  set_only_patch  selected_glue_modules__file  final_glue_selections;
    write_patchfile  selected_glue_modules__file;

    exit(0);
end;