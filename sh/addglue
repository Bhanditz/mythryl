#!/usr/bin/mythryl
#
#     sh/addglue all
#     sh/addglue gtk opengl
#
# Add a C library binding to the C and Mythryl codebase and recompile.
#
# This script should be invoked from the root sourcetree dirctory.
#
# Arguments are library names (i.e., names of directories under src/glu):
#
#     sh/addglue gtk opengl
#
# To add all available libraries use the special arg 'all':
#
#     sh/addglue all

stipulate
    package cmd =  commandline;			# commandline		is from   src/lib/std/commandline.pkg
    package pf  =  patchable_file;		# patchable_file	is from   src/lib/make-library-glue/patchable-file.pkg
    package sm  =  string_map;			# string_map		is from   src/lib/src/string-map.pkg
herein
    fun usage ()
	=
	{
	    printf "Usage: addglue arg...  where 'arg' is either a subdirectory in src/glu or the special word 'all'.\n";
	    exit(1);
	};

    fun print_strings  strings
	=
	{   print "[";
	    print_strings' strings;
	    print " ]";
	}
	where
	    fun print_strings' []		=>  {   ();						};
		print_strings' [ string ]       =>  {   printf " %s"  string;				};
		print_strings' ( string ! rest) =>  {   printf " %s," string;  print_strings' rest;	};
	    end;
	end;

    fun find_available_glue_modules ()
	=
	{   if (not (dir::is_directory "src"))       die "I see no src/ dir here -- addglue must be run from root install directory.\n";   fi;
	    if (not (dir::is_directory "src/glu"))   die "I see no src/glu/ dir here -- addglue must be run from root install directory.\n";   fi;
	    #
	    
	    # This will construct and return a map from keys
	    # like "opengl" to paths like "src/glu/opengl":
	    #
	    list::fold_right
		(fn (glue, tree) = sm::set (tree, glue, "src/glu" + "/" + glue))
		sm::empty
		(dir::directory_names "src/glu");
	};

    glues =  find_available_glue_modules ();

    fun validate_arg arg
	=
	if (arg != "all")
	    if (not (sm::contains_key (glues, arg)))
		printf "%s is neither 'all' nor a subdirectory of src/glu\n" arg;
		usage();
	    fi;
	fi;

    fun validate_mythryl_directory ()
	=
	case (getenv "HOME")
	    NULL	=>  die "Giving up because no HOME dir defined(?!)\n";
	    #
	    THE homedir =>  {   printf "$HOME = '%s' :-)\n" homedir;
				mythdir = homedir + "/" + ".mythryl";
				#
				if (not (dir::is_directory mythdir))
				    mkdir mythdir	except _ = die (sprintf "Unable to create %s\n" mythdir);
				fi;
			    };
	esac;

    fun validate_glue_selections_file ()
	=
	{   validate_mythryl_directory ();

	    glue_selections = (the (getenv "HOME")) + "/" + ".mythryl" + "/" + "glue-selections";

	    if (not (dir::is_file glue_selections))
		printf "Creating empty %s file\n" glue_selections;

		file::from_lines glue_selections
		  [
		    "# This file contains the set of currently selected Mythryl library glue modules.\n",
		    "# This file is automatically created and maintained by sh/addglue and sh/rmglue;\n",
		    "# manual modification is inadvisable.\n",
		    "# Do not edit this or following lines -- they are autobuilt.\n",
		    "# Do not edit this or preceding lines -- they are autobuilt.\n"
		  ];

		if (not (dir::is_file glue_selections))
		    die (sprintf "Failed to create empty %s file\n" glue_selections);
		else
		    printf "Successfully created empty %s file\n" glue_selections;
		fi;
	    fi;

	    glue_selections;
	};


    glue_selections_filename =  validate_glue_selections_file ();

    glue_selections_file = pf::read_patchable_file glue_selections_filename;

    pf::print_patchable_file  glue_selections_file;

    old_glue_selections = pf::get_intron glue_selections_file;

    printf "Old glue selections: ";
    print_strings old_glue_selections;
    printf "\n";    

    new_glue_selections = [ "alpha\n", "beta\n", "gamma\n" ];

    glue_selections_file =  pf::set_intron  glue_selections_file  new_glue_selections;

    pf::print_patchable_file  glue_selections_file;

    pf::write_patchable_file  glue_selections_file;

    args =  cmd::get_commandline_arguments ();

    apply  validate_arg  args;

    printf "Args: ";
    print_strings args;
    printf "\n";    


    keys =  sm::keys_list glues;

    printf "Available glue modules: ";
    print_strings keys;
    printf "\n";    

    vals =  sm::vals_list glues;

    printf "Glue module directories: ";
    print_strings vals;
    printf "\n";    

    exit(0);
end;