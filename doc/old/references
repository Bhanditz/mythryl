Other pages with relevant stuff:

Andrew Appel papers:  http://www.cs.princeton.edu/~appel/papers/
  Karl Crary papers:  http://www.cs.cmu.edu/~crary/papers/
Derek Dreyer papers:  http://ttic.uchicago.edu/~dreyer/research.html#publications
  Bob Harper papers:  http://www.cs.cmu.edu/afs/cs.cmu.edu/project/fox/mosaic/people/rwh/index.html
  Zhong Shao papers:  http://flint.cs.yale.edu/flint/publications/

MLRISC home page:     http://cs.nyu.edu/leunga/www/MLRISC/Doc/html/INTRO.html
SML/NJ home page:     http://www.smlnj.org/
MLton  refs page:     http://mlton.org/References
CMU Venari proj:      http://www.cs.cmu.edu/afs/cs.cmu.edu/project/venari/www/home.html
CMU Fox project:      http://www.cs.cmu.edu/afs/cs.cmu.edu/project/fox/mosaic/HomePage.html
Yale FLINT proj:      http://flint.cs.yale.edu/flint/index.html
HaMLet home page:     http://www.ps.uni-sb.de/hamlet/


     The Next 700 Programming Languages
     P. J. Landin (Univac division of Sperry Rand)
     1966, 10p
     http://www.cs.cmu.edu/~seanmcl/life/papers/landin_700.pdf
         The classic ISWIM paper credited with kicking
         off the entire field of functional programming.

     Hints on Programming Language Design
     C. A. R. Hoare (SAIL, Stanford Artificial Intelligence Laboratory)
     1973, 30p
     http://www.cs.dartmouth.edu/~mckeeman/cs118/references/hoarehints.pdf
         Appel cites this as a classic.

     Principal type-schemes for functional programs
     Luis Damas, Robin Milner (Edinburgh U)
     1982, 6p
     http://ttic.uchicago.edu/~pl/classes/CMCS321-Fall06/lectures/damas-milner.pdf
         Defines Algorithm W, foundation of typechecking for ML, Haskell &tc.

     Lambda Lifting: Transforming Programs to Recursive Equations
     Thomas Johnsson
     1985, 15p
     http://citeseer.ist.psu.edu/johnsson85lambda.html

     An Implementation of Standard ML Modules
     David MacQueen
     1988 12p 
     http://www-2.cs.cmu.edu/~rwh/courses/modules/papers/macqueen88/paper.pdf
         A really good overview of the SML/NJ implementation of stamps,
         static environments, signature matching, thinning, structure
         sharing and such. 

     Real-time Concurrent Collection on Stock Multiprocessors
     Andrew W Appel (Princeton), John R Ellis (DEC Palo Alto), Kai Li (Princeton)
     1988, 24p
     http://www.cs.princeton.edu/~appel/papers/rtcgc.ps

     Continuation-Passing, Closure-Passing Style
     Andrew W. Appel, Trevor Jim (Bell Labs)
     1988, 11p
     http://www.cs.princeton.edu/~appel/papers/cpcps.ps
         Still provides a good overview of the CPS passes in SML/NJ.

     Debugging Standard ML without reverse engineering
     Andrew P Tolmach, Andrew W Appel
     1990, 12p
     http://www.cs.princeton.edu/research/techreps/TR-253-90

     Asynchronous Signals in Standard ML
     John H Reppy (Cornell)
     1990, 18p
     http://www.smlnj.org//compiler-notes/90-tr-reppy.ps

     A Standard ML Compiler
     Andrew W Appel (Princeton), David B MacQueen (Bell Labs)
     circa 1990, 23p
     http://www.cis.ksu.edu/~hatcliff/605/XC/sml-compiler-appel-macqueen.ps.gz
        "We describe the first compiler written for Standard ML in Standard ML."
         Written when SML/NJ totalled about 10,000 lines of code! :)

     Virtual Memory Primitives for User Programs
     Andrew W Appel, Kai Li (Princeton)
     1991, 12p 
     http://csalpha.ist.unomaha.edu/~stanw/papers/csci8550/91-vm-primitives.pdf

     Standard ML of New Jersey
     Andrew W Appel, David B MacQueen
     1991 13p 
     http://www.cs.princeton.edu/~appel/papers/smlnj.ps

         "The Standard ML of New Jersey compiler has
          been under development for five years now."

         "We remark that it would have been helpful
          if the definition of Standard ML had included
          an LR(1) grammar for the language."

          Excellent overview of SML/NJ parser organization and operation.

          Discusses tricks used to build LALR(1) parser for the language.

          Briefly discusses static environments, type-checking and
          weak type variables vs imperative type variables.

          NB: At this point the type system was called
          "Damas-Milner" instead of "Hindley-Milner".

          Outlines the series of problems and design revisions
          in the module system implementation.

          Grumbles about expense of implementing
          polymorphic equality as defined -- not for
          the last time!


     Callee-save Registers in Continuation-passing Style
     Andrew W Appel (Princeton), Zhong Shao (Princeton)
     1992, 30p 
     http://flint.cs.yale.edu/flint/publications/callee.ps.gz

         Introduces CPS, "closure-passing style" CLO, and
         shared closure records, among other stuff.

         This paper is so early that everything is
         described in future tense. :)

         Also features the first (?) SML/NJ encounter with
         space-complexity safe closure synthesis.



     SML/NJ Match Compiler Notes
     William Aitken
     1992, 15p
     http://www.smlnj.org//compiler-notes/matchcomp.ps

     A Portable Multiprocessor Interface for SML/NJ
     J Gregor Morrisett (CMU), Andrew Tolmach (Princeton)
     1992, 31p
     http://www.cs.cornell.edu/home/jgm/papers/jgmorris-mp.ps 

     A Critique of Standard ML
     Andrew W Appel (Princeton)
     1992, 24p
     http://citeseer.ist.psu.edu/appel92critique.html

     Unboxed objects and polymorphic typing
     Xavier Leroy
     1992, 12p
     http://pauillac.inria.fr/~xleroy/publi/unboxed-polymorphism.ps.gz

     A Debugger for Standard ML
     Andrew Tolmach (Portland State U), Andrew W Appel (Princeton)
     1993, 47p
     http://www.cs.princeton.edu/~appel/papers/debugger.ps

     The Essence of Compiling with Continuations
     Cormac Flanagan, Amr Sabry, Bruce F Duba, Matthias Felleisen (Rice CSci)
     1993, 11p
     http://www.soe.ucsc.edu/~cormac/papers/pldi93.ps
         Introduces A-Normal form.    

     Shrinking Lambda Expressions in Linear Time
     Andrew W Appel, Trevor Jim
     1993, 26p, J. Functional Programming
     http://akpublic.research.att.com/~trevor/papers/shrinking.ps.gz
         Used in src/compiler/highcode/cpsopt/contract.pkg

     A High-performance Garbage Collector for Standard ML
     John H Reppy (Bell Labs)
     1993, 20p
     http://www.smlnj.org//compiler-notes/93-tr-reppy.ps 

     Semantic for Communication Primitives in a Polymorphic Language
     Atsushi Ohori (Oki Electric), Kazuhiko Kato (U Tokyo)
     1993, 18p
     http://www.osss.is.tsukuba.ac.jp/kato/files/93popl.pdf
         "These primitives allow any polymorphic programs definable
          in ML to be used remotely in a manner complete transparent
          to the programmer."
          They are interested in very heterogeneous environments,
          so only communication of simple base values (bool, int...)
          is supported. They also dodge concurrency among other things. 

     Reflections on Standard ML
     David B MacQueen
     circa 1994, 16p
     http://citeseer.ist.psu.edu/27419.html

     Separate Compilation for Standard ML
     Andrew W Appel (Princeton), David B MacQueen (Bell Labs)
     1994, 11p
     http://citeseer.ist.psu.edu/57261.html
         Includes an excellent introduction to SML/NJ internals.

     Loop Headers in \-calculus or CPS
     Andrew W Appel
     1994, 6p
     http://citeseer.ist.psu.edu/appel94loop.html
         One reference for src/compiler/highcode/cpsopt/expand.pkg

     Axiomatic Bootstrapping: A guide for compiler hackers
     Andrew W Appel
     1994, 9p
     http://ftp.at.vim.org/languages/smlnj/papers/ML94/16-appel.ps.Z

     An Implementation of Higher-Order Functors
     Pierre Cregut (CNET - France Telecom), David B MacQueen (Bell Labs)
     1994 10p
     http://citeseer.ist.psu.edu/cregut94implementation.html 

     Axiomatc Bootstrapping:  A Guide for Compiler Hackers
     Andrew W Appel (Princeton)
     1994 9p
     http://download.at.kde.org/languages/smlnj/papers/ML94/16-appel.ps.Z
         Explains SML/NJ 'binfiles' among other mysteries. :)

     A Portable and Optimizing Back End for the SML/NJ Compiler
     Lal George, Florent Guillame, John H Reppy
     1994  18p
     http://download.at.kde.org/languages/ml/papers/94-cc-george.ps

     Compiling Standard ML for Efficient Execution on Modern Machines
     Zhong Shao (Princeton PhD thesis under Andrew Appel -- with Matthias Blume as officemate.)
     1994 145p 
     http://flint.cs.yale.edu/flint/publications/zsh-thesis.ps.gz
         Great review of SML history plus overview of SML/NJ internals as of 1994.
         The meaty part covers implementation of type-directed compilation,
         space-efficient closure representations, and list unrolling. 

     Space-Efficient Closure Reprentations
     Zhong Shao, Andrew W Appel
     1994, 12p
     http://flint.cs.yale.edu/flint/publications/closure.ps.gz
         Core doc for src/compiler/highcode/closures/closure.pkg
         See also their year 2000 paper, "Efficient and Safe-for-space Closure Conversion" 

     Tag-free Garbage Collection Using Explicit Type Parameters
     Andrew Tolmach (Portland State U)
     1994, 11p
     http://www.cs.pdx.edu/~apt/lfp94.ps
         "Two-finger" garbage collection implemented on
         Xavier Leroy's Gallium / CamlLight compiler.

     Unrolling Lists
     Zhong Shao (Princeton), John H Reppy (Bell Labs), Andrew W Appel (Princeton)
     1994, 11p
     http://flint.cs.yale.edu/flint/publications/listrep.ps.gz
         Using refinement types to eliminate linkfields and nil checks. AKA "compile-time cdr-coding".

     A Type-Based Compiler for Standard ML
     Zhong Shao, Andrew Appel
     1995, 13p
     http://flint.cs.yale.edu/flint/publications/tcps.html

     Recursive Modules in SML
     Dave Mason
     1995, 11p
     http://www.sarg.ryerson.ca/dmason/ftp/rec-struct.ps
         First such proposal, follow-up work was in ML-Kit.

     Cache Performance of Fast-Allocating Programs
     Marcelo J. R. Goncalves (Princeton), Andrew W. Appel (Princeton)
     1995, 13p   
     http://www.cs.princeton.edu/~appel/papers/cache.ps

     An Empirical and Analytic Study of Stack vs Heap Cost for Languages with Closures
     Andrew W Appel (Princeton), Zhong Shao (Yale)
     1996, 27p
     http://www.cs.princeton.edu/~appel/papers/stack2.ps

     Typed Closure Conversion
     Yasuhiko Minamide, Greg Morrisett, Robert Harper
     1996, 13p
     http://www.eecs.harvard.edu/~greg/papers/closure-summary.ps

     Iterated Register Coalescing
     Lal George (Bell Labs), Andrew W Appel (Princeton)
     1996, 25p
     http://www.cs.purdue.edu/homes/hosking/502/george.pdf

     Lambda-Splitting: A higher-order approach to cross-module optimizations.
     Matthias Blume and Andrew W Appel
     1997, 12p
     http://citeseer.ist.psu.edu/288704.html
         Stefan Monnier in his thesis says this was never integrated into SML/NJ.
         I think the relevant code module (currently commented out) may be:
             src/compiler/highcode/closures/cps-split.pkg
         Stefan says this stuff is used in:
             src/compiler/highcode/opt/split.pkg

     Flexible Representation Analysis,
     Zhong Shao,
     1997 25p 
     http://flint.cs.yale.edu/flint/publications/flex-tr.ps.gz
         The core doc for src/compiler/highcode/reps/wrapping.pkg

     Modern Compiler Implementation in ML:  Basic Techniques
     Andrew W Appel
     1997 390p.

     Type Systems
     Luca Cardelli (DEC)
     1997, 42p
     http://www.cs.purdue.edu/homes/jv/smc/pubs/cardelli-crc96.ps
         Fantastic -- just the type theory introduction I needed! 

     An Overview of the FLINT/ML Compiler
     Zhong Shao (Yale)
     1997, 10p
     http://flint.cs.yale.edu/flint/publications/tic97.html
         Short, readable overview.  His other papers give more detail.

     Types Common Intermediate Format
     Zhong Shao (Yale)
     1997, 13p
     http://flint.cs.yale.edu/flint/publications/tcif.ps.gz

         "FLINT is based on a predicative variant of the Girard-Reynolds
          polymorphic calculus Fw, extended with a very rich set of
          primitive types and functions."

          Part of SML/NJ since 109.24 (Jan 9 1997). Covers both the formalism
          and also how such implementation techniques as hash consing,
          memoization and lazy suspensions are used to improve efficiency.
          Covers type specialization, lambda reduction, flexible representation
          analysis and closure conversion. EXCELLENT OVERVIEW material for the
          SML/NJ compiler hacker.  (Corresponds to the A-Normal Form stuff in
          the current Mythryl compiler.)

     Formal Semantics of the FLINT Intermediate Language (Yale-CS-TR 1171)
     Christopher League (Yale), Zhong Shao (Yale)
     1998, 37p
     http://flint.cs.yale.edu/flint/publications/formal98.ps.gz
         Describes SML/NJ 110.5 A-Normal Form.

     Implementing Typed Intermediate Languages
     Zhong Shao (Yale), Christopher League (Yale), Stefan Monnier (Yale)
     1998, 11p
     http://flint.cs.yale.edu/flint/publications/imp.ps.gz
         Keeping combinatorial explosions in the type checker
         from killing compile performance. In particular,
         keeping dags from exploding into trees via use of
         hash-consing, memoization and advanced lambda encoding.
         Describes SML/NJ as of 109.24, 1997-Jan.

     Subtransitive CFA using Types    ("CFA"=="Control Flow Analysis")
     Bratin Saha(Yale), Nevin Heintze(Bell Labs), Dino Oliva(Bell Labs)
     1998, 17p
     http://flint.cs.yale.edu/flint/publications/cfa.ps.gz
         Going beyond the traditional "known/escaping"
         function classification. Done on SML/NU v110.7.
         Doesn't seem to be part of the production compiler.

     Typed Cross-Module Compilation
     Zhong Shao (Yale)
     1998, 31p
     http://flint.cs.yale.edu/flint/publications/tcc-tr.ps.gz
    
     Optimal Type Lifting
     Bratin Saha, Zhong Shao (Yale)
     1998, 36p
     http://flint.cs.yale.edu/flint/publications/lift-tr.ps.gz

     Typed Cross-Module Compilation
     Zhong Shao (Yale)
     1998, 12p
     http://flint.cs.yale.edu/flint/publications/tcc.ps.gz
         Joint work with MacQueen, used in SML/NJ since 109.24.

     Type-Theoretic Methodology for Practical Programming Languages
     Karl Crary (Cornell PhD Thesis)
     1998, 104p
     http://www.cs.cmu.edu/~crary/papers/1998/thesis/thesis.ps.gz

     Units: Cool Modules for HOT Languages
     Matthew Fluet (Rice), Matthias Felleisen (Rice)
     1998, 13p
     http://www-2.cs.cmu.edu/~rwh/courses/modules/papers/flatt-felleisen98/paper.pdf

     Scaling Proof-Carrying Code to Production Compilers and Security Policies
     Andrew W. Appel (Princeton), Edward W. Felten (Princeton), Zhong Shao (Yale)
     1999, 12p
     http://flint.cs.yale.edu/flint/publications/pccwhite/index.html
         Their DARPA grant proposal, essentially.

     Transparent Modules with Fully Syntactic Signatures
     Zhong Shao (Yale)
     1999, 25p
     http://flint.cs.yale.edu/flint/publications/fullsig-tr.pdf
         Appears to describe where SML/NJ + CM was headed as of
         about the moment it lost funding:  Unclear whether any
         of the proposed work was actually done.

     Inlining as Staged Computation
     Stefan Monnier and Zhong Shao (Yale)
     1999, 29p
     http://flint.cs.yale.edu/flint/publications/isc.ps.gz
         (This is probably obsoleted by Stefan's 2003 dissertation, below.)

     Design and Implementation of an Operating System in Standard ML
     Guangrui Fu   (Master's Thesis, U Hawaii)
     As html: http://www2.ics.hawaii.edu/~esb/prof/proj/hello/guangrui/thesis/
     As ps:   http://www2.ics.hawaii.edu/~esb/prof/pub/hello.ps
     1999, 14p
         Basically shows how to boot SML/NJ images standalone via LILO.

     SMLNJ: Garbage collection API
     Lal George
     1999, 6p
     http://www.smlnj.org//compiler-notes/gc-api.ps

     SMLNJ: Intel x86 back end: Compile Controlled Memory
     Lal George
     1999, 7p
     http://www.smlnj.org//compiler-notes/k32.ps

     MLRISC Annotations
     Allen Leung, Lal George
     circa 1999, 14p
     http://www.smlnj.org//compiler-notes/annotations.ps

     What is a Recursive Module?
     Karl Crary (CMU), Robert Harper (CMU), Sidd Puri (Microsoft)
     1999, 14p
     http://www-2.cs.cmu.edu/~rwh/papers/recmod/recmod.ps

     Fully Reflexive Intensional Type Analysis
     Bratin Saha (Yale), Valery Trifonov (Yale), Zhong Shao (Yale)
     2000, 34p
     http://flint.cs.yale.edu/flint/publications/tr1194.ps.gz
         Without which, it is "impossible to code applications
         such as garbage collection, persistency, or marshalling
         which must be able to examine the type of any runtime value."

     Hierarchical Modularity
     Matthias Blume (Princeton), Andrew W Appel (Princeton)
     2000, 34p
     http://www.cs.princeton.edu/~appel/papers/cm.ps
         How SML/NJ's CM handles large module collections.

     Some notes on the new MLRISC X86 floating point code generator (Draft)
     Allen Leung, Lal George
     circa 2000, 17p
     http://www.smlnj.org//compiler-notes/x86-fp.ps

     Efficient and Safe-for-Space Closure Conversion
     Zhong Shao, Andrew Appel
     2000, 33p
     http://flint.cs.yale.edu/flint/publications/escc.html 

     Optimal Spilling for CISC Machines with Few Registers
     Andrew W Appel, Lal George
     2000, 10p
     ftp://ftp.cs.princeton.edu/techreports/2000/630.ps.gz
         Proof-of-principle use of integer linear programming to do
         x86 register allocation, showing 10% gain on x86, none on
         architectures with more generous numbers of registers.

     A New MLRISC Register Allocator (v 110.25)
     Allen Leung, Lal George
     circa 2000, 33p
     http://cm.bell-labs.com/cm/cs/what/smlnj/compiler-notes/new-ra.ps

     OO Programming styles in ML
     Bernard Berthomieu
     2000, 148p
     http://www.laas.fr/~bernard/oo/2000111.ps.gz

     A Parallel, Real-Time Garbage Collector
     Perry Cheng, Guy E Blelloch (CMU)
     2001, 12p
     http://www.cs.cmu.edu/afs/cs/project/pscico/pscico/papers/gc01/pldi-final.pdf
         This is the Cliff Notes version of Cheng's PhD Thesis (next).

     Scalable Real-Time Parallel Garbage Collection for Symmetric Multiprocessors
     Perry Cheng (CMU PhD thesis)
     2001, 151p
     http://www.cs.cmu.edu/~rwh/theses/cheng.ps
         I'd like to implement this for Mythryl.

     No-Longer-Foriegn: Teaching an ML compiler to speak C "natively"
     Matthias Blume (Bell Labs)
     2001, 14p
     http://ttic.uchicago.edu/~blume/papers/nlffi.pdf
         Describes a SML/NJ package which enables direct
         calls from SML code to C libraries by reading
         .h files and synthesizing equivalent SML declarations.

     MLRISC 'Omit Frame Pointer' Optimization
     Lal George (Bell Labs)
     2001 6p
     http://www.smlnj.org//compiler-notes/omit-vfp.ps

     Principled Scavenging
     Stefan Monnier (Yale), Bratin Saha (Yale), Zhong Shao (Yale)
     2001 11p
     http://flint.cs.yale.edu/flint/publications/gc.ps.gz
         A warm-up for Stefan's 2003 PhD thesis (below).

     Adaptive Functional Programming
     Umut A. Acar, Guy E. Blelloch, Robert Harper (all CMU)
     2002, 13p
     http://pag.csail.mit.edu/reading-group/acar02adaptive.pdf
         A poor man's dataflow programming in SML.
         See also the 2004 followup paper on "Self-Adjusting Computation"

     A Type System for Higher-Order Modules (Expanded Version)
     Derek Dreyer, Karl Crary, Robert Harper (CMU)
     2002, 57p
     http://www.cs.cmu.edu/~dreyer/papers/thoms/full.pdf
         See also 2004 14p TOPLAS version below.

     A Type System for Well-Founded Recursion
     Derek Dreyer, Karl Crary, Robert Harper (CMU)
     2003, 32p
     http://www-2.cs.cmu.edu/People/rwh/papers/safe-rec/CMU-CS-03-163.pdf

     MLRISC A Framework for retargetable and optimizing compiler back ends
     Lal George (Bell Labs), Allen Leung (NYU)
     2003 144p
     http://cs.nyu.edu/leunga/www/MLRISC/Doc/latex/mlrisc.ps
        A number of similar MLRISC implementation notes are up at
        http://www.smlnj.org//compiler-notes/

     Principled Compilation and Scavenging
     Stefan Monnier       (dissertation)
     2003, 199p 
     http://www.iro.umontreal.ca/~monnier/
         Describes addition of A-normal form to SML/NJ, among much other good stuff.

     Relaxing the Value Restriction
     Jacques Garrigue
     circa 2003 22p
     http://www.math.nagoya-u.ac.jp/~garrigue/papers/morepoly-long.pdf
         Provides a clear explanation and motivation
         of imperative type variables and the "value
         restriction" -- which is very welcome by
         itself! -- plus motivation and a suggestion
         for a "relaxed value restriction".



     Sexy types in action
     Chung-chieh Shan (Harvard)
     2003, 8p
     http://www.eecs.harvard.edu/~ccshan/cs252/usage.pdf

        "Skilful use of sexy types can often turn
         what is usually regarded as a runtime invariant
         into a compile-time check."

        Attempting to go beyond Hindley-Milner:
        Peyton Jones' "sexy types".

        Looks like an excellent survey of where
        ML-family type systems are, and where
        they are headed.

        OOP, existential types, phantom types,
        invariant enforcement, converting between monads,
        eigenvariables, deforestation...

        THIS IS WORTH RE-READING SLOWLY AND CAREFULLY!


     Types Compilation of Recursive Datatypes
     Joseph C Vanderwaart, Derek Dreyer, Leaf Petersen, Karl Crary, Robert Harper, Perry Cheng
     2003, 11p
     http://ttic.uchicago.edu/~dreyer/papers/datatypes/tldi.pdf
 
     A Type System for Higher-Order Modules
     Derek Dreyer (CMU), Karl Crary (CMU), Robert Harper (CMU)
     2004, 14p
     http://www-2.cs.cmu.edu/~dreyer/papers/thoms/toplas.pdf

     Defects in the Revised Definition of Standard ML
     Andreas Rossberg (U Saarlandes, .de)
     2004 (updated 2007) 13p
     http://www.ps.uni-sb.de/hamlet/defects.pdf

     Self-Adjusting Computation
     Robert Harper, with Umut A Acar and Guy E Blelloch
     2004, 2p
     http://csdl.computer.org/comp/proceedings/lics/2004/2192/00/21920254.pdf
         See also their 2002 and 2007 papers.

     Understanding and Evolving the ML Module System
     Derek Dreyer
     2005, 262p (CMU PhD thesis)
     http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/2005/CMU-CS-05-131.pdf

     How to Believe a Twelf Proof
     Rober Harper, Karl Crary
     2005, 7p
     http://www.cs.cmu.edu/People/rwh/papers/how/believe-twelf.pdf

     Toward a Mechanized Metatheory of Standard ML
     Daniel K Lee, Karl Crary, Robert Harper (all of CMU)
     2006, 12p
     http://www.cs.cmu.edu/~crary/papers/2006/tslf.pdf
     http://www.cs.cmu.edu/~crary/papers/2006/tslf.tgz    
        (Latter contains full twelf code.)

     Mechanizing the Metatheory of Standard ML
     Daniel K Lee, Karl Crary, Robert Harper (all of CMU)
     2006, 18p
     http://www.cs.cmu.edu/~dklee/papers/tslf.pdf 

     Recursive type generativity
     Derek Dreyer (Toyota Tech, Chicago)
     2006, 39p
     http://ttic.uchicago.edu/~dreyer/papers/dps/jfp-revised.pdf

     A Type System for Recursive Modules
     Derek Dreyer (Toyota Tech, Chicago)
     2007, 17p
     http://ttic.uchicago.edu/~dreyer/papers/recmod/main.pdf

     Principal Type Schemes for Modular Programs
     Derek Dreyer and Matthias Blume
     (Toyota Tech, Chicago)
     2007, 16p
     http://ttic.uchicago.edu/~dreyer/papers/infmod/main-short.pdf
         MUST READ.

     Modular Type Classes
     Derek Dreyer (Toyota Tech, Chicago), Robert Harper (CMU), Manuel M.T. Chakravarty (U New South Wales)
     2007, 8p
     http://ttic.uchicago.edu/~dreyer/papers/mtc/main-short.pdf

     A Proposal for Parallel Self-Adjusting Computation
     Matthew Hammer, Umut A. Acar (Toyota TI Chicago), Mohan Rajagopalan, Anwar Ghuloum (Intel Santa Clara)
     2007, 7p
     http://portal.acm.org/ft_gateway.cfm?id=1248651&type=pdf&coll=ACM&dl=ACM&CFID=15151515&CFTOKEN=6184618


NB: If one of the above links is dead, Google Scholar will
    usually find another link to the paper in short order.

