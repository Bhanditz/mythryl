#!/usr/bin/perl -w
use strict;

# Try to catch a few irritating mistakes which
# it is easy to make when writing LaTeX source:
#
#  o  I don't know if it is a bug or a feature, but
#     HeVeA seems to often turn
#          this is an
#          example line
#     into
#          this is anexample line
#     putting a blank at the end of the first line
#     appears to be a viable workaround.
#
#  o  I keep using -- when I should be using ---


# Find all manually edited .tex files:
#
my @top_api_files = `ls -1 doc/tex/top-api*tex`;
my @bot_api_files = `ls -1 doc/tex/bot-api*tex`;
my @top_pkg_files = `ls -1 doc/tex/top-pkg*tex`;
my @bot_pkg_files = `ls -1 doc/tex/bot-pkg*tex`;
my @chapter_files = `ls -1 doc/tex/chapter*tex`;
my @section_files = `ls -1 doc/tex/section*tex`;


my @tex_files = ( @top_api_files,
		  @bot_api_files,
		  @top_pkg_files,
		  @bot_pkg_files,
		  @chapter_files,
		  @section_files
                );

my $files_done = 0;
my $errors = 0;

sub check_line {
    my ($tex_file, $line, $next_line, $line_number) = @_;

    if ($line =~ /(^| )--( |$)/) {
        print "$tex_file:$line_number: Change -- to --- in: $line\n";
        ++$errors;
    }   

    # Check for lines which need a blank at the end:
    #
    if (   (not ($line =~  /^$/))
       and (not ($line =~  / $/))
       and (not ($line =~ /\.$/))
       and (not ($line =~ /\,$/))
       and (not ($line =~ /\;$/))
       and (not ($line =~ /\)$/))
       and (not ($line =~ /\\newline$/))
       and (not ($line =~ /^\%/))
       and (not ($line =~ /^\\chapter\{.*\}$/))
       and (not ($line =~ /^\\section\{.*\}$/))
       and (not ($line =~ /^\\subsection\{.*\}$/))
       and (not ($line =~ /^\\subsubsection\{.*\}$/))
       and (not ($line =~ /^\\paragraph\{.*\}$/))
       and (not ($line =~ /^\\cutdef\*\{.*\}$/))
       and (not ($line =~ /^\\cutend\*$/))
       and (not ($line =~ /^\\index\[.*\]\{.*\}$/))
       and (not ($line =~ /^\\begin\{.*\}$/))
       and (not ($line =~ /^\\end\{.*\}$/))
       and (not ($line =~ /^\\input\{.*\}$/))
       and (not ($line =~ /^\\include\{.*\}$/))
       and (not ($line =~ /^\\label\{.*\}$/))
    ){
        if (   (not ($next_line =~ /^ *$/))
           and (not ($next_line =~ /^\\item/))
           and (not ($next_line =~ /^\\begin\{.*\}$/))
           and (not ($next_line =~ /^\\end\{.*\}$/))
           and (not ($next_line =~ /^\\cutdef\*\{.*\}$/))
           and (not ($next_line =~ /^\\cutend\*$/))
        ){
	    print "$tex_file:$line_number: Need end-of-line blank in: $line\n";
	    ++$errors;
        }
    }
}

sub check_tex_file {

    my ($tex_file) = @_;

    chomp $tex_file;

    my $line_number = 1;

    open IN, $tex_file || die "Couldn't open $tex_file?!\n";

    my $verbatim = 0;
    my $line = <IN>;
    while (my $next_line = <IN>) {

        if ($line =~ /begin\{verbatim\}/) { $verbatim = 1; }
        if ($line =~   /end\{verbatim\}/) { $verbatim = 0; }

        if ($line =~ /begin\{tabular\}/) { $verbatim = 1; }	# A bit of a cheat but good enough.
        if ($line =~   /end\{tabular\}/) { $verbatim = 0; }

        if (!$verbatim) {
            check_line ($tex_file, $line, $next_line, $line_number);
	}

        $line = $next_line;
	++$line_number;
    }
    close IN;

    check_line ($tex_file, $line, "", $line_number);
}


for my $tex_file (@tex_files) {
    check_tex_file $tex_file;
    ++$files_done;
}

if ($errors) { 
    print "$errors errors detected.\n";
} else {
    print      "$files_done files done:  No errors detected.\n";
}

exit $errors;
