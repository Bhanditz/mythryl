#!/usr/bin/perl -w
use strict;

# This script gets invoked as part of
#
#     make book
#
# at the top level.  It synthesizes scads of
# latex files in and under doc/tex such as
# clones of the source code, indices into
# the source code, and reference listings of
# the APIs.


###               "If a million monkeys were typing on computers,
###                one of them would eventually write a Java Program.
###                The rest would write Perl programs."
###                                          -- Anonymous


my  $make_comments_file
    =
    "MAKELIB_FILE_HIERARCHY.INFO~";

my  $tex_dir
    =
    "doc/tex";

my $directories_created  = 0;

my $api_definition_dups  = 0;
my $api_definitions_seen = 0;
my %api_definition_count = ();
my %api_definition_file  = ();

my $pkg_definition_dups  = 0;
my $pkg_definitions_seen = 0;
my %pkg_definition_count = ();
my %pkg_definition_file  = ();

my $source_files_texified = 0;		# Counts        .api .pkg .lib/.sublib files converted to LaTeX format.
my %source_files_seen     = ();		# Tracks known  .api .pkg .lib/.sublib files.
my %texified_file         = ();		# Tracks        .api .pkg .lib/.sublib files from which we've made .latex versions.



# Our scan of the makefile hierarchy currently
# does not detect .lex and .grammar files, but
# we want to refer to them in the online docs,
# so we just feed them in by hand:
#
my @extra_files_to_texify
    =
    (
       "src/app/tut/oop-crib-temp/oop-crib-temp.pkg",
       "src/lib/compiler/front/parser/lex/mythryl.lex",
       "src/lib/compiler/front/parser/yacc/mythryl.grammar",
       "src/lib/compiler/back/low/glue/lowhalf-ssa-improver-g.pkg",
       "src/lib/compiler/back/low/ir/lowhalf-mcg.api",
       "src/lib/compiler/back/low/ir/lowhalf-ir.api",
       "src/lib/compiler/back/low/static-single-assignment/ssa.api",
       "src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-execode-pwrpc32-g.codemade.pkg",
       "src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-execode-sparc32-g.codemade.pkg"
    );


sub create_any_needed_containing_directories {
    #
    my ($filename) = @_;

    if ($filename =~ m|^src/|) {

	my $current_dir = $tex_dir;

	while ($filename =~ m|^([^/]+)/(.+)$|) {

            my $next_dir = $1;
            $filename    = $2;
            $current_dir = "$current_dir/$next_dir";

            if (! -d $current_dir) {
                ++ $directories_created;
                mkdir( $current_dir, 0777 );
            }
        }

    } else {

        die "create_any_needed_containing_directories: Filepath $filename doesn't start with 'src/...'!?\n";

    }
}

sub tab_expand {

    # Swiped from:
    #     http://www.perl.com/doc/FAQs/FAQ/oldfaq-html/Q4.35.html

    local($_) = shift;
    1 while s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;		# "You are trapped in a maze of twisty little hacks, all different."
    return $_;
}

# Quote text using latex/hevea \verb (short verbatim) operator.
# This quotes nonblank text as \verb#stuff# where '#' can be
# just about any special character but * or @:
#
sub verbify {

    my ($line) = @_;    chomp $line;

    my $result = "";

    # Change each blank to "qQQq";
    # We undo this later in substitute-primes-and-bangs.
    #
    # This is the only way I can find to persuade HeVeA
    # to generate blanks inside <code>...</code>.
    #
    # (Blanks outside <code>...</code> are in a different
    # font hence come out in a different width that throws
    # off the code formatting. :-( )
    #
    $line =~ s/ /qQQq/g;

    while ($line ne "") {

        # Quote '|'-free prefix using '|':
	# 
        if ($line =~ /^([^| ]+)(.*)$/) {
            $line = $2;
            $result = $result . "\\verb|" . $1 . "|";
        }

        # Quote '#'-free prefix using '#':
	# 
        if ($line =~ /^([^# ]+)(.*)$/) {
            $line = $2;
            $result = $result . "\\verb#" . $1 . "#";
        }
    } 

    return $result;
}

BEGIN {		# Just to limit the scope of following variable.

    # A private state variable shared
    # by the next two functions:
    #
    my @more_files_to_do = ();

    # Convert a string to LaTeX, which means
    #
    # o Making hotlinks from filenames like src/.../foo.pkg
    # o Changing each ' ' to '~~'
    # o Quoting the rest like \verb#foo#
    #
    sub make_filenames_into_hotlinks_and_verbify_rest {

	my  ( $string,		# String to work on.
              $filename		# File containing previous, used only for diagnostics.
            )
            = @_;

	if ($string =~ m,^(.* |.*\$ROOT/)(src/[^ \(\)]+(\.api|\.pkg|\.lib|\.sublib))($|\).*$| .*$),) {

	    my $prefix = $1;
	    my $file   = $2;
	    my $suffix = $4;

	    if (defined $source_files_seen{ $file }  or  -r $file) {

		if (not defined $source_files_seen{ $file }) {

		    # This is typically a windows-specific file or such,
		    # which gets missed by our unix-centric .lib-file
		    # sweep due to being #if-def'd out, so we mark it
		    # now for processing.  (Since Perl filehandles are
		    # globals, an immediate recursive call to ourself
		    # isn't a good idea...)
		    #
		    push( @more_files_to_do, $file );
		}

		$file =~ s/\{/\\\{/g;
		$file =~ s/\}/\\\}/g;
		$file =~ s/_/\\_/g;
		my $hotlink = "\\ahrefloc{$file}{{\\tt $file}}";				# See http://hevea.inria.fr/doc/manual018.html
		$prefix = make_filenames_into_hotlinks_and_verbify_rest( $prefix, $filename );	# Yes, we need this,
		$suffix = make_filenames_into_hotlinks_and_verbify_rest( $suffix, $filename );	# as well as   this.
		$string = $prefix . $hotlink . $suffix;

	    } else {

		print "maybe_texify_file( $filename ): Nonexistent sourcefile ignored: $file\n";

		$string = verbify( $string );
	    }

	}  else {

	    $string = verbify( $string );
	}
    }


    # Generate a LaTeX version of a .api .pkg .lib/.sublib file.
    #
    # This will sit in a shadow source code directory tree under doc/tex/src.
    # For example, the .tex version of         src/lib/regex/regex.pkg
    # will be                          doc/tex/src/lib/regex/regex.pkg.tex
    #
    # This file will be referenced at minimum by one of our three source-code indices
    #
    #     doc/tex/tmp-section-pkg-files.tex
    #     doc/tex/tmp-section-makelib-files.tex
    #     doc/tex/tmp-section-api-files.tex
    #
    sub maybe_texify_file {

	my ($filename) = @_;

	return if defined $texified_file{ $filename };	# We've already done this one.

	create_any_needed_containing_directories( $filename );

	my $out_name = "$tex_dir/$filename.tex";

	open SRC_IN,    "$filename" || die "Couldn't read $filename?!";
	open SRC_OUT, "> $out_name" || die "Couldn't write $out_name?!";

	@more_files_to_do = ();

	# Plant a top-of-file LaTeX label
        # we can hotlink to from other files:
	#
	print SRC_OUT "\\label{$filename}\n";

	while (my $line = <SRC_IN>) {

	    last if $line =~ /^\f$/;		# Stop at ^L -- rest of file is just our per-file emacs configuration stuff.

	    chomp $line;			# Strip newline, eliminating a special case.

            $line = tab_expand( $line );

            $line = make_filenames_into_hotlinks_and_verbify_rest( $line, $filename );

            $line = $line . "\\newline\n";	# Restore stripped newline, now in LaTeX flavor.

	    print SRC_OUT $line;
	}

	print SRC_OUT "\n% This file created by sh/synthesize-sourcecode-latex-docs / maybe_texify_file()\n";

	close SRC_IN;
	close SRC_OUT;

	$texified_file{ $filename } = $out_name;
	++ $source_files_texified;


        my @to_do_list = @more_files_to_do;

	for my $file_to_do (@to_do_list) {
	    maybe_texify_file( $file_to_do );
	}
    }
}

sub slurp_libfile_hierarchy_info {

    # sh/make-comments laboriously extracts
    # from the .lib file hierarchy various
    # useful bits of info as to which files
    # define what, then saves it all out in
    #
    #     MAKELIB_FILE_HIERARCHY.INFO~
    #
    # Here we slurp that stuff into memory:

    open IN, $make_comments_file || die "Couldn't open $make_comments_file?!";

    while (my $line = <IN>) {

        chomp $line;

        if ($line =~ /defines api\s+(\S+)\s+in\s+(\S+)/) {

	    my $api  = $1;
            my $file = $2;    ++ $source_files_seen{ $file };

            ++  $api_definitions_seen;
            ++  $api_definition_count{ $api };
            if ($api_definition_count{ $api } == 1) {
	        $api_definition_file{  $api } = $file;
            } else {
                ++ $api_definition_dups;
	        $api_definition_file{  $api } = $api_definition_file{  $api } . " $file";
            }

        } elsif ($line =~ /defines pkg\s+(\S+)\s+in\s+(\S+)/) {

	    my $pkg  = $1;
            my $file = $2;    ++ $source_files_seen{ $file };

            ++  $pkg_definitions_seen;
            ++  $pkg_definition_count{ $pkg };
            if ($pkg_definition_count{ $pkg } == 1) {
	        $pkg_definition_file{  $pkg } = $file;
            } else {
                ++ $pkg_definition_dups;
	        $pkg_definition_file{  $pkg } = $pkg_definition_file{  $pkg } . " $file";
            }

        } elsif ($line =~ m, (src/\S+\.(api|pkg))$,) {
            my $file = $1; 
            if (not defined $source_files_seen{ $file }) {
                ++          $source_files_seen{ $file };
            }
        }

        # Fill up a hash with all known .lib/.sublib files:
	#
        if ($line =~ m{ (src/\S+\.(lib|sublib)) }) {

	    my $makelib_file = $1;

	    ++ $source_files_seen{  $makelib_file  }
                if
                not defined  $source_files_seen{  $makelib_file  };
	}
    }

    close IN;
}

# Write out four index .tex files,
# one each for .api .pkg .lib/.sublib,
# plus a combined one for .grammar and .lex:
#
sub write_source_file_indices {

    my @source_files = sort keys %texified_file;

    my $pkg_index_file = "$tex_dir/tmp-section-pkg-files.tex";

    open PKG_OUT, "> $pkg_index_file" || die "Couldn't write $pkg_index_file?!";
    print PKG_OUT "\\section{Codebase .pkg Files}\n\n";
    print PKG_OUT "%HEVEA\\cutdef[1]{subsection}\n\n";

    for my $pkg (@source_files) {

        next unless $pkg =~ /\.pkg$/;

        # More escaping of '_'s for La/TeX:
	#
        my $texified_pkg = $pkg;   $texified_pkg =~ s/_/\\_/g;  

        print PKG_OUT "\n";
        print PKG_OUT "\\subsection{$texified_pkg}\n";
        print PKG_OUT "\\input{$pkg.tex}\n";

    }
    print PKG_OUT "%HEVEA\\cutend\n\n";
    print PKG_OUT "\n% This file created by sh//synthesize-sourcecode-latex-docs / write_source_file_indices()\n";
    close PKG_OUT;


    my $api_index_file = "$tex_dir/tmp-section-api-files.tex";

    open API_OUT, "> $api_index_file" || die "Couldn't write $api_index_file?!";
    print API_OUT "\\section{Codebase .api Files}\n\n";
    print API_OUT "%HEVEA\\cutdef[1]{subsection}\n\n";

    for my $api (@source_files) {

        next unless $api =~ /\.api$/;

        # More escaping of '_'s for La/TeX:
	#
        my $texified_api = $api;   $texified_api =~ s/_/\\_/g;  

        print API_OUT "\n";
        print API_OUT "\\subsection{$texified_api}\n";
        print API_OUT "\\input{$api.tex}\n";

    }
    print API_OUT "%HEVEA\\cutend\n\n";
    print API_OUT "\n% This file created by sh//synthesize-sourcecode-latex-docs / write_source_file_indices()\n";
    close API_OUT;


    my $makelib_index_file = "$tex_dir/tmp-section-makelib-files.tex";

    open MAKELIB_OUT, "> $makelib_index_file" || die "Couldn't write $makelib_index_file?!";
    print MAKELIB_OUT "\\section{Codebase .lib Files}\n\n";
    print MAKELIB_OUT "%HEVEA\\cutdef[1]{subsection}\n\n";

    for my $makelib (@source_files) {

        next unless $makelib =~ /\.(lib|sublib)$/;

        # More escaping of '_'s for La/TeX:
	#
        my $texified_makelib = $makelib;   $texified_makelib =~ s/_/\\_/g;  

        print MAKELIB_OUT "\n";
        print MAKELIB_OUT "\\subsection{$texified_makelib}\n";
        print MAKELIB_OUT "\\input{$makelib.tex}\n";

    }
    print MAKELIB_OUT "%HEVEA\\cutend\n\n";
    print MAKELIB_OUT "\n% This file created by sh//synthesize-sourcecode-latex-docs / write_source_file_indices()\n";
    close MAKELIB_OUT;


    my $etc_index_file = "$tex_dir/tmp-section-etc-files.tex";

    open  ETC_OUT, "> $etc_index_file" || die "Couldn't write $etc_index_file?!";
    print ETC_OUT "\\section{Codebase .grammar and .lex Files}\n\n";
    print ETC_OUT "%HEVEA\\cutdef[1]{subsection}\n\n";

    for my $etc (@source_files) {

        next unless $etc =~ /\.grammar$/
                 or $etc =~ /\.lex$/;

        # More escaping of '_'s for La/TeX:
	#
        my $texified_etc = $etc;   $texified_etc =~ s/_/\\_/g;  

        print ETC_OUT "\n";
        print ETC_OUT "\\subsection{$texified_etc}\n";
        print ETC_OUT "\\input{$etc.tex}\n";

    }
    print ETC_OUT "%HEVEA\\cutend\n\n";
    print ETC_OUT "\n% This file created by sh//synthesize-sourcecode-latex-docs / write_source_file_indices()\n";
    close ETC_OUT;
}


slurp_libfile_hierarchy_info ();
for my $source_file (keys %source_files_seen) {   maybe_texify_file( $source_file );   }
for my $source_file (@extra_files_to_texify ) {   maybe_texify_file( $source_file );   }
write_source_file_indices ();

print "\n";
printf "\$api_definitions_seen  =%5d\n", $api_definitions_seen;
printf "\$pkg_definitions_seen  =%5d\n", $pkg_definitions_seen;
print "\n";
printf "\$api_definition_dups   =%5d\n", $api_definition_dups;
printf "\$pkg_definition_dups   =%5d\n", $pkg_definition_dups;
print "\n";
printf "\$directories_created   =%5d\n", $directories_created;
printf "\$source_files_texified =%5d\n", $source_files_texified;

exit 0;





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(sub \\)"				 	 #
# End:									 #
##########################################################################
