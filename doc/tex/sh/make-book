#!/usr/bin/perl -w
use strict;

# Here we essentially just do
# 
#     (cd doc/tex; make book.html)
#
# except that we also want to generate some
# statistics as we go along.

my $html_dir = "doc/tex";


# Convert a seconds count into "30 minutes, 12 seconds" or such:
#
sub seconds_to_duration {

    my ($seconds) = @_;

    my $hours     = 0;
    my $minutes   = 0;

    if ($seconds > 3600) {  $hours   = int( $seconds / 3600 );  $seconds = $seconds % 3600; }
    if ($seconds >   60) {  $minutes = int( $seconds /   60 );  $seconds = $seconds %   60; }

    my                   $result =  sprintf( "%d second%s",     $seconds, $seconds == 1 ? "" : "s");
    if ($minutes > 0)  { $result =  sprintf( "%d minute%s, %s", $minutes, $minutes == 1 ? "" : "s", $result); }
    if ($hours   > 0)  { $result =  sprintf( "%d hour%s, %s",   $hours,   $hours   == 1 ? "" : "s", $result); }

    return $result;
}

# There appears to have some stupid quadratic runtime
# bug in hevea that makes it take forever, so warn the
# user before we start:
#
my $timing_filename = "$0.seconds";		# Where we save our runtime-in-seconds
if (open(IN,$timing_filename)) {
    my $seconds = <IN>;    chomp $seconds;
    close IN;
    my $duration = seconds_to_duration( $seconds );
    print "\n    Be patient:  the last 'hevea book.tex; hacha book.html' run took\n";
    print "\n";
    print   "                        $duration.\n";
    print "\n";
}

# Do the actual HTML page generation:
                                               my $start_time = time();
system("(cd doc/tex; make book.html)");        my $stop_time  = time();

# Announce just how agonizingly long it was:
#
my $elapsed_seconds = $stop_time - $start_time;
my $duration        = seconds_to_duration( $elapsed_seconds );
print "Generating book html pages took $duration.\n";

# Save the runtime for next time around:
#
if (open( OUT,">$timing_filename")) {
    print OUT "$elapsed_seconds\n";
    close OUT;
}

# Announce generated page count.
# For now we'll assume all html pages in doc/tex
# are in the book and vice versa:
#
my    $page_count = `find doc/tex -name '*.html' -print | wc -l`;
chomp $page_count;		# Drop pesky trailing newline.
print "Book contains $page_count HTML pages.\n";

exit 0;
