#!/usr/bin/perl -w
use strict;

# Hacha gives the HTML doc pages names like book001.html, book002.html, book003.html...
#
# This is pretty unhelpful when (for example) looking at web statistics to
# figure out which parts of the manual people are reading most.
#
# This also means that web page names are totally unstable between doc
# releases, so deep linking will produce odd and unhelpful results.
#
# Here we give those files more stable, meaningful names.
#
# History:
#  2009-08-17 CrT:  Created.

my $scriptname = $0;

# Find all .html files produced by Hacha:
#
my @html_files = `ls -1 index.html book[0-9]*html`;
my $html_files_count = scalar @html_files;

# We construct a mapping
# from old filenames like  "book1253.html"
# to   new filenames like  "my-Signals.html"
#
my %old_file_name_to_new = ();

my %filenames_in_use = ();
my $count = 0;

my $files_processed = 0;
my $hrefs_updated = 0;

# Grep each such file for a <TITLE>...</TITLE> line:
#
for my $html_file (@html_files) {

    chomp $html_file;

    ++$count;

    my @title_lines
         =
         `egrep '<TITLE>.*</TITLE>' $html_file`;

    my $titles_found = scalar @title_lines;
    my $title = "";

    if ($titles_found > 0) {
        
        $title = $title_lines[ 0 ];

        chomp $title;

        if ($title =~ m|.*<TITLE>(.*)</TITLE>|) {
            $title = $1;
	    $title =~ s/[^A-Za-z0-9_-]/_/g;
        }

        # Construct new, improved name for file:
        #
        my $new_filename = "my-$title.html";

	# If there was already a file by that name,
        # append a number to make name unique:
        #
        for (my $i = 2; $i < 10000; ++$i) {

            last if not defined $filenames_in_use{ $new_filename };

            $new_filename = sprintf "my-$title-%d.html", $i;        
	}

        $filenames_in_use{ $new_filename }++;

        $old_file_name_to_new{ $html_file }
            =
            $new_filename;
    }
}

sub fix_href {
    my ($prefix, $replacable, $suffix) = @_;

    $prefix = fix_hrefs( $prefix );
    $suffix = fix_hrefs( $suffix );

    if (defined       $old_file_name_to_new{ $replacable }) {
	$replacable = $old_file_name_to_new{ $replacable };
    }

    my $string = $prefix . $replacable . $suffix;

    ++$hrefs_updated;

    return $string;
}

# Process given string, converting
#     <A HREF="book1253.html">
# to  <A HREF="my-Signals.html">,
#     <A HREF="book048.html#section:tut:delving-deeper:roll-your-own-oop">
# to  <A HREF="my-Roll-Your-Own_Objected_Oriented_Programming.html#section:tut:delving-deeper:roll-your-own-oop">
# and so forth:
#
sub fix_hrefs {

    my ($string) = @_;

    # Look for a match like   <A HREF="book048.html#section:tut:delving-deeper:roll-your-own-oop">
    #
    if    ($string =~ /^(.*<A HREF=")([^#"]+)([^"]*">.*)$/) {

        $string = fix_href( $1, $2, $3 );

    # Look for a match like   <A HREF="book1253.html">
    #
    } elsif ($string =~ /^(.*<A HREF=")([^"]+)(">.*)$/) {

        $string = fix_href( $1, $2, $3 );
    }

    return $string;
}

# Process one file converting
#     <A HREF="book1253.html">
# to  <A HREF="my-Signals.html">
# and so forth:
#
sub convert_file {
    my ($input_file, $output_file) = @_;

    open IN,    "$input_file" || die "Cannot read $input_file!\n";
    open OUT, ">$output_file" || die "Cannot write $output_file!\n";

    while (my $line = <IN>) {
	my $fixed_line = fix_hrefs $line;
	print OUT $fixed_line;
    }

    close OUT || die "Couldn't close $output_file?!";
    close IN;

    ++$files_processed;
}

# Go through all the files converting
#     <A HREF="book1253.html">
# to  <A HREF="my-Signals.html">
# and so forth:
#
for my $input_file (sort keys %old_file_name_to_new) {

    my $output_file = $old_file_name_to_new{ $input_file };

    convert_file( $input_file, $output_file );
}

convert_file( "index.html", "index.html.soon" ); 

rename( "index.html",      "index.html~" );
rename( "index.html.soon", "index.html"  );

++$files_processed;

printf "$scriptname done: modified %d hrefs in %d files.\n", $hrefs_updated, $files_processed;

exit 0;
