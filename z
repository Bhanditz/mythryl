#!/usr/bin/mythryl

{
    loops = 10;

    foo = REF 0;
    last = REF 0;

    mutex = pthread::make_mutex ();
    condvar = pthread::make_condvar ();

    pthread::set_up_mutex (mutex, NULL);
    pthread::set_up_condvar (condvar, NULL);

    fun subthread_fn id ()
	=
	{
								    printf "subthread_fn(%d)/AAA\n" id;   file::flush file::stdout;   file::flush file::stderr;
	    pthread::acquire_mutex mutex;
								    printf "subthread_fn(%d)/BBB\n" id;   file::flush file::stdout;   file::flush file::stderr;
		#
#		for (i = 0; i < loops; ++i) {
								    printf "subthread_fn(%d)/CCC\n" id;   file::flush file::stdout;   file::flush file::stderr;
		    for (((*last + 1) % 4) != id) {	
								    printf "subthread_fn(%d)/DDD *last d=%d\n" id *last;   file::flush file::stdout;   file::flush file::stderr;
			pthread::wait_on_condvar (condvar, mutex);
								    printf "subthread_fn(%d)/EEE\n" id;   file::flush file::stdout;   file::flush file::stderr;
		    };
								    printf "subthread_fn(%d)/FFF\n" id;   file::flush file::stdout;   file::flush file::stderr;
		    foo := *foo + 1;
								    printf "subthread_fn(%d)/GGG\n" id;   file::flush file::stdout;   file::flush file::stderr;
		    last := id;
								    printf "subthread_fn(%d)/HHH\n" id;   file::flush file::stdout;   file::flush file::stderr;
		    pthread::broadcast_condvar condvar;
								    printf "subthread_fn(%d)/III\n" id;   file::flush file::stdout;   file::flush file::stderr;
								    printf "%d\n" id;   file::flush file::stdout;   file::flush file::stderr;
#		};
		#
								    printf "subthread_fn(%d)/JJJ\n" id;   file::flush file::stdout;   file::flush file::stderr;
	    pthread::release_mutex mutex;

								    printf "subthread_fn(%d)/KKK\n" id;   file::flush file::stdout;   file::flush file::stderr;
	    pthread::pthread_exit ();
	};	

								    printf "111\n";   file::flush file::stdout;   file::flush file::stderr;
    subthread0 = pthread::spawn_pthread  (subthread_fn 0);	    printf "222\n";   file::flush file::stdout;   file::flush file::stderr;
    subthread1 = pthread::spawn_pthread  (subthread_fn 1);	    printf "333\n";   file::flush file::stdout;   file::flush file::stderr;
    subthread2 = pthread::spawn_pthread  (subthread_fn 2);	    printf "444\n";   file::flush file::stdout;   file::flush file::stderr;
    subthread3 = pthread::spawn_pthread  (subthread_fn 3);	    printf "555\n";   file::flush file::stdout;   file::flush file::stderr;

    pthread::join_pthread subthread0;				    printf "666\n";   file::flush file::stdout;   file::flush file::stderr;
    pthread::join_pthread subthread1;				    printf "777\n";   file::flush file::stdout;   file::flush file::stderr;
    pthread::join_pthread subthread2;				    printf "888\n";   file::flush file::stdout;   file::flush file::stderr;
    pthread::join_pthread subthread3;				    printf "999\n";   file::flush file::stdout;   file::flush file::stderr;

								    printf "*foo d=%d\n" *foo;   file::flush file::stdout;   file::flush file::stderr;

    pthread::free_mutex mutex;
    pthread::free_condvar condvar;
};






# mutex = pthread::make_mutex ();
# pthread::set_up_mutex (mutex, NULL);
# 
# fun subthread_fn ()
#     =
#     {   if ((pthread::try_mutex mutex) == pthread::ACQUIRED_MUTEX) print "Worked!\n";	pthread::release_mutex mutex;
#         else							   print "Failed!\n";
# 	fi;
# 
# 	#
# 	pthread::pthread_exit ();
#     };
# 
# pthread = pthread::spawn_pthread  subthread_fn;
# 
# 
# pthread::join_pthread pthread;




