#!/usr/bin/mythryl

foo = REF 0;

mutex = pthread::make_mutex ();
pthread::set_up_mutex (mutex, NULL);

barrier = pthread::make_barrier ();
pthread::set_up_barrier { barrier, threads => 3 };

fun subthread_fn ()
    =
    {
printf "111\n";
	pthread::wait_on_barrier barrier;
	#
printf "222\n";
	pthread::acquire_mutex mutex;
	    #
printf "333\n";
	    foo := *foo + 1;
	    #
	pthread::release_mutex mutex; 
printf "4443\n";
	#
	pthread::pthread_exit ();
    };

subthread1 = pthread::spawn_pthread  subthread_fn;
subthread2 = pthread::spawn_pthread  subthread_fn;

makelib::scripting_globals::sleep 0.01;

printf "*foo d=%d\n" *foo;

pthread::wait_on_barrier barrier;

printf "AAA\n";
pthread::join_pthread subthread1;
printf "BBB\n";
pthread::join_pthread subthread2;
printf "CCC\n";

printf "*foo d=%d\n" *foo;

pthread::free_mutex mutex;






# mutex = pthread::make_mutex ();
# pthread::set_up_mutex (mutex, NULL);
# 
# fun subthread_fn ()
#     =
#     {   if ((pthread::try_mutex mutex) == pthread::ACQUIRED_MUTEX) print "Worked!\n";	pthread::release_mutex mutex;
#         else							   print "Failed!\n";
# 	fi;
# 
# 	#
# 	pthread::pthread_exit ();
#     };
# 
# pthread = pthread::spawn_pthread  subthread_fn;
# 
# 
# pthread::join_pthread pthread;




