#!/usr/bin/mythryl 
 
stipulate
    package fat =  fate;						# fate						is from   src/lib/std/src/nj/fate.pkg
herein    

# From src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
#
#	fun interruptable f x
#            =
#	    {   old_fate =   *un::sigint_fate;
#		#
#                un::sigint_fate
#		    :=
#                    fat::call_with_current_fate
#                        (fn fate
#                            =
#                            {   fat::call_with_current_fate (fn fate' = (fat::switch_to_fate fate fate') );		# 
#				#
#			        raise exception CONTROL_C_SIGNAL;
#                            }
#                        );
#
#		( f x
#                  before
#                      un::sigint_fate :=  old_fate
#                )
#		except
#		    e = {   un::sigint_fate :=  old_fate;
#			    #
#			    raise exception e;
#			};
#	    };

# From src/lib/compiler/toplevel/interact/read-eval-print-loops-g.pkg
#
#	    my redump_heap_fate:   Ref( Fate( String ) )
#		=
#		REF (call_with_current_fate
#			(fn return_fate
#			    =
#			    {   call_with_current_fate
#				    (fn fate =  switch_to_fate  return_fate  fate);			# 
#
#				raise exception FAIL "redump_heap_fate init";
#			    }
#		    )   );


# From src/lib/std/trap-control-c.pkg
#
#		{   fate::call_with_current_fate
#			(fn  old_fate
#			    =
#			    {   rs::set_signal_handler
#				    (
#				      rs::interrupt_signal,
#				      rs::HANDLER (fn _ = old_fate)
#				    );
#
#				operation ();
#
#				raise exception DONE;
#			    }
#			);
#
#		    raise exception CONTROL_C_SIGNAL;
#		}


# From src/lib/src/time-limit.pkg
#
#		switch_to_control_fate								# Was called "escape_fate"; was that a better name? -- 2011-11-17 CrT, doing global escape_fate -> switch_to_control_fate transform.
#		    =
#		    fate::call_with_current_fate
#			(fn fate =
#			      {   fate::call_with_current_fate
#				      (fn fate' =  (fate::switch_to_fate fate fate'));		# 
#
#				  timer_off ();
#
#				  raise exception TIME_OUT;
#			      }
#			);
#
#		fun handler _
#		    =
#		    switch_to_control_fate;
#
#		rs::set_signal_handler
#		    (rs::alarm_signal, rs::HANDLER handler);

# From src/lib/src/lib/thread-kit/src/core-thread-kit/mailqueue.pkg
#
#			    ITEM (selectrun_status, get_fate, qstate')
#				=>
#				call_with_current_fate
#				    (fn fate
#					=
#					{   qstate :=  qstate';
#					    #
#					    ts::run_thread   (end_selectrun_and_return_thread_state  selectrun_status,   fate);
#
#					    switch_to_fate  get_fate  x;								# 
#					}
#				    );
#                        [...]
#
#			call_with_current_fate								# We force a context switch here to prevent a producer from outrunning a consumer.
#			    #
#			    (fn fate
#				=
#				{   qstate :=  NONEMPTY (p, enqueue (q, x));
#				    #
#				    ts::reenable_thread_switching_and_yield_to_next_thread  fate;
#				}
#			    );
#
#                        [...]
#
#			{   msg =   call_with_current_fate
#					(
#					 fn get_fate
#					    =
#					    {   qstate :=  EMPTY (enqueue (q, (make__mailop_done__refcell(), get_fate)));
#						#
#						ts::reenable_thread_switching_and_dispatch_next_thread ();
#					    }
#					);
#
#			    ts::reenable_thread_switching ();
#
#			    msg;
#			 };

# From  src/lib/src/lib/thread-kit/src/core-thread-kit/timeout-mailop.pkg
#
#			fat::call_with_current_fate
#			    (fn fate
#				=
#				{   time_wait
#					( tim::(+) (sleep_duration, now),
#					  finish_selectrun,
#					  selectrun_status,
#					  fate
#					);
#
#				    return_to__set_up_mailopready_watches__loop ();		# Return control to mailop.pkg.
#				}
#			    );
#
#			[...]
#
#		    {   fat::call_with_current_fate
#			    (
#			     fn fate
#				=
#				{   time_wait (wakeup_time, finish_selectrun, selectrun_status, fate);
#				    #
#				    return_to__set_up_mailopready_watches__loop ();			# This never returns.
#				}
#			    );
#
#			sch::reenable_thread_switching ();					# Execution will resume on this line when 'fate' is eventually called.
#		    };



printf "AAA\n";

i = fat::call_with_current_fate
    (fn fate =  {   printf "BBB\n";
		    fat::switch_to_fate fate 3;
		    printf "CCC\n";
		    8;
		}
    );

printf "DDD %d\n" (i + 2);

    
end;