#!/usr/bin/mythryl

use "src/lib/x-kit/xkit.lib";

stipulate
#   include package   unit_test;				# unit_test				is from   src/lib/src/unit-test.pkg
    include package   makelib::scripting_globals;
    include package   threadkit;				# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package ap  =  client_to_atom;				# client_to_atom			is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
    package au  =  authentication;				# authentication			is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
    package awx =  guishim_imp_for_x;				# guishim_imp_for_x			is from   src/lib/x-kit/widget/xkit/app/guishim-imp-for-x.pkg
    package agx =  app_to_guishim_xspecific;			# app_to_guishim_xspecific		is from   src/lib/x-kit/widget/theme/app-to-guishim-xspecific.pkg
    package cpm =  cs_pixmap;					# cs_pixmap				is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
    package cpt =  cs_pixmat;					# cs_pixmat				is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
    #
    package gd  =  gui_displaylist;				# gui_displaylist			is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    #
    package dbx =  sprite_theme_imp;				# sprite_theme_imp			is from   src/lib/x-kit/widget/xkit/theme/sprite/default/default-sprite-theme-for-x.pkg
    package dcx =  object_theme_imp;				# object_theme_imp			is from   src/lib/x-kit/widget/xkit/theme/object/default/default-object-theme-for-x.pkg
    package dtx =  widget_theme_imp;				# widget_theme_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/default-widget-theme-for-x.pkg
    #
    package dy  =  display;					# display				is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver		is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
    package fil =  file__premicrothread;			# file__premicrothread			is from   src/lib/std/src/posix/file--premicrothread.pkg
    package fti =  font_index;					# font_index				is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
    package gtg =  guiboss_to_guishim;				# guiboss_to_guishim			is from   src/lib/x-kit/widget/theme/guiboss-to-guishim.pkg
    package gq  =  guiboss_imp;					# guiboss_imp				is from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
#   package c2g =  client_to_guiboss;				# client_to_guiboss			is from   src/lib/x-kit/widget/gui/client-to-guiboss.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap		is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
    package mtx =  rw_matrix;					# rw_matrix				is from   src/lib/std/src/rw-matrix.pkg
    package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package rgb =  rgb;						# rgb					is from   src/lib/x-kit/xclient/src/color/rgb.pkg
    package rop =  ro_pixmap;					# ro_pixmap				is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
    package rw  =  root_window;					# root_window				is from   src/lib/x-kit/widget/lib/root-window.pkg
    package rwv =  rw_vector;					# rw_vector				is from   src/lib/std/src/rw-vector.pkg
    package sep =  client_to_selection;				# client_to_selection			is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
    package shp =  shade;					# shade					is from   src/lib/x-kit/widget/lib/shade.pkg
    package sj  =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer			is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package ti  =  template_imp;				# template_imp				is from   src/lib/x-kit/xclient/src/wire/template-imp.pkg
#   package tem =  template;					# template				is from   src/lib/x-kit/xclient/src/wire/template.pkg
    package tr  =  logger;					# logger				is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
    package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
    package u1  =  one_byte_unt;				# one_byte_unt				is from   src/lib/std/one-byte-unt.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package v2w =  value_to_wire;				# value_to_wire				is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
    package wg  =  widget;					# widget				is from   src/lib/x-kit/widget/old/basic/widget.pkg
    package wi  =  window;					# window				is from   src/lib/x-kit/xclient/src/window/window.pkg
    package wme =  window_map_event_sink;			# window_map_event_sink			is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
    package wpp =  client_to_window_watcher;			# client_to_window_watcher		is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
    package wy  =  widget_style;				# widget_style				is from   src/lib/x-kit/widget/lib/widget-style.pkg
    package xc  =  xclient;					# xclient				is from   src/lib/x-kit/xclient/xclient.pkg
    package g2d =  geometry2d;					# geometry2d				is from   src/lib/std/2d/geometry2d.pkg
    package g2j =  geometry2d_junk;				# geometry2d_junk			is from   src/lib/std/2d/geometry2d-junk.pkg
    package xj  =  xsession_junk;				# xsession_junk				is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
    package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    package gtj =  guiboss_types_junk;				# guiboss_types_junk			is from   src/lib/x-kit/widget/gui/guiboss-types-junk.pkg

    package blk =  blank;					# blank					is from   src/lib/x-kit/widget/leaf/blank.pkg
    package frm =  frame;					# frame					is from   src/lib/x-kit/widget/leaf/frame.pkg
    package ab  =  arrowbutton;					# arrowbutton				is from   src/lib/x-kit/widget/leaf/arrowbutton.pkg
    package bb  =  button;					# button				is from   src/lib/x-kit/widget/leaf/button.pkg
    package cb  =  checkbox;					# checkbox				is from   src/lib/x-kit/widget/leaf/checkbox.pkg
    package db  =  diamondbutton;				# diamondbutton				is from   src/lib/x-kit/widget/leaf/diamondbutton.pkg
    package rb  =  roundbutton;					# roundbutton				is from   src/lib/x-kit/widget/leaf/roundbutton.pkg

    package le  =  screenline;					# screenline				is from   src/lib/x-kit/widget/edit/screenline.pkg
    package tpf =  textpane;					# textpane				is from   src/lib/x-kit/widget/edit/textpane.pkg

    package his =  horizontal_int_slider;			# horizontal_int_slider			is from   src/lib/x-kit/widget/leaf/horizontal-int-slider.pkg
    package hfs =  horizontal_float_slider;			# horizontal_float_slider		is from   src/lib/x-kit/widget/leaf/horizontal-float-slider.pkg

    package vis =  vertical_int_slider;				# vertical_int_slider			is from   src/lib/x-kit/widget/leaf/vertical-int-slider.pkg
    package vfs =  vertical_float_slider;			# vertical_float_slider			is from   src/lib/x-kit/widget/leaf/vertical-float-slider.pkg

    package ten =  textentry;					# textentry				is from   src/lib/x-kit/widget/leaf/textentry.pkg
    package ted =  texteditor;					# texteditor				is from   src/lib/x-kit/widget/edit/texteditor.pkg

#   package xet =  xevent_types;				# xevent_types				is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string			is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    #
    # The above three are the X-specific versions of the
    # below two platform-independent packages.  X events
    # come to windowsystem-imp-for-x in xet:: encoding.  It	# For the big dataflow diagram see   src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
    # translates them to evt:: encoding and forward them to
    # guiboss_imp, which forwards them to appropriate imps.	# guiboss_imp				is from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
    #
    package gt  =  guiboss_types;				# guiboss_types				is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package wt  =  widget_theme;				# widget_theme				is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg

    package evt =  gui_event_types;				# gui_event_types			is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
#   package gts =  gui_event_to_string;				# gui_event_to_string			is from   src/lib/x-kit/widget/gui/gui-event-to-string.pkg
    #
    # This one translates from the X to Gui versions:
#   package x2g =  xevent_to_gui_event;				# xevent_to_gui_event			is from   src/lib/x-kit/widget/xkit/app/xevent-to-gui-event.pkg
#   package g2x =  gui_event_to_xevent;				# gui_event_to_xevent			is from   src/lib/x-kit/widget/xkit/app/gui-event-to-xevent.pkg

    package oim =  object_imp;					# object_imp				is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/object-imp.pkg
    package sim =  sprite_imp;					# sprite_imp				is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/sprite-imp.pkg
    package wim =  widget_imp;					# widget_imp				is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg



    package hslider =  horizontal_int_slider;			# horizontal_int_slider			is from   src/lib/x-kit/widget/leaf/horizontal-int-slider.pkg
    package hflider =  horizontal_float_slider;			# horizontal_float_slider		is from   src/lib/x-kit/widget/leaf/horizontal-float-slider.pkg

    package vslider =  vertical_int_slider;			# vertical_int_slider			is from   src/lib/x-kit/widget/leaf/vertical-int-slider.pkg
    package vflider =  vertical_float_slider;			# vertical_float_slider			is from   src/lib/x-kit/widget/leaf/vertical-float-slider.pkg


    tracefile   =  "widget-unit-test.trace.log";

#   id =  iui::issue_unique_id;

    nb =  log::note_on_stderr;					# log					is from   src/lib/std/src/log.pkg

# These are crude hacks to force these to compile: 
#
Dummy1 = wim::Widget;
Dummy2 = oim::Object;
Dummy3 = sim::Sprite;
dummy4 = ab::with;
dummy6 = blk::with;
dummy7 = ten::with;
dummy8 = ted::with;


    sample_text
	=
	"=====================================\t# This is a poem by\n\
	\#\t\t\t\t\t# Samuel Taylor Coleridge\n\
	\In Xanadu did Kubla Khan\n\
	\A stately pleasure-dome decree:\n\
	\Where Alph, the sacred river, ran\n\
	\Through caverns measureless to man\n\
	\\tDown to a sunless sea.\n\
	\So twice five miles of fertile ground\n\
	\With walls and towers were girdled round;\n\
	\And there were gardens bright with sinuous rills,\n\
	\Where blossomed many an incense-bearing tree;\n\
	\And here were forests ancient as the hills,\n\
	\Enfolding sunny spots of greenery.\n\
	\\n\
	\But oh! that deep romantic chasm which slanted\n\
	\Down the green hill athwart a cedarn cover!\n\
	\A savage place! as holy and enchanted\n\
	\As e'er beneath a waning moon was haunted\n\
	\By woman wailing for her demon-lover!\n\
	\And from this chasm, with ceaseless turmoil seething,\n\
	\As if this earth in fast thick pants were breathing,\n\
	\A mighty fountain momently was forced:\n\
	\Amid whose swift half-intermitted burst\n\
	\Huge fragments vaulted like rebounding hail,\n\
	\Or chaffy grain beneath the thresher's flail:\n\
	\And 'mid these dancing rocks at once and ever\n\
	\It flung up momently the sacred river.\n\
	\Five miles meandering with a mazy motion\n\
	\Through wood and dale the sacred river ran,\n\
	\Then reached the caverns measureless to man,\n\
	\And sank in tumult to a lifeless ocean;\n\
	\And 'mid this tumult Kubla heard from far\n\
	\Ancestral voices prophesying war!\n\
	\   The shadow of the dome of pleasure\n\
	\   Floated midway on the waves;\n\
	\   Where was heard the mingled measure\n\
	\   From the fountain and the caves.\n\
	\It was a miracle of rare device,\n\
	\A sunny pleasure-dome with caves of ice!\n\
	\\n\
	\   A damsel with a dulcimer\n\
	\   In a vision once I saw:\n\
	\   It was an Abyssinian maid\n\
	\   And on her dulcimer she played,\n\
	\   Singing of Mount Abora.\n\
	\   Could I revive within me\n\
	\   Her symphony and song,\n\
	\   To such a deep delight 'twould win me,\n\
	\That with music loud and long,\n\
	\I would build that dome in air,\n\
	\That sunny dome! those caves of ice!\n\
	\And all who heard should see them there,\n\
	\And all should cry, Beware! Beware!\n\
	\His flashing eyes, his floating hair!\n\
	\Weave a circle round him thrice,\n\
	\And close your eyes with holy dread\n\
	\For he on honey-dew hath fed,\n\
	\And drunk the milk of Paradise.\n\
	\\^A\^B\^C\^I\^K\n\
	\And now for something completely different -- some test 16-bit UTF8 chars.\n\
	\Depending on your font, you may see mostly boxes:\n\
	\ĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ\n\
	\ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǄǅǆǇǈǉǊǋǌǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȜȝȞȟȠȡȢȣȤȥȦȧȨȩȪȫȬȭȮȯȰȱȲȳȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏ\n\
	\ɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʔʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯ\n\
	\ʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁ˂˃˄˅ˆˇˈˉˊˋˌˍˎˏːˑ˒˓˔˕˖˗˘˙˚˛˜˝˞˟ˠˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽˾˿\n\
	\ͰͱͲͳʹ͵Ͷͷͺͻͼͽ;Ϳ΄΅Ά·ΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϏϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿ\n\
	\ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѠѡѢѣѤѥѦѧѨѩѪѫѬѭѮѯѰѱѲѳѴѵѶѷѸѹѺѻѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏҐґҒғҔҕҖҗҘҙҚқҜҝҞҟҠҡҢңҤҥҦҧҨҩҪҫҬҭҮүҰұҲҳҴҵҶҷҸҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘәӚӛӜӝӞӟӠӡӢӣӤӥӦӧӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿ\\n\
	\ԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖՙ՚՛՜՝՞ ՟աբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆև։֊֍֎֏\n\
	\ֿ׀ׁׂ׃ׅׄ׆ׇאבגדהוזחטיךכלםמןנסעףפץצקרשתװױײ׳״\n\
	\℀℁ℂ℃℄℅℆ℇ℈℉ℊℋℌℍℎℏℐℑℒℓ℔ℕ№℗℘ℙℚℛℜℝ℞℟℠℡™℣ℤ℥Ω℧ℨ℩KÅℬℭ℮ℯℰℱℲℳℴℵℶℷℸℹ℺℻ℼℽℾℿ⅀⅁⅂⅃⅄ⅅⅆⅇⅈⅉ⅊⅋⅌⅍ⅎ⅏\n\
	\⟰⟱⟲⟳⟴⟵⟶⟷⟸⟹⟺⟻⟼⟽⟾⟿⤀⤁⤂⤃⤄⤅⤆⤇⤈⤉⤊⤋⤌⤍⤎⤏⤐⤑⤒⤓⤔⤕⤖⤗⤘⤙⤚⤛⤜⤝⤞⤟⤠⤡⤢⤣⤤⤥⤦⤧⤨⤩⤪⤫⤬⤭⤮⤯⤰⤱⤲⤳⤴⤵⤶⤷⤸⤹⤺⤻⤼⤽⤾⤿⥀⥁⥂⥃⥄⥅⥆⥇⥈⥉⥊⥋⥌⥍⥎⥏⥐⥑⥒⥓⥔⥕⥖⥗⥘⥙⥚⥛⥜⥝⥞⥟⥠⥡⥢⥣⥤⥥⥦⥧⥨⥩⥪⥫⥬⥭⥮⥯⥰⥱⥲⥳⥴⥵⥶⥷⥸⥹⥺⥻⥼⥽⥾⥿\n\
	\✁✂✃✄✅✆✇✈✉✊✋✌✍✎✏✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✨✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍❎❏❐❑❒❓❔❕❖❗❘❙❚❛❜❝❞❟❠❡❢❣❤❥❦❧❨❩❪❫❬❭❮❯❰❱❲❳❴❵❶❷❸❹❺❻❼❽❾❿➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓➔➕➖➗➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➰➱➲➳➴➵➶➷➸➹➺➻➼➽➾➿\n\
	\∑−∓∔∕∖∗∘∙√∛∜∝∞∟\n\
	\";



herein


    fun int_sink i = ();
printf "widget-unit-test.pkg/exercise_window_stuff/TOP\n";

    # Here we build a three-layer cake:
    #
    #    -----------------
    #    |     Gui Boss |
    #    -----------------
    #    |     Theme     |
    #    -----------------
    #    |     Appwindow |
    #    -----------------
    #
    # The Gui Boss is windowsystem-agnostic; it de/constructs and maintains running GUI impnets from gui specification trees. 
    # The Theme is windowsystem-specific (e.g., X-specific) and encapsulates how to draw the various widgets on the given windowsystem.
    # The Appwindow is windowsystem-specific and encapulates X-specific application window stuff like EXPOSE event-handling.


    (make_run_gun ()) ->   { run_gun', fire_run_gun };
    (make_end_gun ()) ->   { end_gun', fire_end_gun };

    windowsystem_needs   =  { };
    windowsystem_options =  [ ];
    windowsystem_arg     =  (windowsystem_needs, windowsystem_options);
    #
    (awx::make_windowsystem_egg  windowsystem_arg  NULL) ->  windowsystem_egg;
    #
    (windowsystem_egg			()) ->   (windowsystem_exports, windowsystem_egg');


    (dbx::make_sprite_theme_egg	[]) ->   sprite_theme_egg;
    (sprite_theme_egg		()) ->  (sprite_theme_exports, sprite_theme_egg');
    #
    (dcx::make_object_theme_egg	[]) ->   object_theme_egg;
    (object_theme_egg		()) ->  (object_theme_exports, object_theme_egg');
    #
    (dtx::make_widget_theme_egg	[]) ->   widget_theme_egg;
    (widget_theme_egg		()) ->  (widget_theme_exports, widget_theme_egg');


    (gq::make_guiboss_egg		[]) ->  guiboss_egg;
    (guiboss_egg			()) -> (guiboss_exports, guiboss_egg');

    #
#    (ti::make_template_egg		[]) -> template_egg;
#    (template_egg			()) -> (template_exports, template_egg');

    #
    windowsystem_exports	-> { guiboss_to_guishim, app_to_guishim_xspecific	};
    #
    sprite_theme_exports	-> { gui_to_sprite_theme				};
    object_theme_exports	-> { gui_to_object_theme				};
    widget_theme_exports	-> { theme						};
    #
    guiboss_exports		-> { client_to_guiboss					};
#    template_exports	-> { template						};

#    template_imports = { int_sink =>  \\ (i: Int) = ()  };

    guiboss_egg'		( { int_sink,
				guiboss_to_guishim,
				gui_to_sprite_theme,
				gui_to_object_theme,
				theme
			      },
			      run_gun', end_gun'
			    );
    #
    sprite_theme_egg'	({ int_sink,     guiboss_to_guishim		},	run_gun', end_gun');
    object_theme_egg'	({ int_sink,     guiboss_to_guishim		},	run_gun', end_gun');
    widget_theme_egg'	({ int_sink,     guiboss_to_guishim		},	run_gun', end_gun');
    #
    windowsystem_egg'	({ int_sink					},	run_gun', end_gun');
#    template_egg'		( template_imports,					run_gun', end_gun');


    fire_run_gun ();

    (guiboss_to_guishim.root_window_size ())
      ->
      { root_window_size_in_pixels:		g2d::Size,
	root_window_size_in_mm:		g2d::Size
      };


    # Our toplevel layout is designed to
    # look best at a 4:3 aspect ration, so:
    #
    topwindow_size
	=
	if (root_window_size_in_pixels.wide * 3
	<   root_window_size_in_pixels.high * 4)
	    #
	    # Tall rootwindow case:
	    #
	    wide =  (root_window_size_in_pixels.wide * 9) / 10;
	    high =  (wide * 3) / 4;

	    { wide, high };
	else
	    # Wide rootwindow case:
	    #
	    high =  (root_window_size_in_pixels.high * 9) / 10;
	    wide =  (high * 4) / 3;

	    { wide, high };
	fi;

    topwindow_hints		# 
	=			# 
	[
	  gtg::BACKGROUND_PIXEL	(r8::rgb8_from_ints (128+32, 16, 32)),		# Slightly desaturated green. (NOW RED.)
	  gtg::BORDER_PIXEL	(r8::rgb8_from_ints (0,       0,  0)),		# Black.
	  #
	  gtg::SITE		( { upperleft		=>   { col =>     0, row  =>   0 },
				    size		=>   topwindow_size,
				    border_thickness	=>  1
				  }
				  : g2d::Window_Site
				)
	];

    (client_to_guiboss.make_topwindow  topwindow_hints)
	->
	guiboss_to_topwindow;

    topwindow_site
	=
	guiboss_to_topwindow.get_window_site ();

    topwindow_site
	->
	{ upperleft	    => topwindow_upperleft:	g2d::Point,
	  size		    => topwindow_size:		g2d::Size,
	  border_thickness  => topwindow:		Int
	};

    guiplan
      =
      gt::FRAME
	( [ gt::FRAME_WIDGET (popupframe::with []) ],
	  #
	  texteditor::with ("*testbuffer*", [ ted::UTF8 sample_text ])
	);

    (client_to_guiboss.start_gui  (guiboss_to_topwindow, guiplan))
	->
	block_until_gui_startup_is_complete;

    (block_until_gui_startup_is_complete())
	->
	client_to_guiwindow;

    sleep_for 3.0;												# Just to give human observer time to observe.

    print "Hello!\n";
end;

