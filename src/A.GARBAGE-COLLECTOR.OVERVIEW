The heapcleaner ("garbage collector") is responsible for reclaiming
discarded chunks of memory.  Mythryl programs allocate new memory
at an extremely high rate -- typically about one word for every ten machine
instructions executed[1] -- so prompt and efficient reclaimation
of discarded datastructures is critically important in Mythryl

To understand how Mythryl cleans its heap, you must first understand
how Mythryl organizes its heap;  this file assumes you have read and
understood

    src/A.HEAP.OVERVIEW

The Mythryl heapcleaner is written in C because it must be able to
function when there is insufficient free ram left for normal Mythryl
code to run, and also because cleaning involves freely casting
bits of ram to various different types, which is much easier in C
than in Mythryl.

The core two sourcefiles constituting the Mythryl heapcleaner are:

    src/c/heapcleaner/clean-agegroup0.c
    src/c/heapcleaner/clean-n-agegroups.c

The heapcleaner is invoked when a heap overflow check reveals
that heap memory allocation has come dangerously close to the
end of the generation-zero allocation buffer.  Heap limit checks
and calls to the heapcleaner are inserted into compiled code by

    src/lib/compiler/back/low/main/nextcode/pick-nextcode-fns-for-heaplimit-checks.pkg
    src/lib/compiler/back/low/main/nextcode/emit-treecode-heapcleaner-calls-g.pkg
    src/lib/compiler/back/low/main/main/translate-nextcode-to-treecode-g.pkg

Appel &al state two critical data, probably in one of

     Space-Efficient Closure Reprentations
     Zhong Shao, Andrew W Appel
     1994, 12p
     http://flint.cs.yale.edu/flint/publications/closure.ps.gz

     Efficient and Safe-for-Space Closure Conversion
     Zhong Shao, Andrew Appel
     2000, 33p
     http://flint.cs.yale.edu/flint/publications/escc.html 

viz:
     1) The compiler never updates a closure after creating it.
        (This is something the parallel garbage collection paper assumes happens.)

     2) Garbage collector calls happen at function body boundaries,
        never within a function body.


The C-level Mythryl heapcleaner code depends critically on support from
the Mythryl compiler.  Specific sourcefiles involved include:

pick_nextcode_fns_for_heaplimit_checks	src/lib/compiler/back/low/main/nextcode/pick-nextcode-fns-for-heaplimit-checks.pkg
put_longjump_heapcleaner_calls		src/lib/compiler/back/low/main/nextcode/emit-treecode-heapcleaner-calls-g.pkg
put_heapcleaner_calls_for_package	"                                                                             "
additional heap-exhausted testing:	src/lib/compiler/back/low/main/main/translate-nextcode-to-treecode-g.pkg

In more detail, the division of labor is:

    src/lib/compiler/back/low/main/nextcode/pick-nextcode-fns-for-heaplimit-checks.pkg

        Decides which functions should have heaplimit checks, and
        marks them by changing their type from ALL_CALLS_KNOWN to
        ALL_CALLS_KNOWN_AND_NEEDS_HEAPLIMIT_CHECK.

	This is based initially on an analysis of the callgraph to
	find the minimal number of vertices needed to ensure that
	every cycle in the graph (i.e., every possible loop through
	the code) contains at least one heaplimit check call.  
	The actual graph algorithm is implemented in
	    src/lib/compiler/src/stuff/compute-minimum-feedback-vertex-set-of-digraph.pkg

	Additional functions are flagged for heaplimit checks in order
	to guarantee that no more than 1024 words of heap memory are
	ever allocated between calls to the heaplimit check function.

    src/lib/compiler/back/low/main/nextcode/emit-treecode-heapcleaner-calls-g.pkg
    src/lib/compiler/back/low/main/main/translate-nextcode-to-treecode-g.pkg 

There is also this stuff, which appears to be
a mostly-unfinished project to associate
heapcleaner info with every codetemp:
				   src/lib/compiler/back/low/heapcleaner-safety/per-codetemp-heapcleaner-info-template.api
				   src/lib/compiler/back/low/heapcleaner-safety/codetemps-with-heapcleaner-info.api
				   src/lib/compiler/back/low/heapcleaner-safety/codetemps-with-heapcleaner-info-g.pkg
				   src/lib/compiler/back/low/main/nextcode/per-codetemp-heapcleaner-info.api
				   src/lib/compiler/back/low/main/nextcode/per-codetemp-heapcleaner-info.pkg





========================================================
Notes

Note [1]:

Favoring creation of new values over modification of existing ones is
one of the ways Mythryl programs minimize use of side-effects.
