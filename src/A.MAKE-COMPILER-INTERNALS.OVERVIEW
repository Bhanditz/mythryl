##############################################################################
#                                                                            #
#             Internals documentation on what happens when you do            #
#                                                                            #
#                                  make compiler                             #
#                                                                            #
#             in the install directory                                       #
#                                                                            #
##############################################################################

###    "It is a riddle, wrapped in a mystery, inside an enigma;"
###                               -- Winston Churchill

Building the compiler itself currently involves
a lot of special-case kludging totally unrelated to
what happens when you build any other program.

Our mission here is to cast light on these dark mysteries. :)


#####################################################
#           Overview:  make_mythryld_executable    #
#####################################################

The package   make_mythryld_executable   from

    src/lib/core/internal/make-mythryld-executable.pkg

is both the compile-time and run-time Point Zero for
the mythryl compiler:

 o  It manages the actual process of compiling the compiler.
 o  It dumps to disk the actual 'mythryld' compiler "executable".
 o  It contains the point at which 'mythryld' execution begins
    for each Mythryl compilation or interactive session.

Package   make_mythryld_executable   is logically divided
into two phases by the   lib7::fork_to_disk   call which
generates the 'mythryld' file:

 Phase 1: Code before the  fork_to_disk  call serves to compile and preconfigure the compiler.
 Phase 2: Code after  thae fork_to_disk  call initiates a particular compile or interactive session.

Phase1
======

Most of the compiler compilation and configuration
work is done by the call to

    make_mythryl_compiler_etc				from   src/lib/core/internal/make-mythryl-compiler-etc.pkg

in


#####################################################
#           Overview:  key call sequence            #
#####################################################

When you type "make compiler", one key call sequence is:

         compiler																Makefile
 calls   compiler-libraries															Makefile
 calls   @MYTHRYL_ROOT=`pwd` sh/make-compiler-libraries												Makefile

This compiles all the source code needed by the compiler.
(All compiler code lives in a library;  there is no compiler
code distinct from the compiler libraries.)

sh/make-compiler-libraries performs two key steps:

    1) bin/mythryld  src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-this-platform.lib
    2) mythryl_compiler_compiler::make_mythryl_compiler ();					# make_mythryl_compiler		is from		src/app/makelib/mythryl-compiler-compiler/mythryl-compiler-compiler-g.pkg

A key call sequence in step (1) is:
    src/lib/core/internal/make-mythryld-executable.pkg
    calls run_commandline()	in				src/app/makelib/main/makelib-g.pkg


Once the above has compiled all necessary Mythryl source code,
the actual compiler executable 'mythryld' is generated via the
call sequence:

         compiler																Makefile
 calls   compiler-executable															Makefile
 calls   bin/mythryl-ld --runtime-heap=mythryld --runtime-compiledfiles-to-load=COMPILED_FILES_TO_LOAD --runtime-gc-gen0-bufsize=256k				sh/make-compiler-executable 
 execs   bin/mythryl-runtime-ia32 --runtime-compiledfiles-to-load=COMPILED_FILES_TO_LOAD --runtime-heap=mythryld --runtime-gc-gen0-bufsize=256k			bin/mythryl-ld
 calls   make_mythryld_executable														src/lib/core/internal/make-mythryld-executable.pkg
 calls     lib7::fork_to_disk  filename_for_executable		# filename_for_executable == "mythryld"						src/lib/std/lib7.pkg
 is      export::fork_to_disk  filename_for_executable												src/lib/std/src/nj/export.pkg

#####################################################
#           Overview:  make_compiler and kin      # 
#####################################################

The root of the actual .lib makefile hierarchy is

    src/etc/mythryl-compiler-root.lib

which gets invoked via make_compile() in

    src/app/makelib/bootstrap/bootstrap-compiler-g.pkg 

The root.lib makefile is a trivial wrapper around

    src/lib/core/internal/interactive-system.lib

which is what really defines the packages available
at the mythryld interactive prompt.


The crux of the matter is the make_compiler package defining
the bootstrap compiler which builds the system, which
in a naive sense is defined in 

    src/lib/core/compiler.lib

The latter, however, is merely a stub wrapper for the
real top level makefile, which is

    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-this-platform.lib

The latter consists mainly of #ifdefs which select
the appropriate variant of the compiler for the
current host and architecture.

We actually have one variant of make_compiler (and thus of
the bootstrap compiler) for each supported
platform.

These are defined by the makefiles

    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-pwrpc32-macos.lib     # package pwrpc32MacOSCMB
    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-pwrpc32-posix.lib      # package pwrpc32UnixCMB
    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-sparc32-posix.lib    # package SparcUnixCMB
    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-intel32-posix.lib      # package Intel32UnixCMB
    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-intel32-win32.lib     # package Intel32Win32CMB

Each of these produces binary code for the indicated
operating system and hardware architecture, but each
can be built on any of the supported platforms.

Thus, when running on the intel32-unix platform, we
will typically use Intel32UnixCMB because it is the
version which produces code which can execute
under unix (+ linux + *bsd + ...) on intel32 -- but
the other versions of the bootstrap compiler
remain available, and may be used as cross-compilers
to produce a version of the compiler for another machine.

On any given platform, the package 'make_compiler' is
essentially an alias for the platform-appropriate
version of the bootstrap compiler.

This aliasing process is implemented by the
above-mentioned mythryl-compiler-compiler-for-this-platform.lib makefile, which
contains #ifdefs which define make_compiler appropriately.

This allows scripts to portably use 'make_compiler' to
mean 'the appropriate bootstrap compiler for
the current platform'.

However, all of the platform-specific package
names remain available at the interactive prompt.







#####################################################
#           the make-compiler script             # 
#####################################################


'make build' in the install directory invokes

    src/etc/make-compiler

to do all its work.

make-compiler in turn does just two things
(actually, it combines them):

1) Invokes bin/mythryld on

       src/lib/core/cmb.lib

   to compile and load the bootstrap compiler make_compiler.

2) Executes

       make_compiler.make ()

   at the interactive prompt in the resulting image, which invokes

       src/app/makelib/bootstrap/bootstrap-compiler-g.pkg:make




#####################################################
#           the make_compiler makefile hierarchy  # 
#####################################################

The makefile hierarchy invoked by make-compiler looks
as follows, taking the intel32-linux build case for
definiteness and suppressing some common libraries
to reduce clutter:


src/lib/core/cmb.lib
    src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-this-platform.lib
        src/lib/core/mythryl-compiler-compiler/mythryl-compiler-compiler-for-intel32-posix.lib
            src/lib/std/standard.lib
                src/lib/std/src/Makefile.lib
                    src/lib/core/init/init.cmi
                    src/lib/std/types-only/Makefile.lib
            src/lib/core/internal/makelib-apis.lib
                src/app/makelib/portable-graph/portable-graph.lib
            src/lib/core/internal/makelib-internal.lib

            src/lib/core/internal/makelib-lib.lib
                src/app/makelib/makelib.sublib.lib
                    src/lib/core/lib7/lib7.lib 
                        src/lib/std/standard.lib
		    src/lib/core/lib7/controls.lib
                        src/lib/controls/controls.lib
                    src/lib/core/internal/srcpath.sublib
                        src/app/makelib/paths/srcpath.sublib
                    src/app/makelib/stuff/Makefile.lib

		    (* Compiler libraries *)
		    src/lib/core/viscomp/basics.lib
                        src/compiler/basics/basics.sublib
		    src/lib/core/viscomp/parser.lib
                        src/compiler/parse/parser.lib
		    src/lib/core/viscomp/typecheckdata.sublib
                        src/compiler/typer-stuff/typecheckdata.sublib
		    src/lib/core/viscomp/execute.lib
                        src/compiler/execution/execute.sublib
		    src/lib/core/viscomp/core.lib
                        src/compiler/core.sublib
			    src/compiler/back/low/lib/lib.lib
			    src/compiler/back/low/lib/control.lib
                            src/lib/graph/graphs.lib
                            src/compiler/back/low/lib/lowhalf.lib
			    src/compiler/back/low/lib/visual.lib
                            src/lib/core/internal/lib7-version.lib

		    src/compiler/src/library/pickle.lib

		    (* Auxiliary libraries *)
                    src/app/yacc/lib/mythryl-yacc-lib.lib

            src/lib/core/compiler/mythryl-compiler-for-intel32.lib
		src/compiler/mythryl-compiler-support-for-intel32.lib
		    src/lib/graph/graphs.lib
		    src/compiler/back/low/lib/treecode.lib
		    src/compiler/back/low/intel32/backend-intel32.lib




#####################################################
#           what make_compiler.make () does       # 
#####################################################


