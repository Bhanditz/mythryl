# This file contains information read by
#
#     $ROOT/src/lib/src/make-gtk-glue
#
# This file is broken into logical paragraphs
# separated by blank lines.  In general each
# paragraph describes one end-user-callable
# function in the Gtk API.
#
# Each paragraph consists of one or more lines;
# each line begins with a colon-delimited type
# field determining its semantics.
#
# Supported line types are:
#
#     make:     Must appear in every paragraph.
#               Determines which make-gtk-glue function processes the paragraph:
#                   plain-fn       make_plain_function      # The usual case.
#                   callback-fn    make_callback_function   # Special-purpose variant.
#                   fn-doc         make_function_doc        # Document fn without code generation, e.g. for Mythryl-only fns.
#                   mythryl-code   make_mythryl_code        # Special hack to deposit verbatim Mythryl code.
#                   mythryl-type   make_mythryl_type        # Special hack to deposit verbatim Mythryl declarations.
#
#     The 'make' line determines which other
#     lines may appear in the paragraph, per the
#     following table. ("X" == mandatory, "O" == optional):
#
#                  callback-fn   fn-doc   plain-fn   mythryl-code  mythryl-type
#                  -----------   ------   --------   ------------  -----------
#
#         fn-name:      X           X         X
#         fn-type:      X           X         X
#         lowtype:      X                     X
#         lowhalf:                            X
#         result:                             O
#         doc-fn:       O           O         O
#         url:          O           O         O
#         code:         O                     O            X
#         type:                                                         X
#
#
#     fn-name:  Name of the end-user-callable Mythryl function,   e.g. halt_and_catch_fire
#     fn-type:  Mythryl type for the function,                    e.g. Int -> Void
#     url:      URL documenting the underlying C Gtk function,    e.g. http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-init
#     code:     Literal Mythryl code to be inserted near bottom of ogl-client-g.pkg
#     type:     Literal Mythryl code to be inserted near top    of ogl-client-g.pkg and also in ogl-client.api
#     lowtype:  Gtk cast macro for widget: Usually G_OBJECT, occasionally GTK_MENU_ITEM or such.
#
#     doc-fn:   Usually name of fn for documentation purposes is obtained from 'lowhalf' line,
#               but this line may be used to specify it explicitly.
#
#     lowhalf:  C-level gtk call to make                          e.g. gtk_layout_put( GTK_LAYOUT(w0), GTK_WIDGET(w1), i2, i3)
#
#		lowhalf contains embedded arguments like w0, i1, f2, b3, s4.
#		
#		The argument letter gives us the argument type:
#		
#		   w == widget
#		   i == int
#		   f == double  (Mythryl "Float")
#		   b == bool
#		   s == string
#		
#		The argument digit gives us the argument order:
#		
#		   0 == first arg
#		   1 == second arg
#		   ...
#
#
#     result:   C-level result type for call.  In practice we always default
#               this and make-gtk-glue deduces it from the Mythryl type.
#               #
#               Can be one of "Int", "String", "Bool", "Float" or "Void".
#               #
#               Can also be "Widget" or "new Widget", the difference being
#	        that in the former case the mythryl-gtk-server.c logic can merely
#	        fetch it out of its array  widget[],  whereas in the latter a
#	        new entry is being created in  widget[].
#               #
#               We can usually deduce the difference:  If fn_name starts with
#	        "make_" then we have the "new Widget" case, otherwise we have
#	        the "Widget" case:


# Putting the following declarations here avoids
# duplicating them between gtk.api and gtk-g.pkg,
# simplifying maintainance:

make   : mythryl-type
type   :
type   :   #  

make   : mythryl-code
code   :
code   :        #

make   : mythryl-code
code   : 
code   : 
code   :    # Handlers for X events :		http://library.gnome.org/devel/gtk-tutorial/stable/x182.html
code   :    #

make   : mythryl-code
code   : 
code   :    # Callbacks taking a boolean argument:
code   :    #

	


# NB: Default tab-stops are every 8 chars in emacsen,
#     so by having the type-field colons in column 7
#     in this file we ensure that tab-containing code
#     in code: and type: fields looks the same in this
#     file and in its destination file.



## Code by Jeff Prothero : Copyright (c) 2010,
## released under Gnu Public Licence version 3.
