
In general the key is to use a short development cycle involving small changes promptly tested.
I do

    <edit code>
    make compiler
    make rest
    sudo make install
    make check
    make benchmarks
    make gtk-glue
    make tar

for one-lines changes, and when in doubt, add additional tests to the 'make check' test suite
until I feel confident a given complex module is in fact functioning well.  It is *much* easier
to fix bugs caught early this way than ones caught months later in live application code!


===================
One small hint:

The compiler contains a number of commandline switches for turning
given bits of debug code on or off, but for one-off development
purposes I find it is usually much easier and to the point to insert
code like

					bytevector =	case (posixlib::getenv "XSOCKET_BLOCK")
							    #
							    NULL =>	receive_vector_nonblocking (socket, remaining_bytes_to_read);		# This currently works.        See note [1] at bottom of file.
							    _	 =>	sok::receive_vector (socket, remaining_bytes_to_read);			# What we'd like to be doing.  Restored as an experiment 2012-12-03 CrT.  Still hangs, without or without socket redirection.
							esac;

which makes the old vs new behaviors conditional on an environment
variable.

This avoids messing with a big compile-switch infrastructure.

It also avoids the messy need to get a new commandline switch in
every script or makefile or whatever that is affected -- the
evironment is automatically inherited down through makefile
hierarchies and script invocations etc.  Just do

    setenv XSOCKET_BLOCK 1

to trigger the new compiler behavior and then

    unsetenv XSOCKET_BLOCK

to return to the original compiler behavior. No muss, no fuss.

This approach is enormously better than making a change which
breaks the compiler and then having to back out the change so
that you can get a working compiler with which to compile another
version of the fix etc -- if the new code doesn't work, a simple
"unsetenv XSOCKET_BLOCK" gets you back on the air instantly.
