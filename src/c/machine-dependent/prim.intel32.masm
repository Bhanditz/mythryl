// prim.intel32.masm (MS assembler)
//
// THIS FILE HAS NOT BEEN USED IN YEARS AND SHOULD PROBABLY BE DELETED.
//  prim.intel32.asm is the file used in active development.
//                       -- 2012-10-10 CrT
//
// This file contains asmcoded functions callable directly
// from Mythryl via the runtime::asm API defined in
//
//     src/lib/core/init/runtime.api
//
// These assembly code functions may then request services from
// from the C level by passing one of the request codes defined in
//
//     src/c/h/asm-to-c-request-codes.h
//
// to
//
//     src/c/main/run-mythryl-code-and-runtime-eventloop.c
//
// which then dispatches on them to various fns throughout the C runtime.
//
// derived from prim.intel32.asm
// derived from I386.prim.s, by Mark Leone (mleone@cs.cmu.edu)
//
// new version derived from Lal George's completely rewritten
// prim.intel32.asm, by Matthias Blume (blume@cs.uchicago.edu)

//                         "Real programmers can write assembly code in any language.   :-)"
//                                  --Larry Wall in  <8571@jpl-devvax.JPL.NASA.GOV>
//

#include "runtime-base.h"
#include "asm-base.h"
#include "runtime-values.h"
#include "heap-tags.h"
#include "asm-to-c-request-codes.h"
#include "reg-mask.h"
#include "runtime-configuration.h"

// The 386 registers are used as follows:
//
// EAX - temp1 (see the code generator, intel32/intel32.pkg)
// EBX - misc0
// ECX - misc1
// EDX - misc2
// ESI - standard fate (fate, see src/c/h/runtime-base.h)
// EBP - standard argument (argument)
// EDI - free space pointer (heap_allocation_pointer)
// ESP - stack pointer
// EIP - program counter (program_counter)



// Registers (see intel32/intel32.pkg):
//
#define temp			REG(eax)
#define misc0			REG(ebx)
#define misc1			REG(ecx)
#define misc2			REG(edx)
#define stdfate			REG(esi)					// Needs to match   stdfate		     in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg
#define stdarg			REG(ebp)					// Needs to match   stdarg		     in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define heap_allocation_pointer	REG(edi)					// We allocate ram just by advancing this pointer.  We use this very heavily -- every 10 instructions or so.
										// Needs to match   heap_allocation_pointer  in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define stackptr		REG(esp)					// Needs to match   stackptr		     in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg


// Other reg uses:
//
#define creturn 	REG(eax)

#define REGOFF(o,r)	IND_DW_OFF(r,o)

// Stack frame:
//
#define tempmem			REGOFF(0,REG(esp))
#define base_pointer		REGOFF(4,REG(esp))				// Needs to match   base_pointer				in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg
#define exnfate			REGOFF(8,REG(esp))				// Needs to match   exception_handler_register			in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define heap_allocation_limit	REGOFF(12,REG(esp))				// heapcleaner gets run when heap_allocation_pointer reaches this point.
										// Needs to match   heap_allocation_limit			in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define program_counter		REGOFF(16,REG(esp))				// Needs?to match   heapcleaner_link				in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg
#define unused_1		REGOFF(20,REG(esp))

#define heap_changelog_ptr	REGOFF(24,REG(esp))				// Every (pointer) update to the heap gets logged to this heap-allocated cons-cell list.
										// (The heapcleaner scans this list to detect intergenerational pointers.)
										// Needs to match   heap_changelog_pointer			in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define current_thread_ptr	REGOFF(28,REG(esp))				// Needs to match   current_thread_ptr				in   src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

#define run_heapcleaner_ptr	REGOFF(32,REG(esp))				// Needs to match run_heapcleaner__offset			in  src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg
										// This ptr is used to invoke the heapcleaner by code generated in   src/lib/compiler/back/low/main/nextcode/emit-treecode-heapcleaner-calls-g.pkg
										// This ptr is set by asm_run_mythryl_task (below) to point to call_heapcleaner_asm (below) which returns a REQUEST_HEAPCLEANING to
										// run_mythryl_task_and_runtime_eventloop__may_heapclean ()	in   src/c/main/run-mythryl-code-and-runtime-eventloop.c
										// which will call   clean_heap	()				in   src/c/heapcleaner/call-heapcleaner.c

#define unused_2		REGOFF(36,REG(esp))
#define eaxSpill		REGOFF(40,REG(esp)) // eax=0
#define	ecxSpill		REGOFF(44,REG(esp)) // ecx=1
#define	edxSpill		REGOFF(48,REG(esp)) // edx=2
#define	ebxSpill		REGOFF(52,REG(esp)) // ebx=3
#define	espSpill		REGOFF(56,REG(esp)) // esp=4
#define	ebpSpill		REGOFF(60,REG(esp)) // ebp=5
#define	esiSpill		REGOFF(64,REG(esp)) // esi=6
#define	ediSpill		REGOFF(68,REG(esp)) // edi=7
#define stdlink			REGOFF(72,REG(esp))
#define	stdclos			REGOFF(76,REG(esp))
	
#define reqsave		REGOFF(504,ESP)						// I don't understand the layout of the 8192-byte stackframe, but we use this slot only briefly right before popping it, so this should be safe. -- 2012-10-10 CrT

#define task_offset 176								// 			Must    match   task_offset            in   src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg
#define task_ptr	REGOFF(task_offset,REG(esp))
#define freg8           184							// doubleword aligned
#define	freg9           192
#define freg31          368							// 152 + (31-8)*8 
#define	fpTempMem	376							// freg31 + 8
#define SpillAreaStart	512							// Starting offset.	Must    match   initial_spill_offset   in   src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg
#define LIB7_FRAME_SIZE	(8192)							// 			Must(?) match   spill_area_size        in   src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg

#define	via

.386
.MODEL FLAT

	DATA
	ALIGN4

	GLOBAL(CSYM(LIB7_intel32Frame))
WORD32(CSYM(LIB7_intel32Frame),0) // Point to the Mythryl frame (gives C access to heap_allocation_limit)

WORD32(SavedSP,0)      // Value of stack pointer to restore.
	
#include "task-and-hostthread-struct-field-offsets--autogenerated.h"	// This file is generated by src/c/config/generate-task-and-hostthread-struct-field-offsets-h.c

// 386 function call conventions:  
//  [true for gcc and dynix3 cc; untested for others]
//
// 	Caller save registers: eax, ecx, edx
// 	Callee save registers: ebx, esi, edi, and ebp. 
// 	Floating point state is caller-save.
// 	Arguments passed on stack.  Rightmost argument pushed first.
// 	Word-sized result returned in %eax.


#define cresult	REG(eax)

CALLEE_SAVE_M MACRO
	PUSHL	REG(ebx)
	PUSHL	REG(esi)
	PUSHL	REG(edi)
	PUSHL	REG(ebp)	
ENDM
#define CALLEE_SAVE CALLEE_SAVE_M

CALLEE_RESTORE_M MACRO
	POPL	REG(ebp)
	POPL	REG(edi)
	POPL	REG(esi)
	POPL	REG(ebx)
ENDM 
#define CALLEE_RESTORE CALLEE_RESTORE_M

// MOVE_FROM_VIA_TO copies one memory location to another,
// using a specified temporary.
//
EXCHANGE_M MACRO src,tmp,dest
	MOVL	(src, tmp)
	MOVL	(tmp, dest)
ENDM
#define MOVE_FROM_VIA_TO(a,b,c) EXCHANGE_M a, b, c

CONTINUE_M MACRO
	JMP     via stdfate
ENDM
#define CONTINUE CONTINUE_M

CHECKLIMIT_M MACRO
 ANON_LAB:
	MOVE_FROM_VIA_TO(stdlink, temp, program_counter)
	CMPL(heap_allocation_limit, heap_allocation_pointer)
	jb	FLAB_ANON
	CALL	CSYM(call_heapcleaner_asm)
	JMP	BLAB_ANON
 ANON_LAB:
ENDM
#define CHECKLIMIT CHECKLIMIT_M

ENTRY_M MACRO id
	GLOBAL(CSYM(&id))
	LABEL(CSYM(&id))
ENDM
#define ENTRY(id) ENTRY_M id

LIB7_CODE_HDR_M MACRO name
	GLOBAL(CSYM(&name))
	ALIGN4
	LABEL(CSYM(&name))
ENDM
#define MYTHRYL_CODE_HEADER(name) LIB7_CODE_HDR_M name


// ********************************************************************
	TEXT
	ALIGN4

// The return fate for the Mythryl signal handler.
//
MYTHRYL_CODE_HEADER(return_from_signal_handler_asm)
	MOVL	(IMMED(HEAP_VOID),stdlink)
	MOVL	(IMMED(HEAP_VOID),stdclos)
	MOVL	(IMMED(HEAP_VOID),program_counter)
	MOVL	(IMMED(REQUEST_RETURN_FROM_SIGNAL_HANDLER),temp)
	JMP	CSYM(set_request)

// Here we pick up execution from where we were
// before we went off to handle a POSIX signal:
// This is a standard two-argument function, thus the closure is in fate.
//
ENTRY( resume_after_handling_signal )
	MOVL	(IMMED(REQUEST_RESUME_AFTER_RUNNING_SIGNAL_HANDLER),temp)
	JMP	CSYM(set_request)

// return_from_software_generated_periodic_event_handler_asm:
// The return fate for the Mythryl software
// generated periodic event handler.
//
MYTHRYL_CODE_HEADER( return_from_software_generated_periodic_event_handler_asm )
	MOVL	(IMMED(HEAP_VOID),stdlink)
	MOVL	(IMMED(HEAP_VOID),stdclos)
	MOVL	(IMMED(HEAP_VOID),program_counter)
	MOVL	(IMMED(REQUEST_RETURN_FROM_SOFTWARE_GENERATED_PERIODIC_EVENT_HANDLER),temp)
	JMP	CSYM(set_request)
	
// Here we pick up execution from where we were
// before we went off to handle a software generated
// periodic event:
//
ENTRY(resume_after_handling_software_generated_periodic_event)
	MOVL	(IMMED(REQUEST_RESUME_AFTER_RUNNING_SOFTWARE_GENERATED_PERIODIC_EVENT_HANDLER),temp)
	JMP	CSYM(set_request)


// Exception handler for Mythryl functions called from C.
// We delegate uncaught-exception handling to
//     handle_uncaught_exception  in  src/c/main/runtime-exception-stuff.c
// We get invoked courtesy of being stuffed into
//     task->exception_fate
// in  src/c/main/run-mythryl-code-and-runtime-eventloop.c
// and src/c/heapcleaner/import-heap.c
//
MYTHRYL_CODE_HEADER(handle_uncaught_exception_closure_asm)
	MOVE_FROM_VIA_TO(stdlink,temp,program_counter)
	MOVL	(IMMED(REQUEST_HANDLE_UNCAUGHT_EXCEPTION),temp)
	JMP	CSYM(set_request)



// Here to return to                                     run_mythryl_task_and_runtime_eventloop__may_heapclean	in   src/c/main/run-mythryl-code-and-runtime-eventloop.c
// and thence to whoever called it.  If the caller was   load_and_run_heap_image__may_heapclean			in   src/c/main/load-and-run-heap-image.c
// this will return us to                                main                                   		in   src/c/main/runtime-main.c
// which will print stats
// and exit(), but                   if the caller was   no_args_entry or some_args_entry       		in   src/c/lib/ccalls/ccalls-fns.c
// then we may have some scenario
// where C calls Mythryl which calls C which ...
// and we may just be unwinding one level.
//    The latter can only happen with the
// help of the src/lib/c-glue-old/ stuff,
// which is currently non-operational.
//
// run_mythryl_task_and_runtime_eventloop__may_heapclean is also called by
//     src/c/hostthread/hostthread-on-posix-threads.c
//     src/c/hostthread/hostthread-on-sgi.c
//     src/c/hostthread/hostthread-on-solaris.c
// but that stuff is also non-operational (I think) and
// we're not supposed to return to caller in those cases.
// 
// We get slotted into task->fate by   save_c_state				in   src/c/main/runtime-state.c 
// and by                              run_mythryl_function_may_heapclean	in   src/c/main/run-mythryl-code-and-runtime-eventloop.c
//
MYTHRYL_CODE_HEADER(return_to_c_level_asm)
	MOVL	(IMMED(HEAP_VOID),stdlink)
	MOVL	(IMMED(HEAP_VOID),stdclos)
	MOVL	(IMMED(HEAP_VOID),program_counter)
	MOVL	(IMMED(REQUEST_RETURN_TO_C_LEVEL),temp)
	JMP	CSYM(set_request)



// Request a fault.  The floating point coprocessor must be reset
// (thus trashing the FP registers) since we don't know whether a 
// value has been pushed into the temporary "register".	 This is OK 
// because no floating point registers will be live at the start of 
// the exception handler.
//
ENTRY(request_fault)
	CALL	CSYM(FPEEnable)
	MOVE_FROM_VIA_TO(stdlink,temp,program_counter)
	MOVL	(IMMED(REQUEST_FAULT),temp)
	JMP	CSYM(set_request)

// find_cfun : (String, String) -> Cfunction			// (library-name, function-name) -> Cfunction -- see comments in   src/c/heapcleaner/mythryl-callable-cfun-hashtable.c
//
// We get called (only) from:
//
//     src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg	
//
MYTHRYL_CODE_HEADER(find_cfun_asm)
	CHECKLIMIT
	MOVL	(IMMED(REQUEST_FIND_CFUN),temp)
	JMP	CSYM(set_request)

MYTHRYL_CODE_HEADER(make_package_literals_via_bytecode_interpreter_asm)
	CHECKLIMIT
	MOVL	(IMMED(REQUEST_MAKE_PACKAGE_LITERALS_VIA_BYTECODE_INTERPRETER),temp)
	JMP	CSYM(set_request)



// Invoke a C-level function (obtained from find_cfun above) from the Mythryl level.
// We get called (only) from
//
//     src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
//
MYTHRYL_CODE_HEADER(call_cfun_asm)
	CHECKLIMIT
	MOVL	(IMMED(REQUEST_CALL_CFUN),temp)
	JMP	CSYM(set_request)

// This is the entry point called from Mythryl to start a heapcleaning.
//						Allen 6/5/1998
ENTRY(call_heapcleaner_asm)
	POPL	program_counter
	MOVL	(IMMED(REQUEST_HEAPCLEANING),temp)

	// FALL INTO set_request
	
ENTRY(set_request)
	// valid request in temp.
	// We'll save it to stack, then use temp to hold task_ptr. 
	// Save registers
	MOVL	(temp, reqsave)
	MOVL	(task_ptr, temp)
	MOVL	(heap_allocation_pointer,   REGOFF( heap_allocation_pointer_byte_offset_in_task_struct, temp ))
	MOVL	(stdarg,		    REGOFF(                argument_byte_offset_in_task_struct, temp ))
	MOVL	(stdfate,		    REGOFF(                    fate_byte_offset_in_task_struct, temp ))
	
#define	temp2 heap_allocation_pointer
	// Note that we have left Mythryl code:
	//
	MOVL	(REGOFF( hostthread_byte_offset_in_task_struct, temp), temp2)
	MOVL	(IMMED(0), REGOFF( executing_mythryl_code_byte_offset_in_hostthread_struct, temp2 ))
	
	MOVL	(misc0, REGOFF( callee_saved_register_0_byte_offset_in_task_struct, temp ))
	MOVL	(misc1, REGOFF( callee_saved_register_1_byte_offset_in_task_struct, temp ))
	MOVL	(misc2, REGOFF( callee_saved_register_2_byte_offset_in_task_struct, temp ))

	// Save vregs before stack frame is popped. (?? - Blume)
	//
	MOVE_FROM_VIA_TO(heap_allocation_limit,	temp2, REGOFF( heap_allocation_limit_byte_offset_in_task_struct, temp ))
	MOVE_FROM_VIA_TO(exnfate,		temp2, REGOFF(        exception_fate_byte_offset_in_task_struct, temp )) 
	MOVE_FROM_VIA_TO(stdclos,		temp2, REGOFF(       current_closure_byte_offset_in_task_struct, temp ))
	MOVE_FROM_VIA_TO(stdlink,		temp2, REGOFF(         link_register_byte_offset_in_task_struct, temp ))
	MOVE_FROM_VIA_TO(program_counter,	temp2, REGOFF(       program_counter_byte_offset_in_task_struct, temp ))
	MOVE_FROM_VIA_TO(heap_changelog_ptr,	temp2, REGOFF(        heap_changelog_byte_offset_in_task_struct, temp ))
	MOVE_FROM_VIA_TO(current_thread_ptr,	temp2, REGOFF(        current_thread_byte_offset_in_task_struct, temp ))
#undef	temp2	
	
	// Return val of function is request code:
	//
	MOVL	(reqsave,creturn)

	// Pop the stack frame and return to  run_mythryl_task_and_runtime_eventloop__may_heapclean()  in  src/c/main/run-mythryl-code-and-runtime-eventloop.c
        //
	MOVL	(SavedSP, REG(esp))
	CALLEE_RESTORE
	RET

	TEXT
	ALIGN4

ENTRY(true_asm_run_mythryl_task)
	MOVL	(REGOFF(4,REG(esp)), temp)			// Get argument (Task*).
	CALLEE_SAVE

	MOVL	(REG(esp), SavedSP)				// Save stack pointer.

	// Align on 8 byte boundary.
	// We assume that the stack starts out being
	// at least word aligned, but who knows:

	ORL	(IMMED(4),REG(esp))
	SUBL	(IMMED(4),REG(esp))

#define temp2 REG(ebx)
	// Allocate and initialize the Mythryl stack frame:
	SUBL(IMMED(LIB7_FRAME_SIZE), REG(esp))
	MOVE_FROM_VIA_TO(REGOFF(          exception_fate_byte_offset_in_task_struct, temp), temp2, exnfate)
	MOVE_FROM_VIA_TO(REGOFF(   heap_allocation_limit_byte_offset_in_task_struct, temp), temp2, heap_allocation_limit)
	MOVE_FROM_VIA_TO(REGOFF(          heap_changelog_byte_offset_in_task_struct, temp), temp2, heap_changelog_ptr)
	MOVE_FROM_VIA_TO(REGOFF(                  current_thread_byte_offset_in_task_struct, temp), temp2, current_thread_ptr)
	LEA(CSYM(call_heapcleaner_asm),temp2)
	MOVL(temp2, run_heapcleaner_ptr)
	MOVL(temp,task_ptr)

	// vregs:
	MOVE_FROM_VIA_TO(REGOFF(           link_register_byte_offset_in_task_struct, temp), temp2,stdlink)
	MOVE_FROM_VIA_TO(REGOFF(         current_closure_byte_offset_in_task_struct, temp), temp2,stdclos)

	// program_counter:
	MOVE	(REGOFF(         program_counter_byte_offset_in_task_struct, temp), temp2,program_counter )
#undef temp2

	// Load Mythryl registers:
	//
	MOVL(REGOFF(             heap_allocation_pointer_byte_offset_in_task_struct, temp), heap_allocation_pointer )
	MOVL(REGOFF(                    fate_byte_offset_in_task_struct, temp), stdfate  )
	MOVL(REGOFF(                argument_byte_offset_in_task_struct, temp), stdarg   )
	MOVL(REGOFF( callee_saved_register_0_byte_offset_in_task_struct, temp), misc0    )
	MOVL(REGOFF( callee_saved_register_1_byte_offset_in_task_struct, temp), misc1    )
	MOVL(REGOFF( callee_saved_register_2_byte_offset_in_task_struct, temp), misc2    )

	MOVL(REG(esp),CSYM(LIB7_intel32Frame))							// Frame ptr for signal handler.

	PUSHL	misc2										// Free up a register.
	PUSHL	temp										// Save task temporarily.

#define tmpreg misc2
	// Note that we're entering Mythryl:
	//
	MOVL	(REGOFF(hostthread_byte_offset_in_task_struct,temp),temp)				// temp is now hostthread.
#define hostthread temp
	MOVL	(IMMED(1),REGOFF(executing_mythryl_code_byte_offset_in_hostthread_struct,hostthread))

	// Handle signals:
	MOVL	  (REGOFF(all_posix_signals_seen_count_byte_offset_in_hostthread_struct,hostthread),tmpreg)
	CMPL	  (REGOFF(all_posix_signals_done_count_byte_offset_in_hostthread_struct,hostthread),tmpreg)
#undef tmpreg

	JNE	pending

restore_and_run_mythryl_code:
	POPL	temp										// Restore temp to task
	POPL	misc2

run_mythryl_code:
	CMPL	(heap_allocation_limit,heap_allocation_pointer)
	JMP	(REGOFF(program_counter_byte_offset_in_task_struct,temp))			// Jump to Mythryl code.

pending:
	CMPL	(IMMED(0),REGOFF(mythryl_handler_for_posix_signal_is_running_byte_offset_in_hostthread_struct,hostthread))
	JNE	restore_and_run_mythryl_code

	MOVL	(IMMED(1),REGOFF(interprocess_signal_pending_byte_offset_in_hostthread_struct,hostthread))

	// Must restore here because heap_allocation_limit is on stack:
	POPL	temp										// Restore temp to task.
	POPL	misc2

	MOVL	(heap_allocation_pointer,heap_allocation_limit)
	JMP	run_mythryl_code
#undef hostthread


// ----------------------------------------------------------------------
// make_typeagnostic_rw_vector : (Int, X) -> Rw_Vector(X)
// Allocate and initialize a new rw_vector.
// This can trigger a cleaning.
//

MYTHRYL_CODE_HEADER(make_typeagnostic_rw_vector_asm)
	CHECKLIMIT
	MOVL	(REGOFF(0,stdarg),temp)					// temp := length in words
	SARL	(IMMED(1),temp)						// temp := length untagged
	CMPL	(IMMED(MAX_AGEGROUP0_ALLOCATION_SIZE_IN_WORDS),temp)	// small chunk?
	JGE	FLAB(MAKE_TYPEAGNOSTIC_RW_VECTOR_A_LARGE)

#define temp1 misc0
#define temp2 misc1
	PUSHL	misc0							// Free up misc0.
	PUSHL	misc1							// Free up misc1.

	MOVL	(temp,temp1)
	SALL	(IMMED(TAGWORD_LENGTH_FIELD_SHIFT),temp1)		// Build tagword.
	ORL	(IMMED(MAKE_BTAG(RW_VECTOR_DATA_BTAG)),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))				// Store tagword.
	ADDL	(IMMED(4),heap_allocation_pointer)					// heap_allocation_pointer++
	MOVL	(heap_allocation_pointer,temp1)					// temp1 := array data ptr
	MOVL	(REGOFF(4,stdarg),temp2)				// temp2 := initial value
ANON_LAB:
	MOVL	(temp2,REGOFF(0,heap_allocation_pointer))				// Initialize vector
	ADDL	(IMMED(4),heap_allocation_pointer)
	SUBL	(IMMED(1),temp)
	JNE	BLAB_ANON

	// Allocate Rw_Vector header:
	//
	MOVL	(IMMED(TYPEAGNOSTIC_RW_VECTOR_TAGWORD),REGOFF(0,heap_allocation_pointer))		// Tagword.
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(REGOFF(0,stdarg),temp)					// temp := length
	MOVL	(heap_allocation_pointer, stdarg)					// result := header addr
	MOVL	(temp1, REGOFF(0,heap_allocation_pointer))				// Store pointer to data.
	MOVL	(temp, REGOFF(4,heap_allocation_pointer))				// Store length
	ADDL	(IMMED(8),heap_allocation_pointer)

	POPL	misc1
	POPL	misc0
	CONTINUE
#undef temp1
#undef temp2

LABEL(MAKE_TYPEAGNOSTIC_RW_VECTOR_A_LARGE)
	MOVE_FROM_VIA_TO(stdlink,temp,program_counter)
	MOVL	(IMMED(REQUEST_MAKE_TYPEAGNOSTIC_RW_VECTOR),temp)
	JMP	CSYM(set_request)


// make_float64_rw_vector:  Int -> Float64_Rw_Vector
//
MYTHRYL_CODE_HEADER(make_float64_rw_vector_asm)
	CHECKLIMIT
#define temp1 misc0
	PUSHL	misc0								// Free temp1.
	MOVL	(stdarg,temp)							// temp := length
	SARL	(IMMED(1),temp)							// temp := untagged length
	SHLL	(IMMED(1),temp)							// temp := length in words
	CMPL	(IMMED(MAX_AGEGROUP0_ALLOCATION_SIZE_IN_WORDS),temp)
	JGE	FLAB_ANON

	ORL	(IMMED(4),heap_allocation_pointer)						// Align heap_allocation_pointer

	// Allocate the data chunk:
	//
	MOVL	(temp,temp1)
	SHLL	(IMMED(TAGWORD_LENGTH_FIELD_SHIFT),temp1)			// temp1 := tagword
	ORL	(IMMED(MAKE_BTAG(EIGHT_BYTE_ALIGNED_NONPOINTER_DATA_BTAG)),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))					// store tagword
	ADDL	(IMMED(4),heap_allocation_pointer)						// heap_allocation_pointer++
	MOVL	(heap_allocation_pointer,temp1)						// temp1 := data chunk
	SHLL	(IMMED(2),temp)							// temp := length in bytes
	ADDL	(temp,heap_allocation_pointer)							// heap_allocation_pointer += length

	// Allocate the header chunk:
        //
	MOVL	(IMMED(FLOAT64_RW_VECTOR_TAGWORD),REGOFF(0,heap_allocation_pointer))
	ADDL	(IMMED(4),heap_allocation_pointer)						// heap_allocation_pointer++
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))					// header data
	MOVL	(stdarg,REGOFF(4,heap_allocation_pointer))					// header length
	MOVL	(heap_allocation_pointer,stdarg)						// stdarg := header chunk
	ADDL	(IMMED(8),heap_allocation_pointer)						// heap_allocation_pointer += 2

	POPL	misc0
	CONTINUE

ANON_LAB:
	POPL	misc0
	MOVE_FROM_VIA_TO(stdlink,temp,program_counter)
	MOVL	(IMMED(REQUEST_ALLOCATE_VECTOR_OF_EIGHT_BYTE_FLOATS),temp)
	JMP	CSYM(set_request)
#undef temp1


// make_unt8_rw_vector:  Int -> Unt8_Rw_Vector
//
MYTHRYL_CODE_HEADER(make_unt8_rw_vector_asm)
	CHECKLIMIT
	MOVL	(stdarg,temp)							// temp is tagged length.
	SARL	(IMMED(1),temp)							// temp is untagged length.
	ADDL	(IMMED(3),temp)
	SARL	(IMMED(2),temp)							// temp is length in words.
	CMPL	(IMMED(MAX_AGEGROUP0_ALLOCATION_SIZE_IN_WORDS),temp)
	JMP	FLAB_ANON
	JGE	FLAB_ANON							// XXXXX

#define temp1 misc0
	PUSHL	misc0

	// Allocate the data chunk:
	//
	MOVL	(temp,temp1)
	SHLL	(IMMED(TAGWORD_LENGTH_FIELD_SHIFT),temp1)
	ORL	(IMMED(MAKE_BTAG(FOUR_BYTE_ALIGNED_NONPOINTER_DATA_BTAG)),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))					// Store tagword.
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(heap_allocation_pointer,temp1)						// temp1 is data chunk.
	SHLL	(IMMED(2),temp)							// temp is size in bytes.
	ADDL	(temp,heap_allocation_pointer)							// heap_allocation_pointer += length.

	// Allocate the header chunk:
	//
	MOVL	(IMMED(UNT8_RW_VECTOR_TAGWORD),REGOFF(0,heap_allocation_pointer))
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))
	MOVL	(stdarg,REGOFF(4,heap_allocation_pointer))
	MOVL	(heap_allocation_pointer,stdarg)						// stdarg := header
	ADDL	(IMMED(8),heap_allocation_pointer)						// heap_allocation_pointer += 2
	POPL	misc0
	CONTINUE
#undef temp1

ANON_LAB:
	MOVE_FROM_VIA_TO(stdlink,temp,program_counter)
	MOVL	(IMMED(REQUEST_ALLOCATE_BYTE_VECTOR),temp)
	JMP	CSYM(set_request)

	
// make_string:  Int -> String
//
MYTHRYL_CODE_HEADER(make_string_asm)
	CHECKLIMIT
	MOVL	(stdarg,temp)
	SARL	(IMMED(1),temp)							// untag
	ADDL	(IMMED(4),temp)							// 3 + extra byte
	SARL	(IMMED(2),temp)							// Length-in-words.
	CMPL	(IMMED(MAX_AGEGROUP0_ALLOCATION_SIZE_IN_WORDS),temp)
	JGE	FLAB_ANON

	PUSHL	misc0
#define temp1 misc0

	MOVL	(temp,temp1)
	SHLL	(IMMED(TAGWORD_LENGTH_FIELD_SHIFT),temp1)
	ORL	(IMMED(MAKE_BTAG(FOUR_BYTE_ALIGNED_NONPOINTER_DATA_BTAG)),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))					// Store tagword.
	ADDL	(IMMED(4),heap_allocation_pointer)

	MOVL	(heap_allocation_pointer,temp1)						// temp1 is data chunk.
	SHLL	(IMMED(2),temp)							// bytes len.
	ADDL	(temp,heap_allocation_pointer)							// heap_allocation_pointer += length
	MOVL	(IMMED(0),REGOFF((-4),heap_allocation_pointer))				// Zero out last word.

	// Allocate header chunk:
	//
	MOVL	(IMMED(STRING_TAGWORD),temp)					// Header tagword.
	MOVL	(temp,REGOFF(0,heap_allocation_pointer))
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))					// Header data.
	MOVL	(stdarg,REGOFF(4,heap_allocation_pointer))					// Header length.
	MOVL	(heap_allocation_pointer, stdarg)						// stdarg is header chunk.
	ADDL	(IMMED(8),heap_allocation_pointer)						// heap_allocation_pointer += 2

	POPL	misc0
#undef temp1
	CONTINUE

ANON_LAB:
	MOVE_FROM_VIA_TO(stdlink, temp, program_counter)
	MOVL	(IMMED(REQUEST_ALLOCATE_STRING),temp)
	JMP	CSYM(set_request)


// make_vector_asm:  (Int, List(X)) -> Vector(X)			// (length_in_slots, initializer_list) -> result_vector
//
//	Create a vector and initialize from given list.
//
//	Caller guarantees that length_in_slots is
//      positive and also the length of the list.
//	For a sample client call see
//          fun vector
//	in
//	    src/lib/core/init/pervasive.pkg
//
MYTHRYL_CODE_HEADER(make_vector_asm)
	CHECKLIMIT
	PUSHL	misc0
	PUSHL	misc1
#define temp1 misc0
#define temp2 misc1
	MOVL	(REGOFF(0,stdarg),temp)					// len tagged
	MOVL	(temp,temp1)
	SARL	(IMMED(1),temp1)					// untag
	CMPL	(IMMED(MAX_AGEGROUP0_ALLOCATION_SIZE_IN_WORDS),temp1)
	JGE	FLAB(MAKE_VECTOR_A_LARGE)

	SHLL	(IMMED(TAGWORD_LENGTH_FIELD_SHIFT),temp1)
	ORL	(IMMED(MAKE_BTAG(RO_VECTOR_DATA_BTAG)),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(REGOFF(4,stdarg),temp1)				// temp1 is list
	MOVL	(heap_allocation_pointer,stdarg)					// stdarg is vector

ANON_LAB:
	MOVL	(REGOFF(0,temp1),temp2)					// hd
	MOVL	(temp2,REGOFF(0,heap_allocation_pointer))				// store into vector
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(REGOFF(4,temp1),temp1)					// tl
	CMPL	(IMMED(HEAP_NIL),temp1)					// isNull
	JNE	BLAB_ANON

	// Allocate header chunk:
	//
	MOVL	(IMMED(TYPEAGNOSTIC_RO_VECTOR_TAGWORD),temp1)
	MOVL	(temp1,REGOFF(0,heap_allocation_pointer))
	ADDL	(IMMED(4),heap_allocation_pointer)
	MOVL	(stdarg,REGOFF(0,heap_allocation_pointer))				// data
	MOVL	(temp,REGOFF(4,heap_allocation_pointer))				// len
	MOVL	(heap_allocation_pointer,stdarg)					// result
	ADDL	(IMMED(8),heap_allocation_pointer)					// heap_allocation_pointer += 2

	POPL	misc1
	POPL	misc0
	CONTINUE
	
LABEL(MAKE_VECTOR_A_LARGE)
	POPL	misc1
	POPL	misc0
	MOVE_FROM_VIA_TO(stdlink, temp, program_counter)
	MOVL	(IMMED(REQUEST_MAKE_TYPEAGNOSTIC_RO_VECTOR),temp)
	JMP	CSYM(set_request)
#undef temp1
#undef temp2
	
	
// try_lock: Spin_Lock -> Bool. 
// low-level test-and-set style primitive for mutual-exclusion among 
// processors.	For now, we only provide a uni-processor trivial version.
//
MYTHRYL_CODE_HEADER(try_lock_asm)
#if (MAX_PROCS > 1)
#  error multiple processors not supported
#else // (MAX_PROCS == 1)
	MOVL	((stdarg), temp)					// Get old value of lock.
	MOVL	(IMMED(1), (stdarg))					// Set the lock to HEAP_FALSE.
	MOVL	(temp, stdarg)						// Return old value of lock.
	CONTINUE
#endif

// unlock:  Release a spin lock.
//
MYTHRYL_CODE_HEADER(unlock_asm)
#if (MAX_PROCS > 1)
#  error multiple processors not supported
#else // (MAX_PROCS == 1)
	MOVL	(IMMED(3), (stdarg))					// Store HEAP_TRUE into lock.
	MOVL	(IMMED(1), stdarg)					// Return Void.
	CONTINUE
#endif


// ********************* Floating point functions. *********************

#define FPOP	fstp FP_REG(st)		// Pop the floating point register stack.

// Temporary storage for the old and new floating point control
// word.  We don't use the stack to for this, since doing so would 
// change the offsets of the pseudo-registers.
	DATA
	ALIGN4
GLOBAL(old_controlwd)
WORD16(old_controlwd,0)
GLOBAL(new_controlwd)
WORD16(new_controlwd,0)

	TEXT
	ALIGN4


// Initialize the 80387 floating point coprocessor.  First, the floating
// point control word is initialized (undefined fields are left
// unchanged).	Rounding control is set to "nearest" (although floor_a
// needs "toward negative infinity").  Precision control is set to
// "double".  The precision, underflow, denormal 
// overflow, zero divide, and invalid operation exceptions
// are masked.  Next, seven of the eight available entries on the
// floating point register stack are claimed (see intel32/intel32.pkg).
//
// NB: This cannot trash any registers because it's called from request_fault.
//
ENTRY(FPEEnable)
	finit
	// Temp space.Keep stack aligned.
	SUBL	(IMMED(4), REG(esp))   
	// Store FP control word.
	fstcw	IND_W_OFF(REG(esp),0)  
	// Keep undefined fields, clear others.
	ANDW	(IMMED(HEXLIT(f0c0)), REGOFF(0,REG(esp)))
	// Set fields (see above).
	ORW	(IMMED(HEXLIT(023f)), REGOFF(0,REG(esp)))	
	fldcw	IND_W_OFF(REG(esp),0)						// Install new control word.
	ADDL	(IMMED(4), REG(esp))
	RET

ENTRY(fegetround)
      SUBL    (IMMED(4),REG(esp))						// Allocate temporary space.
      FSTCW   IND_W_OFF(REG(esp),0)						// Store fp control word.
      // Rounding mode is at bit 10 and 11.
      SARL    (IMMED(10),REGOFF(0,REG(esp))) 
      ANDL    (IMMED(3),REGOFF(0,REG(esp)))					// Mask two bits.
      MOVL    (REGOFF(0,REG(esp)),REG(eax))					// Return rounding mode.
      ADDL    (IMMED(4),REG(esp))						// Deallocate space.
      RET

ENTRY(fesetround)
      SUBL    (IMMED(4),REG(esp))						// Allocate temporary space.
      FSTCW   IND_W_OFF(REG(esp),0)						// Store fp control word.
      // Clear rounding field.
      ANDW    (IMMED(HEXLIT(f3ff)),REGOFF(0,REG(esp)))
      MOVL    (REGOFF(8,REG(esp)),REG(eax))					// New rounding mode.
      SALL    (IMMED(10),REG(eax))						// Move to right place.
      ORL     (REG(eax),REGOFF(0,REG(esp)))					// New control word.
      FLDCW   IND_W_OFF(REG(esp),0)						// Load new control word.
      ADDL    (IMMED(4),REG(esp))						// Deallocate space.
      RET


// floor:  Float -> Int
// Return the nearest integer that is less or equal to the argument.
// Caller's responsibility to make sure argument is in range.

MYTHRYL_CODE_HEADER(floor_asm)
	// Get FP control word.
	fstcw	old_controlwd
	MOVW	(old_controlwd,REG(ax))
	// Clear rounding field.
	ANDW	(IMMED(HEXLIT(f3ff)), REG(ax))
	// Round towards neg. infinity.
	ORW	(IMMED(HEXLIT(0400)), REG(ax))
	MOVW	(REG(ax), new_controlwd)
	fldcw	new_controlwd							// Install new control word.

	fld	REAL8 PTR 0 [stdarg]
	SUBL	(IMMED(4),REG(esp))
	FISTPL	REGOFF(0,REG(esp))
	POPL	stdarg
	SALL	(IMMED(1),stdarg)
	INCL	stdarg

	FLDCW	old_controlwd
	CONTINUE


// logb:  Float -> Int
// Extract the unbiased exponent pointed to by stdarg.
// Note: Using fxtract, and fistl does not work for inf's and nan's.
//
MYTHRYL_CODE_HEADER(logb_asm)
	MOVL    (REGOFF(4,stdarg),temp)						// msb for little endian arch
	SARL	(IMMED(20),temp)						// Throw out 20 bits.
	ANDL	(IMMED(HEXLIT(7ff)),temp)					// Clear all but 11 low bits.
	SUBL	(IMMED(1023),temp)						// Unbias.
	SALL	(IMMED(1),temp)							// Room for tag bit.
	ADDL	(IMMED(1),temp)							// tag bit.
	MOVL	(temp,stdarg)
	CONTINUE


// scalb : (Float, Int) -> Float
// Scale the first argument by 2 raised to the second argument.
// Raise Float("underflow") or Float("overflow") as appropriate.
// NB: We assume the first floating point "register" is
// caller-save, so we can use it here (see intel32/intel32.pkg).
//
MYTHRYL_CODE_HEADER(scalb_asm)
	CHECKLIMIT
	PUSHL	REGOFF(4,stdarg)						// Get copy of scalar.
	SARL	(IMMED(1),REGOFF(0,REG(esp)))					// Untag it.
	FILDL	REGOFF(0,REG(esp))						// Load it ...
/*	fstp	FP_REG(st)(1) */						// ... into 1st FP reg.
/*	ADDL	(IMMED(4), REG(esp)) */						// Discard copy of scalar.

	MOVL	(REGOFF(0,stdarg), temp)					// Get pointer to float.
	fld	REAL8 PTR 0 [temp]						// Load it into temp.

	fscale									// Multiply exponent by scalar.
	MOVL	(IMMED(FLOAT64_TAGWORD), REGOFF(0,heap_allocation_pointer))
	fstp	REAL8 PTR 4 [heap_allocation_pointer]				// Store resulting float.
	ADDL	(IMMED(4),heap_allocation_pointer)				// Allocate word for tag.
	MOVL	(heap_allocation_pointer, stdarg)				// Return a pointer to the float.
	ADDL	(IMMED(8), heap_allocation_pointer)				// Allocate room for float.
	fstp	REAL8 PTR 0 [esp]						// ??
	ADDL	(IMMED(4),REG(esp))						// Discard copy of scalar.
	CONTINUE

END


// COPYRIGHT (c) 1996 Bell Laboratories, Lucent Technologies
// Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
// released under Gnu Public Licence version 3.

