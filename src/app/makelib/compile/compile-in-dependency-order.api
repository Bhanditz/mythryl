## compile-in-dependency-order.api -- makelib dependency graph dagwalks.

# Compiled by:
#     src/app/makelib/makelib.sublib

stipulate
    package ad  =  anchor_dictionary;				# anchor_dictionary			is from   src/app/makelib/paths/anchor-dictionary.pkg
    package cf  =  compiledfile;				# compiledfile				is from   src/lib/compiler/execution/compiledfile/compiledfile.pkg
    package err =  error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package im  =  inlining_mapstack;				# inlining_mapstack			is from   src/lib/compiler/toplevel/compiler-state/inlining-mapstack.pkg
    package lg  =  inter_library_dependency_graph;		# inter_library_dependency_graph	is from   src/app/makelib/depend/inter-library-dependency-graph.pkg
    package ms  =  makelib_state;				# makelib_state				is from   src/app/makelib/main/makelib-state.pkg
    package ph  =  picklehash;					# picklehash				is from   src/lib/compiler/front/basics/map/picklehash.pkg
    package pp  =  prettyprint;					# prettyprint				is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package pu  =  unparse_junk;				# unparse_junk				is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
    package sg  =  intra_library_dependency_graph;		# intra_library_dependency_graph	is from   src/app/makelib/depend/intra-library-dependency-graph.pkg
    package sm  =  symbol_map;					# symbol_map				is from   src/app/makelib/stuff/symbol-map.pkg
    package syx =  symbolmapstack;				# symbolmapstack			is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tc  =  thawedlib_tome;				# thawedlib_tome			is from   src/app/makelib/compilable/thawedlib-tome.pkg


    # Per package table of exported symbols (functions, types...)
    # and of exported inlinable functions:
    #
    Symbol_And_Inlining_Mapstacks
         =
         { symbolmapstack:     syx::Symbolmapstack,
           inlining_mapstack:  im::Picklehash_To_Anormcode_Mapstack
         };
herein

    api Compile_In_Dependency_Order {
	#

	clear_state:  Void -> Void;                             # Clear all internal persistent state. 



        # Support for hook which notifies
        # linkage module of recompilations.
        # The linker needs to know about these so it
        # can flush stale information from its caches:
        #
        #                "You can observe a lot just by watching." -- Yogi Berra
	#
	Thawedlib_Tome_Watcher
             =
             ms::Makelib_State					# Master makelib state record. 
             ->
             tc::Thawedlib_Tome					# What is being recompiled.  
             ->
             Void; 						# Send the notification.



	Compiledfile_Sink					# Type of a function which stores away compiledfile contents:
	  =
	  { key:    tc::Thawedlib_Tome,
	    #
	    value:  { compiledfile:		cf::Compiledfile,
	              component_bytesizes:	cf::Component_Bytesizes
	            }
	  }
	  ->
	  Void;



	get_symbol_and_inlining_mapstacks:  tc::Thawedlib_Tome -> sg::Symbol_And_Inlining_Mapstacks;

	drop_stale_entries_from_compiler_map:  Void -> Void;
	evict_all:                               Void -> Void;


	compile_all_needed_sourcefiles_in_dependency_order
	   : 
	   Void
	   ->
	   sg::Tome						#  Root node of graph to traverse.	
	   ->
	   ms::Makelib_State					#  Master makelib state record.		
	   ->
	   Null_Or( sg::Symbol_And_Inlining_Mapstacks );


	compile_all_needed_libraries_in_dependency_order
	  :
	  { root_library:					lg::Inter_Library_Dependency_Graph,			# Root library for dagwalk.
	    #
	    maybe_drop_thawedlib_tome_from_linker_map:		Thawedlib_Tome_Watcher,					# Notify linker of recompiles. Normally a dummy
	    #														# or drop_thawedlib_tome_from_linker_map()   from   src/app/makelib/compile/link-in-dependency-order-g.pkg
	    set__compiledfile__for__thawedlib_tome:		Compiledfile_Sink					#  					
	  }
	  ->
	  { compile_library_catalog_and_return_symbol_and_inlining_mapstacks
		:
	        ms::Makelib_State -> Null_Or( Symbol_And_Inlining_Mapstacks ),

	    compile_all_tomes_in_library:			ms::Makelib_State -> Bool,

	    exports:						sm::Map (ms::Makelib_State -> Null_Or( Symbol_And_Inlining_Mapstacks ) )
	  };

    };
end;


## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.






##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"				 	 #
# End:									 #
##########################################################################

