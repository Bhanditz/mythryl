api Libfile_Tokens {
    Token (X,Y);
    Semantic_Value;
    api_or_pkg_exports: (X, X) -> Token (Semantic_Value,X);
    dash: (X, X) -> Token (Semantic_Value,X);
    star: (X, X) -> Token (Semantic_Value,X);
    not_t: (X, X) -> Token (Semantic_Value,X);
    or_t: (X, X) -> Token (Semantic_Value,X);
    and_t: (X, X) -> Token (Semantic_Value,X);
    tilde: (X, X) -> Token (Semantic_Value,X);
    ineqsym: ((libfile_grammar_actions::Ineqsym), X, X) -> Token (Semantic_Value,X);
    eqsym: ((libfile_grammar_actions::Eqsym), X, X) -> Token (Semantic_Value,X);
    mulsym: ((libfile_grammar_actions::Mulsym), X, X) -> Token (Semantic_Value,X);
    addsym: ((libfile_grammar_actions::Addsym), X, X) -> Token (Semantic_Value,X);
    defined: (X, X) -> Token (Semantic_Value,X);
    generic_api_t: (X, X) -> Token (Semantic_Value,X);
    generic_t: (X, X) -> Token (Semantic_Value,X);
    api_t: (X, X) -> Token (Semantic_Value,X);
    pkg_t: (X, X) -> Token (Semantic_Value,X);
    errorx: ((String), X, X) -> Token (Semantic_Value,X);
    endif: (X, X) -> Token (Semantic_Value,X);
    else_t: (X, X) -> Token (Semantic_Value,X);
    elif_t: (X, X) -> Token (Semantic_Value,X);
    if_t: (X, X) -> Token (Semantic_Value,X);
    colon: (X, X) -> Token (Semantic_Value,X);
    rparen: (X, X) -> Token (Semantic_Value,X);
    lparen: (X, X) -> Token (Semantic_Value,X);
    library_components: (X, X) -> Token (Semantic_Value,X);
    library_exports: (X, X) -> Token (Semantic_Value,X);
    sublibrary_exports: (X, X) -> Token (Semantic_Value,X);
    number: ((Int), X, X) -> Token (Semantic_Value,X);
    ml_id: ((String), X, X) -> Token (Semantic_Value,X);
    makelib_id: ((String), X, X) -> Token (Semantic_Value,X);
    file_native: ((String), X, X) -> Token (Semantic_Value,X);
    file_standard: ((String), X, X) -> Token (Semantic_Value,X);
    eof: (X, X) -> Token (Semantic_Value,X);
};
api Libfile_Lrvals{
    package tokens:  Libfile_Tokens;
    package parser_data: Parser_Data;
    sharing parser_data::token::Token == tokens::Token;
    sharing parser_data::Semantic_Value == tokens::Semantic_Value;
};
