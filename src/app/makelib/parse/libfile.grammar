## libfile.grammar
## (C) 1999, 2001 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@research.bell-labs.com)



# Mythryl-Yacc grammar for .lib library-definition files


package ad  =  anchor_dictionary;			# anchor_dictionary			is from   src/app/makelib/paths/anchor-dictionary.pkg
package lga =  libfile_grammar_actions;			# libfile_grammar_actions		is from   src/app/makelib/parse/libfile-grammar-actions.pkg
package lg  =  inter_library_dependency_graph;		# inter_library_dependency_graph	is from   src/app/makelib/depend/inter-library-dependency-graph.pkg
package mvi =  makelib_version_intlist;			# makelib_version_intlist		is from   src/app/makelib/stuff/makelib-version-intlist.pkg
package pmt =  private_makelib_tools;			# private_makelib_tools			is from   src/app/makelib/tools/main/private-makelib-tools.pkg
package sy  =  symbol;					# symbol				is from   src/lib/compiler/front/basics/map/symbol.pkg

%%

%term EOF
    | FILE_STANDARD of String
    | FILE_NATIVE   of String
    | MAKELIB_ID of String
    | ML_ID of String
    | NUMBER of Int
    | SUBLIBRARY_EXPORTS				# "SUBLIBRARY_EXPORTS"
    | LIBRARY_EXPORTS					# "LIBRARY_EXPORTS"
    | LIBRARY_COMPONENTS				# "LIBRARY_COMPONENTS" or "SUBLIBRARY_COMPONENTS"
    | LPAREN | RPAREN | COLON
    | IF_T | ELIF_T | ELSE_T | ENDIF
    | ERRORX of String
    | PKG_T
    | API_T
    | GENERIC_T
    | GENERIC_API_T
    | DEFINED
    | ADDSYM  of libfile_grammar_actions::Addsym
    | MULSYM  of libfile_grammar_actions::Mulsym
    | EQSYM   of libfile_grammar_actions::Eqsym
    | INEQSYM of libfile_grammar_actions::Ineqsym
    | TILDE
    | AND_T | OR_T | NOT_T
    | STAR    | DASH   | API_OR_PKG_EXPORTS

%nonterm library		of lg::Library
    | makelib_version_intlist	of mvi::Makelib_Version_Intlist
    #
    | one_or_more_exports	of lga::Exports_Symbolset
    | zero_or_more_exports	of lga::Exports_Symbolset
    #
    | exports			of lga::Exports_Symbolset
    | export			of lga::Exports_Symbolset
    #
    | conditional_exports	of (lga::Exports_Symbolset, lga::Exports_Symbolset)
    | else_exports		of lga::Exports_Symbolset
    #
    | members			of lga::Members
    | member			of lga::Members
    #
    | guarded_members		of (lga::Members, lga::Members)
    | else_members		of lga::Members
    #
    | int_exp			of lga::Int_Expression
    | bool_exp			of lga::Bool_Expression
    #
    | ml_symbol			of sy::Symbol
    | ml_symbolset		of lga::Exports_Symbolset
    #
    | pathname			of { name: String, make_path: Void -> ad::Dir_Path }
    | makelib_id		of lga::Cm_Symbol
    | word			of lga::Cm_Symbol
    #
    | ilk			of lga::Cm_Ilk
    | null_or_ilk_qualifier	of Null_Or lga::Cm_Ilk
    #
    | toolopts			of List lga::Tool_Option
    | ptoolopts			of List lga::Tool_Option
    | opttoolopts		of Null_Or List lga::Tool_Option
    #
    | srcfile			of ad::File
    | null_or_srcfile		of Null_Or ad::File
    | sublib_or_apipkg_exports	of (Null_Or ad::File, lga::Plaint_Sink) -> lga::Exports_Symbolset

%pos Int
%verbose

# Define the parser argument. This gets built as   parsearg
# and then handed to the parser in:
#
#     src/app/makelib/parse/libfile-parser-g.pkg
#
%arg ( { libfile, path_root, complain_about_obsolete_syntax, report_error, make_member, this_library, makelib_state, primordial_library })
    :
    { libfile:     ad::File,
      path_root:   ad::Path_Root,
      #
      complain_about_obsolete_syntax
	  :
	  (Source_Position, Source_Position) -> Void,

      report_error:       (Source_Position, Source_Position) -> /*message:*/ String -> Void,

      make_member : ( { name: String,
		      make_path: Void -> ad::Dir_Path
		    },
		    Source_Position,
		    Source_Position,
		    Null_Or lga::Cm_Ilk,
		    Null_Or List lga::Tool_Option
		  )
	       -> lga::Members,

      this_library:       Null_Or ad::File,
      makelib_state:      makelib_state::Makelib_State,
      primordial_library: lg::Library
    }

%start library

%eop EOF
%noshift EOF

%name Libfile

%keyword SUBLIBRARY_EXPORTS
            LIBRARY_EXPORTS
         LIBRARY_COMPONENTS
         IF_T ELIF_T ELSE_T ENDIF
         DEFINED
         PKG_T API_T GENERIC_T GENERIC_API_T

%prefer LPAREN

%left OR_T
%left AND_T
%nonassoc INEQSYM
%nonassoc EQSYM
%left ADDSYM
%left MULSYM
%left NOT_T TILDE

%left DASH
%left STAR

%%

library
    : SUBLIBRARY_EXPORTS
      zero_or_more_exports
      LIBRARY_COMPONENTS			# == SUBLIBRARY_COMPONENTS
      members
                                                (   lga::make_sublibrary {
							path         => libfile,
							exports      => zero_or_more_exports,
							members,
							makelib_state,
							this_library,
							primordial_library
                                                    }
                                                )

    | LIBRARY_EXPORTS
      LPAREN
          makelib_version_intlist		# Library version stamp
      RPAREN
      one_or_more_exports
      LIBRARY_COMPONENTS			# == SUBLIBRARY_COMPONENTS
      members
                                                (   lga::make_main_library {
							path			=>  libfile,
							exports     		=>  one_or_more_exports,
							makelib_version_intlist =>  THE makelib_version_intlist,
							members,
							makelib_state,
							primordial_library
                                                    }
                                                )
    | LIBRARY_EXPORTS
      one_or_more_exports
      LIBRARY_COMPONENTS			# == SUBLIBRARY_COMPONENTS
      members
                                                (    lga::make_main_library {
						 	path			=> libfile,
							exports     		=> one_or_more_exports,
							makelib_version_intlist	=> NULL,
							members,
							makelib_state,
							primordial_library
                                                    }
                                                )

makelib_version_intlist
    : FILE_STANDARD                             (   lga::cm_version				# Here we're abusing FILE_STANDARD to match a version intlist string like "12.3.9"
						       (   file_standard,
						           report_error (  file_standardleft,
							                   file_standardright
                                                )      )   )




one_or_more_exports
    : export				        (export)
    | one_or_more_exports export	        (lga::union_of_exports_symbolsets (one_or_more_exports, export))

zero_or_more_exports
    : /* empty */                               (lga::default_library_exports)
    | one_or_more_exports                       (one_or_more_exports)

exports
    : /* empty */                               (lga::empty_exports)
    | exports export                            (lga::union_of_exports_symbolsets (exports, export))

export
    : ml_symbolset				(ml_symbolset)
    | IF_T bool_exp conditional_exports		(lga::conditional_exports
						  (bool_exp, conditional_exports, report_error (bool_expleft, bool_expright)))

    | ERRORX                                     (lga::error_export (fn () = report_error (errorxleft, errorxright) errorx))

sublib_or_apipkg_exports
    : SUBLIBRARY_EXPORTS			(lga::sublibrary_exported_symbols)
    | API_OR_PKG_EXPORTS                        (lga::api_or_pkg_exported_symbols)


ml_symbolset
    : ml_symbol                                 (lga::exports_symbolset_from_symbol
						     (ml_symbol,
						      report_error (ml_symbolleft,
							            ml_symbolright)))
    | LPAREN exports RPAREN                     (exports)
    | ml_symbolset STAR ml_symbolset            (lga::intersection_of_exports_symbolsets
					             (ml_symbolset1,
					              ml_symbolset2))
    | ml_symbolset DASH ml_symbolset            (lga::difference_of_exports_symbolsets
					            (ml_symbolset1,
					             ml_symbolset2))
    | sublib_or_apipkg_exports
      LPAREN null_or_srcfile RPAREN		(sublib_or_apipkg_exports						# lga::sublibrary_exported_symbols  or  lga::api_or_pkg_exported_symbols
					            (null_or_srcfile,
					             report_error (null_or_srcfileleft, null_or_srcfileright)
                                                )   )
    | LIBRARY_EXPORTS
      LPAREN
      pathname
      opttoolopts
      RPAREN
						(lga::export_freezefile
						   ( ad::file (pathname.make_path ()),
						     report_error (pathnameleft, pathnameright),
						     { hasoptions =>
							  not_null opttoolopts,
						       elab => fn () =
							  make_member
							      (pathname,
							       pathnameleft,
							       pathnameright,
							       NULL,
							       opttoolopts),
						       this_library
                                                      }
                                                ) )

conditional_exports
    : exports else_exports	                ((exports, else_exports))

else_exports
    : ENDIF				        (lga::empty_exports)
    | ELSE_T exports ENDIF		        (exports)
    | ELIF_T bool_exp conditional_exports	(lga::conditional_exports
						    (bool_exp, conditional_exports,
						     report_error (bool_expleft, bool_expright)))

members
    : /* empty */				(lga::empty_members)
    | member members			        (lga::members (member, members))

toolopts
    : /* empty */                               ([])
    | pathname toolopts                         (lga::string pathname ! toolopts)
    | pathname COLON ptoolopts toolopts         (lga::subopts
						     { name => pathname.name,
						       opts => ptoolopts
                                                     }
						     ! toolopts
                                                )
    | pathname COLON pathname toolopts          (lga::subopts
						     { name => pathname1.name,
						       opts => [lga::string
								   pathname2] }
						 ! toolopts)

ptoolopts
    : LPAREN toolopts RPAREN                    (toolopts)

opttoolopts
    : /* empty */                               (NULL)
    | ptoolopts                                 (THE ptoolopts)

null_or_ilk_qualifier
    : /* empty */                               (NULL)
    | COLON ilk					(THE ilk)

member
    : pathname
      null_or_ilk_qualifier
      opttoolopts				(make_member (pathname,
							   pathnameleft,
							   pathnameright,
							   null_or_ilk_qualifier,
							   opttoolopts))

    | IF_T bool_exp guarded_members		(lga::guarded_members (bool_exp, guarded_members, report_error (bool_expleft, bool_expright)))

    | ERRORX                                     (lga::error_member (fn () =  report_error (errorxleft, errorxright) errorx))

ilk
     : word                                     (lga::ilk word)

guarded_members
     : members else_members	                ((members, else_members))

else_members
     : ENDIF				        (lga::empty_members)
     | ELSE_T members ENDIF		        (members)
     | ELIF_T bool_exp guarded_members	        (lga::guarded_members (bool_exp, guarded_members, report_error (bool_expleft, bool_expright)))

word
    : FILE_STANDARD                             (lga::cm_symbol file_standard)

makelib_id					# Defined as   [A-Za-z][A-Za-z'_0-9]*   in   src/app/makelib/parse/libfile.lex
    : MAKELIB_ID				(lga::cm_symbol makelib_id)

int_exp
    : NUMBER				        (lga::number number)
    | makelib_id				(lga::variable  makelib_state  makelib_id)
    | LPAREN int_exp RPAREN		        (int_exp)
    | int_exp ADDSYM int_exp			(lga::add (int_exp1, addsym, int_exp2))
    | int_exp MULSYM int_exp			(lga::mul (int_exp1, mulsym, int_exp2))
    | TILDE int_exp		                (lga::negate int_exp)

bool_exp											# Boolean-valued expressions
    : DEFINED LPAREN ml_symbol RPAREN	        (lga::ml_defined ml_symbol)
    | DEFINED LPAREN makelib_id RPAREN		(lga::is_defined_hostproperty makelib_state makelib_id)
    | LPAREN bool_exp RPAREN			(bool_exp)
    | bool_exp AND_T  bool_exp		        (lga::conj (bool_exp1,        bool_exp2))
    | bool_exp OR_T   bool_exp		        (lga::disj (bool_exp1,        bool_exp2))
    | bool_exp EQSYM  bool_exp                  (lga::beq  (bool_exp1, eqsym, bool_exp2))
    | NOT_T bool_exp				(lga::not bool_exp)
    | int_exp INEQSYM int_exp			(lga::ineq (int_exp1, ineqsym, int_exp2))
    | int_exp EQSYM   int_exp			(lga::eq   (int_exp1,   eqsym, int_exp2))

ml_symbol
    : PKG_T ML_ID			        (lga::my_package ml_id)
    | API_T ML_ID			        (lga::my_api ml_id)
    | GENERIC_T         ML_ID		        (lga::my_g   ml_id)
    | GENERIC_API_T    ML_ID	        	(lga::my_generic_api    ml_id)

pathname
    : FILE_STANDARD			        ( { name   => file_standard,
						   make_path => fn () =  lga::file_standard
                                                                         makelib_state
									   ( file_standard,
									     path_root,
                                                                             report_error (file_standardleft, file_standardright)
                                                                           )
                                                 }
                                                )
    | FILE_NATIVE				( { name
                                                        =>
                                                        file_native,

						    make_path
                                                        =>
                                                        fn ()
                                                            =
                                                            lga::file_native
								( file_native,
								  path_root,
								  report_error
								  (file_nativeleft, file_nativeright)
								)
                                                 }
                                                )

srcfile
    : pathname                                  (ad::file
						     (pathname.make_path ()))
null_or_srcfile
    : srcfile                                   (THE srcfile)
    | DASH                                      (NULL)
