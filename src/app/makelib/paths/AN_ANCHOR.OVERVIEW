2007-10-11 CrT


Working notes:



Anchor dictionaries are defined in:

    src/app/makelib/paths/anchor-dictionary.pkg



Primary calls to 

    anchor_dictionary::read_anchor_definition_file

appear in two places:

    src/app/makelib/mythryl-compiler-compiler/mythryl-compiler-compiler-g.pkg
    src/app/makelib/main/makelib-g.pkg



Our build sequence must respect the etc/dependencies:
    mythryl-burg         mythryl-yacc mythryl-lex
    c-glue-maker    c-kit lib7
    nowhere         lowhalf-tools
    x-kit threadkit threadkit-lib
    threadkit-lib   threadkit
    threadkit       lib7


Currently,  build.pkg   actually winds up building in the order:

X   src/app/yacc/build-yacc-app
X   src/app/future-lex/build
X   src/app/lex/build-lex-app
X   src/app/burg/build-mythryl-burg-fraser-hanson-proebsting-92-optimal-tree-rewriter-app
X   src/app/heap2asm/build-heap2asm-app

X      src/lib/posix/posix.lib
X      src/lib/internet/internet.lib
X      src/lib/regex/regex-lib.lib		This has since been merged into lib7.lib
X      src/lib/reactive/reactive.lib
X      src/app/makelib/portable-graph/portable-graph-stuff.lib

X      src/lib/thread-kit/src/core-threadkit.lib
X      src/lib/thread-kit/src/threadkit-internal.lib
X      src/lib/thread-kit/src/threadkit.lib
X      src/lib/thread-kit/threadkit-lib/cm-descr/trace-threadkit.lib
X      src/lib/thread-kit/threadkit-lib/cm-descr/lib7.lib

X      src/lib/x-kit/x-kit.lib

X      src/lib/compiler/back/low/lib/register-spilling.lib

X      src/lib/compiler/back/low/lib/peephole.lib
X      src/lib/compiler/back/low/lib/intel32-peephole.lib

X      src/lib/c-kit/src/c-kit.lib

X      src/lib/c-glue-lib/ram/memory.lib
X      src/lib/c-glue-lib/internals/c-internals.lib
X      src/lib/c-glue-lib/c.lib

X      src/lib/prettyprint/simple/simple-prettyprinter.pkg
X      src/lib/compiler/back/low/tools/line-number-database.lib
X      src/lib/compiler/back/low/tools/sml-ast.lib
X      src/lib/compiler/back/low/tools/precedence-parser.lib
X      src/lib/compiler/back/low/tools/parser.lib
X      src/lib/compiler/back/low/tools/match-compiler.lib


       
X   src/app/c-glue-maker/build-c-glue-maker-app
X   src/lib/compiler/back/low/tools/nowhere/build-nowhere-app









----------------------------------------------------------
Old development cycle was:
make all
make self
make fixpoint
make seed;  rm -rf bin;  make tar;  make etags

The new development cycle is:

make etags
make c-stuff
make compiler
make rest
make tar

----------------------------------------------------------
RENAMINGS STUFF

Defined in
    src/app/makelib/paths/anchor-dictionary.pkg
as
    Renamings
        =
        List {
          anchor: Anchor,
          value:  Basename
        }; 

This type is referenced in other types

in src/app/makelib/depend/inter-library-dependency-graph.pkg 

    Sublibrarylist
        =
        List ( ( anchor_dictionary::File,             	#  The .lib file defining the sublibrary.		
                 (Void -> Library),			#  Thunk to delay constructing library until actually needed.	
                 anchor_dictionary::Renamings
               )
             );

in src/app/makelib/depend/write-symbol-index-file.pkg

    write_symbol_index_file
        :
        ( makelib_state::Makelib_State,
	  anchor_dictionary::File,
 	  { imports:   symbol_map::Map( inter_library_dependency_graph::Compiledfile_View ),
	    source_files: Y,
	    localdefs: symbol_map::Map( thawedlib_tome::Thawedlib_Tome ),
	    sublibraries: List( (anchor_dictionary::File, inter_library_dependency_graph::Library, anchor_dictionary::Renamings) ),
	    sources: Z,
	    required_privileges: D
	  }
        )
	->
        Void;

in src/app/makelib/freezefile/freezefile-g.pkg

	Library_Fetcher
	    =
	    ( m7::Makelib_State,
	      anchor_dictionary::File,
	      Null_Or( version::Version ),
	      anchor_dictionary::Renamings
	    )
	    ->
	    Null_Or( lg::Library );

	save_freezefile
            :
            m7::Makelib_State
            ->
            { library:    lg::Library,
	      saw_errors: Ref( Bool ),
	      renamings:  anchor_dictionary::Renamings
	    }
	    ->
            Null_Or( lg::Library );

in src/app/makelib/parse/libfile-grammar-actions.pkg

    make_member
       :
       { makelib_state: makelib_state::Makelib_State,

	 recursive_parse:
	     Null_Or( anchor_dictionary::File )
	     ->
	     (anchor_dictionary::File, Null_Or( version::Version ), anchor_dictionary::Renamings)        <-----------
	     ->
	     Library,

	 load_plugin: anchor_dictionary::Path_Root -> String -> Bool
       }
       ->
       {    name:   String,
	    make_path: Void -> anchor_dictionary::Basename,

	    library: (anchor_dictionary::File, Source_Code_Region),
	    ilk:     Null_Or( Cm_Ilk ),

	    tool_options:    Null_Or(  List(  Tool_Option ) ),
	    local_index: Tool_Index,

	    context: anchor_dictionary::Path_Root
       }
       -> Members;

in src/app/makelib/stuff/raw-libfile.pkg

    Sublibraries
         =
	List ((anchor_dictionary::File, inter_library_dependency_graph::Library, anchor_dictionary::Renamings)); 

    expand_one:  { makelib_state: makelib_state::Makelib_State,

		   recursive_parse:
		       ( anchor_dictionary::File,
			 Null_Or( version::Version ),
			 anchor_dictionary::Renamings
		       )
		       ->
		       inter_library_dependency_graph::Library,

		   load_plugin:
		       anchor_dictionary::Path_Root
		       ->
		       String
		       ->
		       Bool
                 }
		 ->
                 { name:           String,
		   make_path:      Void -> anchor_dictionary::Basename,
		   library:        (anchor_dictionary::File, Source_Code_Region),
		   ilk:            Null_Or( String ),

		   tool_options:   Null_Or( private_makelib_tools::Tool_Options ),
		   local_index:    private_makelib_tools::Index,
		   context:        anchor_dictionary::Path_Root
                 }
		 ->
                 Raw_Libfile;

in src/app/makelib/tools/main/private-makelib-tools.pkg

    Renamings =  anchor_dictionary::Renamings;	# XXX BUGGO DELETME

    Makelib_Parameters
         =
         { version:   Null_Or( version::Version ),
	   renamings: Renamings
         };

in src/app/makelib/tools/main/core-tools.api

    Renamings
        =
        List {
            anchor: String,
            value: Dir_Path
        };

    Makelib_Parameters
        =
        { version:   Null_Or( version::Version ),
	  renamings: Renamings
        };


IN TURN we find  Sublibrarylist

in src/app/makelib/depend/inter-library-dependency-graph.pkg

    Frozen_Or_Thawed
        = FROZEN    Void -> Void						#  Pickle-deleter function.				
        | THAWED  { wrapped_privileges: Privileges,
                     sublibraries:      List(Sublibrary)
                   }

    also
    Main_Vs_Sub_Library_Stuff
        = SUBLIBRARY { main_library:          Null_Or( anchor_dictionary::File ),
		       sublibraries:   List(Sublibrary)
                     }

        | MAIN_LIBRARY { version:        Null_Or( version::Version ),
                     frozen_or_thawed:  Frozen_Or_Thawed
                   }
										# anchor_dictionary	is from   src/app/makelib/paths/anchor-dictionary.pkg

    also
    Library
        = BAD_LIBRARY
        | LIBRARY  { exports:             symbol_map::Map( Tome ),
		     more:                Main_Vs_Sub_Library_Stuff,
		     required_privileges: Privileges,

		     library_path:        anchor_dictionary::File,	# The .lib file defining the library.            	
		     sublibraries:        List(Sublibrary),		# All sublibraries mentioned in the .lib file.	

		     sources:             source_path_map::Map { 	# Maps filenames to following two properties.		
                                            ilk:   String,   		# Distinguishes makefiles from sourcefiles &tc.	
					    derived: Bool  	  	# True iff file was autogenerated by yacc or such.
					  } 
		   }
							# symbol_map		is from   src/app/makelib/stuff/symbol-map.pkg
							# anchor_dictionary	is from   src/app/makelib/paths/anchor-dictionary.pkg
							# source_path_map	is from   src/app/makelib/paths/source-path-map.pkg

in src/app/makelib/freezefile/freezefile-g.pkg

	lib_stamp_is_valid
            :
            m7::Makelib_State
	    ->
            ( anchor_dictionary::File,
              List( sg::Oh7 ),
              lg::Sublibrarylist
            )
	    ->
            Bool;


in src/app/makelib/freezefile/verify-freezefile-g.pkg

	verify' : m7::Makelib_State
                  ->
                  Exportmap
		  ->
                  ( anchor_dictionary::File,			#  library_path 
		    List( dg::Oh7 ),		 		#  export_nodes 
		    lg::Sublibrarylist,				#  sublibraries 
		    source_path_set::Set,			#  freezefiles 
		    Null_Or( version::Version )
                  )
		  ->
                  Bool;

	verify:  m7::Makelib_State
                  -> Exportmap
                  -> lg::Library
                  -> Bool;

IN TURN we find  Sublibraries

in src/app/makelib/stuff/raw-libfile.pkg

    sublibraries
        :
        Raw_Libfile
        ->
        Sublibraries;

in src/app/makelib/stuff/raw-libfile.pkg

    Raw_Libfile

        = ERROR_COLLECTION

	| RAW_LIBFILE  {

	      imports:      sm::Map( Compiledfile_View ),
	      source_files:     List( (Thawedlib_Tome, symbol_set::Set) ),
	      localdefs:    sm::Map( Thawedlib_Tome ),

	      sublibraries: Sublibraries,
	      sources:      source_path_map::Map { ilk: String, derived: Bool },

	      required_privileges:   lg::Privileges
	  };







IN TURN we find  Library_Fetcher

in src/app/makelib/freezefile/freezefile-g.pkg

	load_freezefile
            :
            { get_library:  Library_Fetcher,
	      saw_errors:   Ref( Bool )
	    }
	    ->
            Library_Fetcher;


IN TURN we find   Makelib_Parameters

in src/app/makelib/tools/main/private-makelib-tools.pkg

    Expansion
         =
         { source_files:  List( (File_Path, Ml_Parameters) ),
	   makelib_files:   List( (File_Path, Makelib_Parameters)  ),
	   sources:       List( (File_Path, { ilk: String, derived: Bool }) )
         };

in src/app/makelib/tools/main/core-tools.api

    Expansion
        =
        { source_files: List ((File_Path, Ml_Parameters)),
	  makelib_files:  List ((File_Path, Makelib_Parameters)),
	  sources:      List ((File_Path, { ilk: Ilk, derived: Bool }) )
        };


IN TURN we find Library

in src/app/makelib/compile/compile-in-dependency-order-g.pkg

	 compile_all_needed_libraries_in_dependency_order
            :
            { root_library              	        =>   lg::Library			# Root library for graphwalk.
              mabye_drop_thawedlib_tome_from_linker_map =>   Thawedlib_Tome_Watcher,		# Notify linker of recompiles. (Or a dummy.)
	      compiledfile_cache        		=>   Compiledfile_Sink			#
	    )
	    ->
            { symbol_and_inlining_mapstacks:  m7::Makelib_State -> Null_Or( Symbol_And_Inlining_Mapstacks ),
	      all_libraries:    m7::Makelib_State -> Bool,
	      exports:          symbol_map::Map (m7::Makelib_State -> Null_Or( Symbol_And_Inlining_Mapstacks ) )
	    };

in src/app/makelib/compile/link-in-dependency-order-g.pkg

	make_graphwalk
	    :
	    ( lg::Library,
              tc::Thawedlib_Tome -> cf::Compiledfile
            )
            ->
            { linking_mapstack
                  :
                  m7::Makelib_State
                  ->
                  Null_Or( Linking_Mapstack ),

	      exports
                  :
                  symbol_map::Map(   m7::Makelib_State -> Null_Or( Linking_Mapstack )   )
            };

in src/app/makelib/depend/find-reachable-sml-nodes.pkg

    reachable
        :
        inter_library_dependency_graph::Library
        ->
        ( thawedlib_tome_set::Set,
          frozenlib_tome_set::Set
        );

    snode_map:  inter_library_dependency_graph::Library
                ->
                source_path_map::Map( intra_library_dependency_graph::Thawedlib_Tome );

    groups_of:  inter_library_dependency_graph::Library
                 ->
                 source_path_set::Set;

    freezefiles_of:  inter_library_dependency_graph::Library
                      ->
                      source_path_map::Map( inter_library_dependency_graph::Library );

    frontier:  (frozenlib_tome::Frozenlib_Tome -> Bool)
               ->
               inter_library_dependency_graph::Library
               ->
               frozenlib_tome_set::Set;

in src/app/makelib/depend/indegrees-of-library-dependency-graph.pkg

	    indegrees:  lg::Library -> m::Map( Int );

in src/app/makelib/depend/write-symbol-index-file.pkg

    write_symbol_index_file
        :
        ( makelib_state::Makelib_State,
	  anchor_dictionary::File,
 	  { imports:   symbol_map::Map( inter_library_dependency_graph::Compiledfile_View ),
	    source_files: Y,
	    localdefs: symbol_map::Map( thawedlib_tome::Thawedlib_Tome ),
	    sublibraries: List( (anchor_dictionary::File, inter_library_dependency_graph::Library, anchor_dictionary::Renamings) ),
	    sources: Z,
	    required_privileges: D
	  }
        )
	->
        Void;

in src/app/makelib/depend/scan-dependency-graph.pkg

     scan_dependency_graph
            : {   a7file_info:       frozenlib_tome::Frozenlib_Tome -> A_element,
	          thawedlib_tome:   thawedlib_tome::Thawedlib_Tome  -> A_element,

	          cons:  (A_element, A_elements) -> A_elements,
	          nil:   A_elements
              }
           -> inter_library_dependency_graph::Library
           -> A_elements;

in src/app/makelib/depend/to-portable.pkg

			    export:  ( inter_library_dependency_graph::Library,
                                       makelib_state::Makelib_State
                                     )
                                     ->
                                     ( portable_graph::Graph,
                                       List( anchor_dictionary::File )
                                     );

in src/app/makelib/main/makelib-g.pkg

	    Primordial_Library_Dependency_Graph
                =
                { primordial_library: lg::Library };

which is used only in

	    primordial_library_hook
                =
                ref (NULL: Null_Or( Primordial_Library_Dependency_Graph ));

in src/app/makelib/main/makelib-state.pkg

    Makelib_State
        =
        { makelib_session:          Makelib_Session,
	  library_source_index:   library_source_index::Library_Source_Index,	# library_source_index	is from   src/app/makelib/stuff/library-source-index.pkg
	  plaint_sink: 		  prettyprint::Device,				# prettyprint		is from   src/lib/prettyprint/big/src/prettyprint.pkg
	  youngest:               Ref( timestamp::Timestamp )			# timestamp		is from   src/app/makelib/paths/timestamp.pkg
        };

src/app/makelib/mythryl-compiler-compiler/backend-index.pkg

	Platform_Specific_Make_Function
	    =
	    Backend_Request
	    ->
	    Null_Or ( ( inter_library_dependency_graph::Library,
		      (intra_library_dependency_graph::Oh7 -> Bool),	# Compile graphwalker.
		      anchor_dictionary::Anchor_Dictionary
		      )
		    ); 

src/app/makelib/parse/libfile-parser-g.pkg

    parse_libfile_tree_and_return_interlibrary_dependency_graph
        :
        { makelib_file_to_read:      anchor_dictionary::File,                  #  Our primary input, "foo.lib" or whatever. 

          load_plugin:            anchor_dictionary::Path_Root -> String -> Bool,
	  library_source_index:   library_source_index::Library_Source_Index,

	  makelib_session:          makelib_state::Makelib_Session,
	  freeze_policy:          freeze_policy::Freeze_Policy,

	  primordial_library:   libfile_grammar_actions::Library,
	  paranoid:               Bool
        }
        ->
        Null_Or (
            ( libfile_grammar_actions::Library,
              makelib_state::Makelib_State
            )
	);


IN TURN we find Expansion

in   src/lib/core/internal/versiontool.pkg

    fun versiontoolrule {   spec: tools::Spec,
			    native2pathmaker,
			    context: tools::Rulecontext,
			    default_ilk_of,
			    sysinfo
                        }
        :
        tools::Partial_Expansion
        =

in   src/app/makelib/tools/main/private-makelib-tools.pkg

    Rulefn
        =
        Void -> Partial_Expansion;

    Rulecontext
         =
         Rulefn -> Partial_Expansion;

    Rule
        =
        { spec:              Spec,
	  context:           Rulecontext,
	  native2pathmaker:  String -> Pathmaker,
	  default_ilk_of:    Fnspec -> Null_Or( Ilk ),

	  sysinfo: { get_makelib_preprocessor_symbol_value:   String -> Null_Or( Int ),		# Return Int value of symbol if defined, else NULL.
		     platform:                                String				# "intel32-linux" or such.
                   }
        }
        ->
        Partial_Expansion;


SO, an approximate initial list of Rebindings-related functions is:


in src/app/makelib/depend/write-symbol-index-file.pkg
							write_symbol_index_file
in src/app/makelib/freezefile/freezefile-g.pkg
							save_freezefile
in src/app/makelib/parse/libfile-grammar-actions.pkg
						 	make_member
                                                           check second(==last) element of third arg of callers of this function. == this_lib == (file,versions,renamings) triple
in src/app/makelib/stuff/raw-libfile.pkg
							expand_one
in src/app/makelib/tools/main/core-tools.api
							lib_stamp_is_valid
in src/app/makelib/freezefile/verify-freezefile-g.pkg
							verify'	verify
in src/app/makelib/stuff/raw-libfile.pkg
							sublibraries
in src/app/makelib/freezefile/freezefile-g.pkg
							load_freezefile
in src/app/makelib/compile/compile-in-dependency-order-g.pkg
							compile_all_needed_libraries_in_dependency_order
in src/app/makelib/compile/link-in-dependency-order-g.pkg
							make_graphwalk
in src/app/makelib/depend/find-reachable-sml-nodes.pkg
							reachable    snode_map    groups_of    freezefiles_of    frontier
in src/app/makelib/depend/indegrees-of-library-dependency-graph.pkg
							indegrees
in src/app/makelib/depend/write-symbol-index-file.pkg
							write_symbol_index_file
in src/app/makelib/depend/scan-dependency-graph.pkg
							scan_dependency_graph
in src/app/makelib/depend/to-portable.pkg
							export
in src/app/makelib/main/makelib-g.pkg
							primordial_library_hook
src/app/makelib/parse/libfile-parser-g.pkg
							parse_libfile_tree_and_return_interlibrary_dependency_graph
src/lib/core/internal/versiontool.pkg
							versiontoolrule





                filter_and_thunkify_sublibrary_list (src::sublibraries mc, isl);