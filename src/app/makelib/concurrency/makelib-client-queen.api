## makelib-client-queen.api -- Handling compile servers.

# Compiled by:
#     src/app/makelib/concurrency/makelib-concurrency.sublib



# API for a simple facility allowing us to spread
# a Mythryl .lib compile across multiple cores
# on one machine or across multiple machines
# sharing a common filesystem,  using Unix
# processes connected by pipes and ssh connections.
#
# This is still rather crude and not very robust.
# A "real" implementation exists only for Unix.

# This api is implemented by:
#     src/app/makelib/concurrency/makelib-client-queen.pkg

stipulate
    package mtq =  makelib_thread_queen;				# makelib_thread_queen	is from   src/app/makelib/concurrency/makelib-thread-queen.pkg
herein

    api Makelib_Client_Queen {
	#
	Makelib_Server;

	Makelib_Client_Queen;

	make_makelib_client_queen:  mtq::Makelib_Thread_Queen -> Makelib_Client_Queen;

	# Start up a compile-server subprocess and
	# add it to our internal list of compile
	# servers available for use.
	#
	# NB:  By running 'ssh' it is possible
	#      to start a compile server on
	#      a remote workstation.
	#
	start_makelib_server
	    :
	    Makelib_Client_Queen
	    ->
	    { name:             String,					# Arbitrary name for logging purposes.
	      cmd:              (String, List(String)),			# E.g. ("/usr/bin/mythryld", ["--compile-server"])
	      path_translator:  Null_Or (String -> String),			# See comment below.
	      priority:         Int						# If more than one server is idle (rare), we'll use the numerically highest priority one.
	    }
	    ->
	    Null_Or( Makelib_Server );
	    #
	    # path_translator:
	    #     To allow compiling test versions etc in a
	    #     different filetree than the default, we
	    #     we allow optional rewriting of absolute
	    #     pathnames.  (We presume relative pathnames
	    #     will stay ok, and that anchored pathnames
	    #     will be handled by resetting the anchors.)

	makelib_server_name:  			      Makelib_Server -> String;
	stop_makelib_server:  Makelib_Client_Queen -> Makelib_Server -> Void;				# Stop a compile server by sending "shutdown" to its input pipe.
	kill_makelib_server:  Makelib_Client_Queen -> Makelib_Server -> Void;				# Stop a compile server by sending it SIGTERM.

											# "It is forbidden to kill; therefore all murderers are punished
											#  unless they kill in large numbers and to the sound of trumpets."
											#					    -- Voltaire 

	# Reset scheduler and wait until all servers are idle.
	# The "bool" argument makes reset suitable as an argument
	# to safely::do.
	#
	reset_makelib_server:  Makelib_Client_Queen -> Bool -> Void;			# Will narrate to stdout iff Bool arg is TRUE.

	#  Check whether all servers are currently idle: 
	#
	all_idle:  Makelib_Client_Queen -> Bool;

	change_directory: Makelib_Client_Queen -> String -> Void;

	#  Signal all servers that we are starting with a new .lib file: 
	#
	set_up_all_makelib_servers_for_new_make
	  :	
	  Makelib_Client_Queen
	  ->
	  { platform: String,							# "intel32-linux" or such. 
	    libfile:  String							# "foo.lib"   or such.
	  }
	  ->
	  Void;

	#  Signal all servers that we are doing another make_compiler::make_compiler: 
	#
	make_compiler
	    :
	    Makelib_Client_Queen
	    ->
	    { generated_filename_infix:  String,		# Normally "";   if this is ".pwrpc32-macos", instead of "foo.pkg.compiled" we'll generate "foo.pkg.pwrpc32-macos.compiled".
	      platform:                  String,		# "intel32-linux" or such. 
	      root:                      String			# Always "src/etc/mythryl-compiler-root.lib", root .lib file for the complete compiler.
	    }
	    ->
	    Void;


	# Make the slave's make_compiler engine perform a reset:
	#
	make_compiler_reset
	    :
	    Makelib_Client_Queen
	    -> { platform: String }			#  "intel32-linux" or such. 
	    -> Void;

	# Compile foo.api or foo.pkg:
	#
	compile_api_or_pkg_file
	    :
	    Makelib_Client_Queen
	    -> String
	    -> Bool;		# Argument is full path for sourcefile to compile.

	# Run some thunk with compile parallelism enabled: 
	#
	with_servers
	    :
	    Makelib_Client_Queen
	    -> (Void -> X)
	    -> X;

	# Check whether there are any servers attached: 
	#
	no_servers:  Makelib_Client_Queen -> Bool;
    };
end;

## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.








##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"				 	 #
# End:									 #
##########################################################################
