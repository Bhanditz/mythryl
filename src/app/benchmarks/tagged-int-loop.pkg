## tagged-int-loop.pkg
#
# First benchmark implemented;  Basic test of tagged-int arithmetic speed.

stipulate
herein

    package tagged_int_loop:   Benchmark  {					# Benchmark	is from   src/app/benchmarks/benchmark.api
	#
	fun run arg								# We always pass in an arg, to make sure the compiler can't treat the benchmark as a constant expression.
	    =
	    bj::time_run
		#
		"src/app/benchmarks/tagged-int-loop.pkg"			# Benchmark name for reporting purposes.
		#
		.{  fun inner_loop (0, result)
			    =>
			    result;
			
			inner_loop (i: tagged_int::Int, result: tagged_int::Int)
			    =>
			    if ((i & 1) == 0)  inner_loop (i-1, result-1);	# The only point of this is to make 'result' something the optimizer won't optimize away.
			    else               inner_loop (i-1, result+1);
			    fi;
		    end;

		    fun outer_loop (0, result) =>  result;
			outer_loop (i, result) =>  inner_loop (1000 * 1000 * 1000, result);
		    end;

		    arg =  tagged_int::from_int  arg;

		    result = outer_loop  arg;

		    tagged_int::to_int  result;		    			# We always return a result, to make sure the compiler can't treat the benchmark as dead code.
		};
    };
end;