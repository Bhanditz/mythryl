## tagged-int-loop.pkg
#
# First benchmark implemented;  Basic test of tagged-int arithmetic speed.

# Compiled by:
#     src/app/benchmarks/benchmarks.lib

# Run by:
#     src/app/benchmarks/run-all-benchmarks.pkg

#DO set_control "backend::verbose_compile_log" "TRUE";
#DO set_control "backend::trap_int_overflow" "FALSE";

stipulate
    package bj  =  benchmark_junk;								# benchmark_junk	is from   src/app/benchmarks/benchmark-junk.pkg
    package ti  =  tagged_int;									# tagged_int		is from   src/lib/std/tagged-int.pkg
herein

    package tagged_int_loop:   Benchmark  {							# Benchmark		is from   src/app/benchmarks/benchmark.api
	#
	fun run_benchmark  arg									# We always pass in an arg, to make sure the compiler can't treat the benchmark as a constant expression.
	    =
	    bj::time_run
		#
		"src/app/benchmarks/tagged-int-loop.pkg"					# Benchmark name for reporting purposes.
		#
		.{
		    fun inner_loop (0, result)
			    =>
			    result;
			
			inner_loop (i: ti::Int, result: ti::Int)
			    =>
			    inner_loop (i - 1, result | i);					# The only point of this is to make 'result' something the optimizer won't optimize away.
		    end;

		    arg =  ti::from_int  arg;

		    result = inner_loop  (arg,  ti::from_int 0);

		    ti::to_int  result;								# We always return a result, to make sure the compiler can't treat the benchmark as dead code.
		};
    };
end;