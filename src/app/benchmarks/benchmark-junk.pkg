## benchmark-junk.pkg

# Compiled by:
#     src/app/benchmarks/benchmarks.lib


# Benchmarking support.



###		"Expecting a computer scientist to program
###		 is like expecting an ornithologist fly."
###
###				     -- Tony Lee



stipulate
    package cpu =  cpu_timer;					# cpu_timer			is from   src/lib/std/src/cpu-timer.pkg
herein

    package   benchmark_junk
    :         Benchmark_Junk					# Benchmark_Junk		is from   src/app/benchmarks/benchmark-junk.api
    {
	Benchmark_Result					# Result of running one benchmark.
	    = 
	    { filepath:	    String,				# Benchmark filepath, e.g. "src/app/benchmarks/tagged-int-loop.pkg".
	      cpu_times:    cpu::Cpu_Times,			# Elapsed time while running benchmark.
	      result:	    Int					# We always return a result, to prevent the benchmark code from being optimized away.
	    };

	fun time_run
		(filepath: String)  				# Benchmark filepath, e.g. "src/app/benchmarks/tagged-int-loop.pkg".
		benchmark
	    =
	    {   cpu_timer =  cpu::make_cpu_timer ();
		#
		result    =  benchmark ();

		cpu_times
		    =
		    cpu::get_elapsed_heapcleaner_and_program_usermode_and_kernelmode_cpu_seconds
			#
			cpu_timer;

		{ filepath,
		  cpu_times,	
		  result
		};
	    };

	stipulate
	    fun print_one_benchmark_result  (r: Benchmark_Result)
		=
		printf "    %12.0f   %s\n"   (1000.0 * r.cpu_times.program.usermode_cpu_seconds)   r.filepath;
	herein	
	    # We get called (only) from:
	    #
	    #     
	    #
	    fun summarize_all_benchmarks  benchmark_results
		=
		{   printf "\n\n";
		    printf "    Runtime (ms)   Benchmark\n";
		    printf "    ============   ===============================================================\n";

		    apply   print_one_benchmark_result   benchmark_results;


		    print "\n\n    ==================\n";
		    printf "    %d benchmarks run.\n"     (list::length  benchmark_results);
		};
	end;	
    };
end;


## COPYRIGHT (c) 2012 Jeffrey S Prothero
## released under Gnu Public Licence version 3.
