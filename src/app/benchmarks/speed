#!/bin/sh
#
# Usage: speed [options] [benchmarks]
#
#set -x

CMD=$0

SML="sml"
SRC=`pwd`
ROUNDS=${ROUNDS:-1}
REDUCEMORE=${REDUCEMORE:-15}
BODYSIZE=${BODYSIZE:-0}
SOFTMAX=${SOFTMAX:-20000}
RATIO=${RATIO:-100}

OUT_FILE=""
APPEND=""
OPEN_OUT="val outstrm = std_err;"
CLOSE_OUT=""

TESTS=""
ALL_TESTS="boyer.sml fft.sml fib.sml kb.sml mandelbrot.sml nucleic.sml quad.sml quicksort.sml sieve.sml soli.sml sumlist.sml takc.sml taku.sml"

#
# process arguments
#
while [ "$#" != "0" ]
do
    arg=$1; shift
    case $arg in
      -sml)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -sml option"
          exit 1
        fi
        SML=$1; shift
        ;;
      -rounds)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -rounds option"
          exit 1
        fi
        ROUNDS=$1; shift
        ;;
      -reducemore)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -reducemore option"
          exit 1
        fi
        REDUCEMORE=$1; shift
        ;;
      -bodysize)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -bodysize option"
          exit 1
        fi
        BODYSIZE=$1; shift
        ;;
      -softmax)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -softmax option"
          exit 1
        fi
        SOFTMAX=$1; shift
        ;;
      -ratio)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -ratio option"
          exit 1
        fi
        RATIO=$1; shift
        ;;
      -out)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -out option"
          exit 1
        fi
        OUT_FILE=$1; shift
	OPEN_OUT="val outstrm = open_append(\"$OUT_FILE\");"
	CLOSE_OUT="close_out outstrm;"
        ;;
      -append)
        if [ "$#" = "0" ]; then
          echo "$CMD must supply argument for -append option"
          exit 1
        fi
	APPEND="TRUE"
        OUT_FILE=$1; shift
	OPEN_OUT="val outstrm = open_append(\"$OUT_FILE\");"
	CLOSE_OUT="close_out outstrm;"
        ;;
      -all)
	TESTS=$ALL_TESTS
	;;
      *.sml)
	TESTS="$TESTS $arg"
	;;
      *)
	TESTS="$TESTS $arg.sml"
	;;
    esac
done

#
# generate a date stamp
#
if [ "$OUT_FILE" != "" ]; then
  if [ "$APPEND" = "TRUE" ]; then
    date >> $OUT_FILE
  else
    date > $OUT_FILE
  fi
else
  date
fi

#
# generate a version stamp
#
$SML <<XXX 1> /dev/null
  $OPEN_OUT
  output(outstrm, System.version ^ "\n");
  $CLOSE_OUT
XXX

#
# record compiler params
#
if [ "$OUT_FILE" != "" ]; then
  echo "rounds = $ROUNDS, reducemore = $REDUCEMORE, bodysize = $BODYSIZE, softmax = $SOFTMAX, ratio = $RATIO" >> $OUT_FILE
else
  echo "rounds = $ROUNDS, reducemore = $REDUCEMORE, bodysize = $BODYSIZE, softmax = $SOFTMAX, ratio = $RATIO"
fi

#
# run the tests
#
for prog in $TESTS
do
    if [ "$OUT_FILE" != "" ]; then
      echo "  $prog"
      echo "  $prog" >> $OUT_FILE
    else
      echo "  $prog"
    fi
    $SML <<XXX 1>/dev/null
	System.Control.Runtime.gcmessages := 0;
	System.Control.primaryPrompt:="";
	System.Control.secondaryPrompt:="";
	System.Control.CG.rounds := $ROUNDS;
	System.Control.CG.reducemore := $REDUCEMORE;
	System.Control.CG.bodysize := $BODYSIZE;
	System.Control.Runtime.ratio := $RATIO;
	System.Control.Runtime.softmax := ($SOFTMAX * 1024);

	$OPEN_OUT
	System.Directory.cd "$SRC";
	use "timeit.sml";
	output (outstrm, "    Compile: "); flush_out outstrm;
	Timing.compileIt (outstrm, "$prog"); flush_out outstrm;

	output (outstrm, "    Run:     "); flush_out outstrm;
	Timing.timeIt (outstrm, Main.doit);
	output (outstrm, "    Run:     "); flush_out outstrm;
	Timing.timeIt (outstrm, Main.doit);
	output (outstrm, "    Run:     "); flush_out outstrm;
	Timing.timeIt (outstrm, Main.doit);
	output (outstrm, "\n"); flush_out outstrm;
	$CLOSE_OUT
XXX
done

#
# clean up tmp files
#
#cd programs/DATA
#rm -f cmp.s ml.grm.sig ml.grm.sml ml.lex.sml tmp.s

echo done
