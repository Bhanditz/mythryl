## tagged-int-shellsort-no-bounds-checking.pkg
#

# Compiled by:
#     src/app/benchmarks/benchmarks.lib

# Run by:
#     src/app/benchmarks/run-all-benchmarks.pkg

#DO set_control "compiler::verbose_compile_log" 	"TRUE";
#DO set_control "compiler::trap_int_overflow"   	"FALSE";
#DO set_control "compiler::check_vector_index_bounds"   "FALSE";

stipulate
    package bj  =  benchmark_junk;								# benchmark_junk	is from   src/app/benchmarks/benchmark-junk.pkg
    package rwv =  rw_vector;									# rw_vector		is from   src/lib/std/src/rw-vector.pkg
    package ti  =  tagged_int;									# tagged_int		is from   src/lib/std/tagged-int.pkg
    #
    (_[])   =  rwv::(_[]);
    (_[]:=) =  rwv::(_[]:=);
herein

    package tagged_int_shellsort_no_bounds_checking:   Benchmark  {				# Benchmark		is from   src/app/benchmarks/benchmark.api
	#
	fun run_benchmark  arg									# We always pass in an arg, to make sure the compiler can't treat the benchmark as a constant expression.
	    =
	    bj::time_run
		#
		"src/app/benchmarks/tagged-int-shellsort-no-bounds-checking.pkg"		# Benchmark name for reporting purposes.
		#
		.{
		    zero = tagged_int::from_int 0;

		    vec = rwv::make_rw_vector (arg, zero);

		    for (i = 0; i < arg; ++i) {
			#
			vec[i] := arg - i;
		    };

		    for     (i = 0; i < arg - 1;  ++i) {
			for (j = 0; j < arg - 1;  ++j) {
			    #
			    if (vec[j] > vec[j+1])
				#
				t = vec[j];
				vec[j] := vec[j+1];
				vec[j+1] := t;
			    fi;
			};
		    };

		    result = vec[0];

		    ti::to_int  result;								# We always return a result, to make sure the compiler can't treat the benchmark as dead code.
		};
    };
end;
