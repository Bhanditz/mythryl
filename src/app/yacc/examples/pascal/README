This is a grammar for Berkeley Pascal, hacked to be SLR, though that is
not necessary because Mythryl-Yacc supports LALR(1).

To construct the parser, make this your current directory and run

  CM.make "Makefile.lib";

This will apply Mythryl-Yacc to the file "pascal.grammar" to create
the files "pascal.grammar.api" and "pascal.grammar.pkg", then 
ML_Lex will be applied to pascal.lex to produce pascal.lex.sml.

Then these generated files will be compiled together with necessary
components from the mythryl-yacc.library supplied by the mythryl-yacc-lib.lib
file. 

The end result is a package Parser with two functions.  The
function 

  parse: String ->
         PascalParser.result *
         (Parser.PascalParser.Semantic_Value,PascalParser.pos) LrParser.token.token 
            LrParser.stream

parses input from a file, while

  keybd: Void ->
         Parser.PascalParser.result *
         (Parser.PascalParser.Semantic_Value,Parser.PascalParser.pos) 
           LrParser.token.token LrParser.stream

parses from the standard input.

