#!/bin/sh

this=$0
here=`pwd`
cd ../..
twoup=`pwd`
cd $here

MYTHRYLD=$twoup/bin/mythryld

# -Clowhalf.asm-show-registerset=true -Clowhalf.asm-show-region=true -Clowhalf.asm-show-cutsto=true -Clowhalf.ra-verbose=true -Clowhalf.dump-cfg-before-ra=true -Clowhalf.dump-cfg-after-all-ra=true -Clowhalf.view-outline=true -Clowhalf.dump-cfg-after-loop-probabilities=true -Clowhalf.dump-cfg-after-complete-probs=true -Clowhalf.dump-cfg-after-frequencies=true -Clowhalf.dump-cfg-after-placement=true -Clowhalf.dump-initial-cfg=true -Ccontrol.printRawSyntaxTree=true -Ccontrol.printDeepSyntaxTree=true -Clowhalf.dump-cfg-after-all-ra=true -Chighcode.print-phases=true -Ccg.verbose=true -Chighcode.print=true -Chighcode.print-phases=true <<EOF

$MYTHRYLD -Cprint.length=30 -Cprint.signatures=30 -Cprint.depth=50  -Ccontrol.printRawSyntaxTree=true <<EOF
    datatype boojum = SILENTLY | VANISH of int | AWAY of boojum ref
    fun add3 (a,b,c) = a+b+c
    fun addp {a,b,c} = a+b+c
    fun test i = TextIO.output i
    fun factorial 0 = 1
      | factorial n = n * factorial (n-1)
    fun case_example (i) = case i of 1 => 101 | 2 => 202
    fun let_example (j) = let val k = 2 * j in k end
    fun exception_example (f) = let exception myException of int in f () handle myException _ => () end
    val _ = 12
EOF

exit 0
