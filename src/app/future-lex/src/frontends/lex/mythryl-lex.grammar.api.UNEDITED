api Ml_Lex_Tokens {
    Token (X,Y);
    Semantic_Value;
    posarg: (X, X) -> Token (Semantic_Value,X);
    arg: (X, X) -> Token (Semantic_Value,X);
    header: (X, X) -> Token (Semantic_Value,X);
    structx: (X, X) -> Token (Semantic_Value,X);
    unicode: (X, X) -> Token (Semantic_Value,X);
    full: (X, X) -> Token (Semantic_Value,X);
    rejecttok: (X, X) -> Token (Semantic_Value,X);
    count: (X, X) -> Token (Semantic_Value,X);
    lexstate: ((String), X, X) -> Token (Semantic_Value,X);
    states: (X, X) -> Token (Semantic_Value,X);
    comma: (X, X) -> Token (Semantic_Value,X);
    lexmark: (X, X) -> Token (Semantic_Value,X);
    semi: (X, X) -> Token (Semantic_Value,X);
    act: ((String), X, X) -> Token (Semantic_Value,X);
    arrow: (X, X) -> Token (Semantic_Value,X);
    id: ((String), X, X) -> Token (Semantic_Value,X);
    reps: ((Int), X, X) -> Token (Semantic_Value,X);
    eq: (X, X) -> Token (Semantic_Value,X);
    dot: (X, X) -> Token (Semantic_Value,X);
    unichar: ((one_word_unt::Unt), X, X) -> Token (Semantic_Value,X);
    char: ((String), X, X) -> Token (Semantic_Value,X);
    dash: (X, X) -> Token (Semantic_Value,X);
    slash: (X, X) -> Token (Semantic_Value,X);
    dollar: (X, X) -> Token (Semantic_Value,X);
    carat: (X, X) -> Token (Semantic_Value,X);
    bar: (X, X) -> Token (Semantic_Value,X);
    plus: (X, X) -> Token (Semantic_Value,X);
    star: (X, X) -> Token (Semantic_Value,X);
    qmark: (X, X) -> Token (Semantic_Value,X);
    rcb: (X, X) -> Token (Semantic_Value,X);
    lcb: (X, X) -> Token (Semantic_Value,X);
    rbd: (X, X) -> Token (Semantic_Value,X);
    rb: (X, X) -> Token (Semantic_Value,X);
    lb: (X, X) -> Token (Semantic_Value,X);
    rp: (X, X) -> Token (Semantic_Value,X);
    lp: (X, X) -> Token (Semantic_Value,X);
    gt: (X, X) -> Token (Semantic_Value,X);
    lt: (X, X) -> Token (Semantic_Value,X);
    decls: ((String), X, X) -> Token (Semantic_Value,X);
    eofx: (X, X) -> Token (Semantic_Value,X);
};
api Ml_Lex_Lrvals{
    package tokens:  Ml_Lex_Tokens;
    package parser_data: Parser_Data;
    sharing parser_data::token::Token == tokens::Token;
    sharing parser_data::Semantic_Value == tokens::Semantic_Value;
};
