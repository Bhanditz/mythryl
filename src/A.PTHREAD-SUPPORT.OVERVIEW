The SML/NJ "multi-processor" support in the codebase was implemented circa 1992-1994
on multiprocessor SGI and Solaris machines.  An early paper describing this
work is:

    A Portable Multiprocessor Interface for Standard ML of New Jersey
    Morrisett + Tolmach 1992 31p
    http://handle.dtic.mil/100.2/ADA255639
    http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps



OVERVIEW
========

We implement basically the simplest possible useful form of
ML parallel computing; the core ideas are:

  o The required new thread-related primitives are implemented
    in the platform-specific files

        src/c/pthread/pthread-on-sgi.c
        src/c/pthread/pthread-on-solaris.c

    per the api defined in

        src/c/h/runtime-base.h

  o Each pthread (os-provided thread) gets its own "arena"
    (heap generation zero), in which it can allocate at full
    speed using the standard pre-existing logic.

  o The remaining heap generations are shared, meaning that
    access to them is shared.  Half a dozen locks control the
    required sharing.  In practice the shared-generation allocation
    takes place in

        src/c/heapcleaner/make-strings-and-vectors-etc.c

  o Garbage collection is done by bringing all but one pthread
    to a halt while the remaining one executes the standard
    garbage collection algorithm.  This obviously won't scale
    well, but requires minimal changes to the existing garbage
    collection code.  The new garbage collection logic (essentially
    just barrier synchronization) is implemented in

        src/c/heapcleaner/pthread-heapcleaner-stuff.c




IMPLEMENTATION 2011-11-XX CrT
==============

I implemented a new

    src/c/pthread/pthread-on-posix-threads.c

initially patterned loosely on the pre-existing

    src/c/pthread/pthread-on-sgi.c
    src/c/pthread/pthread-on-solaris.c

files, then modified the interface and support code considerably to
better match the modern <pthread.h> API.  After some experimentation,
found that the compiler compiles it self successfully with the pthread
support turned on after making a couple of fixes:

src/c/heapcleaner/call-heapcleaner.c:    need_to_call_heapcleaner:

   Changed   TAGGED_INT_TO_C_INT( SOFTWARE_GENERATED_PERIODIC_EVENTS_SWITCH_REFCELL__GLOBAL) != 0
             DEREF( SOFTWARE_GENERATED_PERIODIC_EVENTS_SWITCH_REFCELL__GLOBAL) == HEAP_TRUE

   This looks like a pure bug in the original code (failure to deref the refcell).

src/c/heapcleaner/call-heapcleaner.c:  call_heapcleaner() and  call_heapcleaner_with_extra_roots():

   Inserted

       *roots_ptr++ =  &task->link_register; 

   lines to include link register in set of garbage collection roots.
   The running non-pthread code did this, and there was no obvious reason
   by the pthread version should not do it;  presumably this was bitrot
   due to fifteen years of code evolution with pthread support turned off.

   Removed

       *roots_ptr++ =  &task->program_counter;

   line to remove the program counter from the set of garbage collector roots.
   The existing non-pthread code did not include the program counter as a root,
   so there was no evident reason for the pthread version of the code to do so.
   This was again presumably bitrot due to 15 years of disuse while the codebase
   continued to evolve.  (Also, link_register and program_counter apparently point
   into the same something in the heap, so program_counter is apparently redundant
   as well as perhaps invalid as a heap pointer.)




PLAN OF ATTACK
==============

With the pthread support code now written, compiling and running
(well enough for the compiler to compile itself, at least), the
next step should be to write unit test code in

    src/lib/std/src/pthread-unit-test.pkg

to exercise the various primitives starting with

    pth__pthread_create
+   pth__pthread_exit

and then cranking steadily through the rest.

It may then be worth implementing and testing a few
additional <pthread.h>--supported operations, in
particular the mutex-wait-with-timeout one. (Does
it clobber SIGALRM, or how does it work?)







IMPLEMENTATION DETAILS
======================

Support is included if

    NEED_PTHREAD_SUPPORT

is #define-d nonzero in   src/c/mythryl-config.h

The source files affected are:

    src/c/main/runtime-state.c:                          Populates pthread_table__global with malloc'ed Pthreads; Partition agegroup0 between them; only Pthread zero has timers.
    src/c/main/run-mythryl-code-and-runtime-eventloop.c: Drives garbage collection from software-generated-periodic-event facility.
    src/c/main/error-reporting.c:                                  die() calls pth__shut_down ();
    src/c/main/runtime-main.c:                           Calls  pth__start_up();  from pthread-on-sgi.c|pthread-on-posix-threads.c|pthread-on-solaris.c;  accepts and ignores   --runtime-nprocs=6  arg.
    src/c/machine-dependent/posix-signal.c:              Event handling -- currently done only in thread zero.
    src/c/machine-dependent/win32-signal.c:              "                                                   "
    src/c/main/win32-timers.c:                           "                                                   "

    src/c/h/runtime-configuration.h:                     #defines  MAX_PTHREADS  and   MAX_TOTAL_CLEANING_ROOTS

    src/c/lib/mythryl-callable-c-libraries-list.h:	Adds      Libmythryl_Pthread   to set of Mythryl-callable C libraries, making available:   make_pthread, max_pthreads, release_pthread, spin_lock.
    src/c/lib/pthread/libmythryl-pthread.c              Defines   Libmythryl_Pthread,  containing:                                                 make_pthread, max_pthreads, release_pthread, spin_lock. 


    src/c/lib/heap/get-platform-property.c:		Defines "HAS_MP" to be TRUE instead of FALSE.
    src/c/heapcleaner/make-strings-and-vectors-etc.c:	Fixes to retry when other pthreads steal memory out from under us.
    src/c/heapcleaner/heapclean-agegroup0.c:		Instead of processing a single heap_changelog, iterate through all pthreads processing the heap_changelog in each one.
    src/c/heapcleaner/call-heapcleaner.c:		Get additional roots from   pth__extra_heapcleaner_roots__global  and the saved per-pthread Mythryl register sets, call pth__finish_heapcleaning
    src/c/heapcleaner/pthread-heapcleaner-stuff.c:	Multicore-specific start-clean and finish-clean busywork.

    src/c/h/runtime-base.h:				Defines the interface to the system-dependent multicore support functions pth_*.
							Adds  Pid  and  Pthread_Mode   fields to standard Pthread struct.
    src/c/pthread/pthread-on-posix-threads.c:		Implements the above on modern posix threads     interface.
    src/c/pthread/pthread-on-sgi.c:			Implements the above on antique (1994?) SGI Irix interface.
    src/c/pthread/pthread-on-solaris.c:			Implements the above on antique (1994?) Solaris  interface.

