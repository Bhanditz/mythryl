The SML/NJ "multi-processor" support in the codebase was implemented circa 1992-1994
on multiprocessor SGI and Solaris machines.  An early paper describing this
work is:

    A Portable Multiprocessor Interface for Standard ML of New Jersey
    Morrisett + Tolmach 1992 31p
    http://handle.dtic.mil/100.2/ADA255639
    http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps



OVERVIEW
========

We implement basically the simplest possible useful form of
ML parallel computing; the core ideas are:

  o The required new thread-related primitives are implemented

        src/c/pthread/pthread-on-posix-threads.c

    per the api defined in

        src/c/h/runtime-base.h

  o Each pthread (os-provided thread) gets its own "arena"
    (heap generation zero), in which it can allocate at full
    speed using the standard pre-existing logic.

  o The remaining heap generations are shared, meaning that
    access to them is shared.  A single pth__mutex/pth__condvar
    pair serializes access to the heap and all other relevant
    shared state in the pthread-support implementation.

        src/c/heapcleaner/make-strings-and-vectors-etc.c

  o Garbage collection is done by bringing all but one pthread
    to a halt while the remaining one executes the standard
    garbage collection algorithm.  This obviously won't scale
    well, but requires minimal changes to the existing garbage
    collection code.  The new garbage collection logic (essentially
    just barrier synchronization) is implemented in

        src/c/heapcleaner/pthread-heapcleaner-stuff.c




IMPLEMENTATION circa 2011-11-19 CrT
==============

I implemented a new

    src/c/pthread/pthread-on-posix-threads.c

initially patterned loosely on the pre-existing

    src/c/pthread/pthread-on-sgi.c
    src/c/pthread/pthread-on-solaris.c

files, then modified the interface and support code considerably to
better match the modern <pthread.h> API.  After some experimentation,
found that the compiler compiles it self successfully with the pthread
support turned on after making a couple of fixes:

src/c/heapcleaner/call-heapcleaner.c:    need_to_call_heapcleaner:

   Changed   TAGGED_INT_TO_C_INT( SOFTWARE_GENERATED_PERIODIC_EVENTS_SWITCH_REFCELL__GLOBAL) != 0
             DEREF( SOFTWARE_GENERATED_PERIODIC_EVENTS_SWITCH_REFCELL__GLOBAL) == HEAP_TRUE

   This looks like a pure bug in the original code (failure to deref the refcell).

src/c/heapcleaner/call-heapcleaner.c:  call_heapcleaner() and  call_heapcleaner_with_extra_roots():

   Inserted

       *roots_ptr++ =  &task->link_register; 

   lines to include link register in set of garbage collection roots.
   The running non-pthread code did this, and there was no obvious reason
   by the pthread version should not do it;  presumably this was bitrot
   due to fifteen years of code evolution with pthread support turned off.

   Removed

       *roots_ptr++ =  &task->program_counter;

   line to remove the program counter from the set of garbage collector roots.
   The existing non-pthread code did not include the program counter as a root,
   so there was no evident reason for the pthread version of the code to do so.
   This was again presumably bitrot due to 15 years of disuse while the codebase
   continued to evolve.  (Also, link_register and program_counter apparently point
   into the same something in the heap, so program_counter is apparently redundant
   as well as perhaps invalid as a heap pointer.)



IMPLEMENTATION  2011-11-30 CrT
==============

With the pthread support code now written, compiling and running.

All regular syscalls should now be bracketed by
RELEASE_MYTHRYL_HEAP/RECOVER_MYTHRYL_HEAP calls which (respectively)
correctly set PTHREAD_IS_BLOCKED/PTHREAD_IS_RUNNING, and make sure
that BLOCKED pthreads do not start running again in the middle of
a heapcleaning ("garbage collection").

None of this is yet unit tested;  the 
next step should be to write unit test code in

    src/lib/std/src/pthread-unit-test.pkg

to exercise the various primitives starting with

    pth__pthread_create
+   pth__pthread_exit
+   pth__pthread_join

and then cranking steadily through the rest.

NB: Apparently the (currently unsupported in Mythryl)
mutex-wait-with-timeout call can use SIGALRM underneath.
The last thing we need is more code joining the fighting
for control of SIGALRM, so this seems an excellent call
to avoid like the plague.



PLAN OF ATTACK 
==============

Once this code is unit-tested (and torture-tested for good
measure), the focus moves to concurrent programming support
via threadkit (nee' CML).

The concurrent-programming architecture I'm thinking of right
now consists of (at least) three general-purpose pthreads,
plus at least one library-specific one:

 o threadkit gets its own pthread ("threadkit_pthread),
   the main default one, and an inter-pthread input
   port consisting of a  refcell/mutex/condvar triple,
   to be used by other pthreads to send stuff to it.
   Threadkit can check this in its main timeslicing code section.

 o Allocate a pthread named "slow_call_pthread" which reads
   requests from threadkit_pthread (via its own refcell/mutex/condvar
   gateway) in the form of Void->Void thunks and executes them.
   They will typically do file and socket write operations, but
   could be doing anything too slow to do safely in threadkit_pthread,
   such as linpack calls to invert or solve large matrices, say.
   (We might actually want to have several of these pthreads, so as
   to overlap slow operations like DNS lookup or whatever, and
   take advantage of multiple cores for parallel computing in
   numeric-intensive applications like computer vision.)

 o Allocate a pthread named "fd_input_pthread" which
   basically does nothing but sit in a select()/poll()
   loop waiting on file descriptors, forwarding everything
   read to the threadkit pthread via its input gateway,
   probably as Void->Void thunks for threadkit_pthreead to
   execute.  The job of fd_input_pthread is to make sure that
   threadkit_pthread never has to block (at the C I/O level)
   doing file or socket input.  (This pthread will have its
   own refcell/mutex/condvar gateway, but will normally ignore
   it, since it is normally blocked in select()/poll(). We will
   reserve one pipe (i.e., connected fd pair)for waking this
   from its select() sleep when we need to tell have it check
   its gateway;  by writing a byte into this pipe we can ensure
   that it wakes up.  About the only thing we are likely to
   sent this pthread are commands to add fds to its read-list.)

 o Major C libraries which we need to use and which insist on doing
   their own blocking I/O underneath will each need a pthread of their
   own, so they can blocking on C-level I/O without stopping
   threadkit_pthread dead in the water for milliseconds at a stretch.
   I am here thinking mainly of Gtk.  Each of these will have its
   own refcell/mutex/condvar gateway.

Specific to-do items on this front thus include:

 o Unit-test and torture-test the new pthread support code.

 o Upgrade the pthread support code to malloc() Pthread instances
   on-demand instead of pre-allocating a fixed number of them
   (MAX_PTHREADS).

 o In the threadkit scheduler, check for input from other pthreads
   via its refcell/mutex/condvar gateway.  When there is no
   other work to do, block on its input condvar.

 o In the threadkit support library, do all potentially blocking
   I/O via fd_input_pthread and slow_call_pthread.

 o Rewrite Mailqueues to pause the sender for a time
   proportional to 2**(queue_length), to introduce some producer-
   consumer synchronization without risking deadlock.

 o Rewrite threadkit to be driven by software-generated events
   (and gettimeofday() calls) rather then 100HZ SIGALRM signals.

     [ LATER: Probably better: As long as we're going to have a
       fd_input_pthread that basically just sits in a select() loop,
       we might as well have it have a 100HZ (i.e. 10ms) timeout,
       and use that to drive threadkit timeslicing.  The select()
       timeout does not (I gather) depend on SIGALRM, so it doesn't
       add to the throng of facilities competing for control of
       SIGALRM.  The fd_input_pthread() can also call gettimeofday()
       once per loop and publish the result, and thus providing a
       timeofday value which is accurate to 10ms and cheaply
       accessible to threadkit threads. -- 2011-12-04 CrT
     ]

 o Once the preceding is done, re-enable all the EINTR retry
   logic in the C support code.

 o Write a teeny mythryl-sigalrm-slave C program to run
   SIGALRM in a separate process when an application programmer
   actually wants that, reading the results back via 
   fd_input_pthread.  This achieves two things:

    * Ensures that SIGALRM isn't generating EINTR at unexpected
      places in the code, possibly crashing us.

    * Solves the problem that we are only allowed one SIGALRM
      frequency per process, but in a concurrent-programming
      setting, different Mythryl-level libraries may well want
      different SIGALRM frequencies.

   (We will probably want to write and run similar slaves for
   other tasks such as DNS resolution -- a Mythryl pthread is
   expensive (1/2 megabyte of ram, for starters), whereas a
   C slave process is tiny and can be run via fd_input_pthread
   and slow_call_pthread.)

 o Update the inprocess-Gtk implementation to run in its own
   pthread and communicate with the other pthreads via the
   refcell/mutex/condvar gateways.  Add support for enough
   Gtk widgets and calls to make it actually useful.

 o Implement Gtk support for OpenGL.  These days this seems to
   mean gtkglext.  OpenGL calls tend to be fast and
   performance-critical, so we'll leave it up to the application
   programmer to put them in a separate pthread if desired to
   offload threadkit_pthread.


IMPLEMENTATION DETAILS
======================

Support is included if

    NEED_PTHREAD_SUPPORT

is #define-d nonzero in   src/c/mythryl-config.h

The source files affected are:

    src/c/main/runtime-state.c:                          Populates pthread_table__global with malloc'ed Pthreads; Partition agegroup0 between them; only Pthread zero has timers.
    src/c/main/run-mythryl-code-and-runtime-eventloop.c: Drives garbage collection from software-generated-periodic-event facility.
    src/c/main/error-reporting.c:			 die() calls pth__shut_down ();
    src/c/main/runtime-main.c:                           Calls  pth__start_up();  from pthread-on-sgi.c|pthread-on-posix-threads.c|pthread-on-solaris.c;  accepts and ignores   --runtime-nprocs=6  arg.
    src/c/machine-dependent/posix-signal.c:              Event handling -- currently done only in thread zero.
    src/c/machine-dependent/win32-signal.c:              "                                                   "
    src/c/main/win32-timers.c:                           "                                                   "

    src/c/h/runtime-configuration.h:                     #defines  MAX_PTHREADS  and   MAX_TOTAL_CLEANING_ROOTS

    src/c/lib/mythryl-callable-c-libraries-list.h:	Adds      Libmythryl_Pthread   to set of Mythryl-callable C libraries, making available:   make_pthread, max_pthreads, release_pthread, spin_lock.
    src/c/lib/pthread/libmythryl-pthread.c              Defines   Libmythryl_Pthread,  containing:                                                 make_pthread, max_pthreads, release_pthread, spin_lock. 


    src/c/lib/heap/get-platform-property.c:		Defines "HAS_MP" to be TRUE instead of FALSE.
    src/c/heapcleaner/make-strings-and-vectors-etc.c:	Fixes to retry when other pthreads steal memory out from under us.
    src/c/heapcleaner/heapclean-agegroup0.c:		Instead of processing a single heap_changelog, iterate through all pthreads processing the heap_changelog in each one.
    src/c/heapcleaner/call-heapcleaner.c:		Get additional roots from   pth__extra_heapcleaner_roots__global  and the saved per-pthread Mythryl register sets, call pth__finish_heapcleaning
    src/c/heapcleaner/pthread-heapcleaner-stuff.c:	Multicore-specific start-clean and finish-clean busywork.

    src/c/h/runtime-base.h:				Defines the interface to the multicore support functions pth_*.
							Adds  Pid  and  Pthread_Mode   fields to standard Pthread struct.

    src/c/pthread/pthread-on-posix-threads.c:		Implements the above on modern posix threads     interface.


