Motivation
==========

Decades of study have shown that the lambda calculus, consisting basically of
'if' plus function definition and application, is Turing-complete, sufficient
to express any computation we want.  Datastructures like tuples and trees can
be defined in terms of these;  integers can be encoded in in terms of those,
etc.

But as a practical matter of compiler writing, we augment each of our intermediate
languages with various types like "32-bit integer" and operations upon them such
as addition and multiplication.  For purposes of compiling, these "base ops" are
taken to be just as fundamental as function definition and application, even though
mathematically they are not.

In the early intermediate code representations these base ops are selected to match
the programmer's model of programming language types and operations upon them.

In the late intermediate code representations these base ops are
selected to match the actual machine instructions actually available
on the target machine architecture.

The idea is then to translate from the former to the latter by a number of
easy stages.

Thus, one of the key sets of design decisions in the compiler is just which base
ops to include in each of the intermediate code representations used in the compiler.
This dictates much of the work which must be done by each of the major translation
phased in the compiler, since (for example) any base ops present in the source representation
but missing in the destination representation must be re-expressed in terms of the available
destination representation base ops.

The eventual purpose of this doc is to explain just where each set of base ops used in
the compiler is defined, and to list the major differences between each successive set
of base ops.

At the moment, this doc serves mainly as a place for me to accumulate notes while I
work that out myself. :-)



Details
=======



Enumeration of base-op definition sets
--------------------------------------
     The Mythryl compiler code representations used are, in order:	See src/A.COMPILER.OVERVIEW 

     1)  Raw Syntax is the initial frontend code representation.
     2)  Deep Syntax is the second and final frontend code representation.
     3)  Lambdacode (polymorphically typed lambda calculus) is the first backend code representation, used only transitionally.
     4)  Anormcode (A-Normal format) is the second backend code representation, and the first used for code speedups.
     5)  Nextcode is the third and chief backend tophalf code representation.
     6)  Treecode is the backend tophalf/lowhalf transitional code representation. It is typically slightly specialized for each target architecture, e.g. Intel32 (x86).
     7)  Machcode abstracts the target architecture machine instructions. It gets specialized for each target architecture.
     8)  Execode is absolute executable binary machine instructions for the target architecture.

-> There are prims/ops/inlinables available to code in the core libraries.  At the
   moment I'm not quite sure whether to think of these as being very early or very
   late in the sequence;  should they be thought of as being calls to already-compiled
   code, and thus late, or as base ops in the raw syntax code representation, and thus
   very early?

   A good point of departure for studying these is   src/lib/core/init/pervasive.pkg

   Here we find:

	# highcode_baseops		is from   src/lib/compiler/back/top/highcode/highcode-baseops.pkg
	# base_types (built on above)	is from   src/lib/compiler/front/semantic/symbolmapstack/base-types-and-ops-symbolmapstack.pkg
	# inline			is from   "										     "	
	# inline_t   (built on above)	is from   src/lib/core/init/built-in.pkg

highcode_baseops is also used in

    src/lib/compiler/back/top/highcode/highcode-form.pkg
    src/lib/compiler/back/top/lambdacode/lambdacode-form.pkg
    src/lib/compiler/back/top/anormcode/anormcode-form.pkg

At the type level hbo enters lambdacode (only) via:
	Lambdacode_Expression
	  ...
	  | BASEOP              (hbo::Baseop, hut::Uniqtype, List( hut::Uniqtyp ))				# Op, result_tpe, argtypes.
	  | GENOP   (Dictionary, hbo::Baseop, hut::Uniqtype, List( hut::Uniqtyp ))				# Used for  hbo::MAKE_RW_VECTOR_MACRO in src/lib/compiler/back/top/translate/translate-deep-syntax-to-lambdacode.pkg

At the runtime level, in   src/lib/compiler/back/top/translate/translate-deep-syntax-to-lambdacode.pkg
baseops are synthesized for special cases throughout the package, but
the mainline path for baseops is
    fun translate_variable_in_expression (vac::ORDINARY_VARIABLE { inlining_info => ii::INFO (EXCEPTION (hbo::, type), ... }

At the type level hbo enters anormcode (only) via:
	Baseop = (Null_Or(Dictionary), hbo::Baseop, hut::Uniqtype, List(hut::Uniqtyp));

src/lib/compiler/back/top/lambdacode/translate-lambdacode-to-anormcode.pkg
translates the conditional baseops 
		    ( hbo::IS_BOXED  | hbo::IS_UNBOXED | hbo::CMP _ | hbo::POINTER_EQL
		    | hbo::POINTER_NEQ | hbo::POLY_EQL | hbo::POLY_NEQ
into branches, and the 

src/lib/compiler/back/top/nextcode/nextcode-form.pkg
   Here the hbo baseops are no longer used.  Instead we have
       
	    Arithop = ADD | SUBTRACT | MULTIPLY | DIVIDE | NEGATE | ABS | FSQRT | FSIN | FCOS | FTAN | LSHIFT | RSHIFT | RSHIFTL | BITWISE_AND | BITWISE_OR | BITWISE_XOR | BITWISE_NOT | REM | DIV | MOD ;
	    Compare_Op = GT | GE | LT | LE | EQL | NEQ;
	    Branch = CMP _ | FCMP _ | BOXED | UNBOXED | POINTER_EQL | POINTER_NEQ | STRING_EQL | STRING_NEQ;
	    Store_To_Ram = SET_VECSLOT_TO_NUMERIC_VALUE _ | SET_VECSLOT_TO_TAGGED_INT_VALUE | BOXED_SET | UPDATE | SET_REFCELL_TO_TAGGED_INT_VALUE | ASSIGN | SET_EXCEPTION_HANDLER_REGISTER/THREAD_REGISTER/STATE_OF_SPECIAL | USELVAR | FREE | ACCLINK | PSEUDOREG_SET | SETMARK | SET_NONHEAP_RAM | SET_NONHEAP_RAMSLOT;
	    Fetch_From_Ram = BANG | SUBSCRIPT | GET_VECSLOT_NUMERIC_CONTENTS _ | GET_STATE_OF_WEAK_POINTER_OR_SUSPENSION | DEFLVAR | GET_RUNTIME_ASM_PACKAGE_RECORD/EXCEPTION_HANDLER/CURRENT_THREAD_REGISTER | PSEUDOREG_GET | GET_FROM_NONHEAP_RAM _;
	    Arith = MATH _ | SHRINK_INT _ | SHRINK_UNT _ | SHRINK_INTEGER _ | ROUND _;
	    Pure = PURE_ARITH _ | PURE_GET_VECSLOT_NUMERIC_CONTENTS _ | LENGTH | CHUNK_LENGTH | MAKE_REFCELL | STRETCH _ | CHOP _ | COPY _ | STRETCH_TO_INTEGER _ | CHOP_INTEGER _ | COPY_TO_INTEGER _ | CONVERT_FLOAT _
	         | GET_RO_VECSLOT_CONTENTS | GET_BATAG_FROM_TAGWORD | MAKE_WEAK_POINTER_OR_SUSPENSION | WRAP | UNWRAP | CAST | GETCON | GETEXN | WRAP_FLOAT64 | UNWRAP_FLOAT64 | IWRAP | IUNWRAP | WRAP_INT1 | UNWRAP_INT1 | GETSEQDATA | GET_RECSLOT_CONTENTS
	         | GET_RAW64SLOT_CONTENTS | MAKE_ZERO_LENGTH_VECTOR | ALLOT_RAW_RECORD  _ | CONDMOVE _;

src/lib/compiler/back/low/treecode/treecode-form.api
    This has much the same pattern:
	Void_Expression = LOAD_INT_REGISTER _  | LOAD_INT_REGISTER_FROM_FLAGS_REGISTER _  | LOAD_FLOAT_REGISTER _
	  | MOVE_INT_REGISTERS _ | MOVE_FLOAT_REGISTERS _ | GOTO _ | IF_GOTO _ | CALL _  | FLOW_TO _ | RET _  | IF  _  | STORE_INT _  | STORE_FLOAT _ 
          | REGION _  | SEQ _ | DEFINE _ | NOTE _ | EXT _ | LIVE _  | DEAD _
	  | PHI _ | ASSIGN _ | SOURCE | SINK | RTL _

	Int_Expression  = REG _ | LITERAL _ | LABEL _ | LATE_CONSTANT _ | LABEL_EXPRESSION _ | NEG _ | ADD _ | SUB _
	  | MULS _ | DIVS _ | REMS _ | MULU _ | DIVU _ | REMU _
	  | NEGT _ | ADDT _ | SUBT _ | MULT _ | DIVT _
	  | BITWISE_AND	_ | BITWISE_OR	_ | BITWISE_XOR	_ | BITWISE_EQV	_ | BITWISE_NOT	_
	  | RIGHT_SHIFT	_ | RIGHT_SHIFT_U _ | LEFT_SHIFT _
	  | SIGN_EXTEND	_ | ZERO_EXTEND	_ | CONVERT_FLOAT_TO_INT _
	  | COND _ | LOAD _ | PRED _ | LET _ | REXT _ | RNOTE _
	  | OP _ | ARG _ | ATATAT _ | PARAM _ | BITSLICE _ | QQQ

	Float_Expression = FREG _ | FLOAD _ | FADD _ | FMUL _ | FSUB _ | FDIV _ | FABS _ | FNEG _ | FSQRT _ | FCOND _ | COPY_FLOAT_SIGN _ | CONVERT_INT_TO_FLOAT _ | CONVERT_FLOAT_TO_FLOAT _ | FPRED _ | FEXT _ | FNOTE _

