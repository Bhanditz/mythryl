The Mythryl compiler register allocator is based on the
algorithm described in:

    Iterated register coalescing
    Lal George, Andrew W. Appel
    TOPLAS 1996
    Volume 18 Issue 3, May 1996
    http://www.cs.cmu.edu/afs/cs/academic/class/15745-s07/www/papers/george.pdf

The Mythryl compiler backend lowhalf is derived from MLRISC,	    http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/index.html
an ambitious project which attempted to be more or less all
things for all people, and apparently more or less died
a-borning.

MLRISC is in essence a toolkit of parts from which a custom
backend lowhalf may be assembled for any particular compiler,
or at least any particular compiler written in SML.

In consequence, there is much intentional redundancy in
the MLRISC codebase, and beyond that much stillborn and/or
obsoleted code.

In this discussion, I will narrow the focus to just those
package actually used in the Mythryl compiler, and beyond
that mainly to those package used in the Mythryl compiler
backend for the Intel32 (i.e., "x86") architecture.

The major relevant packages for our purposes are then:

    src/lib/compiler/back/low/regor/solve-register-allocation-problems-by-iterated-coalescing-g.pkg
    src/lib/compiler/back/low/regor/codetemp-interference-graph.pkg
    src/lib/compiler/back/low/regor/register-spilling-per-chow-hennessy-heuristic.pkg
    src/lib/compiler/back/low/regor/iterated-register-coalescing.pkg
    src/lib/compiler/back/low/intel32/regor/regor-intel32-g.pkg
    src/lib/compiler/back/low/regor/register-spilling-g.pkg
