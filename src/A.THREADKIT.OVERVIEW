Mythryl's threadkit provides support for concurrent programming.
It is a development of John H Reppy's CML ("Concurrent ML") package
which is shipped with SML/NJ and documented in his "Concurrent ML" book.

It is based on the compiler-supported callcc ("call with current continuation")
operator, derived from the Lisp operator of the same name.

Mythryl's stackless implemenation (inherited of course from SML/NJ) makes
callcc very efficient -- about the same time and space cost as a function
call, which in Mythryl is already very efficient.  (Callcc on stack-based
implementations is typically about 100X slower.)

This make application-level threads very cheap in Mythryl:  creating a
new thread has about the same time and space cost as creating a 100-byte
string.  (Which, again, is already much faster than the equivalent operation
in a language like C or Java where strings are inherently expensive.)

Making threads very cheap frees the application programmer to use them
freely to improve program structure.

Mythryl's threadkit implements preemptive timeslicing driven by a clock
which by default runs as 50Hz. (Twenty-millisecond time slices.)  This
frees the application programmer from having to explicitly yield the
program counter in every inner loop (as in the Bad Old Days on MacOS, say),
resulting in cleaner and more reliable application code.

Timeslicing is managed by

    src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg


John H Reppy's original scheme drove things from a 50Hz SIGALRM.

The mechanics of that looked like:

 o  When user application code calls threadkit::start_up_thread_scheduler		# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    it reaches thread_scheduler_control::start_up_thread_scheduler			# thread_scheduler_control	is from   src/lib/src/lib/thread-kit/src/posix/thread-scheduler-control.pkg
    which is essentially thread_scheduler_control_g::start_up_thread_scheduler		# thread_scheduler_control_g	is from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control-g.pkg
    which among other things does
        thread_scheduler::start_thread_scheduler_timer  time_quantum;			# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    to set up SIGALRM signals at 50Hz.  In more detail, this does
        sig::set_signal_handler( sig::alarm_signal,  sig::HANDLER  alarm_handler);	# sig is runtime_signals	   from   src/lib/std/src/nj/runtime-signals.pkg
    ==  runtime_signals_guts::set_signal_handler					# runtime_signals_guts		is from   src/lib/std/src/nj/runtime-signals-guts.pkg
    which ultimately invoked  _lib7_Sig_setsigstate in src/c/lib/signal/setsigstate.c
    which invoked  set_signal_state() in src/c/machine-dependent/posix-signal.c
    to set up thread_scheduler::alarm_handler as the handler for SIGALRM, and
        frq::set_sigalrm_frequency (THE new_time_quantum);				# saf is set_sigalrm_frequency     from   src/lib/std/src/nj/set-sigalrm-frequency.pkg
    ==  do_set_sigalrm_frequency in src/c/lib/heap/libmythryl-heap.c
    ==  setitimer(2), Linux Reference Manual.
    to set the SIGALRM frequency to 50Hz.    

 o       set_signal_state	in   src/c/machine-dependent/posix-signal.c
    sets c_signal_handler	in   src/c/machine-dependent/posix-signal.c
    to be the generic handler for all signals.

 o  When invoked, c_signal_handler() uses
        SELF_HOSTTHREAD ==  pth__get_hostthread_by_ptid(pth__get_hostthread_ptid())		# pth__get_hostthread_by_ptid		is from  src/c/hostthread/hostthread-on-posix-threads.c
    to find a hostthread instance.  This uses pthread_self() plus a search of
    hostthread_table__global to locate the appropriate Hostthread record.
    It then does essentially
	hostthread->posix_signal_counts[sig].seen_count++;					# 'sig' is the particular signal in question, e.g. SIGALRM.
	hostthread->all_posix_signals.seen_count++;
	hostthread->posix_signal_pending = TRUE;						# Not done if we're already executing a mythryl signal handler handler.
    followed by setting a bogus heap-allocation limit to
    (shortly) trigger a bogus garbage collection call and returns.
    The point of this delayed-invocation mechanism is that heap-exhausted
    probes are done only at points where the heap is self-consistent -- no
    half-allocated records or such. (Specifically, they are done at the start
    of execution of some function.)

 o  Thus, the next heap-low probe lands us in

        src/c/main/run-mythryl-code-and-runtime-eventloop.c

    where the heap-low logic notices that   hostthread->posix_signal_pending
    is TRUE and tweaks the Mythryl state so that execution resumes in

        root_mythryl_handler_for_posix_interprocess_signals()  in  src/lib/std/src/nj/runtime-signals-guts.pkg

    which in turn calls the mythryl handler registered for that signal number,
    which in this case will be

        thread_scheduler::alarm_handler		from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg

    which in due course calls

        dispatch_next_thread__noreturn

    which essentially runs the result of calling

        dequeue_io_bound_thread ()
