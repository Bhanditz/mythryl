SYSTEM CONTEXT

    The Mythryl development system divides broadly into:

     o makelib, the compilation/library manager which
       builds up code libraries by compiling the relevant
       files in dependency order.  It is a bit like a mixture
       of *nix 'make' 'ar' and 'ld'.

     o The compiler proper, which in essence is responsible
       for compiling executable/linkable machine code for
       one source file.

     o The C-coded runtime, which links to C libraries and
       implements the garbage collector.

     o The standard libraries, which implement things ranging
       from printf and file I/O to X widgets and graph algorithms.

    Our interest at the moment is in the compiler proper,
    which successively converts the input ASCII source
    code through eight representations, each closer to executable
    code than the preceding one:

	 1)  Raw Syntax is the initial frontend code representation.
	 2)  Deep Syntax is the second and final frontend code representation.
	 3)  Lambdacode (polymorphically typed lambda calculus) is the first backend code representation, used only transitionally.
	 4)  Anormcode (A-Normal form)  is the second backend code representation, and the first used for optimization.
	 5)  Fatecode (Continuation Passing Style) is the third and chief backend tophalf code representation.
	 6)  Treecode is the backend tophalf/lowhalf transitional code representation. It is typically slightly specialized for each target architecture, e.g. Intel32 (x86).
	 7)  Machcode abstracts the target architecture machine instructions. It gets specialized for each target architecture.
	 8)  Execode is absolute executable binary machine instructions for the target architecture.


    The compiler proper divides most broadly into

	 o The front end, which handles analysis -- lexing, parsing,
	   type inference, type checking and the symbol tables.
           (Representations 1-2.)

	 o The back end, which handles synthesis -- generating the
	   actual executable machine code. (Representations 3-8.)

    The back end in turn divides most broadly into

         o The top half, which uses algorithms and representations
           independent of any particular computer architecture. In
           practice these means representations 3-5 on the above list.

         o The low half, which uses algorithms and representations
           specialized to a particular target architecture.  In practice
           this means representations 6-8 on the above list.

    We compile a separate backend lowhalf for each supported architecture,
    and dynamically load the appropriate one as needed.


HISTORICAL CONTEXT

The Mythryl backend lowhalf derives from MLRISC, an ambitious Bell Labs / NYU
retargetable-backend project which attempted to be all things to all people
but apparently got de-funded before completion:

    http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/index.html


CODETREE ORGANIZATION

The main backend lowhalf codetree contains a great deal of code.  
First, The standard library graph codetree is taken from MLRISC:

    linux% find src/lib/graph -name '*pkg' -print | wc -l

    54

Then there is the main backend lowhalf codetree proper:

    linux% find src/lib/compiler/back/low -name '*pkg' -print | wc -l

    351


So that's four hundred sourcefiles -- quite a bit to wrap your head around!

Of the latter three hundred fifty-odd files, only a bit more than half
actually currently compile:

    linux% find src/lib/compiler/back/low -name '*pkg.compiled' -print | wc -l

    178

Of those, many implement alternative algorithms from which the programmer
is allowed to pick and choose.  For example four register-spilling heuristics
are offered, but only one will be used in any given backend lowhalf:

    linux% find src/lib/compiler/back/low -name 'register-spilling-per*heuristic*pkg' -print

    src/lib/compiler/back/low/regor/register-spilling-per-improved-chaitin-heuristic-g.pkg
    src/lib/compiler/back/low/regor/register-spilling-per-improved-chow-hennessy-heuristic-g.pkg
    src/lib/compiler/back/low/regor/register-spilling-per-chaitin-heuristic.pkg
    src/lib/compiler/back/low/regor/register-spilling-per-chow-hennessy-heuristic.pkg

Of these, only the latter two are currently compiled, and only the latter one is
actually used in the x86 backend.

Finally, many files are specific to a particular architecture:

    linux% find src/lib/compiler/back/low -name '*sparc32*pkg' -print | wc -l
    26
    linux% find src/lib/compiler/back/low -name '*pwrpc32*pkg' -print | wc -l
    24
    linux% find src/lib/compiler/back/low -name '*intel32*pkg' -print | wc -l
    31

In sum, simply rummaging through the backend lowhalf codetree is a very poor way to
get to know the system; you'll be overwhelmed by hundreds of files of no immediate
relevance to understanding the actually operating backend lowhalf for the architecture
of interest.

One good way to investigate the compiler backend lowhalf is to start at the
root the package hierarchy and follow the links down to parts of particular interest.

Taking intel32 (== x86) as the architecture of interest, the central files of interest are:

    o  src/lib/compiler/back/low/intel32/intel32.architecture-description

	   This the the programmer-prepared description of the intel32 architecture,
	   specifying in particular (a subset of the full) instruction set,
	   the number and kinds of registers, and how to generate assembly code.

	   To reduce porting and maintainance costs and to increase system reliability,
	   the backend lowhalf tools autogenerate a number of code modules directly
	   from this architecture specification.  For the intel32 arechitecture these are:

	       src/lib/compiler/back/low/intel32/emit/translate-machcode-to-asmcode-intel32-g.codemade.pkg
	       src/lib/compiler/back/low/intel32/code/machcode-intel32-g.codemade.pkg
	       src/lib/compiler/back/low/intel32/code/registerkinds-intel32.codemade.pkg

    o  src/lib/compiler/toplevel/compiler/mythryl-compiler-for-intel32-posix.pkg

	   This tiny wrapper file marks the boundary between the backend tophalf and lowhalf
	   and the topmost root of the backend lowhalf for the intel32 architecture on posix.

    o  src/lib/compiler/back/low/main/intel32/backend-intel32-g.pkg

           This tiny file assembles the intel32 backend from its major components.

    o  src/lib/compiler/back/top/main/backend-tophalf-g.pkg

           This little file is responsible for running the backend lowhalf phases
           in order.  The end-user can select which compiler phases to run; this
           file is essentially a little command-interpreter processing those selections.

    o  src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg

           This is probably the best place to start code-reading.                  # Nomenclature: "coder" == "code generator".
           More than any other file, this is the one that pulls
           together all the bits and pieces and assembles them
           into a complete backend lowhalf.  


Another good way to investigate the compiler backend lowhalf is to start at the
intermediate code representations used, together with the transformations between
them:

    o  src/lib/compiler/back/top/fatecode/fatecode-form.api

	   Fatecode_Form is the workhorse of the backend tophalf and the final
	   toplalf representation.

    o  src/lib/compiler/back/low/treecode/treecode-form.api

           Treecode_Form is our first major backend lowhalf code representation.
           It represents code essentially as binary expression trees (2 * (i+j)).
           This file defines the architecture agnostic part of Treecode_Form.

           At the top of backend-lowhalf-intel32-g.pkg we define  treecode_form_intel32,
           a treecode_form specialized to the intel32 architecture.  The (minor)
           differences are defined in

               src/lib/compiler/back/low/main/intel32/treecode-extension-intel32.pkg
               src/lib/compiler/back/low/intel32/code/treecode-extension-sext-intel32.pkg

           -- mainly some architecture-specific floating-point instructions.

    o  src/lib/compiler/back/low/intel32/code/machcode-intel32-g.codemade.pkg
       src/lib/compiler/back/low/pwrpc32/code/machcode-pwrpc32-g.codemade.pkg
       src/lib/compiler/back/low/sparc32/code/machcode-sparc32-g.codemade.pkg

           These files define the particular machcode (abstract machine code)
           representations for the supported architectures.  These essentially
           enumerate the instruction set for those architectures, or at least
           the subset of the instruction set used by the compiler.  (Intel32,
           in particular, contains a number of oddball historical instructions
           for which the compiler has no use.)

    o  src/lib/compiler/back/low/main/main/translate-fatecode-to-treecode-g.pkg
       src/lib/compiler/back/low/intel32/treecode/translate-treecode-to-machcode-intel32-g.pkg
       src/lib/compiler/back/low/intel32/translate-machcode-to-execode-intel32-g.pkg

	   These files perform the core translations between our major code representations.
