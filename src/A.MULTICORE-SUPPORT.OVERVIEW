The SML/NJ multicore support in the codebase was implemented circa 1992-1994
on multiprocessor SGI and Solaris machines.  An early paper describing this
work is:

    A Portable Multiprocessor Interface for Standard ML of New Jersey
    Morrisett + Tolmach 1992 31p
    http://handle.dtic.mil/100.2/ADA255639
    http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps



OVERVIEW
========

We implement basically the simplest possible useful form of
ML parallel computing; the core ideas are:

  o The required new thread-related primitives are implemented
    in the platform-specific files

        src/c/pthread/pthread-on-sgi.c
        src/c/pthread/pthread-on-solaris.c

    per the api defined in

        src/c/h/runtime-pthread.h

  o Each pthread (os-provided thread) gets its own "arena"
    (heap generation zero), in which it can allocate at full
    speed using the standard pre-existing logic.

  o The remaining heap generations are shared, meaning that
    access to them is shared.  Half a dozen locks control the
    required sharing.  In practice the shared-generation allocation
    takes place in

        src/c/heapcleaner/make-strings-and-vectors-etc.c

  o Garbage collection is done by bringing all but one pthread
    to a halt while the remaining one executes the standard
    garbage collection algorithm.  This obviously won't scale
    well, but requires minimal changes to the existing garbage
    collection code.  The new garbage collection logic (essentially
    just barrier synchronization) is implemented in

        src/c/heapcleaner/pthread-cleaning-stuff.c




PORTING
=======

Porting to a new platform requires essentially just implementing a new
alternative to the existing platform-specific files

    src/c/pthread/pthread-on-sgi.c:			Implements the above.
    src/c/pthread/pthread-on-solaris.c:		Implements the above.

pthread-on-sgi.c
    Depends on special SGI-specific hardware support for locking etc.

pthread-on-solaris.c
    Depends on solaris-specific thread primitives.




PLAN OF ATTACK
==============

A reasonable plan of attack would seem to be:

 1) List the platform-specific primitives and work out their semantics.
 2) Research posix-thread equivalents.
 3) Write a pthread-on-posix-threads.c parallel to the existing two platform-specific implementations.






IMPLEMENTATION DETAILS
======================

Support is included if

    MULTICORE_SUPPORT

is defined.

The source files affected are:

    src/c/main/runtime-state.c:                          Populates pthread_table_global with malloc'ed Pthreads; Partition agegroup0 between them; only Pthread zero has timers.
    src/c/main/run-mythryl-code-and-runtime-eventloop.c: Drives garbage collection from software-generated-periodic-event facility.
    src/c/main/error.c:                                  die() calls mc_shut_down ();
    src/c/main/runtime-main.c:                           Calls  mc_initialize();  from pthread-on-sgi.c|pthread-on-posix-threads.c|pthread-on-solaris.c;  accepts and ignores   --runtime-nprocs=6  arg.
    src/c/machine-dependent/posix-signal.c:              Event handling -- currently done only in thread zero.
    src/c/machine-dependent/win32-signal.c:              "                                                   "
    src/c/main/win32-timers.c:                           "                                                   "

    src/c/h/runtime-configuration.h:                     #defines  MAX_PTHREADS  and   MAX_TOTAL_CLEANING_ROOTS
    src/c/h/pthread.h:                                   Adds  Pid  and  Pthread_Status   fields to standard Pthread struct.

    src/c/lib/mythryl-callable-c-libraries-list.h:	Adds      Libmythryl_Pthread   to set of Mythryl-callable C libraries, making available:   acquire_pthread, max_pthreads, release_pthread, spin_lock.
    src/c/lib/pthread/libmythryl-pthread.c              Defines   Libmythryl_Pthread,  containing:                                                 acquire_pthread, max_pthreads, release_pthread, spin_lock. 
    src/c/lib/pthread/cfun-list.h:                      Lists the Libmythryl_Pthread   Mythryl-callable functions:                                 acquire_pthread, max_pthreads, release_pthread, spin_lock. 
    //
    src/c/lib/pthread/acquire-pthread.c		Provides  Libmythryl_Pthread   Mythryl-callable fun   acquire_pthread   -- actual implementation is   mc_acquire_pthread   in pthread-on-posix-threads.c|...
    src/c/lib/pthread/max-pthreads.c          	Provides  Libmythryl_Pthread   Mythryl-callable fun   max_pthreads      -- actual implementation is   mc_max_pthreads      in pthread-on-posix-threads.c|...
    src/c/lib/pthread/release-pthread.c       	Provides  Libmythryl_Pthread   Mythryl-callable fun   release_pthread   -- actual implementation is   mc_release_pthread   in pthread-on-posix-threads.c|...
    src/c/lib/pthread/spin-lock.c             	Provides  Libmythryl_Pthread   Mythryl-callable fun   spin_lock         -- actual implementation is   mc_release_pthread   in pthread-on-posix-threads.c|...

    src/c/lib/heap/get-platform-property.c:		Defines "HAS_MP" to be TRUE instead of FALSE.
    src/c/heapcleaner/make-strings-and-vectors-etc.c:	Fixes to retry when other pthreads steal memory out from under us.
    src/c/heapcleaner/clean-agegroup0.c:			Instead of processing a single heap_changelog, iterate through all pthreads processing the heap_changelog in each one.
    src/c/heapcleaner/call-heapcleaner.c:			Get additional roots from   mc_extra_cleaner_roots_global  and the saved per-pthread Mythryl register sets, call mc_finish_cleaning
    src/c/heapcleaner/pthread-cleaning-stuff.c:		Multicore-specific start-clean and finish-clean busywork.

    src/c/h/runtime-pthread.h:			Defines the interface to the system-dependent multicore support functions mc_*.
    src/c/pthread/pthread-on-posix-threads.c:	Implements the above on modern posix threads     interface.
    src/c/pthread/pthread-on-sgi.c:		Implements the above on antique (1994?) SGI Irix interface.
    src/c/pthread/pthread-on-solaris.c:		Implements the above on antique (1994?) Solaris  interface.

