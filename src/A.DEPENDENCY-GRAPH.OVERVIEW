
# The file
#
#     src/app/makelib/depend/intra-library-dependency-graph.pkg
#
# implements "intra-library" dependency graphs,
# which is to say ones at the granularity of
# individual source files and .compiled files, as opposed to
# the inter-library dependency graphs and complete-library
# granularity of inter_library_dependency_graph in
#
#     src/app/makelib/depend/inter-library-dependency-graph.pkg
#
#
#
# BACKGROUND:
#
# Compiling a single sourcefile "foo.pkg" produces
# a single objectcode file "foo.pkg.compiled".
#
# That .compiled file may then be combined with the other .compiled
# in its foo.lib library to make up a foo.lib.frozen freezefile.
#
# We refer to the contents of a .compiled file as an "compiledfile",
# whether it is actually stored in a .compiled file,
# a freezefile, or in memory.
#
# A "library" is essentially everything compiled by
# one .lib library-definition file.
#
# For an explanation of libraries vs sublibraries and
# frozen vs thawed libraries, see the comments in
#
#     src/app/makelib/depend/inter-library-dependency-graph.pkg
#
# Nomenclature:
#     A "freezefile"  is the foo.lib.frozen file holding a frozen library. 
#     A "thawed compiledfile"     is an compiledfile living in its own .compiled file.
#     A "frozen compiledfile"    refers to a compiledfile packed inside a freezefile.
#     A "filter"      selects a subset of the symbols exported by a library.
#     "far"           means something in a different library.
#     "near_imports"  are those from compiledfiles in the same library.
#     "far_imports" are those from compiledfiles in other libraries.


# From the manual:
#
#     You will notice that one can never go from an frozenlib_tome to a thawedlib_tome.
#     This mirrors our intention that a sub-library of a FROZEN library must
#     also be FROZEN.  From thawedlib_tomes, on the other hand, you can either go
#     to other thawedlib_tomes or to frozen_compilables.  All the "near_imports" of a
#     thawedlib_tome (i.e., the imports that come from the same library) are
#     also thawedlib_tomes.
#
#     To go to a frozen compilable in another library one must look into the list of
#     "global_import"s.  Global imports refer to "far" compiledfiles -- compiledfiles that are
#     within other libraries. The edge that goes to such a compiledfile can have an
#     export filter attached. Therefore, a far_compiledfile_in_lib is a frozenlib_tome with
#     an optional filter, a far_compiledfile is an compiledfile with an  optional filter attached.


# Frozenlib_Tome_Exports OVERVIEW
#
# Information kept at the boundary between
# frozen and thawed libraries.
#
# One of our major invariants is that a FROZEN
# library may never depend upon a THAWED library.
#
# Thus, libraries are frozen from the leafs
# of the dependency tree on up, with thawed
# libraries at any given time forming a contiguous
# subtree located at the root, fringed by frozen
# libraries.
#
# Consequently, inspection across the thawed/frozen
#  library boundary is always in the direction
# of a thawed library asking for information about
# a frozen library.
#
# In this module we implement the view of frozen
# libraries which we allow to thawed libraries:
# An instance of type Frozenlib_Tome_Exports contains
# everything which a thawed library is allowed
# to know about an Frozenlib_Tome -- a .compiled objectfile
# within a foo.lib.frozen freezefile.
#
# In detail, this consists of:
#
# version:
#    A globally unique 'version' string which
#    distinguishes the Frozenlib_Tome not only from all
#    other Frozen_Compilables, but also from other versions
#    of itself:  Every time the source file for
#    the compiledfile changes and we recompile it, the new
#    compiled version gets a new (and different)
#    version string.
#    A version string looks like:
#        version-$ROOT/src/lib/compiler/(core.sublib):semantic/basics/inlining-junk.api-1187727181.821
#    where the numeric suffix is the last-modification
#    time accurate to a millisecond.  You'll find such
#    strings on disk in compiler-created files like
#        src/lib/compiler/front/semantic/basics/inlining-junk.api.version
#
# symbolmapstack_thunk:  src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.api
#                      src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
#    This evaluates to a symbol table giving all symbols
#    exported by the compiledfile together with type etc.
#    Making it a memoized thunk allows us to avoid
#    actually constructing the symbol table unless
#    and until it is actually needed.
#
# inlining_mapstack_thunk:    src/lib/compiler/toplevel/compiler-state/inlining-mapstack.api
#                          src/lib/compiler/toplevel/compiler-state/inlining-mapstack.pkg
#    This evaluates to a dictionary mapping symbols to
#    high level (machine independent) intermediate code
#    implementations for those functions suitable for
#    cross-module inlining.  By replacing calls to those
#    functions with the corresponding intermediate code
#    and then compiling to completion, external calling
#    code can avoid function call overhead on those
#    functions.
#
# symbolmapstack_picklehash:
# inlining_mapstack_picklehash:
#    These two picklehashes serve as message digests
#    of the symbol table and inlining table for the
#    compiledfile in question.  If, after recompiling that
#    compiledfile, these two values remain unchanged, then
#    we may safely take the compiledfile as unchanged for
#    all external purposes, and not bother recompiling
#    or relinking dependent code.
