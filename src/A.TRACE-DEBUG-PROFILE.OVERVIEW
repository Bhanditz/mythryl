At the moment this is just working notes as I try to figure this out.  -- 2011-07-08 CrT

API is defined in:  src/lib/compiler/debugging-and-profiling/profiling/profiling-control.api

Voice Of Experience:  Trying to time-profile a script via an approach like

	#!/usr/bin/mythryl
	#
	package pc = mythryl_compiler::profiling_control;
	#
	pc::set_compiler_to_add_per_fun_call_counters_to_deep_syntax ();
	#
	fun loop1 (1000000, z) => z; 
	    loop1 (i, n)
		=>
		if (i & 1)   loop1( i + 1, n * 1.01);
		else         loop1( i + 1, n * 0.99);
		fi;
	#
	fun loop2 (10000000, z) => z; 
	    loop2 (i, n)
		=>
		if (i & 1)   loop2( i + 1, n * 1.01);
		else         loop2( i + 1, n * 0.99);
		fi;
	end;
	#
	pc::set_compiler_to_not_add_per_fun_call_counters_to_deep_syntax ();
	#
	pc::start_sigvtalrm_time_profiler ();
	printf "loop1 %g\n", loop1 (0, 1.0);
	printf "loop2 %g\n", loop2 (0, 1.0);
	pc::stop_sigvtalrm_time_profiler ();
	#
	pc::write_per_fun_time_profile_report  file::stdout;
	#
	apply (fn { fun_name, call_count, cpu_seconds } = printf "Function %s was called %d times and used %g CPU seconds.\n" fun_name call_count cpu_seconds)
	      (pc::get_per_fun_timing_stats_sorted_by_cpu_time_then_callcount ());
	#
	exit(0);

currently won't work because the script is compiled as one step
and then executed as a second step;  there is no way to call

    pc::set_compiler_to_add_per_fun_call_counters_to_deep_syntax ();

before the main compile can take place.  (It would be nice to support
something like -T switch on the  "#!/usr/bin/mythryl" line.)				XXX SUCKO FIXME


Thus, currently the easiest use-protocol is to do a 'make' in interactive mode:

  o Create a (say) y.lib looking like:

	LIBRARY_EXPORTS
		pkg y

	LIBRARY_COMPONENTS
		$ROOT/src/lib/std/standard.lib
		$ROOT/src/lib/core/viscomp/debugprof.lib
		y.pkg

  o Create a corresponding y.pkg looking like:

	# y.pkg
	#
	package y {
	    fun inner_loop1 (0, z) => z; 
		inner_loop1 (i, z)
		    =>
		    if (i & 1 == 0)   inner_loop1( i - 1, z + 2.00);
		    else              inner_loop1( i - 1, z - 1.00);
		    fi;
	    end;
	    fun outer_loop1 (0, z) => z;
		outer_loop1 (i, z) => outer_loop1( i - 1, inner_loop1( 1000000, z ) );
	    end;
	    #
	    fun inner_loop2 (0, z) => z; 
		inner_loop2 (i, z)
		    =>
		    if (i & 1 == 0)   inner_loop2( i - 1, z + 2.00);
		    else              inner_loop2( i - 1, z - 1.00);
		    fi;
	    end;
	    fun outer_loop2 (0, z) => z;
		outer_loop2 (i, z) => outer_loop2( i - 1, inner_loop2( 1000000, z ) );
	    end;
	    fun run ()
		=
		{
		    printf "loop1 %g\n" (outer_loop1 (1000, 1.0));
		    printf "loop2 %g\n" (outer_loop2 (1000, 1.0));
		};
	};

  o Compile and run as follows:

        linux% bin/my

        eval:  package pc = mythryl_compiler::profiling_control;   pc::set_compiler_to_add_per_fun_call_counters_to_deep_syntax ();
        eval:  make "y.lib";
        eval:  pc::set_compiler_to_not_add_per_fun_call_counters_to_deep_syntax ();   pc::start_sigvtalrm_time_profiler ();
        eval:  y::run ();
        eval:  pc::stop_sigvtalrm_time_profiler ();  pc::write_per_fun_time_profile_report  file::stdout;

		 %time cumsec      #call  fun_name
		 50.69   2.90 1000001000     .0000  y.<tempPackage>.inner_loop1.inner_loop1
		 49.21   5.72 1000001000     .0000  y.<tempPackage>.inner_loop2.inner_loop2
		   .08   5.72          0            Compilation
		   .00   5.72       1001     .0000  y.<tempPackage>.outer_loop1.outer_loop1
		   .00   5.72       1001     .0000  y.<tempPackage>.outer_loop2.outer_loop2
		   .00   5.72          1     .0000  y.<tempPackage>.run.run
		   .00   5.72          1     .0000  y.<tempPackage>.run.run.anon
		   .00   5.72          1     .0000  y.<tempPackage>.run.run.anon

	eval:  apply (fn { fun_name, call_count, cpu_seconds } = printf "Function %s was called %d times and used %g CPU seconds.\n" fun_name call_count cpu_seconds) (pc::get_per_fun_timing_stats_sorted_by_cpu_time_then_callcount ());

		Function y.<tempPackage>.inner_loop1.inner_loop1 was called 1000001000 times and used 2.9 CPU seconds.
		Function y.<tempPackage>.inner_loop2.inner_loop2 was called 1000001000 times and used 2.82 CPU seconds.
		Function Compilation was called 0 times and used 0.01 CPU seconds.
		Function y.<tempPackage>.outer_loop1.outer_loop1 was called 1001 times and used 0 CPU seconds.
		Function y.<tempPackage>.outer_loop2.outer_loop2 was called 1001 times and used 0 CPU seconds.
		Function y.<tempPackage>.run.run was called 1 times and used 0 CPU seconds.
		Function y.<tempPackage>.run.run.anon was called 1 times and used 0 CPU seconds.
		Function y.<tempPackage>.run.run.anon was called 1 times and used 0 CPU seconds.
		Function Major GC was called 0 times and used 0 CPU seconds.
		Function Minor GC was called 0 times and used 0 CPU seconds.
		Function Other was called 0 times and used 0 CPU seconds.
		Function Run-time System was called 0 times and used 0 CPU seconds.







Relevant files:

  src/lib/compiler/debugging-and-profiling/profiling/add-per-fun-byte-counters-to-deep-syntax.pkg
      Completely nonfunctional.
      Refers to replacement code which appears completely unavailable.
      Appears designed to insert space-profiling support code
      at the start of each deep syntax function.


  src/lib/compiler/debugging-and-profiling/profiling/add-per-fun-call-counters-to-deep-syntax.pkg
	#	
        Looks a lot like a working version of add_per_fun_byte_counters_to_deep_syntax.
	#	
        Inserts code at the start of each deep syntax function
        to increment a counter and also set a global variable
        to track the currently-executing function.  The latter
	is used to collect time usage stats in sigvtalrm_handler.			# sigvtalrm_handler	is from   src/c/machine-dependent/posix-profiling-support.c
	#	
	Declares three package-global values in support of this:
          o The vector of per-function call counters.
          o The current-function variable.
          o ?

  src/lib/compiler/debugging-and-profiling/profiling/tdp-instrument.pkg
	#
	Looks similar to add_per_fun_call_counters_to_deep_syntax;
	appears to be some sort of slightly higher-level functionality.

  src/lib/compiler/debugging-and-profiling/profiling/write-time-profiling-report.pkg


  src/lib/compiler/debugging-and-profiling/profiling/tell-env.pkg
	#
	# "This provides an abstract interface to the symbol tables for
	# the profiler to use."


  src/lib/compiler/debugging-and-profiling/profiling/profiling-control.api
  src/lib/compiler/debugging-and-profiling/profiling/profiling-control-g.pkg
	#
	# This appears intended to be the top-level client interface to be used
	# by application programmers wishing to use the facility.


  src/lib/compiler/debugging-and-profiling/profiling/profiling-dictionary.api
  src/lib/compiler/debugging-and-profiling/profiling/profiling-dictionary-g.pkg
	#
	# This actually gets invoked (only) in   src/lib/compiler/toplevel/compiler/mythryl-compiler-g.pkg  

  src/lib/compiler/debugging-and-profiling/profiling/profiling-control.api
  src/lib/compiler/debugging-and-profiling/profiling/profiling-control-g.pkg


  src/lib/std/src/nj/runtime-internals.pkg
	#
	# Contains both   package runtime_profiling_control   by reference from   src/lib/std/src/nj/runtime-profiling-control.pkg
	# and             package tdp                          by value.


  src/lib/std/src/nj/runtime-profiling-control.pkg
	#
	# Contains
	#
	#   runtime_index        = 0;			# ! MUST match	PROF_RUNTIME		from   src/c/h/profiler-call-counts.h
	#   minor_cleaning_index = 1;			# ! MUST match  PROF_MINOR_CLEANING	from   src/c/h/profiler-call-counts.h
	#   major_cleaning_index = 2;			# ! MUST match  PROF_MAJOR_CLEANING	from   src/c/h/profiler-call-counts.h
	#   other_index          = 3;			# ! MUST match  PROF_OTHER		from   src/c/h/profiler-call-counts.h
	#   compile_index        = 4;
	#   number_of_predefined_indices = 5;

  src/c/h/profiler-call-counts.h
	#
	#   #define PROF_RUNTIME	TAGGED_INT_FROM_C_INT(0)		// Must match    runtime_index		from   src/lib/std/src/nj/runtime-profiling-control.pkg
	#   #define PROF_MINOR_CLEANING	TAGGED_INT_FROM_C_INT(1)		// Must match    minor_cleaning_index	from   src/lib/std/src/nj/runtime-profiling-control.pkg
	#   #define PROF_MAJOR_CLEANING	TAGGED_INT_FROM_C_INT(2)		// Must match    major_cleaning_index	from   src/lib/std/src/nj/runtime-profiling-control.pkg
	#   #define PROF_OTHER		TAGGED_INT_FROM_C_INT(3)		// Must match    other_index		from   src/lib/std/src/nj/runtime-profiling-control.pkg
	#
	# This header gets #included in:
	#
	#     src/c/cleaner/call-cleaner.c
	#     src/c/main/runtime-exception-stuff.c
	#     src/c/main/run-mythryl-code-and-runtime-eventloop.c
	#     src/c/machine-dependent/posix-profiling-support.c
	#     src/c/lib/space-and-time-profiling/libmythryl-space-and-time-profiling.c



  src/lib/core/init/core.pkg
	#
	# Contains:
	#
	#    Tdp_Plugin
	#      =
	#      { name:      String,				# Name identifying plugin.
	#	save:      Void -> Void -> Void,
	#	push:      (Int, Int) -> Void -> Void,
	#	nopush:    (Int, Int) -> Void,
	#	enter:     (Int, Int) -> Void,
	#	register:  (Int, Int, Int, String) -> Void
	#      };
	#   fun tdp_reserve n
	#   fun tdp_reset ()
	#
	#   tdp_idk_entry_point   = 0;	    	#  pre-defined kinds of IDs (to be passed to "register") 
	#   tdp_idk_non_tail_call = 1;		# "idk" == "id_kind".
	#   tdp_idk_tail_call     = 2;
	#
	#   tdp_save     =  twostage .save;
	#   tdp_push     =  twostage .push;
	#
	#   tdp_nopush   =  onestage .nopush;
	#   tdp_enter    =  onestage .enter;
	#   tdp_register =  onestage .register;
	#
	#   tdp_active_plugins = hook;							# This is referenced (only) in  src/lib/std/src/nj/runtime-internals.pkg


  src/c/lib/space-and-time-profiling/libmythryl-space-and-time-profiling.c
	#
	# Contains:
	#
	#     set_time_profiling_rw_vector -- sets   time_profiling_rw_vector_global and calls start_incrementing__time_profiling_rw_vector__once_per_SIGVTALRM,
	#                                  or clears time_profiling_rw_vector_global and calls  stop_incrementing__time_profiling_rw_vector__once_per_SIGVTALRM
	#     set__time_profiling_is_running__to
	#     get_sigvtalrm_interval_in_microseconds
	#     

  src/c/machine-dependent/posix-profiling-support.c
	#
	# Contains:
	#
	#     start_incrementing__time_profiling_rw_vector__once_per_SIGVTALRM()   -- Activates   handling of SIGVTALRM
	#      stop_incrementing__time_profiling_rw_vector__once_per_SIGVTALRM()   -- Deactivates handling of SIGVTALRM
	#
	#     static sigvtalrm_handler -- When SIGVTALRM handling is activated,
	#                              responds to each SIGVTALRM event by doing
	#                              ++time_profiling_rw_vector_global[ THIS_FN_PROFILING_HOOK_REFCELL_GLOBAL ];

src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
	#
	# Has a little tweak to do    		rpc::this_fn_profiling_hook_refcell_global := wpr::other_index;
	# right before running user code and	rpc::this_fn_profiling_hook_refcell_global := wpr::compile_index;
	# right afterward.


src/lib/compiler/back/top/closures/allocprof.pkg
	#
	# Some completely unrelated closure-profiling logic;
	# need to investigate this at some point.

I don't think either of these two actually get used:

  src/app/debug/back-trace.pkg
	#
	# addto  runtime_internals::tdp::active_plugins   plugin;

  src/app/debug/test-coverage.pkg
	#
	# addto tdp::active_plugins plugin;


