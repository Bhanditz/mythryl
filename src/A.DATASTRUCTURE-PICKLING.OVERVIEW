Motivation
==========

In the agricultural world, pickling is a way of converting fresh, perishable cucumbers
into a form suited for long-term storage and long-distance transportation.

In the computing world, pickling is a way of converting ephemeral in-memory datastructures
into a bytevector form suited for long-term storage on disk and long-distance transmission
over the Internet.

The Mythryl codebase contains a general pickling facility with accepts any value on the
Mythryl heap and then returns a bytevector containing a pickled representation of that
heapnode plus all values reachable from it via the heap pointer graph.  Cycles are
handled and sharing is preserved.


Usage
=====

Access to this facility is via the   unsafe   package from    src/lib/std/src/unsafe/unsafe.api

    pickle_datastructure:    X -> vector_of_one_byte_unts::Vector;
    unpickle_datastructure:  vector_of_one_byte_unts::Vector -> X;

The   pickle_datastructure   input type 'X' means that you can pickle
datastructures of any type, just by supplying a root value of that type.

The   unpickle_datastructure   result type 'X' means that a pickle can
be assigned any type.

A typical usage protocol would look like:

    my  my_datastructure:  Foo
        =
        whatever ();

    my_pickle =  unsafe::pickle_datastructure   my_datastructure;

    // ... here my_pickle probably gets written to disk and
    // read back in a later run, or sent over the network
    // and unpickled in another process.  We pick up in the
    // new process:

    my  my_datastructure:  Foo
        =
        unsafe::unpickle_datastructure   my_datastructure;



Caveats
=======

 o  This mechanism is COMPLETELY UN-TYPESAFE.  It is entirely up to you
    to make sure that you assign the unpickled datastructure the right
    time.  No type information is embedded in the pickle.  If you mix
    up your types, YOU ARE HOSED.

 o  If you let untrusted users use this facility, YOU ARE HOSED.

 o  If the type Foo in the second process is different from the type Foo
    in the first process, YOU ARE HOSED.

 o  The pickle structure is specific to the particular Mythryl implementation
    used.  If the Mythryl heap datastructures change between pickling and
    unpickling YOU ARE HOSED.  These pickles are NOT an archival format
    supported over extended periods of time.

 o  This facility looks experimental;  it may not be fully debugged.
    It will die unceremoniously if the pickled winds up larger than
    supported by the implementation.



Mechanism
=========

This facility works by (ab)using the Mythryl stop-and-copy garbage collector.
The caller-supplied seed value is copied into the garbage collector to-space,
which is unused between garbage collections, and then normal garbage collection
code is used to copy into to-space all values reachable from the seed value
via the heap pointer graph.  The contents of to-space are then written into
a bytevector in a suitably position-independent form.
  



Future
======

The existing mechanism will cease to be usable as soon as we switch from
doing stop-and-copy garbage collection to doing incremental "realtime" garbage
collection.  At that point the facility will need to either be eliminated or
re-implemented.

Pickling datastructures for network transmission or to provide datastructure
persistence on disk is a pervasively useful facility in contemporary computing,
so we most likely need to re-implement this.

So far as I can see at the moment, the most promising approach is to:

 (1) Issue every heapchunk a unique 64-bit id number when it is created.
     In a replicating realtime garbage-collector we need to have
     a forwarding pointer slot associated with every heapchunk from its
     inception;  we should be able to store the unique ID number in this
     forwarding pointer until a replica is assigned, and in the forwarding
     pointer of that replica thereafter.

     This facility appears to be logically required if we are to preserve
     sharing during pickling and gracefully handle cyclic datastructures
     during pickling while remaining cleanly multithreaded (meaning that
     multiple overlapping pickles may possibly be under construction at
     the same time, in different threads).

     Assigning these ID numbers will impose some overhead, but on a 64-bit
     machine with a reasonable number of registers the overhead should not
     be prohibitive.  Each core in a multicore machine would be given its
     own ID number subspace, and would then issue ID numbers within that
     subspace just by incrementing a dedicated register.

 (2) We can then provide unsafe operations for accessing ID numbers and
     following pointers at the Mythryl level, and do all the rest of the
     un/pickling work in (otherwise) normal Mythryl code, without further
     C-level support, using a tree or hashtable keyed on ID numbers to
     handle datastructure cycles and subtree-sharing.

The added allocation-time overhead is unwelcome but I think something
we can live with, whereas giving up un/pickling entirely is something
we really cannot live with.  We might provide a system configuration
option for compiling without ID numbers for performance-critical
applications which do not need un/pickling support;  I think for most
general-purpose computing the overhead will not matter or be noticed.
