(Mostly just notes at this point)

A major problem with this is that the INTO instruction used gets
eliminated in AMD64/Intel64 architecture -- and as they point
out it ridiculously slow anyhow (traps via OS!), so we should
rewrite the code to just use conditional jumps, more on the
pattern of the heaplimit check code.  (The sparc and pwrpc
backends probably already do something similar, so we can
use them them as a model.)

Critical-looking spots for int-overflow codegeneration:

   fun put_branch_on_overflow ()		in    src/lib/compiler/back/low/intel32/treecode/translate-treecode-to-machcode-intel32-g.pkg
   fun get_completed_cccomponent' a		in    src/lib/compiler/back/low/intel32/treecode/translate-treecode-to-machcode-intel32-g.pkg

   set_up_fault_handlers ()			in    src/c/machine-dependent/posix-arithmetic-trap-handlers.c
   arithmetic_fault_handler ()			in    src/c/machine-dependent/posix-arithmetic-trap-handlers.c

   OVERFLOW_EXCEPTION_GLOBAL			in    src/c/h/runtime-globals.h
   overflow_exception_global_id0		in    src/c/h/runtime-globals.h

   overflow_exception_global			in    src/c/main/construct-runtime-package.c

   exception OVERFLOW				in    src/lib/core/init/pervasive.pkg
   exception OVERFLOW				in    src/lib/core/init/runtime.pkg
   exception OVERFLOW				in    src/lib/std/src/exceptions.pkg


   exception_message OVERFLOW => "overflow";	in    src/lib/std/src/exception-name.pkg

Places that actually check for OVERFLOW:

    except OVERFLOW = raise exception SIZE			src/lib/src/rw-bool-vector.pkg
           OVERFLOW = raise exception FAIL ...			src/app/future-lex/src/regular-expression.pkg
								src/lib/tk/src/basic_util.pkg
	   OVERFLOW = raise exception exceptions::SIZE;		src/lib/std/src/matrix.pkg
	   OVERFLOW =  muldiv (i, j / 2, k / 2);		src/lib/compiler/debugging-and-profiling/profiling/write-time-profiling-report.pkg
								src/lib/compiler/back/top/lambdacode/translate-lambdacode-to-anormcode.pkg
	   OVERFLOW =   muldiv (i, j / 2, k / 2);		src/lib/compiler/back/top/closures/allocprof.pkg
								src/lib/compiler/back/top/improve-nextcode/do-nextcode-inlining-new-unused-g.pkg
pick up here ---->
								src/lib/compiler/back/top/improve-nextcode/clean-nextcode-g.pkg
								src/lib/compiler/back/top/improve-nextcode/do-nextcode-inlining-g.pkg
								src/lib/compiler/back/top/translate/translate-deep-syntax-pattern-to-lambdacode.pkg
								src/lib/compiler/back/top/translate/template-expansion.pkg
								src/lib/compiler/back/top/translate/translate-deep-syntax-to-lambdacode.pkg
								src/lib/compiler/back/low/tools/adl-syntax/adl-raw-syntax-unparser.pkg
								src/lib/compiler/back/low/intel32/treecode/translate-treecode-to-machcode-intel32-g.pkg
								src/lib/compiler/back/low/mcg/machcode-controlflow-graph-g.pkg
								src/lib/compiler/back/low/treecode/treecode-simplifier-g.pkg
								src/lib/compiler/back/low/treecode/operand-table-g.pkg
								src/lib/compiler/back/low/pwrpc32/treecode/translate-treecode-to-machcode-pwrpc32-g.pkg
								src/lib/compiler/back/low/ir-archive/compute-freq.pkg
								src/lib/compiler/back/low/main/nextcode/per-codetemp-heapcleaner-info.pkg
								src/lib/x-kit/tut/calculator/accumulator.pkg

	These packages are not currently in use or maintained:	src/lib/compiler/back/low/ir-archive/compute-freq2.pkg
								src/lib/compiler/back/low/library/fixed-point.pkg

float overflow:
           exceptions::OVERFLOW =  ovfl ();			src/lib/std/src/ieee-float.pkg

	   OVERFLOW =   raise exception BAD_FLOAT s;		src/lib/compiler/src/fconst/slow-portable-floating-point-constants-g.pkg


2011-09-15 CrT:

  Added  backend::trap_int_overflow  control in  src/lib/compiler/toplevel/main/backend-controls.pkg

  Added    #DO set_control "backend::trap_int_overflow" "TRUE";   to the above files.  (Does nothing as yet.)                 
