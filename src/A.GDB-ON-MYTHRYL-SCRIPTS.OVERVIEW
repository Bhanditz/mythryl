Mythryl "executables" such as

    /usr/bin/mythryld

(the compiler proper) are not actually host executables at all,
but rather heap images which must be run via

    /usr/bin/mythryl-runtime-intel32

which -is- an honest-to-ghodz C executable.  This is normally
trasparent to the user because bin/mythryld starts with the
"shebang line"

    #!/usr/bin/mythryl-runtime-intel32 --shebang

which causes the Linux (or other Posix) host operating system
to consider   /usr/bin/mythryld   to be a "script" and
#!/usr/bin/mythryl-runtime-intel32  to be its "interpreter".

(In fact  /usr/bin/mythryld is actually compiled code and data which
/usr/bin/mythryl-runtime-intel32  simply loads into memory and runs,
but the host OS does not know or care.)

When we run Mythryl scripts, we put a similar shebang line

    #!/usr/bin/mythryl

first in the script.  This runs a small C program

    src/c/o/mythryl.c

which fires up the Mythryl compiler as a subprocess and then squirts the
ascii text for the script to the compiler subprocess through its stdin.
Also, mythryl.c appends the line

    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

to the script to make it exit correctly when done.  (Don't ask.)

All of this machinery makes things look simple and uncomplicated to the
Mythryl application programmer most of the time, but does get in the way
when (say) we want to run a Mythryl script under the gnu debugger.

In situations like that we need to know how to achieve the same effect
"by hand".



Step 1: Running a Mythryl "executable" heap image by hand
=========================================================

To run a mythryl "executable" heap image like /usr/bin/mythryld "by hand"
in straightforward fashion we must explicitly invoke the Mythryl runtime 
that would normally be implicitly invoked by the host operating system.

For example, instead of typing just

    linux% /usr/bin/mythryld

    Mythryl 110.58.6.1.0 built Wed Dec 28 02:37:00 2011
    Do   help();   for help

    eval:  


to run the compiler interactively, we instead do


    linux% bin/mythryl-runtime-intel32 --shebang bin/mythryld

    Mythryl 110.58.6.1.0 built Wed Dec 28 02:37:00 2011
    Do   help();   for help

    eval:  


(If you want to see exactly what the "--shebang" arg does, by all means
dire in and read the sourcecode for   src/c/o/mythryl.c.  But I suggest
you just accept it as black magic unless the mechanics interest you.)




Step 2: Running a Mythryl script by hand
========================================

To run a script, we must simulate by hand the trick which mythryl.c
uses to pass the scriptname to mythryld.  This trick is simple:  It
puts the script name in the environment variable MYTHRYL_SCRIPT.

Actually, it sets MYTHRYL_SCRIPT to the special value "<stdin>",
which cues the compiler to read the script text from its standard
input pipe, but for gdb debugging we want to keep stdin free, so
we will pass an actual filename.

On the bash shell we can set an environment variable just for the
duration of execution of (say) "program args" by doing

    VARNAME=value program args

this is much better than setting it persistently in the shell environment,
because it avoids the danger of our absent-mindedly leaving MYTHRYL_SCRIPT
set when done, which might confuse matters considerably when running mythryld
later on some other task.

So to run a script file 'test-script' "by hand" we need to do (in bash)

    MYTHRYL_SCRIPT=test-script bin/mythryl-runtime-intel32 --shebang bin/mythryld 

To complete the recipe, we must remember to end our file 'test-script' with the
magic line

    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

that would normally be appended by mythryl.c.

A simple test script might look like

    linux% cat test-script

    #!/usr/bin/mythryl 
    #
    print "Hello, world!\n";
    #
    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

and a by-hand invocation of it under bash according to the above formula would look like

    linux% MYTHRYL_SCRIPT=test-script bin/mythryl-runtime-intel32 --shebang bin/mythryld 
    Hello, world!
    linux% 



Step 3: Running a Mythryl script by hand under gdb
==================================================

To do the same thing under the GNU debugger gdb we just need to remember to use the

    --args

flag to distinguish program arguments from gdb arguments:

    linux% MYTHRYL_SCRIPT=test-script gdb --args bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [...]
    Reading symbols from /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32...done.
    (gdb) run
    Starting program: /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [Thread debugging using libthread_db enabled]
    Hello, world!

    Program received signal SIGTERM, Terminated.
    0xb7203811 in kill () from /lib/libc.so.6
    (gdb) 




Step 4: Running a Mythryl script by hand under gdb with breakpoints and single-stepping
=======================================================================================

So far, so useless.  What we really want to do is to run Mythryl code under gdb
with the ability to set breakpoints and then single-step through sequences of
particular interest.

First, some caveats:

  o The Mythryl compiler knows nothing about gdb or gdb symbols, so the only
    symbols you're going to have access to in gdb are those from the Mythryl
    runtime layer, which is written in C.

  o Mythryl code does not use any call/return stack -- much less the C call/return
    stack -- and gdb knows nothing about Mythryl code-generation conventions,
    so do not expect stack inspection commands to do you much good.

    In general Mythryl code packs everything possible in registers, and the
    remaining stuff gets allocated on the garbage-collected heap.

To facilitate gaining control in gdb at a reasonable point in execution (in
particular, after compiling the script is complete and actual execution has
begun) the Mythryl runtime file

    src/c/lib/heap/libmythryl-heap.c

exports ten functions

    Val   do_breakpoint_0   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_1   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_2   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_3   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_4   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_5   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_6   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_7   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_8   (Task* task, Val arg)   { return HEAP_VOID; }
    Val   do_breakpoint_9   (Task* task, Val arg)   { return HEAP_VOID; }

These exist specifically so that you can set breakpoints on them in the debugger
and then call them from your script, thus regaining control of code execution
at a reasonable point.

To take advantage of this we might change 'test-script' to read


    #!/usr/bin/mythryl 
    #
    heap_debug::breakpoint_1 ();
    #
    print "Hello, world!\n";
    #
    heap_debug::breakpoint_2 ();
    #
    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );


and then do


    linux% MYTHRYL_SCRIPT=test-script gdb --args bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [...]
    Reading symbols from /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32...done.

    (gdb) break do_breakpoint_1
    Breakpoint 1 at 0x805b2c8: file libmythryl-heap.c, line 844.

    (gdb) break do_breakpoint_2
    Breakpoint 2 at 0x805b2d8: file libmythryl-heap.c, line 845.

    (gdb) run
    Starting program: /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [Thread debugging using libthread_db enabled]

    Breakpoint 1, do_breakpoint_1 (task=0x80b5cc8, arg=0x1)
        at libmythryl-heap.c:844
    844 Val   do_breakpoint_1   (Task* task, Val arg)   { return HEAP_VOID; }

    (gdb) step
    run_mythryl_task_and_runtime_eventloop (task=0x80b5cc8)
        at ../main/run-mythryl-code-and-runtime-eventloop.c:344
    344                     task->argument

    (gdb) c
    Continuing.
    Hello, world!

    Breakpoint 2, do_breakpoint_2 (task=0x80b5cc8, arg=0x1)
        at libmythryl-heap.c:845
    845 Val   do_breakpoint_2   (Task* task, Val arg)   { return HEAP_VOID; }

    (gdb) p/x $eax
    $2 = 0x0

    (gdb) p/x $pc
    $1 = 0xb7203811

    (gdb) x/i $pc
    0xb7203811 <kill+17>:       mov    %edx,%ebx

    (gdb) x/10i $pc
    0xb7203811 <kill+17>:       mov    %edx,%ebx
    0xb7203813 <kill+19>:       cmp    $0xfffff001,%eax
    0xb7203818 <kill+24>:       jae    0xb720381b <kill+27>
    0xb720381a <kill+26>:       ret    
    0xb720381b <kill+27>:       call   0xb72de3a6
    0xb7203820 <kill+32>:       add    $0x1167d4,%ecx
    0xb7203826 <kill+38>:       mov    -0x30(%ecx),%ecx
    0xb720382c <kill+44>:       xor    %edx,%edx
    0xb720382e <kill+46>:       sub    %eax,%edx
    0xb7203830 <kill+48>:       mov    %edx,%gs:(%ecx)

    (gdb) info registers
    eax            0x0  0
    ecx            0xf  15
    edx            0x80b5cc8    134962376
    ebx            0x6888       26760
    esp            0xbffff48c   0xbffff48c
    ebp            0xbffff4b8   0xbffff4b8
    esi            0x6888       26760
    edi            0xf  15
    eip            0xb7203811   0xb7203811 <kill+17>
    eflags         0x200246     [ PF ZF IF ID ]
    cs             0x73 115
    ss             0x7b 123
    ds             0x7b 123
    es             0x7b 123
    fs             0x0  0
    gs             0x33 51

    (gdb) info all-registers
    eax            0x0  0
    ecx            0xf  15
    edx            0x80b5cc8    134962376
    ebx            0x6888       26760
    esp            0xbffff48c   0xbffff48c
    ebp            0xbffff4b8   0xbffff4b8
    esi            0x6888       26760
    edi            0xf  15
    eip            0xb7203811   0xb7203811 <kill+17>
    eflags         0x200246     [ PF ZF IF ID ]
    cs             0x73 115
    ss             0x7b 123
    ds             0x7b 123
    es             0x7b 123
    fs             0x0  0
    gs             0x33 51
    st0            0    (raw 0x00000000000000000000)
    st1            0    (raw 0x00000000000000000000)
    st2            0    (raw 0x00000000000000000000)
    st3            0    (raw 0x00000000000000000000)
    st4            1    (raw 0x3fff8000000000000000)
    st5            3.7252902984619140625e-06    (raw 0x3fecfa00000000000000)
    st6            1    (raw 0x3fff8000000000000000)
    st7            0    (raw 0x00000000000000000000)
    fctrl          0x27f        639
    fstat          0x20 32
    ftag           0xffff       65535
    fiseg          0x0  0
    fioff          0x0  0
    foseg          0x0  0
    fooff          0x0  0
    fop            0x0  0
    xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
      v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
      uint128 = 0x00000000000000000000000000000000}
    mxcsr          0x9fc0       [ DAZ IM DM ZM OM UM PM FZ ]
    mm0            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
        0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
    mm1            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
        0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
    mm2            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
        0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
    mm3            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
        0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
    mm4            {uint64 = 0x8000000000000000, v2_int32 = {0x0, 0x80000000}, 
      v4_int16 = {0x0, 0x0, 0x0, 0x8000}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x80}}
    mm5            {uint64 = 0xfa00000000000000, v2_int32 = {0x0, 0xfa000000}, 
      v4_int16 = {0x0, 0x0, 0x0, 0xfa00}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0xfa}}
    mm6            {uint64 = 0x8000000000000000, v2_int32 = {0x0, 0x80000000}, 
      v4_int16 = {0x0, 0x0, 0x0, 0x8000}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x80}}
    mm7            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
        0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}




