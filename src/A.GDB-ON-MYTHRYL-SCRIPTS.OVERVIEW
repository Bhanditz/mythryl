Mythryl "executables" such as

    /usr/bin/mythryld

(the compiler proper) are not actually host executables at all,
but rather heap images which must be run via

    /usr/bin/mythryl-runtime-intel32

which -is- an honest-to-ghodz C executable.  This is normally
trasparent to the user because bin/mythryld starts with the
"shebang line"

    #!/usr/bin/mythryl-runtime-intel32 --shebang

which causes the Linux (or other Posix) host operating system
to consider   /usr/bin/mythryld   to be a "script" and
#!/usr/bin/mythryl-runtime-intel32  to be its "interpreter".

(In fact  /usr/bin/mythryld is actually compiled code and data which
/usr/bin/mythryl-runtime-intel32  simply loads into memory and runs,
but the host OS does not know or care.)

When we run Mythryl scripts, we put a similar shebang line

    #!/usr/bin/mythryl

first in the script.  This runs a small C program

    src/c/o/mythryl.c

which fires up the Mythryl compiler as a subprocess and then squirts the
ascii text for the script to the compiler subprocess through its stdin.
Also, mythryl.c appends the line

    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

to the script to make it exit correctly when done.  (Don't ask.)

All of this machinery makes things look simple and uncomplicated to the
Mythryl application programmer most of the time, but does get in the way
when (say) we want to run a Mythryl script under the gnu debugger.

In situations like that we need to know how to achieve the same effect
"by hand".



Step 1: Running a Mythryl "executable" heap image by hand
=========================================================

To run a mythryl "executable" heap image like /usr/bin/mythryld "by hand"
in straightforward fashion we must explicitly invoke the Mythryl runtime 
that would normally be implicitly invoked by the host operating system.

For example, instead of typing just

    linux% /usr/bin/mythryld

    Mythryl 110.58.6.1.0 built Wed Dec 28 02:37:00 2011
    Do   help();   for help

    eval:  


to run the compiler interactively, we instead do


    linux% bin/mythryl-runtime-intel32 --shebang bin/mythryld

    Mythryl 110.58.6.1.0 built Wed Dec 28 02:37:00 2011
    Do   help();   for help

    eval:  


(If you want to see exactly what the "--shebang" arg does, by all means
dire in and read the sourcecode for   src/c/o/mythryl.c.  But I suggest
you just accept it as black magic unless the mechanics interest you.)




Step 2: Running a Mythryl script by hand
========================================

To run a script, we must simulate by hand the trick which mythryl.c
uses to pass the scriptname to mythryld.  This trick is simple:  It
puts the script name in the environment variable MYTHRYL_SCRIPT.

Actually, it sets MYTHRYL_SCRIPT to the special value "<stdin>",
which cues the compiler to read the script text from its standard
input pipe, but for gdb debugging we want to keep stdin free, so
we will pass an actual filename.

On the bash shell we can set an environment variable just for the
duration of execution of (say) "program args" by doing

    VARNAME=value program args

this is much better than setting it persistently in the shell environment,
because it avoids the danger of our absent-mindedly leaving MYTHRYL_SCRIPT
set when done, which might confuse matters considerably when running mythryld
later on some other task.

So to run a script file 'test-script' "by hand" we need to do (in bash)

    MYTHRYL_SCRIPT=test-script bin/mythryl-runtime-intel32 --shebang bin/mythryld 

To complete the recipe, we must remember to end our file 'test-script' with the
magic line

    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

that would normally be appended by mythryl.c.

A simple test script might look like

    linux% cat test-script

    #!/usr/bin/mythryl 
    #
    print "Hello, world!\n";
    #
    posix_1003_1b::kill (posix_1003_1b::K_PROC (posix_1003_1b::get_process_id' () ), posix_1003_1b::signal::term );

and a by-hand invocation of it under bash according to the above formula would look like

    linux% MYTHRYL_SCRIPT=test-script bin/mythryl-runtime-intel32 --shebang bin/mythryld 
    Hello, world!
    linux% 



Step 3: Running a Mythryl script by hand under gdb
==================================================

To do the same thing under the GNU debugger gdb we just need to remember to use the

    --args

flag to distinguish program arguments from gdb arguments:

    linux% MYTHRYL_SCRIPT=test-script gdb --args bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [...]
    Reading symbols from /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32...done.
    (gdb) run
    Starting program: /mythryl7/mythryl7.110.58/mythryl7.110.58/bin/mythryl-runtime-intel32 --shebang bin/mythryld
    [Thread debugging using libthread_db enabled]
    Hello, world!

    Program received signal SIGTERM, Terminated.
    0xb7203811 in kill () from /lib/libc.so.6
    (gdb) 

