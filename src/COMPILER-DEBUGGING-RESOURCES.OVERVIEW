Preliminary comments:

Debugging is in general a poor use of your time.  It is much better
to avoid the need to debug than to become expert at debugging, especially
as one moves to complex concurrent and parallel applications.  I recommend:

 o  Maintaining a good unit- and regression-testing suite and
    running it every compile cycle to catch errors early.

 o  Starting with a small, working application and expanding
    it in small steps.  This way you know any breakage is due
    to the last change.

 o  Keep hourly backups via your favorite revision control system
    -- or just gzipped tarballs.  Whatever works for you.

 o  When some edit trashes the system, just back up to the last
    known-good version of the codebase and do the change over by
    smaller steps, thinking harder about them.  Recoding beats
    debugging 99 times out of 100.

 o  Design for test, design for fault confinement, design for
    diagnosability, design for simple robust behavior.
    Spend your time preventing bugs rather than chasing them.

 o  Make a point of learning to use the Mythryl type system creatively
    so that the compiler finds bugs for you.  If you store every value
    in your program as a String, you might as well be programming in
    Tcl so far as having the compiler help you catch bugs.  If you
    introduce Mythryl types corresponding to natural partitions of
    your data, the compiler can do an amazingly good job of catching
    logic bugs via the type conflicts they induce.



That said, there are times when a bug slips through initial testing and
shows up late and mysteriously and must be tracked down the hard way.

Mythryl compiler debugging resources include:

 o Obviously, plain old printf calls can be used for occasional
   light additional narration.

 o Logging messages to (e.g.) mythryl.log via calls like

       log::note  .{  sprintf "foo %s\n" bar ; };
       log::warn  .{  sprintf "foo %s\n" bar ; };
       log::fatal .{  sprintf "foo %s\n" bar ; };

   The latter also shuts down the process and exits.

   (The point of passing a thunk rather than a string to these
   calls is that if logging is disabled by some switch, the
   time needed to construct the message string can be saved
   by not evaluating the thunk.)

 o Logging messages to stderr via calls like

       log::note_on_stderr .{ sprintf "foo %s\n" bar ; };

   This has the advantage of not going through any of the
   standard I/O library machinery -- it is essentially a
   direct C write() call to the stderr stream.  This guarantees
   prompt output and minimal interaction with logical being
   debugged, including the standard library I/O stack fns.

 o Logging messages to a ram circular buffer via 

      log::note_in_ramlog .{ sprintf "foo %s\n" bar ; };

   style calls.  This has the advantage of not making any
   system calls at all.  It can also be called very frequently
   without filling up the disk as would calls to diskfile logging
   routines -- it simply writes around and around the ram buffer,
   making the final buffer's worth of calls available for inspection
   in case of a crash.

   To trigger regular dumps of the ramlog buffer to disk do (say)
       setenv MILLISECONDS_BETWEEN_RAMLOG_AND_SYSLOG_DUMPS 250
   which will write ram.log four times a second.

 o The fun   thread_scheduler_statestring ()
   from   src/lib/src/lib/thread-kit/src/core-thread-kit/microthread-preemptive-scheduler.pkg
   may be used to generate a compact representation of the run queues
   for inclusion in any of the above log::* calls.  This can be useful
   when debugging scheduler behavior, or unexpected interactions with
   the scheduler.  I usually put the string it produces at the start
   of the message string, so that these substrings will line up between
   successive messages, giving sort of a flipbook-animation view of
   runqueue activity.


 o A tripwire buffer is maintained at the end of each agegroup0 buffers to
   detect overruns;  it is automatically checked each garbage collection and
   may also be explicitly invoked viaa
        heap_debug::check_agegroup0_overrun_tripwire_buffer "Doing post-compiledfile-load tripwire check";


 o  There are also the trace and xtrace facilities used via code like

        package xtr =  xlogger;				# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
        trace =  xtr::log_if  xtr::io_logging  0;		# Conditionally write strings to tracing.log or whatever.

    and then

        trace  .{ sprintf "foo = %s" foo; };
