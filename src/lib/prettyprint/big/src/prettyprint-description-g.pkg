## prettyprint-description-g.pkg

# Compiled by:
#     src/lib/prettyprint/big/src/prettyprinting.sublib


# This generic implements a declarative way to specify pretty-printing
# (see prettyprint-description.api).

# This generic is nowhere invoked:
#
generic package  prettyprint_description_g   (s:  Prettyprint_Buffer)		# Prettyprint_Buffer		is from   src/lib/prettyprint/big/src/prettyprint-buffer.api
: (weak)         Prettyprint_Description					# Prettyprint_Description	is from   src/lib/prettyprint/big/src/prettyprint-description.api
{
    package pps = s;

    Styled_String  = pps::Styled_String;
    Textstyle  = pps::Textstyle;
    Indent = pps::Indent;

    # The Prettyprint_Description type is a
    # concrete representation
    # of a pp layout:

    Prettyprint_Description
	= HORIZONTAL_BOX     List( Prettyprint_Description )
	| VERTICAL_BOX     (Indent, List( Prettyprint_Description ))
	| HORIZONTAL_ELSE_VERTICAL_BOX    (Indent, List( Prettyprint_Description ))
	| WRAP_BOX   (Indent, List(Prettyprint_Description))
	| BOX        (Indent, List(Prettyprint_Description))
	| STYLED_STRING    Styled_String
	| STRING   String
	| TEXTSTYLE    (Textstyle, List(Prettyprint_Description))
	| BREAK    { spaces: Int,   indent_on_wrap: Int }
	| NEW_LINE
	| NBSPACE  Int
	| CONTROL  (pps::Markup_Buffer -> Void)
	;

    # Prettyprint a description: 
    #
    fun description (stream, ppd)
        =
	prettyprint ppd
	where
            fun prettyprint (HORIZONTAL_BOX                   l ) =>    {   pps::begin_horizontal_box stream;				prettyprint_list l;	pps::end_box stream;};
		prettyprint (VERTICAL_BOX                 (i, l)) =>    {   pps::begin_indented_vertical_box stream i;			prettyprint_list l;	pps::end_box stream;};
		prettyprint (HORIZONTAL_ELSE_VERTICAL_BOX (i, l)) =>    {   pps::begin_indented_horizontal_else_vertical_box stream i;	prettyprint_list l;	pps::end_box stream;};
		prettyprint (WRAP_BOX                     (i, l)) =>    {   pps::begin_indented_wrap_box stream i;			prettyprint_list l;	pps::end_box stream;};
		prettyprint (BOX                          (i, l)) =>    {   pps::begin_indented_wrap'_box stream i;			prettyprint_list l;	pps::end_box stream;};
		#
		prettyprint (STYLED_STRING tok     ) =>     pps::styled_string stream tok;
		prettyprint (STRING s      ) =>     pps::string stream s;
		prettyprint (TEXTSTYLE (sty, l)) => {   pps::push_textstyle (stream, sty);	prettyprint_list l;	pps::pop_textstyle stream;	};
		prettyprint (BREAK brk     ) =>     pps::break stream brk;
		prettyprint NEW_LINE         =>     pps::newline stream;
		prettyprint (NBSPACE n)      =>     pps::nonbreakable_spaces stream n;
		prettyprint (CONTROL ctl_g)  =>     pps::control stream ctl_g;
            end 

	    also
	    fun prettyprint_list []         =>  ();
		prettyprint_list (item ! r) =>  {   prettyprint item;	prettyprint_list r;	};
            end;
	end;

    # Exported pp description constructors: 
    #
    horizontal_box		    =  HORIZONTAL_BOX;
    vertical_box		    =  VERTICAL_BOX;
    horizontal_else_vertical_box    =  HORIZONTAL_ELSE_VERTICAL_BOX;
    #
    wrap_box			    =  WRAP_BOX;
    box				    =  BOX;
    styled_string		    =  STYLED_STRING;
    #
    string			    =  STRING;
    textstyle			    =  TEXTSTYLE;
    break			    =  BREAK;
    #
    cut				    =  BREAK { spaces => 0, indent_on_wrap => 0 };
    newline 			    =  NEW_LINE;
    #
    nonbreakable_spaces		    =  NBSPACE;
    control			    =  CONTROL;
    #
    fun space n
	=
	BREAK { spaces => n, indent_on_wrap => 0 };


};



## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
