## prettyprint-mill-g.pkg
#
# This file is intended to contain just the core prettyprint mill code.
# Convenience code for the benefit of code clients belongs in wapper pkg
# 
#     src/lib/prettyprint/big/src/base-prettyprint-mill-g.pkg
#
# For a general motivation and overview see Note[1] at bottom of:
#
#     src/lib/prettyprint/big/src/core-prettyprint-mill.api
#
# Our only code client is the wrapper which makes us more palatable to client code:
#
#     src/lib/prettyprint/big/src/base-prettyprint-mill-g.pkg
#
#############################################################################################
# Ok, this whole prettyprinter thing is coming into focus.
#
#     ##########################################################
#     It is all about boxes and squibs which do different things
#     depending on whether the box is monoline or multiline.
#     ##########################################################
#
# The generic box record should maybe include
#
#     .enter_box_stuff_when_monoline:   Prettyprint_Mill -> Void,		# Or maybe these should be Ref(List(Prettyprint_Mill -> Void)) to allow easy incremental updates?
#     .enter_box_stuff_when_multiline:  Prettyprint_Mill -> Void,
#
#     .exit_box_stuff_when_monoline:    Prettyprint_Mill -> Void,
#     .exit_box_stuff_when_multiline:   Prettyprint_Mill -> Void
#
# to allow arbitrary enter-box 
# and we should have a generic squib
#
#     pp.custom:   { monoline:  Void -> { tab:    Int, text: String },			# We don't provide 'column' because we want tabbing behavior abstract.
#                    multiline: Void -> { indent: Int, text: String }			# 
#		   }
#
# to do one   set of commands when the box is monoline
# and another set of commands when the box is multiline.
#
# On the specific command front, I think we need a
#
#     pp.pad n
#
# command which emits 'n' blanks when the box is MULTI-line
# and does nothing when it is monoline.
#
# We also want I think more prettyprinter defaults governing
# weird hacks like newline/indent collapsing, and a
#
#     pp.box' -> List( Default_Overrides ) -> ...
#
# which allows setting all the box behaviors explicitly on a
# box-by-box basis.
#
#     ##########################################################
#     Tabs are a global coherency issue;  they should be set once
#     globally in the prettyprinter and squibs should work in
#     terms of tabs.
#     For my standard layout:
#        tabstops should be every '2'
#        .tab 1    should move one tabstop.
#        .tab 2    should move to an even-number tabstop -- NOT JUST TWO TABS.
#
#        .indent i should be just like .tab except relative to left margin not cursor.
#                  It will ultimately do a newline iff column > target location.
#     .tab and .indent should both just set a virtual location,
#     NOT actually output newlines and blanks.
#     ##########################################################
#
#
#############################################################################################
#
#
# The core engine for the system prettyprinter.
#
# See ../README.
#
# Concise overview:
#
# -> The only purpose of the prettyprinter is to decide where
#    to put newlines, whitespace and indentation.
#
# -> The prettyprinter views its input stream as consisting
#    of known-width 'styled_strings' containing the useful text to be
#    printed, and of 'breaks', which mark places where it is
#    allowed to insert a newline.
#
# -> The desired structure is represented as a set of nested
#    'boxes', where a box essentially indicates the newline
#    insertion policy to be followed for some stretch of text.
#      Each box also has some default indentation for each line,
#    which will typically increase with box nesting level.
#
# -> The simplest box type is 'h' (horizontal)', in which
#    breaks are -never- converted to newlines.
#
# -> The next simplest box type is 'v' (vertical)', in which
#    breaks are -always- converted to newlines.
#
# -> The 'line' box type is slightly more sophisticated:  It
#    behaves as an 'h' box if the result will fit on a line,
#    else as a v box:  In simple cases, this results in the
#    styled_strings in the box all being placed in a line, either
#    horizontal or vertical.  In an line box, either all the
#    breaks produce newlines, or else none do.
#
# -> The 'wrap' box type is the most commonly used, and implements
#    the familiar word-wrap algorithm:  A break produces a newline
#    iff this is required to keep the line length within width limits.
#
## 2007-09-10 CrT: Completely rewritten.  Twice. ;-)
#
# Design goals:
#
# I)   For simplicity and consistency, layout of a box should depend
#      only on its contents, not on anything outside of it, such as
#      how far it is indented.
#
# II)  For readability, the inked part of a line (i.e., the part left
#      after stripping leading and trailing whitespace) should be about
#      10-100 chars long.  For example, we don't want to degenerate
#      to vertical columns of short words against the right margin.
#
# III) We are willing to have output extend arbitrarily far to the
#      right (everyone has scrollbars these days) if necessary,
#      but we want to minimize rightward drift due to indentation
#      where reasonably possible.
#
# Implementation decisions driven by above design goals:
#
# 1)   
#
# See also:
#     src/lib/prettyprint/big/src/prettyprint-stream-g.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprint-mill.lib


###		"This task was appointed to you, Frodo of the Shire.
###              If you do not find a way, no one will."
###                                                  --Galadriel





stipulate
    package fil =  file__premicrothread;					# file__premicrothread							is from   src/lib/std/src/posix/file--premicrothread.pkg
    package l2s =  list_to_string;						# list_to_string							is from   src/lib/src/list-to-string.pkg
#   package pmt =  prettyprint_mill_types;					# prettyprint-mill_types						is from   src/lib/prettyprint/big/src/prettyprint-mill-types.pkg
herein

    generic package   core_prettyprint_mill_g   (				# 
	#             =======================
	#									# "tt" == "traitful text"
	package tt:	Traitful_Text;						# Traitful_Text								is from   src/lib/prettyprint/big/src/traitful-text.api
	package out:    Prettyprint_Output_Stream;				# Prettyprint_Output_Stream						is from   src/lib/prettyprint/big/src/out/prettyprint-output-stream.api
										# out will be something like html_prettyprint_output_stream		   from   src/lib/prettyprint/big/src/out/html-prettyprint-output-stream.pkg
	sharing tt::Texttraits == out::Texttraits;
    )
    : (weak)
    api {
	include Core_Prettyprint_Mill;						# Core_Prettyprint_Mill							is from   src/lib/prettyprint/big/src/core-prettyprint-mill.api

	dump:  (fil::Output_Stream, Prettyprint_Mill)
		  ->
		  Void;
    }
    {
	package pmt =  core_prettyprint_mill_types_g(  package out = out;  );

	default_tabstops_are_every =    2;					# This can be overridden via TABSTOPS_ARE_EVERY.
	default_target_box_width   =  100;					# This can be overridden via DEFAULT_TARGET_BOX_WIDTH.
	max_box_nesting            = 1000;					# Purely to catch prettyprint infinite recursions. 

	Prettyprint_Output_Stream  =  out::Prettyprint_Output_Stream;		# Handles device-specific aspects (e.g. selecting bold/bright/green/... text) of writing to ansi terminal, plain ascii stream, html stream or whatever.
	Texttraits     =  tt::Texttraits;					# Text attributes like color, underline, blink etc.
	Traitful_Text  =  tt::Traitful_Text;					# A Traitful_Text contains a String plus whatever Textstyle information is required to render it in HTML or on an ansi terminal or whatever.

	default_left_margin_is =  pmt::BOX_RELATIVE 4;				# I don't think this is actually ever used...

										# We build up a prettyprint expression as a tree
										# of nested_boxes until we are flushed, at which
										# point we actually format and print it.
										#
										# At any given time, the currently open box is 'box',
										# the one enclosing it is first in the nested_boxes
										# list, and the root of the box tree is last in the
										# nested_boxes list.  (Keeping the top of the stack
										# in a separate variable lets us communicate to the
										# type system that we always have at least one box
										# on the stack, and thus avoid a lot of spurious
										# checks for stack-empty.)
										#
										# We don't actually use the texttraits_stack
										# for anything in this module -- it is
										# purely an opaque-to-us customer
										# convenience:


	Prettyprint_Mill
	  =
	  {
	    output_stream:		Prettyprint_Output_Stream,		# Where to send formatted output.
	    output_stream_is_closed:	Ref( Bool ),				# TRUE iff the stream is closed. 

	    box:			Ref pmt::Box,
	    nested_boxes:		Ref (List(pmt::Box)),
	    box_nesting:		Ref Int,				# Current depth of 'nested_boxes'. Used only to catch infinite loops.

	    next_box_id:		Ref Int,

	    texttraits_stack:		Ref( List(Texttraits) ),

	    tabstops_are_every:		Int,					# Usually 2 chars, set in multiples of 2 for a mostly tab-every-four system with occasional 'half-tab' settings.
	    default_target_box_width:	Int,
	    default_left_margin_is:	pmt::Left_Margin_Is,
	    do_delayed_newline_indent:	Ref(Bool)				# Multiple nested boxes closing tends to produce lots of newline-indentblanks sequences in a row, which manifest as a
	};									# sequence of unexpected blank lines. Ugly! This var lets us collapse each such sequence into a single newline-indentblanks.
	Pp = Prettyprint_Mill;							# For when the brevity bug bites.






	fun nblanks n
	    =
	    string::cat (map (fn _ = " ") (1 .. n));


	fun tab1 (column, tabstop)			# We are at (zero-based) 'column' and tabstops are set
	    =						# every 'tabstop' chars. To move to the next tabstop, 
	    if (tabstop > 0)				# how many blanks (1 .. tabstop) do we need to emit?
		tabstop - (column % tabstop);
	    else
		0;					# We use tabstop==0 to mean "nop -- do nothing".
	    fi;

	fun tab0 (column, tabstop)			# We are at (zero-based) 'column' and tabstops are set
	    =						# every 'tabstop' chars. To leave cursor at a tabstop, 
	    {   blanks = tab1 (column, tabstop);	# how many blanks (0 .. tabstop-1) do we need to emit?
		#
		if (blanks==tabstop)   0;
		else		       blanks;
		fi;
	    };

	fun breaklen (column', r: { tab0: Int, tab: Int, text: String }, pp:Pp)			# Compute length of break when not wrapped.
	    =
	    {   column = column' + tab0 (column', r.tab0 * pp.tabstops_are_every);
		column = column  + tab1 (column,  r.tab  * pp.tabstops_are_every);
	        column = column  + string::length r.text ;
		column - column';
	    };


	# *** DEBUGGING FUNCTIONS ***

	package f = sfprintf;							# sfprintf	is from   src/lib/src/sfprintf.pkg

	fun box_format_to_string pmt::NONE        =>  "NONE";
	    box_format_to_string pmt::ALL         =>  "ALL";
	    box_format_to_string pmt::ALL_OR_NONE =>  "ALL_OR_NONE";
	    box_format_to_string pmt::AS_NEEDED   =>  "AS_NEEDED";
	end;


	fun left_margin_is_to_string (pmt::BOX_RELATIVE    n) =>  cat ["(BOX_RELATIVE ",    int::to_string n, ")"];
	    left_margin_is_to_string (pmt::CURSOR_RELATIVE n) =>  cat ["(CURSOR_RELATIVE ", int::to_string n, ")"];
	end;




	fun dump (out_stream, pp:Pp)						# Prettyprint out_stream contents for debugging.
	    =
	    {   print  "BEGIN\n";
		#
		printf' (
		    "box_nesting = %3d\n",
		    [   f::INT *pp.box_nesting
		    ]
		);

		print   "Expression:\n";

		case *pp.nested_boxes
		    #
		    [] => print_box *pp.box "";
		    x  => case (reverse x)
			      #
			      bot ! rest => print_box bot "";
			      _          => raise exception FAIL "impossible";
			  esac;
		esac;

		print "\n";

		print  ("END\n");
	    }
	    where
		fun print string
		    =
		    fil::write (out_stream, string);


		fun printf' (format, items)
		    =
		    print (f::sprintf' format items);


    #	    fun format_box_stack_element_to_string (box_format, box_indent, target_width)
    #		=
    #		f::sprintf'   "(%s, %d, %d)"   [f::STR (box_format_to_string  box_format), f::INT box_indent, f::INT target_width];


		fun print_list format_element []
			=>
			print "[]";

		    print_list format_element my_list
			=>
			print (
			    l2s::list_to_string'
				#
				{ first     => "[\n    ",
				  last      => "]",
				  between   => "\n    ",
				  to_string => format_element
				}
				#
				my_list
			);
		end;

		fun print_box   (box: pmt::Box)   prefix
		    =
		    {   print (prefix + "Box");
			print ("   id = "			+ (int::to_string           box.id));
			print ("   left_margin_is = "		+ (left_margin_is_to_string box.left_margin_is));
			print ("   target_width = "		+ (int::to_string           box.target_width));
			print ("   actual_width = "		+ (int::to_string          *box.actual_width));
			print ("   is_multiline = "		+ (bool::to_string         *box.is_multiline));
			print ("   box_format = "		+ (box_format_to_string    box.box_format));
			#
			print ("   reversed_contents len = "	+ (int::to_string (list::length *box.reversed_contents)));
			print ("   contents len = "		+ (int::to_string (list::length *box.contents)));
			print  ":\n";

			print_tokens  *box.contents  (prefix + "    ")
			where
			    fun print_tokens [] _
				    =>
				    ();

				print_tokens  (token ! rest)  prefix
				    =>
				    {   case token
					    #
					    pmt::TEXT { string, length }
						=>
						print (prefix + "TEXT (" + (int::to_string length) + ") '" + string + "'\n");

					    pmt::ENDTXT { string, length }
						=>
						print (prefix + "ENDTXT (" + (int::to_string length) + ") '" + string + "'\n");

					    pmt::TAB  int
						=>
						print (prefix + "TAB" + (int::to_string int) + "\n");

					    pmt::BREAK break
						=>
						{   print  (prefix + "BREAK {");
						    print  (" wrap="  + (bool::to_string *break.wrap));
						    printf  " ifnotwrap => { tab0 => %d, tab => %d, text => \"%s\" },"  break.ifnotwrap.tab0  break.ifnotwrap.tab  break.ifnotwrap.text;
						    printf  " ifwrap    => { tab0 => %d, tab => %d, text => \"%s\" }"     break.ifwrap.tab0     break.ifwrap.tab     break.ifwrap.text;
						    print  " }\n";
						};

					    pmt::PUSH_TEXTTRAITS _ => print (prefix + "PUSH_TEXTTRAITS ...\n");
					    pmt::POP_TEXTTRAITS    => print (prefix + "POP_TEXTTRAITS\n");

					    pmt::NEWLINE      => print (prefix + "NEWLINE\n");
					    pmt::CONTROL _    => print (prefix + "CONTROL ...\n");

					    pmt::BOX box      => {   print (prefix + "BOX:\n");
								print_box  box  (prefix + "    "); 
							    };
					esac;

					print_tokens  rest  prefix;
				    };
			    end;				# fun print_tokens
			end;					# where
		    };

	    end;



	# *** UTILITY FUNCTIONS ***

	too_long =  8888;   # A box-length value picked to be large
			    # enough to not fit in any plausible box,
			    # but small enough that adding a few
			    # together won't produce integer overflow.


	fun current_texttraits (pp:Pp as { texttraits_stack => REF (texttraits ! _),    ... } ) =>  texttraits;						# Current texttraits are the top entry on the textstyle stack,
	    current_texttraits (pp:Pp as { texttraits_stack => REF [], output_stream,  ... } ) =>  out::default_texttraits output_stream;		# or else the default texttraits if the stack is empty:
	end;

fun token_to_string t
    =
    case t
	pmt::TEXT t		=>	sprintf "TEXT \"%s\"" t.string;
	pmt::ENDTXT t		=>	sprintf "ENDTXT \"%s\"" t.string;
	pmt::TAB n		=>	sprintf "TAB %d" n;
	pmt::PUSH_TEXTTRAITS _	=>	"PUSH_TEXTTRAITS";
	pmt::POP_TEXTTRAITS	=>	"POP_TEXTTRAITS";
	pmt::CONTROL _		=>	"CONTROL";
	pmt::NEWLINE		=>	"NEWLINE";
	pmt::BREAK break	=>	sprintf "BREAK { ifnotwrap => { tab0=>%d, tab=>%d, text=>\"%s\" }, ifwrap => { tab0=>%d, tab=>%d, text=>\"%s\" }, wrap=>%B }" break.ifnotwrap.tab0 break.ifnotwrap.tab break.ifnotwrap.text break.ifwrap.tab0 break.ifwrap.tab break.ifwrap.text  *break.wrap;
	pmt::BOX box 		=>      sprintf "BOX#%d{%d%s}" box.id *box.actual_width (*box.is_multiline ?? "M" :: "");
    esac;

fun tokens_to_string ts
    =
    string::join'   "[ "   ", "   " ]"   (map token_to_string ts);


	fun count_breaks []                    =>  0;
	    count_breaks (pmt::BREAK _ ! rest) =>  1  +  count_breaks rest;
	    count_breaks (           _ ! rest) =>  0  +  count_breaks rest;
	end;
	

	# Given the list of tokens in a BOX,
	# wrap either all BREAKs or none of them.
	#
	# Any embedded boxes have already been
	# wrap_box()'d, so they have valid values
	# for actual_width and is_multiline.
	#
	fun wrap_box_contents_all_or_none  (
		target_width,				# Target width for this box.
		tokens,					# List of tokens in this box.
		box_format,				# Which BREAKs should we wrap?  One of ALL, NONE, ALL_OR_NONE.
		pp:Pp
	    )
	    =
	    {
if *log::debugging
printf "target_width d=%d, %d tokens: %s    -- wrap_box_contents_all_or_none/TOP in prettyprint-mill-g.pkg\n" target_width (list::length tokens) (tokens_to_string tokens);
fi;
		box_is_multiline    =  REF FALSE;
		actual_width	    =  REF 0;
		column		    =  0;		# Current column, relative to box left margin
		#
		wrap_them				# Should we change all BREAKs to newlines, or none or them?
		    =
		    case box_format
			#
			pmt::ALL  =>  TRUE;
			pmt::NONE =>  FALSE;

			pmt::ALL_OR_NONE
			    =>
			    {   unwrapped_length
				    =
				    total_length (tokens, 0)
				    where
					fun total_length ([], result) => result;
					    #
					    total_length (((pmt::TEXT    { length, ... }) ! rest), result) =>   total_length (rest, result +  length		       );
					    total_length (((pmt::ENDTXT  { length, ... }) ! rest), result) =>   total_length (rest, result +  length		       );
					    total_length (((pmt::TAB       i            ) ! rest), result) =>   total_length (rest, result +  tab1(result,i)	       );
					    total_length (((pmt::BREAK     break	   ) ! rest), result) =>   total_length (rest, result +  breaklen(result,break.ifnotwrap,pp));

					    total_length ([ pmt::BOX box ], result)
						=>
						case box.left_margin_is
						    #
						    pmt::CURSOR_RELATIVE _ =>   result + *box.actual_width;		# Multiline is potentially OK when it is last in line and a cbox.
						    pmt::BOX_RELATIVE    _ =>   too_long;
						esac;

					    total_length (((pmt::BOX box) ! rest), result)
						=>
						if *box.is_multiline too_long;
						else		     total_length (rest, result + *box.actual_width);
						fi;

					    total_length ((_ ! rest), result)
						=>
						total_length (rest, result);
					end;
				    end;

if *log::debugging
if (unwrapped_length  >  target_width)
printf "target_width d=%d, %d tokens: %s: WE WILL WRAP YOU!    -- wrap_box_contents_all_or_none/TOP in prettyprint-mill-g.pkg\n" target_width (list::length tokens) (tokens_to_string tokens);
fi;
fi;
				unwrapped_length  >  target_width;
			    };

			pmt::AS_NEEDED => raise exception FAIL "wrap_box_contents_all_or_none: box_format == AS_NEEDED!?";
		    esac;


		fun per_token ([], column) =>   column;
		    #
		    per_token (tokens as token ! rest, column)
			=>
			case token
			    #
			    pmt::BREAK break
				=>
				if (column <= breaklen(0,break.ifwrap,pp)  and  count_breaks tokens == 1)
				    #
				    per_token  (rest, column + breaklen(column,break.ifnotwrap,pp));			# Wrapping won't move us leftward anyhow, so don't even consider it.

				elif wrap_them
				    #
if *log::debugging
printf "WRAPPING at column %d indent after wrap d=%d -- wrap_box_contents_all_or_none in prettyprint-mill-g.pkg\n" column (breaklen(0,break.ifwrap,pp));
fi;
				    if (*actual_width < column)   actual_width := column;   fi;
				    break.wrap := TRUE;
				    box_is_multiline := TRUE;
				    per_token  (rest, breaklen(0,break.ifwrap,pp));
				else
				    per_token  (rest, column + breaklen(column,break.ifnotwrap,pp));
				fi;

			    pmt::NEWLINE =>  {   if (*actual_width < column)   actual_width := column;   fi;
					    box_is_multiline := TRUE;
					    per_token  (rest, 0);
					};

			    pmt::TEXT   text		  =>   per_token  (rest, column + text.length   );
			    pmt::ENDTXT text		  =>   per_token  (rest, column + text.length   );
			    pmt::TAB                 n =>   per_token  (rest, column + tab1(column,n));
			    pmt::PUSH_TEXTTRAITS _     =>   per_token  (rest, column                 );
			    pmt::POP_TEXTTRAITS        =>   per_token  (rest, column                 );
			    pmt::CONTROL _             =>   per_token  (rest, column                 );

			    pmt::BOX box     =>  {   if(*actual_width <  column + *box.actual_width)
						    actual_width := column + *box.actual_width;
						fi;
						if *box.is_multiline
						    box_is_multiline :=  TRUE;
						    per_token( rest, 0 );
						else
						    per_token (rest, column + *box.actual_width);
						fi;
					    };
			esac;
		end;							# fun per_token

		column =   per_token (tokens, column);

		if (*actual_width < column)   actual_width := column;   fi;

		(*actual_width, *box_is_multiline);
	    }								# fun wrap_box_contents_all_or_none


	# Here we implement a conventional word-wrap
	# style algorithm where we wrap a line at
	# a BREAK iff it is our last chance to avoid
	# exceeding our assigned box width.

	also
	fun wrap_box_contents_as_needed  (target_width, tokens, pp:Pp)
	    =
	    {	column =   per_token (tokens, /*column=*/0);
		#
		if (*actual_width < column)   actual_width := column;   fi;

		(*actual_width, *box_is_multiline);
	    }
	    where
if *log::debugging
printf "target_width d=%d, %d tokens    -- wrap_box_contents_as_needed in prettyprint-mill-g.pkg\n" target_width (list::length tokens);
fi;
		box_is_multiline = REF FALSE;
		actual_width	 = REF 0;

		fun forced_followon_fits_in' (tokens, space_left_on_line)				# Decide if tokens from here to next break/newline will fit in remaining space on line.
		    =
		    fits_in'  (tokens, 0)
		    where 
			fun fits_in' (tokens, column)							# Early-out check: Stop iterating as soon as we know we don't fit.
			    =
{
if *log::debugging
printf "forced_followon_fits_in (column=%d, %d tokens: %s\n" column (list::length tokens) (tokens_to_string tokens);
fi;
			    if (column > space_left_on_line)   FALSE;
			    else                               fits_in (tokens, column);
			    fi
;}
			also
			fun fits_in  ([], column) =>   (column <= space_left_on_line);
			    #
			    fits_in  ([ pmt::BOX { left_margin_is => pmt::CURSOR_RELATIVE _, is_multiline => REF TRUE, actual_width => REF width, ... } ],  column)
				=>
				(column + width) <= space_left_on_line;								# Multiline box is ok when CURSOR_RELATIVE and last in line.

			    fits_in  (token ! rest,  column)
				=>
				case token
				    #
				    pmt::TEXT   text			=>	fits_in'  (rest, column + text.length	);
				    pmt::ENDTXT text			=>	fits_in'  (rest, column + text.length	);
				    pmt::TAB n				=>	fits_in'  (rest, column + tab1(column,n));
				    pmt::PUSH_TEXTTRAITS _		=>	fits_in'  (rest, column			);
				    pmt::POP_TEXTTRAITS			=>	fits_in'  (rest, column			);
				    pmt::CONTROL _			=>	fits_in'  (rest, column			);
				   (pmt::NEWLINE | pmt::BREAK _ )	=>	column <= space_left_on_line;

				    pmt::BOX box =>  if *box.is_multiline	FALSE;							# Multiline boxes by definition don't fit on one line. :-)
						     else			fits_in'  (rest,  column + *box.actual_width);		# Monoline box, so first line == whole box.
						     fi;
				esac;
			end;			# fun fits_in
		end;				# fun forced_followon_fits_in
fun forced_followon_fits_in (tokens, space_left_on_line)
=
{
if *log::debugging
    printf "\nforced_followon_fits_in (space_left_on_line %d, %d tokens: %s)/TOP\n" space_left_on_line  (list::length tokens) (tokens_to_string tokens);
fi;
    result = forced_followon_fits_in' (tokens, space_left_on_line);
if *log::debugging
    printf "forced_followon_fits_in (space_left_on_line %d, %d tokens: %s) returning %B\n\n"  space_left_on_line (list::length tokens) (tokens_to_string tokens) result;
fi;
    result;
};


		fun per_token  ([], column) =>   column;									# Scan the tokens in a LINE setting BREAKs to wrap as appropriate.
		    #
		    per_token  (token ! rest,   column)
			=>
{
if *log::debugging
printf "per_token/TOP column d=%d   %d tokens = %s)   -- wrap_box_contents_as_needed() in prettyprint-mill-g.pkg\n" column (list::length (token ! rest)) (tokens_to_string (token ! rest));
fi;
			case token
			    pmt::PUSH_TEXTTRAITS _	=>   per_token (rest,   column			);
			    pmt::POP_TEXTTRAITS		=>   per_token (rest,   column			);
			    pmt::CONTROL _		=>   per_token (rest,   column			);
			    pmt::TEXT   text		=>   per_token (rest,   column + text.length		);
			    pmt::ENDTXT text		=>   per_token (rest,   column + text.length		);
			    pmt::TAB n			=>   per_token (rest,   column + tab1(column,n)	);			# This isn't quite right because 'column' is box-relative but tabstops should be absolute.
																# We format boxes innermost first, so at present there's no way to know our absolute column at this point.
																# We mostly keep boxes tab-aligned, which should hide this problem most of the time.
																# Should we be pessimistic and do 	per_token (rest,   column + n	);    ?
			    pmt::NEWLINE     =>  {   if (*actual_width < column)   actual_width := column;   fi;
						box_is_multiline :=  TRUE;
						per_token( rest, /*column=*/ 0 );
					    };

			    pmt::BREAK break =>  {   space_left_on_line =  target_width - (column  +  breaklen(column,break.ifnotwrap,pp));
						#													
						if (column <= breaklen(0,break.ifwrap,pp))
						    #
						    per_token (rest,   column + breaklen(column,break.ifnotwrap,pp));		# Wrapping won't move us left anyhow, so no point in considering it.

						elif (forced_followon_fits_in (rest, space_left_on_line))			# Is next BREAK or NEWLINE beyond right margin of box?
						    #
						    per_token (rest,   column + breaklen(column,break.ifnotwrap,pp));		# No, treat BREAK as spaces.
						else
if *log::debugging
printf "WRAPPING at column %d indent-after-wrap d=%d   target_width %d break.ifnotwrap.text '%s' space_left_on_line %d -- wrap_box_contents_as_needed in prettyprint-mill-g.pkg\n" column (breaklen(0,break.ifwrap,pp)) target_width break.ifnotwrap.text space_left_on_line;
fi;
						    if (*actual_width < column)   actual_width := column;   fi;			# Yes, treat BREAK as newline.
						    break.wrap := TRUE;
						    box_is_multiline :=  TRUE;
						    per_token (rest, /*column=*/ breaklen(0,break.ifwrap,pp));
						fi;
					    };

			    pmt::BOX box     =>  {   if(*actual_width <  column + *box.actual_width)
						    actual_width := column + *box.actual_width;
						fi;
						if *box.is_multiline
						    box_is_multiline :=  TRUE;
						    per_token( rest, 0 );							# Return to left margin after each multiline box.  This does the best job of decoupling
						else										# events inside and outside a box, making for simple predictable behavior.
						    per_token (rest, column + *box.actual_width);
						fi;
					    };
			esac;
};
		end;		# fun per_token
	    end			# fun wrap_box_contents_as_needed


	also
	fun wrap_box   (box: pmt::Box, pp:Pp)
	    =
	    {   # Start by recursively wrapping all sub-boxes
		# of this box.  When this is done, we know for
		# each subbox its width and whether it is multiline.
		#
		apply per_token *box.contents
		where
		    fun per_token  (pmt::BOX box) =>   wrap_box (box,pp);
			per_token _               =>   ();
		    end;
		end;

		# With the wrap decisions for our sub-boxes all
		# made, we now have enough information in hand
		# to make those decisions for our own box:

		case box.box_format
		    #
		    pmt::AS_NEEDED  =>  wrap_box_contents_as_needed   (box.target_width, *box.contents,                 pp );
		    _               =>  wrap_box_contents_all_or_none (box.target_width, *box.contents, box.box_format, pp );
		esac
		    ->
		    (actual_box_width, is_multiline);

		box.actual_width	 :=  actual_box_width;
		box.is_multiline	 :=  (*box.is_multiline or is_multiline);
	    }															# fun wrap_box


	also
	fun print_box (
		box,
		column',	# 0-based column relative to absolute (not box!) left margin
		left_margin',	# Left margin of box containing 'box'.
		pp:Pp
	    )
	    =
	    {   column =  print_tokens (*box.contents, column);
		#
		my (left_margin, column)
		    =
		    if *box.is_multiline											# This is a hack so that when we can multiple multi-line boxes without emitting multiple newline-indent sequences.
			#													# The idea is to delay doing the newline-indent until we actually print something, and then do just one.
			pp.do_delayed_newline_indent := TRUE;
			(left_margin', left_margin');
		    else
			(left_margin', column);
		    fi;
																
#		my (left_margin, column)
#		    =
#		    move_to_left_margin_if_box_is_multiline (left_margin', column);						# If we are a multi-line box, leave cursor on left margin of our containing box when done.

if *log::debugging
printf "print_box: box#%d done, returning column d=%d  (left_margin' d=%d)\n"  box.id  column  left_margin';
fi;
		column;
	    }
	    where
		fun move_to_left_margin (left_margin, column)
		    =
		    {   if (left_margin < column)
			    #
			    out::newline pp.output_stream;
			    out::spaces (pp.output_stream, left_margin);
			    #
			elif (left_margin > column)
			    #
			    out::spaces (pp.output_stream, left_margin - column);
			fi;

			(left_margin, left_margin);
		    };

		fun move_to_left_margin_if_box_is_multiline (left_margin, column)
		    =
		    if (not *box.is_multiline)			     (left_margin, column);					# We do nothing for monoline boxes.
		    else 			 move_to_left_margin (left_margin, column);
		    fi;

		
		fun maybe_do_delayed_newline_ident column
		    =
		    if *pp.do_delayed_newline_indent
			pp.do_delayed_newline_indent := FALSE;
			#
			out::newline pp.output_stream;
			out::spaces (pp.output_stream, column);
		    fi;

		my (left_margin, column)											# Compute left_margin of our box, move to it if we are a multi-line box.
		    =
		    case (box.left_margin_is, *box.is_multiline)
			#
			(_		       ,  FALSE) =>	(left_margin', column');						# We're not a multiline box, leave left margin unchanged.
			(pmt::BOX_RELATIVE    i,  TRUE ) =>  move_to_left_margin (left_margin' + i,          column');		# We're a multiline box, set new left margin relative to left margin of enclosing box.
			(pmt::CURSOR_RELATIVE i,  TRUE ) =>	move_to_left_margin (column' + tab0(column',i), column');		# We're a multiline box, set new left margin relative to cursor, tabbing over for consistent positioning on page.
		    esac;

		
		fun print_tokens  (token ! rest, column)
			=>
{
if *log::debugging
printf "print_box: print_tokens (column %d  tokens %s)\n"  column  (tokens_to_string (token ! rest));
fi;
			case token
			    #
			    pmt::TEXT text
				=>
				{
				    maybe_do_delayed_newline_ident column;
				    out::text (pp.output_stream, text.string);
				    print_tokens( rest, column + text.length );
				};

			    pmt::ENDTXT text
				=>
				{
#				    maybe_do_delayed_newline_ident column;	# The lack of this is the only distinction between TEXT and ENDTXT.
				    out::text (pp.output_stream, text.string);
				    print_tokens( rest, column + text.length );
				};

			    pmt::TAB n
				=>
				{
				    maybe_do_delayed_newline_ident column;
				    i = tab1 (column, n);
				    out::spaces (pp.output_stream, i);
				    print_tokens (rest, column + i);
				};

			    pmt::BREAK break
				=>
				{
				    if *break.wrap
					#
					column = left_margin + breaklen(left_margin,break.ifwrap,pp);
					pp.do_delayed_newline_indent := TRUE;
					print_tokens (rest, column);
					#
				    elif *pp.do_delayed_newline_indent
					#
					maybe_do_delayed_newline_ident column;
					print_tokens (rest, left_margin);
				    else
					t0 = tab0 (column, break.ifnotwrap.tab0);   if (t0 > 0)   out::text (pp.output_stream, nblanks t0);   fi;   column = column + t0;
					t  = tab1 (column, break.ifnotwrap.tab );   if (t  > 0)   out::text (pp.output_stream, nblanks t );   fi;   column = column + t;
					#
					out::text (pp.output_stream, break.ifnotwrap.text);
					print_tokens (rest, column + t0 + t + string::length break.ifnotwrap.text);
				    fi;
				};

			    pmt::NEWLINE
				=>
				{
				    maybe_do_delayed_newline_ident column;
				    column = left_margin;
				    out::newline pp.output_stream;
				    out::spaces (pp.output_stream, column);
				    print_tokens (rest, column);
				};

			    pmt::BOX box
				=>
				{
				    maybe_do_delayed_newline_ident column;
				    column =  print_box (box, column, left_margin, pp);
				    print_tokens (rest, column);
				};

			    pmt::PUSH_TEXTTRAITS texttraits
				=>
				{   out::push_texttraits (pp.output_stream, texttraits);
				    print_tokens (rest, column);
				};

			    pmt::POP_TEXTTRAITS
				=>
				{   out::pop_texttraits  pp.output_stream;
				    print_tokens (rest, column);
				};

			    pmt::CONTROL control_fn
				=>
				{   control_fn  pp.output_stream;
				    print_tokens (rest, column);
				};

			esac;
};
		    print_tokens ([], column) =>   column;
		end;													# fun print_tokens
	    end;




	# Here's the heart of the module.
	# We prettyprint in three passes:
	# 1) Build up the box tree -- complete by the time we get here.
	# 2) Decide which breaks to wrap (change to newlines):      wrap_box
	# 3) Print the result out:                                  print_box

	fun prettyprint_box (pp:Pp, box)
	    =
	    {   wrap_box            (box, pp);
		print_box           (box,   /*column=*/ 0,   /*left_margin=*/    0,   pp);
	    };





	fun add_token (pp:Pp as { box => REF box, ... }, token)									# Add a token to the reversed_contents of currently-open box.
	    =
	    box.reversed_contents :=   token ! *box.reversed_contents;


	fun add_text (pp:Pp, string, length)
	    =
	    add_token (pp, pmt::TEXT { string, length } );

	fun add_endtxt (pp:Pp, string, length)
	    =
	    add_token (pp, pmt::ENDTXT { string, length } );



	fun prettyprint_open_box (pp:Pp, left_margin_is, box_format)
	    =
	    {   id = *pp.next_box_id;
		#
		pp.next_box_id := id + 1;

		new_box														# Set up empty record for new box.
		    =
		    { left_margin_is,
		      box_format,
		      target_width         =>  pp.default_target_box_width,
		      id,

		      is_multiline         =>  REF FALSE,
		      actual_width	   =>  REF 0,
		      contents             =>  REF [],
		      reversed_contents    =>  REF []
		    };


		# Add new child box to reversed_contents
		# of previously open box: 
		{   (*pp.box) ->   { reversed_contents, ... }; 
		    #
		    reversed_contents	:=   pmt::BOX new_box  !  *reversed_contents;
		}; 

		pp.nested_boxes	:=   *pp.box ! *pp.nested_boxes;		# Push currently open box on stack.
		pp.box_nesting	:=   *pp.box_nesting + 1;			# Remember new stack depth.
		pp.box		:=   new_box;					# Establish new (empty) currently-open box. 


		if (*pp.box_nesting > max_box_nesting)				# Catch prettyprint infinite loops.
		     raise exception FAIL "max box nesting depth exceeded -- core-prettyprint-mill-g.pkg";
		fi;
	    };



	fun finalize_and_pop_current_box  (pp:Pp  as  { box => REF box,  nested_boxes as REF (topbox ! rest), ... })
		=>
		{   box.contents :=   reverse *box.reversed_contents;		# We've accumulated the box contents in reverse order; this produces the contents in their proper order.
		    #
		    pp.box          :=   topbox;				# These three pop the box stack.
		    nested_boxes    :=   rest;
		    pp.box_nesting  :=   *pp.box_nesting - 1;
		};

	    finalize_and_pop_current_box (pp:Pp as {  nested_boxes as REF [], ... } )
		=>
		{   /*raise exception FAIL*/ print "User error: Attempted to close nonexistent box!";
		    ();
		};
	end;


	fun prettyprint_break  (pp:Pp as { box => REF { reversed_contents, ... }, ... },  { spaces, indent_on_wrap } )
	    =
	    reversed_contents :=  (pmt::BREAK { wrap      =>  REF FALSE,
					   ifnotwrap =>  { tab0 => 0, tab => 0, text => nblanks spaces },
                                           ifwrap    =>  { tab0 => 0, tab => 0, text => nblanks indent_on_wrap }
                                         }
                                  )
				  !
				  *reversed_contents;


	fun prettyprint_newline (pp:Pp as { box => REF { reversed_contents, ... }, ... })
	    =
	    reversed_contents :=   pmt::NEWLINE ! *reversed_contents;


	fun prettyprint_flush (pp:Pp as { box, nested_boxes, output_stream, next_box_id, ... }, with_newline)
	    =
	    {   end_boxes ()
		where
		    fun end_boxes ()
			=
			case *nested_boxes
			    #
			    [] =>						# NB: To avoid special cases, we always leave one box on the stack.
				{
				    (*box) ->    { contents, reversed_contents, actual_width, is_multiline, ... };

				    contents :=   reverse *reversed_contents;	# Box contents accumulate in reverse order.
										# Normally we correct for this by reversing
										# the contents list when we close a box, but
										# the root box never gets closed, so we have
										# to reverse the contents here, right before
										# prettyprinting them.

if *log::debugging
    printf "\nStart of call to prettyprint_box on outermost box -- prettyprint_flush in prettyprint-mill-g.pkg\n";
    printf "Printing state of prettyprinter -- prettyprint_flush in prettyprint-mill-g.pkg\n";
    dump(fil::stdout, pp);
    printf "Calling prettyprint_box on outermost box -- prettyprint_flush in prettyprint-mill-g.pkg\n";
fi;
				    prettyprint_box (pp, *box);			# Prettyprint outermost box.
										# This is where all the actual formatting work gets done.
if *log::debugging
    printf "Back from calling prettyprint_box on outermost box -- prettyprint_flush in prettyprint-mill-g.pkg\n";
fi;

				    contents		 :=  [];		# Clear out the prettyprint stuff so
				    reversed_contents	 :=  [];		# we don't wind up printing it again. 
				    actual_width	 :=  0;			# 
				    is_multiline	 :=  FALSE;
				    next_box_id		 :=  1;
				};

			    topbox ! rest
				=>
				{   finalize_and_pop_current_box  pp;
				    end_boxes ();
				};
			esac; 
		end;

		if with_newline      out::newline pp.output_stream;   fi;

		out::flush output_stream;
	    };


	# *** EXPORTED FUNCTIONS ***

	fun make_prettyprint_mill prettyprint_output_stream args
	    =
	    {	# Set up default values of all optional parameters:
		#
		default_target_box_width =  REF default_target_box_width;
		default_left_margin_is   =  REF default_left_margin_is;
		tabstops_are_every       =  REF default_tabstops_are_every;

		# Let any supplied optional arguments override the above defaults:
		#
		apply note_optional_arg args
		where
		    fun note_optional_arg (pmt::DEFAULT_TARGET_BOX_WIDTH i) =>  default_target_box_width := i;
			note_optional_arg (pmt::DEFAULT_LEFT_MARGIN_IS   i) =>  default_left_margin_is   := i;
			note_optional_arg (pmt::TABSTOPS_ARE_EVERY       i) =>  tabstops_are_every       := i;
		    end;
		end;

		# Construct actual prettyprinter record to return:
		#
		  { output_stream            =>  prettyprint_output_stream,
		    output_stream_is_closed  =>  REF FALSE,
		    do_delayed_newline_indent =>  REF FALSE,
		    #
		    default_target_box_width =>  *default_target_box_width,
		    default_left_margin_is   =>  *default_left_margin_is,
		    tabstops_are_every       =>  *tabstops_are_every,
		    #
		    texttraits_stack	     =>  REF [],
		    box_nesting		     =>  REF 0,
		    next_box_id		     =>  REF 1,
		    nested_boxes	     =>  REF [],
		    box			     =>  REF  { left_margin_is		=>   pmt::BOX_RELATIVE 0,
							target_width		=>  *default_target_box_width,
							box_format		=>   pmt::AS_NEEDED,
							id			=>       0,
							actual_width		=>   REF 0,
							is_multiline		=>   REF FALSE,
							contents		=>   REF [],
							reversed_contents	=>   REF []
						      }
		  };
	    };



	fun flush_prettyprint_mill  prettyprinter
	    =
	    prettyprint_flush (prettyprinter, FALSE);


	fun close_prettyprint_mill (pp:Pp)
	    =
	    {   flush_prettyprint_mill  pp;
		#
		pp.output_stream_is_closed :=  TRUE;
	    };


	fun get_prettyprint_output_stream (pp:Pp)
	    =
	    pp.output_stream;


	fun begin_horizontal_4box			prettyprinter		=  prettyprint_open_box (prettyprinter,  pmt::BOX_RELATIVE 4,  pmt::NONE);
	fun begin_vertical_4box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 4), pmt::ALL);
	fun begin_align_4box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 4), pmt::ALL_OR_NONE);
	fun begin_wrap_4box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 4), pmt::AS_NEEDED);

	fun begin_horizontal_0box			prettyprinter		=  prettyprint_open_box (prettyprinter,  pmt::BOX_RELATIVE 0,  pmt::NONE);
	fun begin_vertical_0box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 0), pmt::ALL);
	fun begin_align_0box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 0), pmt::ALL_OR_NONE);
	fun begin_wrap_0box				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::BOX_RELATIVE 0), pmt::AS_NEEDED);

	fun begin_horizontal_cbox			prettyprinter		=  prettyprint_open_box (prettyprinter,  pmt::CURSOR_RELATIVE 4,  pmt::NONE);
	fun begin_vertical_cbox				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::CURSOR_RELATIVE 4), pmt::ALL);
	fun begin_align_cbox				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::CURSOR_RELATIVE 4), pmt::ALL_OR_NONE);
	fun begin_wrap_cbox				prettyprinter		=  prettyprint_open_box (prettyprinter, (pmt::CURSOR_RELATIVE 4), pmt::AS_NEEDED);

	fun begin_indented_horizontal_box		prettyprinter indent	=  prettyprint_open_box (prettyprinter, indent, pmt::NONE);
	fun begin_indented_vertical_box			prettyprinter indent	=  prettyprint_open_box (prettyprinter, indent, pmt::ALL);
	fun begin_indented_align_box			prettyprinter indent	=  prettyprint_open_box (prettyprinter, indent, pmt::ALL_OR_NONE);
	fun begin_indented_wrap_box			prettyprinter indent	=  prettyprint_open_box (prettyprinter, indent, pmt::AS_NEEDED);

	fun end_box   prettyprinter 
	    =
	    finalize_and_pop_current_box   prettyprinter;

	fun horizontal_4box			prettyprinter thunk =   { begin_horizontal_4box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun vertical_4box    			prettyprinter thunk =   { begin_vertical_4box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun align_4box				prettyprinter thunk =   { begin_align_4box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun wrap_4box				prettyprinter thunk =   { begin_wrap_4box			prettyprinter;   thunk();   end_box prettyprinter; };

	fun horizontal_0box			prettyprinter thunk =   { begin_horizontal_0box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun vertical_0box    			prettyprinter thunk =   { begin_vertical_0box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun align_0box				prettyprinter thunk =   { begin_align_0box			prettyprinter;   thunk();   end_box prettyprinter; };
	fun wrap_0box				prettyprinter thunk =   { begin_wrap_0box			prettyprinter;   thunk();   end_box prettyprinter; };

	fun horizontal_cbox			prettyprinter thunk =   { begin_horizontal_cbox			prettyprinter;   thunk();   end_box prettyprinter; };
	fun vertical_cbox    			prettyprinter thunk =   { begin_vertical_cbox			prettyprinter;   thunk();   end_box prettyprinter; };
	fun align_cbox				prettyprinter thunk =   { begin_align_cbox			prettyprinter;   thunk();   end_box prettyprinter; };
	fun wrap_cbox				prettyprinter thunk =   { begin_wrap_cbox			prettyprinter;   thunk();   end_box prettyprinter; };


	fun traitful_text (pp:Pp) traitful_text
	    =
	    {   traitful_text_texttraits =  tt::texttraits traitful_text;
		#
		if (out::same_texttraits (current_texttraits pp, traitful_text_texttraits))
		    #
		    add_text  (pp, tt::string traitful_text, tt::size traitful_text);
		else
		    add_token (pp, pmt::PUSH_TEXTTRAITS traitful_text_texttraits);
		    add_text  (pp, tt::string traitful_text, tt::size traitful_text);
		    add_token (pp, pmt::POP_TEXTTRAITS);
		fi;
	    };


	fun text pp s
	    =
	    add_text (pp, s, size s);


	fun endtxt pp s
	    =
	    add_endtxt (pp, s, size s);


	fun push_texttraits (pp:Pp, texttraits)
	    =
	    {   if (not (out::same_texttraits (current_texttraits pp, texttraits)))
		    #
		    add_token (pp, pmt::PUSH_TEXTTRAITS texttraits);
		fi;

		pp.texttraits_stack :=   texttraits ! *pp.texttraits_stack;
	    };


	fun pop_texttraits (pp:Pp)
	    =
	    case *pp.texttraits_stack
		#
		[] => {  /*raise exception FAIL*/ print "User error: pp: unmatched pop_texttraits\n";
		      };

		(sty ! rest)
		    =>
		    {   pp.texttraits_stack := rest;
			#
			if (not (out::same_texttraits (current_texttraits pp, sty)))
			    #
			    add_token (pp, pmt::POP_TEXTTRAITS);
			fi;
		    };
	    esac;


	fun break               pp arg =  prettyprint_break (pp, arg);
	fun space               pp n   =  break pp { spaces => n, indent_on_wrap => 0 };
	fun cut                 pp     =  break pp { spaces => 0, indent_on_wrap => 0 };
	fun newline             pp     =  prettyprint_newline pp;
	fun nonbreakable_spaces pp n   =  text pp (nblanks n);
	fun tab                 pp n   =  add_token (pp, pmt::TAB                 n );

	fun control pp control_fn
	    =
	    add_token (pp, pmt::CONTROL control_fn);
    };
end;

## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
