## prettyprinter-debug-g.pkg
#
# A wrapper for prettyprinter_g which
# dumps the state prior to each operation.

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib


stipulate
    package fil =  file__premicrothread;					# file__premicrothread	is from   src/lib/std/src/posix/file--premicrothread.pkg
herein

    generic package prettyprinter_debug_g (
	#
	pp: api {   include Prettyprinter;					# Prettyprinter		is from   src/lib/prettyprint/big/src/prettyprinter.api
		    #		
		    dump:  (fil::Output_Stream,  Prettyprinter)  ->  Void;
	        }
    )
    : (weak)
    api {
	include Prettyprinter;							# Prettyprinter		is from   src/lib/prettyprint/big/src/prettyprinter.api
	#
	debug_stream:  Ref(  fil::Output_Stream );
    }
    {
	Prettyprinter_Output_Stream      =  pp::Prettyprinter_Output_Stream;
	Prettyprinter =  pp::Prettyprinter;
	Styled_String      =  pp::Styled_String;
	Textstyle          =  pp::Textstyle;

	Indent == pp::Indent;

	debug_stream
	    =
	    REF fil::stderr;

	fun debug name f stream arg
	    =
	    {   fil::write(*debug_stream, cat ["*** ", name, ": "]);
		pp::dump (*debug_stream, stream);
		fil::flush *debug_stream;
		f stream arg;
	    };

	fun debug' name f stream
	    =
	    {   fil::write(*debug_stream, cat ["*** ", name, ": "]);
		pp::dump  (*debug_stream, stream);
		fil::flush  *debug_stream;
		f stream;
	    };

	get_output_stream   = pp::get_output_stream;

	push_textstyle = pp::push_textstyle;
	pop_textstyle  = pp::pop_textstyle;

	make_prettyprinter  = pp::make_prettyprinter;

	flush_prettyprinter				= debug' "flush_stream"					pp::flush_prettyprinter;
	close_prettyprinter				= debug' "close_stream"					pp::close_prettyprinter;

	begin_horizontal_box				= debug' "begin_horizontal_box"				pp::begin_horizontal_box;
	begin_vertical_box				= debug' "begin_vertical_box"				pp::begin_vertical_box;
	begin_horizontal_else_vertical_box		= debug' "begin_horizontal_else_vertical_box"		pp::begin_horizontal_else_vertical_box;
	begin_wrap_box					= debug' "begin_wrap_box"				pp::begin_wrap_box;
	begin_wrap'_box					= debug' "begin_wrap'_box"				pp::begin_wrap'_box;

	begin_indented_vertical_box			= debug "begin_indented_vertical_box"			pp::begin_indented_vertical_box;
	begin_indented_horizontal_else_vertical_box	= debug "begin_indented_horizontal_else_vertical_box"	pp::begin_indented_horizontal_else_vertical_box;
	begin_indented_wrap_box				= debug "begin_indented_wrap_box"			pp::begin_indented_wrap_box;
	begin_indented_wrap'_box			= debug "open_indented_box"				pp::begin_indented_wrap'_box;

	# XXX BUGGO FIXME 2007-09 CrT: No debug support for these yet:
	horizontal_box					= debug' "horizontal_box"				pp::horizontal_box;
	vertical_box					= debug' "vertical_box"					pp::vertical_box;
	horizontal_else_vertical_box			= debug' "horizontal_else_vertical_box"			pp::horizontal_else_vertical_box;
	wrap_box					= debug' "wrap_box"					pp::wrap_box;
	wrap'_box					= debug' "wrap'_box"					pp::wrap'_box;


	end_box						= debug' "end_box"					pp::end_box;

	styled_string					= debug "styled_string"					pp::styled_string;
	string						= debug "string"					pp::string;

	break						= debug "break"						pp::break;
	space						= debug "space"						pp::space;
	cut						= debug' "cut"						pp::cut;
	newline						= debug' "newline"					pp::newline;
	nonbreakable_spaces				= debug "nonbreakable_spaces"				pp::nonbreakable_spaces;
	control						= debug "control"					pp::control;

    };
end;


## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
