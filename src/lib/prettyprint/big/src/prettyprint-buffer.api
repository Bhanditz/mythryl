## prettyprint-buffer.api
#
# This interface provides an output-stream like interface to pretty printing.
# Compare to:
#     src/lib/prettyprint/big/src/prettyprint-description.api

# Compiled by:
#     src/lib/prettyprint/big/src/prettyprinting.sublib

# This API is implemented in:
#
#     src/lib/prettyprint/big/src/prettyprint-buffer-g.pkg
#
api Prettyprint_Buffer {
    #
    Prettyprint_Buffer;

    Markup_Buffer;

    Styled_String;				# Styled_Strings wrap a string plus blink/bold/color/... information

    Textstyle;

    Indent  = BOX_RELATIVE     Int		# Indent relative to outer indentation 
            | CURSOR_RELATIVE  Int		# Indent relative to start of box 
	    ;

    open_stream:	  Markup_Buffer	     -> Prettyprint_Buffer;
    get_markup_buffer:    Prettyprint_Buffer -> Markup_Buffer;

    flush_stream:   Prettyprint_Buffer -> Void;
    close_stream:   Prettyprint_Buffer -> Void;

    begin_horizontal_box:			Prettyprint_Buffer -> Void;
    begin_vertical_box:				Prettyprint_Buffer -> Void;
    begin_horizontal_else_vertical_box:		Prettyprint_Buffer -> Void;
    begin_wrap_box:				Prettyprint_Buffer -> Void;
    begin_wrap'_box:				Prettyprint_Buffer -> Void;

    end_box:					Prettyprint_Buffer -> Void;

    begin_indented_vertical_box:		Prettyprint_Buffer -> Indent -> Void;
    begin_indented_horizontal_else_vertical_box:Prettyprint_Buffer -> Indent -> Void;
    begin_indented_wrap_box:			Prettyprint_Buffer -> Indent -> Void;
    begin_indented_wrap'_box:			Prettyprint_Buffer -> Indent -> Void;

    horizontal_box:				Prettyprint_Buffer -> (Void -> Void) -> Void;
    vertical_box:				Prettyprint_Buffer -> (Void -> Void) -> Void;
    horizontal_else_vertical_box:		Prettyprint_Buffer -> (Void -> Void) -> Void;
    wrap_box:					Prettyprint_Buffer -> (Void -> Void) -> Void;
    wrap'_box:					Prettyprint_Buffer -> (Void -> Void) -> Void;


    styled_string:	Prettyprint_Buffer -> Styled_String -> Void;
    string:		Prettyprint_Buffer -> 	 String -> Void;

    push_textstyle:    (Prettyprint_Buffer, Textstyle) -> Void;
    pop_textstyle:      Prettyprint_Buffer -> Void;

    break:                Prettyprint_Buffer -> { spaces: Int,  indent_on_wrap: Int } -> Void;
    space:                Prettyprint_Buffer -> Int -> Void;					#  space n == break { spaces=n, indent_on_wrap=0 } 
    cut:                  Prettyprint_Buffer -> Void;               				#  Cut == break { spaces=0, indent_on_wrap=0 } 
    newline:              Prettyprint_Buffer -> Void;
    nonbreakable_spaces:  Prettyprint_Buffer -> Int -> Void;         				#  Emit a nonbreakable space 

    control:		  Prettyprint_Buffer -> (Markup_Buffer -> Void) -> Void;

};



## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
