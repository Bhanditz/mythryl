## prettyprint-mill-debug-g.pkg
#
# A wrapper for prettyprint_mill_g which
# dumps the state prior to each operation.

# Compiled by:
#     src/lib/prettyprint/big/prettyprint-mill.lib


stipulate
    package fil =  file__premicrothread;						# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
herein

    generic package prettyprint_mill_debug_g (
	#
	pp: api {   include Base_Prettyprint_Mill;					# Base_Prettyprint_Mill		is from   src/lib/prettyprint/big/src/base-prettyprint-mill.api
		    #		
		    dump:  (fil::Output_Stream,  Prettyprint_Mill)  ->  Void;
	        }
    )
    : (weak)
    api {
	include Base_Prettyprint_Mill;							# Base_Prettyprint_Mill		is from   src/lib/prettyprint/big/src/base-prettyprint-mill.api
	#
	debug_stream:  Ref(  fil::Output_Stream );
    }
    {
	package pmt = pp::pmt;

	Prettyprint_Output_Stream		=  pp::Prettyprint_Output_Stream;
	Prettyprint_Mill			=  pp::Prettyprint_Mill;
	Pp					=  pp::Pp;				# Synonym for Prettyprint_Mill.
	Traitful_Text				=  pp::Traitful_Text;
	Texttraits				=  pp::Texttraits;
	Prettyprint_Mill_Configuration_Args	== pp::pmt::Prettyprint_Mill_Configuration_Args;
	Left_Margin_Is				== pp::pmt::Left_Margin_Is;

	horizontal				=  pp::horizontal;			# The four precoded box-formatting routines.
	vertical				=  pp::vertical;
	normal					=  pp::normal;
	ragged_right				=  pp::ragged_right;


	debug_stream
	    =
	    REF fil::stderr;

	fun debug name f stream arg
	    =
	    {   fil::write(*debug_stream, cat ["*** ", name, ": "]);
		pp::dump (*debug_stream, stream);
		fil::flush *debug_stream;
		f stream arg;
	    };

	fun debug' name f stream
	    =
	    {   fil::write(*debug_stream, cat ["*** ", name, ": "]);
		pp::dump  (*debug_stream, stream);
		fil::flush  *debug_stream;
		f stream;
	    };

	get_prettyprint_output_stream	=  pp::get_prettyprint_output_stream;
	push_texttraits			=  pp::push_texttraits;
	pop_texttraits			=  pp::pop_texttraits;
	make_prettyprint_mill		=  pp::make_prettyprint_mill;
	nblanks				=  pp::nblanks;

	open_box					= 							pp::open_box;
	break'						= 							pp::break';

	flush_prettyprint_mill				= debug' "flush_stream"					pp::flush_prettyprint_mill;
	close_prettyprint_mill				= debug' "close_stream"					pp::close_prettyprint_mill;

	begin_horizontal_4box				= debug' "begin_horizontal_4box"			pp::begin_horizontal_4box;
	begin_vertical_4box				= debug' "begin_vertical_4box"				pp::begin_vertical_4box;
	begin_align_4box				= debug' "begin_align_4box"				pp::begin_align_4box;
	begin_wrap_4box					= debug' "begin_wrap_4box"				pp::begin_wrap_4box;

	begin_horizontal_0box				= debug' "begin_horizontal_0box"			pp::begin_horizontal_0box;
	begin_vertical_0box				= debug' "begin_vertical_0box"				pp::begin_vertical_0box;
	begin_align_0box				= debug' "begin_align_0box"				pp::begin_align_0box;
	begin_wrap_0box					= debug' "begin_wrap_0box"				pp::begin_wrap_0box;

	begin_horizontal_cbox				= debug' "begin_horizontal_cbox"			pp::begin_horizontal_cbox;
	begin_vertical_cbox				= debug' "begin_vertical_cbox"				pp::begin_vertical_cbox;
	begin_align_cbox				= debug' "begin_align_cbox"				pp::begin_align_cbox;
	begin_wrap_cbox					= debug' "begin_wrap_cbox"				pp::begin_wrap_cbox;

	begin_indented_horizontal_box			= debug "begin_indented_horizontal_box"			pp::begin_indented_horizontal_box;
	begin_indented_vertical_box			= debug "begin_indented_vertical_box"			pp::begin_indented_vertical_box;
	begin_indented_align_box			= debug "begin_indented_align_box"			pp::begin_indented_align_box;
	begin_indented_wrap_box				= debug "begin_indented_wrap_box"			pp::begin_indented_wrap_box;

	horizontal_4box					= debug' "horizontal_4box"				pp::horizontal_4box;
	vertical_4box					= debug' "vertical_4box"				pp::vertical_4box;
	align_4box					= debug' "align_4box"					pp::align_4box;
	wrap_4box					= debug' "wrap_4box"					pp::wrap_4box;

	horizontal_0box					= debug' "horizontal_0box"				pp::horizontal_0box;
	vertical_0box					= debug' "vertical_0box"				pp::vertical_0box;
	align_0box					= debug' "align_0box"					pp::align_0box;
	wrap_0box					= debug' "wrap_0box"					pp::wrap_0box;

	horizontal_cbox					= debug' "horizontal_cbox"				pp::horizontal_cbox;
	vertical_cbox					= debug' "vertical_cbox"				pp::vertical_cbox;
	align_cbox					= debug' "align_cbox"					pp::align_cbox;
	wrap_cbox					= debug' "wrap_cbox"					pp::wrap_cbox;

	shut_box					= debug' "shut_box"					pp::shut_box;

	traitful_text					= debug "traitful_text"					pp::traitful_text;
	lit						= debug "lit"						pp::lit;
	endlit						= debug "endlit"					pp::endlit;

	break						= debug "break"						pp::break;
	space						= debug "space"						pp::space;
	cut						= debug' "cut"						pp::cut;
	newline						= debug' "newline"					pp::newline;
	nonbreakable_spaces				= debug "nonbreakable_spaces"				pp::nonbreakable_spaces;
	tab						= debug "tab"						pp::tab;

	control						= debug "control"					pp::control;

    };
end;


## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
