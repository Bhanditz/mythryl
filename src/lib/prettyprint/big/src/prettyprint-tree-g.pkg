## prettyprint-tree-g.pkg
#
# This generic implements a declarative way to specify pretty-printing.
# This lets one package construct a first-cut prettyprint representation
# of a document and then another packages refine it before finally
# shipping it off for actual rendering.

# Compiled by:
#     src/lib/prettyprint/big/prettyprint.lib



# This generic is nowhere invoked:
#
generic package  prettyprint_tree_g   (pp:  Prettyprinter)		# Prettyprinter			is from   src/lib/prettyprint/big/src/prettyprinter.api
{
    Styled_String   =  pp::Styled_String;
    Textstyle	    =  pp::Textstyle;
    Indent	    =  pp::Indent;

    # The Prettyprint_Tree type is
    # a concrete representation
    # of a prettyprint layout:

    Prettyprint_Tree
	= HORIZONTAL_BOX			 List( Prettyprint_Tree )
	| VERTICAL_BOX			(Indent, List( Prettyprint_Tree ))
	| HORIZONTAL_ELSE_VERTICAL_BOX  (Indent, List( Prettyprint_Tree ))
	| WRAP_BOX			(Indent, List(Prettyprint_Tree))
	| BOX				(Indent, List(Prettyprint_Tree))
	| STYLED_STRING	Styled_String
	| STRING	String
	| TEXTSTYLE     (Textstyle, List(Prettyprint_Tree))
	| BREAK		{ spaces: Int,   indent_on_wrap: Int }
	| NEW_LINE
	| NBSPACE	Int
	| CONTROL	(pp::Prettyprinter_Output_Stream -> Void)
	;

    # Prettyprint a prettyprint tree:
    #
    fun prettyprint_tree (pp, tree)
        =
	prettyprint tree
	where
            fun prettyprint (HORIZONTAL_BOX                   l ) =>    {   pp::begin_horizontal_box			    pp  ;	prettyprint_list l;	pp::end_box pp;	};
		prettyprint (VERTICAL_BOX                 (i, l)) =>    {   pp::begin_indented_vertical_box		    pp i;	prettyprint_list l;	pp::end_box pp;	};
		prettyprint (HORIZONTAL_ELSE_VERTICAL_BOX (i, l)) =>    {   pp::begin_indented_horizontal_else_vertical_box pp i;	prettyprint_list l;	pp::end_box pp;	};
		prettyprint (WRAP_BOX                     (i, l)) =>    {   pp::begin_indented_wrap_box 		    pp i;	prettyprint_list l;	pp::end_box pp;	};
		prettyprint (BOX                          (i, l)) =>    {   pp::begin_indented_wrap'_box		    pp i;	prettyprint_list l;	pp::end_box pp;	};
		#
		prettyprint (STYLED_STRING tok	) =>     pp::styled_string	 pp tok;
		prettyprint (STRING s		) =>     pp::string		 pp s;
		prettyprint (TEXTSTYLE (sty, l)	) => {   pp::push_textstyle	(pp, sty);	prettyprint_list l;	pp::pop_textstyle pp;	};
		prettyprint (BREAK brk    	) =>     pp::break		 pp brk;
		prettyprint NEW_LINE              =>     pp::newline		 pp;
		prettyprint (NBSPACE n)           =>     pp::nonbreakable_spaces pp n;
		prettyprint (CONTROL control_fn)  =>     pp::control		 pp control_fn;
            end 

	    also
	    fun prettyprint_list []         	  =>  ();
		prettyprint_list (item ! rest)    =>  {   prettyprint item;	prettyprint_list rest;	};
            end;
	end;

    cut				    =  BREAK { spaces => 0, indent_on_wrap => 0 };
    #
    fun space n
	=
	BREAK { spaces => n, indent_on_wrap => 0 };


};



## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
