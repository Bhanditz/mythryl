## standard-prettyprint-mill.api
#
# I find the original prettyprinter interface ugly and clumsy;
# this is an attempt to provide something simpler and cleaner.
#
# My idea here is to do
#
#     pp.box 4 .{
#         pp.txt 4 "Various stuff of consequence.\n";
#     };
#
# instead of
#
#     pp::begin_align_4box pp;
#     pp::text          pp "Various";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::text          pp "stuff";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::text          pp "of";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::text          pp "consequence.";
#     pp::newline         pp;
#     pp::end_box         pp;
#
# approximately.  In particular, I see the former as:
#
#  o  Inherently keeping block open/close pairs matched.
#     (The original code had at least one such bug.)
#
#  o  Reducing clutter by making the 'pp' arguments implicit.
#
#  o  Reducing clutter by allowing newlines, breaks and tabs to be
#     included in strings instead of having to be separate calls.

# Compiled by:
#     src/lib/prettyprint/big/prettyprint-mill.lib

stipulate
    package fil =  file__premicrothread;				# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
herein

    api Standard_Prettyprint_Mill {
	#
	Private_State;

	Standard_Prettyprint_Mill
	  =
	  { pp:      Private_State,
	    #
	    box:	   	Int -> (Void -> Void) -> Void,
	    wrap:    	Int -> (Void -> Void) -> Void,
	    horizontal:	Int -> (Void -> Void) -> Void,
	    vertical:	Int -> (Void -> Void) -> Void,

	    cbox:   	(Void -> Void) -> Void,
	    cwrap:    	(Void -> Void) -> Void,
	    chorizontal:	(Void -> Void) -> Void,
	    cvertical:	(Void -> Void) -> Void,

	    flush:     Void   -> Void,
	    close:     Void   -> Void,

	    cut:	   Int    -> Void,
	    tab:	   Int    -> Void,

	    lit:           String -> Void,					# Output string literally -- no chars receive special treatment.
	    txt:    Int -> String -> Void,					# n blanks == break { spaces => n, indent_on_wrap => i }
	    endtxt: Int -> String -> Void					# Special hack to let ';'s be at end of preceding box instead of on a new line.  Identical to 'txt' except for end-of-box handling.
	  };  

	include Base_Prettyprint_Mill					# Make standard_prettyprint_mill a 100% drop-in replacement for base_prettyprint_mill.
		where Prettyprint_Mill == Standard_Prettyprint_Mill;

	seq:	List(X) -> (X -> Void) -> (Void -> Void) -> Void;	# elements, print_element, print_separator, 
									# A little convenience fn for prettyprinting lists.
	with_standard_prettyprint_mill:    Prettyprint_Output_Stream
					-> List( pmt::Prettyprint_Mill_Configuration_Args )
					-> (Prettyprint_Mill -> Void)
					-> Void
					;

	prettyprint_to_string:	    List( pmt::Prettyprint_Mill_Configuration_Args )
					-> (Prettyprint_Mill -> Void)
					-> String
					;
	make_standard_prettyprint_mill
	    :
	    String
	    -> List( pmt::Prettyprint_Mill_Configuration_Args )
            -> Standard_Prettyprint_Mill;

    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
