## standard-prettyprinter.pkg
#
# Support for prettyprinting plain ascii text --
# a workhorse tool used by about eighty packages.
#
# Compare to:
#     src/lib/prettyprint/simple/simple-prettyprinter.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib



###            "The gods too are fond of a joke."
###
###                            -- Aristotle


api Standard_Prettyprinter {
    #
    include Prettyprinter;							# Prettyprinter	is from   src/lib/prettyprint/big/src/prettyprinter.api
    #
    with_standard_prettyprinter:    Prettyprinter_Output_Stream
				    -> (Prettyprinter -> Void)
				    -> Void
				    ;

    prettyprint_to_string:	    Int
				    -> (Prettyprinter -> X -> Void)
				    -> X
				    -> String
				    ;
};



package   standard_prettyprinter
: (weak)  Standard_Prettyprinter
{
    Prettyprinter_Output_Stream
        =
        { consumer:   String -> Void,
	  linewidth:  Int,
	  flush:      Void -> Void,
	  close:      Void -> Void
        };

    package out {
	#
	Prettyprinter_Output_Stream = Prettyprinter_Output_Stream;
	Textstyle  = Void;

	fun same_textstyle _    = TRUE;
	fun push_textstyle _    = ();
	fun pop_textstyle _     = ();
	fun default_textstyle _ = ();

	fun depth _ = NULL;
	fun line_width { consumer, linewidth, flush, close } = THE linewidth;
	fun text_width _ = NULL;

	fun space ( { consumer, linewidth, flush, close }, n)
	    =
	    consumer (number_string::pad_left ' ' n "");

	fun newline  { consumer, linewidth, flush, close }     =  consumer "\n";
	fun string ( { consumer, linewidth, flush, close }, s) =  consumer s;
	fun char   ( { consumer, linewidth, flush, close }, c) =  consumer (str c);
	fun flush    { consumer, linewidth, flush, close }     =  flush();
	fun close    { consumer, linewidth, flush, close }     =  close();
    };

    package pp
        =
        prettyprinter_g (								# prettyprinter_g		def in    src/lib/prettyprint/big/src/prettyprinter-g.pkg
	    #
            package ss  =  unstyled_string;						# unstyled_string		is from   src/lib/prettyprint/big/src/unstyled-string.pkg
            package out =  out;
        );

    include pp;

    fun with_standard_prettyprinter  output_stream  (f: pp::Prettyprinter -> Void)	# Compared to the make_standard_prettyprinter() approach, this
        =										# approach makes it harder to forget to flush+close the prettyprinter.
	{   pp =   pp::make_prettyprinter  output_stream;
	    #
            f pp;

	    pp::close_prettyprinter  pp;
	};

    fun prettyprint_to_string   linewidth   prettyprint_fn   chunk
        =
	{   l =   REF ([] : List( String ));
	    #
	    fun attach s =    l :=  s ! *l;

	    output_stream
		=
		{ consumer => attach,
		  linewidth,
		  flush =>  fn()=(),
		  close =>  fn()=()
		};

            with_standard_prettyprinter
                output_stream
	        (fn pp =  prettyprint_fn  pp  chunk);

	    string::cat (list::reverse *l);
	};
};											# package prettyprint 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2003 The SML/NJ Fellowship
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
