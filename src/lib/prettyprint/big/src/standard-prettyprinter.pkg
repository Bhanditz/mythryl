## standard-prettyprinter.pkg
#
# Apparently this is actually in use in:
#     src/lib/compiler/back/low/mcg/print-machcode-controlflow-graph-g.pkg
#     src/lib/compiler/front/typer/types/resolve-overloaded-variables.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib


stipulate
    package fil =  file__premicrothread;				# file__premicrothread			is from   src/lib/std/src/posix/file--premicrothread.pkg
    package pp  =  core_prettyprinter;					# core_prettyprinter		is from   src/lib/prettyprint/big/src/core-prettyprinter.pkg
herein

    package   standard_prettyprinter
    : (weak)  Standard_Prettyprinter					# Standard_Prettyprinter			is from   src/lib/prettyprint/big/src/standard-prettyprinter.api
    {
	Prettyprinter_Args	== pp::Prettyprinter_Args;	

	Prettyprinter
	  =
	  { pp:      pp::Prettyprinter,
	    #
	    align:   (Void -> Void) -> Void,
	    wrap:    (Void -> Void) -> Void,

	    align':  Int -> (Void -> Void) -> Void,
	    wrap':   Int -> (Void -> Void) -> Void,

	    flush:      Void -> Void,
	    close:      Void -> Void,

	    lit:        String -> Void,
	    str:        String -> Void,
	    txt:        String -> Void
	  };  
	Pp = Prettyprinter;




	fun make_prettyprinter  prettyprinter_output_stream   args
	    =
	    {   pp =   pp::make_prettyprinter  prettyprinter_output_stream  args;

		fun align     thunk =   { pp::begin_align_box   pp;    thunk();   pp::end_box pp;   };
		fun wrap      thunk =   { pp::begin_wrap_box    pp;    thunk();   pp::end_box pp;   };

		fun align'    i thunk =   { pp::begin_indented_align_box    pp (pp::BOX_RELATIVE i);   thunk();   pp::end_box pp; };
		fun wrap'     i thunk =   { pp::begin_indented_wrap_box    pp (pp::BOX_RELATIVE i);   thunk();   pp::end_box pp; };

		fun flush ()           =   { pp::flush_prettyprinter  pp;    prettyprinter_output_stream.flush (); };
		fun close ()           =   { pp::close_prettyprinter  pp;    prettyprinter_output_stream.close (); };



		##############################################################################
		#                       lit / put / pu4
		#
		# The idea with put/pu4 is to replace
		# explicit calls to pp::break and pp::newline
		# with embedded ' '  '\r'  '\n'  chars:
		#
		#   lit:   Entire string output literally with no special character treatments.
		#   put:   '\n'                 treated as pp::newline
		#          n blanks             treated as pp::break { spaces => n, indent_on_wrap => 0 }
		#   pu4:   Same, except indent_on_wrap for blanks is 4.
		# 
		# The expectation is that:
		#   put:   Will typically be used to format short statements in a line box.
		#   pu4:   Will typically be used to wrap individual words in a wrap box.
		# In the former case, one usually wants wrapped lines to be aligned,  hence the 'indent_on_wrap => 0'
		# In the latter case, one usually wants wrapped lines to be indented, hence the 'indent_on_wrap => 4'
		# 
		# (I don't expect \r to appear in 'pu4' strings, in general,
		# but there seems no reason not to support it.)
		##############################################################################


		fun lit string
		    = 
		    pp::string pp string;

		fun output indent string
		    = 
		    next 0
		    where
			len =   size string;

			fun next i
			    =
			    if (i < len)
				#
				c =  string::get (string, i);

				case c
				    '\n' =>  do_newline i;
				    '\r' =>  do_cr      i;
				    ' '  =>  do_spaces (i, i+1);
				     _   =>  do_other  (i, i+1);
				esac;
			    fi

			also
			fun do_newline  i						# Treat each \n in 'string' as a call to pp:newline.
			    =
			    {    pp::newline pp;
				 next (i+1);
			    }

			also
			fun do_cr  i							# Treat each \r in 'string' as a call to pp:break { spaces => 3, indent_on_wrap => 0 }.
			    =
			    {    pp::break  pp  { spaces => 1,  indent_on_wrap => 0 };
				 next (i+1);
			    }

			also
			fun do_spaces  (i, j)						# Treat a run of 'n' blanks in 'string' as a call to pp:break { spaces => n, indent_on_wrap => 4 }.
			    =
			    {
				if (j >= len)
				    #
				    pp::break  pp  { spaces => j-i,  indent_on_wrap => indent };
				else
				    c =  string::get (string, j);

				    if (c == ' ')
					#
					do_spaces (i, j+1);				# Scan to end of string of blanks.
				    else
					pp::break  pp  { spaces => j-i,  indent_on_wrap => 4 };
					next j;
				    fi;
				fi;
			    }

			also 								# Treat literally a run of non-\n, non-\r, non-blank chars in 'string'.
			fun do_other (i, j)
			    =
			    if (j >= len)
				#
				pp::string pp (string::substring (string, i, j-i));
			    else
				c =  string::get (string, j);

				if  (c != ' '
				and  c != '\r'
				and  c != '\n'
				)
				     do_other (i, j+1);					# Scan to end of string of vanilla characters.
				else
				     substring =  string::substring (string, i, j-i);
				     pp::string pp substring;
				     next j;
				fi;
			    fi;
		    end;								# fun output

		fun str string =   output 0 string;
		fun txt string =   output 4 string;


		{ pp,

		  align,
		  wrap,

		  align',
		  wrap',

		  flush,
		  close,

		  lit,
		  str,
		  txt
		};  
	    };

	fun make_standard_prettyprinter  prettyprint_filename  pp_args
	    =
	    {   text_stream =  fil::open_for_write  prettyprint_filename; 
		#
		consumer    =   (fn string =  fil::write  (text_stream,  string));

		flush       =   .{ fil::flush        text_stream; };

		close	    =   case  prettyprint_filename
				    #
				    "/dev/stdout"	=>  (fn () = ());				# Trying to close stdout is probably not a good idea.
				    "/dev/stderr"	=>  (fn () = ());				# Trying to close stderr is probably not a good idea either.
				    _			=>  .{ fil::close_output text_stream; };
				esac;

		make_prettyprinter   { consumer, flush, close }   pp_args;
	    };


	##################################################################################################
	# Backward compatibility stuff to make standard_prettyprinter a 100% drop-in replacement for core_prettyprinter:

	Prettyprinter_Output_Stream	=  pp::Prettyprinter_Output_Stream;
	Styled_String			=  pp::Styled_String;
	Textstyle			=  pp::Textstyle;
	Left_Margin_Is			== pp::Left_Margin_Is;

	fun flush_prettyprinter		(pp:Pp)		=  pp::flush_prettyprinter		pp.pp;
	fun close_prettyprinter		(pp:Pp)		=  pp::close_prettyprinter		pp.pp;
	fun begin_horizontal_box	(pp:Pp)		=  pp::begin_horizontal_box		pp.pp;

	fun begin_vertical_box		(pp:Pp)		=  pp::begin_vertical_box		pp.pp;
	fun begin_align_box		(pp:Pp)		=  pp::begin_align_box			pp.pp;
	fun begin_wrap_box		(pp:Pp)		=  pp::begin_wrap_box			pp.pp;
	fun begin_wrap'_box		(pp:Pp)		=  pp::begin_wrap'_box			pp.pp;

	fun begin_indented_vertical_box	(pp:Pp) i	=  pp::begin_indented_vertical_box	pp.pp i;
	fun begin_indented_align_box	(pp:Pp) i	=  pp::begin_indented_align_box		pp.pp i;
	fun begin_indented_wrap_box	(pp:Pp) i	=  pp::begin_indented_wrap_box		pp.pp i;
	fun begin_indented_wrap'_box	(pp:Pp) i	=  pp::begin_indented_wrap'_box		pp.pp i;

	fun horizontal_box		(pp:Pp) f	=  pp::horizontal_box			pp.pp f;
	fun vertical_box		(pp:Pp) f	=  pp::vertical_box			pp.pp f;
	fun align_box			(pp:Pp) f	=  pp::align_box			pp.pp f;
	fun wrap_box			(pp:Pp) f	=  pp::wrap_box				pp.pp f;
	fun wrap'_box			(pp:Pp) f	=  pp::wrap'_box			pp.pp f;

	fun end_box			(pp:Pp)		=  pp::end_box				pp.pp;

	fun styled_string		(pp:Pp) s	=  pp::styled_string			pp.pp s; 
	fun string			(pp:Pp) s	=  pp::string				pp.pp s; 

	fun push_textstyle	       (pp:Pp,ts)	=  pp::push_textstyle		       (pp.pp,ts);		
	fun pop_textstyle	       (pp:Pp)		=  pp::pop_textstyle		        pp.pp;

	fun break			(pp:Pp) a	=  pp::break				pp.pp a;
	fun space			(pp:Pp) i	=  pp::space				pp.pp i;
	fun cut				(pp:Pp)		=  pp::cut				pp.pp;
	fun newline			(pp:Pp)		=  pp::newline				pp.pp;
	fun nonbreakable_spaces		(pp:Pp) i	=  pp::nonbreakable_spaces		pp.pp i;
	fun control			(pp:Pp) f	=  pp::control				pp.pp f;

	fun get_output_stream		(pp:Pp)		=  pp::get_output_stream		pp.pp;

	fun with_standard_prettyprinter  output_stream  pp_args  (f: Prettyprinter -> Void)			# Compared to the make_standard_prettyprinter() approach, this
	    =													# approach makes it harder to forget to flush+close the prettyprinter.
	    {   pp =   make_prettyprinter  output_stream  pp_args;
		#
		f pp;

		close_prettyprinter  pp;
	    };

	fun prettyprint_to_string   pp_args   prettyprint_fn
	    =
	    {   l =   REF ([] : List( String ));
		#
		fun attach s =    l :=  s ! *l;

		output_stream
		    =
		    { consumer => attach,
		      flush =>  fn()=(),
		      close =>  fn()=()
		    };

		with_standard_prettyprinter
		    output_stream  pp_args
		    prettyprint_fn;

		string::cat (list::reverse *l);
	    };

	# End of backward compatibility stuff.
	##################################################################################################

    };											# package standard_prettyprinter
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
