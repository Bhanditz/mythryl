## core-prettyprint-mill.api
#
# Support for prettyprinting plain ascii text --
# a workhorse tool used by about eighty packages.

# Compiled by:
#     src/lib/prettyprint/big/prettyprint-mill.lib



api Base_Prettyprint_Mill {
    #
    include Core_Prettyprint_Mill;							# Core_Prettyprint_Mill	is from   src/lib/prettyprint/big/src/core-prettyprint-mill.api
    #
    end_box:					Pp -> Void;

    text:		Pp -> 	String -> Void;
    endtxt:		Pp -> 	String -> Void;					# Nearly identical to 'txt'. A special hack so a ';' can be at the end of the preceding box instead of on a line by itself.

    begin_horizontal_4box:			Pp -> Void;
    begin_vertical_4box:			Pp -> Void;
    begin_align_4box:				Pp -> Void;
    begin_wrap_4box:				Pp -> Void;

    begin_horizontal_0box:			Pp -> Void;
    begin_vertical_0box:			Pp -> Void;
    begin_align_0box:				Pp -> Void;
    begin_wrap_0box:				Pp -> Void;

    begin_horizontal_cbox:			Pp -> Void;
    begin_vertical_cbox:			Pp -> Void;
    begin_align_cbox:				Pp -> Void;
    begin_wrap_cbox:				Pp -> Void;

    begin_indented_horizontal_box:		Pp -> pmt::Left_Margin_Is -> Void;
    begin_indented_vertical_box:		Pp -> pmt::Left_Margin_Is -> Void;
    begin_indented_align_box:			Pp -> pmt::Left_Margin_Is -> Void;
    begin_indented_wrap_box:			Pp -> pmt::Left_Margin_Is -> Void;

    horizontal_4box:				Pp -> (Void -> Void) -> Void;
    vertical_4box:				Pp -> (Void -> Void) -> Void;
    align_4box:					Pp -> (Void -> Void) -> Void;
    wrap_4box:					Pp -> (Void -> Void) -> Void;

    horizontal_0box:				Pp -> (Void -> Void) -> Void;
    vertical_0box:				Pp -> (Void -> Void) -> Void;
    align_0box:					Pp -> (Void -> Void) -> Void;
    wrap_0box:					Pp -> (Void -> Void) -> Void;

    horizontal_cbox:				Pp -> (Void -> Void) -> Void;
    vertical_cbox:				Pp -> (Void -> Void) -> Void;
    align_cbox:					Pp -> (Void -> Void) -> Void;
    wrap_cbox:					Pp -> (Void -> Void) -> Void;

    break:                Pp -> { spaces: Int,  indent_on_wrap: Int } -> Void;
    space:                Pp -> Int -> Void;					#  space n == break { spaces=n, indent_on_wrap=0 } 
    cut:                  Pp -> Void;               				#  Cut == break { spaces=0, indent_on_wrap=0 } 
    newline:              Pp -> Void;
    nonbreakable_spaces:  Pp -> Int -> Void;         				#  Emit a nonbreakable space 
    tab:		  Pp -> Int -> Void;         				#  Tab to next tabstop, where tabstops are set every 'Int' chars. Guaranteed to move at least one char.

    push_texttraits:    (Pp, Texttraits) -> Void;
    pop_texttraits:      Pp -> Void;


    control:		  Pp -> (Prettyprint_Output_Stream -> Void) -> Void;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2003 The SML/NJ Fellowship
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
