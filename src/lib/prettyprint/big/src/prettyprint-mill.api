## prettyprint-mill.api
#
# This interface provides an output-stream like interface to prettyprinting.
#
# Compare to:
#     src/lib/prettyprint/big/src/prettyprint-tree.api

# Compiled by:
#     src/lib/prettyprint/big/prettyprint-mill.lib

# This API is implemented in:
#
#     src/lib/prettyprint/big/src/prettyprint-mill-g.pkg
#
api Prettyprint_Mill {
    #
    Prettyprint_Mill;
    Pp = Prettyprint_Mill;							

    Prettyprint_Output_Stream;

    Traitful_Text;					# Styled_Strings wrap a string plus blink/bold/color/... information

    Texttraits;

    Left_Margin_Is					# How should we compute the left margin for a box?
      = BOX_RELATIVE     Int				# Indent left margin relative to left margin of containing box.
      | CURSOR_RELATIVE  Int				# Indent left margin relative to start of box.
      ;

    Prettyprinter_Args					# Arguments used to customize a prettyprinter instance.
      #							# NB: We can add more cases here in future without breaking backward compatibility.
      =	DEFAULT_TARGET_BOX_WIDTH    Int
      |	DEFAULT_LEFT_MARGIN_IS	    Left_Margin_Is
      ;
	

    make_prettyprinter:  Prettyprint_Output_Stream -> List(Prettyprinter_Args)   -> Prettyprint_Mill;

    get_output_stream:    Prettyprint_Mill -> Prettyprint_Output_Stream;

    flush_prettyprinter:   Prettyprint_Mill -> Void;
    close_prettyprinter:   Prettyprint_Mill -> Void;

    begin_horizontal_4box:			Prettyprint_Mill -> Void;
    begin_vertical_4box:			Prettyprint_Mill -> Void;
    begin_align_4box:				Prettyprint_Mill -> Void;
    begin_wrap_4box:				Prettyprint_Mill -> Void;

    begin_horizontal_0box:			Prettyprint_Mill -> Void;
    begin_vertical_0box:			Prettyprint_Mill -> Void;
    begin_align_0box:				Prettyprint_Mill -> Void;
    begin_wrap_0box:				Prettyprint_Mill -> Void;

    begin_horizontal_cbox:			Prettyprint_Mill -> Void;
    begin_vertical_cbox:			Prettyprint_Mill -> Void;
    begin_align_cbox:				Prettyprint_Mill -> Void;
    begin_wrap_cbox:				Prettyprint_Mill -> Void;

    end_box:					Prettyprint_Mill -> Void;

    begin_indented_horizontal_box:		Prettyprint_Mill -> Left_Margin_Is -> Void;
    begin_indented_vertical_box:		Prettyprint_Mill -> Left_Margin_Is -> Void;
    begin_indented_align_box:			Prettyprint_Mill -> Left_Margin_Is -> Void;
    begin_indented_wrap_box:			Prettyprint_Mill -> Left_Margin_Is -> Void;

    horizontal_4box:				Prettyprint_Mill -> (Void -> Void) -> Void;
    vertical_4box:				Prettyprint_Mill -> (Void -> Void) -> Void;
    align_4box:					Prettyprint_Mill -> (Void -> Void) -> Void;
    wrap_4box:					Prettyprint_Mill -> (Void -> Void) -> Void;

    horizontal_0box:				Prettyprint_Mill -> (Void -> Void) -> Void;
    vertical_0box:				Prettyprint_Mill -> (Void -> Void) -> Void;
    align_0box:					Prettyprint_Mill -> (Void -> Void) -> Void;
    wrap_0box:					Prettyprint_Mill -> (Void -> Void) -> Void;

    horizontal_cbox:				Prettyprint_Mill -> (Void -> Void) -> Void;
    vertical_cbox:				Prettyprint_Mill -> (Void -> Void) -> Void;
    align_cbox:					Prettyprint_Mill -> (Void -> Void) -> Void;
    wrap_cbox:					Prettyprint_Mill -> (Void -> Void) -> Void;


    styled_string:	Prettyprint_Mill -> Traitful_Text -> Void;
    string:		Prettyprint_Mill -> 	String -> Void;
    endtxt:		Prettyprint_Mill -> 	String -> Void;					# Nearly identical to 'string'. A special hack so a ';' can be at the end of the preceding box instead of on a line by itself.

    push_texttraits:    (Prettyprint_Mill, Texttraits) -> Void;
    pop_texttraits:      Prettyprint_Mill -> Void;

    break:                Prettyprint_Mill -> { spaces: Int,  indent_on_wrap: Int } -> Void;
    space:                Prettyprint_Mill -> Int -> Void;					#  space n == break { spaces=n, indent_on_wrap=0 } 
    cut:                  Prettyprint_Mill -> Void;               				#  Cut == break { spaces=0, indent_on_wrap=0 } 
    newline:              Prettyprint_Mill -> Void;
    nonbreakable_spaces:  Prettyprint_Mill -> Int -> Void;         				#  Emit a nonbreakable space 
    tab:		  Prettyprint_Mill -> Int -> Void;         				#  Tab to next tabstop, where tabstops are set every 'Int' chars.

    control:		  Prettyprint_Mill -> (Prettyprint_Output_Stream -> Void) -> Void;
};



## COPYRIGHT (c) 2005 John Reppy (http://www.cs.uchicago.edu/~jhr)
## All rights reserved.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
