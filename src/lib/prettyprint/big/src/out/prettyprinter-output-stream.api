## prettyprinter-output-stream.api
#
# The point of this API is to isolate the core prettyprinter logic in
#
#     src/lib/prettyprint/big/src/prettyprinter-g.pkg
#
# from concerns about how its output gets marked up with HTML
# or ANSI terminal escape sequences or whatever. (We also
# isolate the prettyprinter proper from concerns about
# just where its output is going.)
#
# The idea is to define abstract Textstyles which represent
# text characteristics like bold, blinking, green or whatever,
# pass these through the core prettyprinter logic as opaque
# data, then do the actual markup/escapesequence generation
# in the Prettyprinter_Output_Stream object once the actual
# prettyprinting algorithm is finished.
#
# We provide two mechanisms for passing Textstyle information
# through the core prettyprinter logic:
#
#  o  The user can supply Styled_Strings instead of plain Strings,
#     where Styled_Strings include Textstyle information internally.
#
#  o  The user can push/pop Textstyles on a prettyprinter stack;
#     all Strings entered into the prettyprinter will be given
#     the Textstyle specified by the top of this stack.
#
# These two are internally equivalent; a Styled_String
#     (string,textstyle)
# is processed into a sequence
#     {   PUSH_TEXTSTYLE textstyle;
#         TEXT string;
#         POP_TEXTSTYLE;
#     }
#
# A third more general mechanism is also provided allowing arbitrary
# output stream control function calls to be passed through the
# prettyprinter proper to the output stream -- see 'control' in
#     src/lib/prettyprint/big/src/prettyprinter.api 
#
# Prettyprinter_Output_Streams is an unimplemented base API
# from which we derive the apis defined and implemented in
#
#     src/lib/prettyprint/big/src/out/plain-prettyprinter-output-stream.pkg
#     src/lib/prettyprint/big/src/out/ansi-terminal-prettyprinter-output-stream.pkg
#     src/lib/prettyprint/big/src/out/html-prettyprinter-output-stream.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib


api Prettyprinter_Output_Stream {
    #
    Prettyprinter_Output_Stream;						# The output stream object accepts output from the prettyprinter and optionally adds HTML (or whatever) markup.

    Textstyle;									# A Textstyle specifies text attributes like bold/italic/color/...
										# A buffer keeps a stack of textstyles, with the
										# top of stack being the "current" textstyle.
										#
										# Implementers of this api should extend it
										# with functions for creating textstyle values:


    same_textstyle:  (Textstyle, Textstyle) -> Bool;				#  Are two textstyles the same? 

    push_textstyle:  (Prettyprinter_Output_Stream, Textstyle) -> Void;		# Push a textstyle onto the markup_buffer's textstyle stack.
    pop_textstyle:    Prettyprinter_Output_Stream -> Void;			# Pop  a textstyle from the markup_buffer's textstyle stack.  A pop on an empty textstyle stack is a no-op.

    default_textstyle:  Prettyprinter_Output_Stream -> Textstyle;		# The default textstyle for the buffer. This is the current textstyle if the textstyle stack is empty.


    depth:       Prettyprinter_Output_Stream -> Null_Or(Int);			# Maximum printing depth (in terms of boxes) 
    text_width:  Prettyprinter_Output_Stream -> Null_Or(Int);			# The suggested maximum width of text on a line 

    spaces:   (Prettyprinter_Output_Stream, Int)	-> Void;		# Append given number of spaces to the markup_buffer.
    string:   (Prettyprinter_Output_Stream, String)	-> Void;		# Append a string in the current textstyle to the markup_buffer.
    char:     (Prettyprinter_Output_Stream, Char)	-> Void;		# Append a char   in the current textstyle to the markup_buffer.
    newline:   Prettyprinter_Output_Stream		-> Void;		# Append a newline to the markup_buffer 

    flush:     Prettyprinter_Output_Stream		-> Void;		# Flush output_stream contents.
    close:     Prettyprinter_Output_Stream		-> Void;		# Close output_stream.
};



## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
