## plain-file-prettyprinter-output-stream-avoiding-pointless-file-rewrites.pkg
#
#    A simple prettyprinter output stream that eventually writes to
#    a text file unless the current contents of that file coincide
#    with what was written.

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib


stipulate
    package fil =  file__premicrothread;				# file__premicrothread	is from   src/lib/std/src/posix/file--premicrothread.pkg
herein

    package plain_file_prettyprinter_output_stream_avoiding_pointless_file_rewrites
    : (weak)
    api {
	include Prettyprinter_Output_Stream;				# Prettyprinter_Output_Stream	is from   src/lib/prettyprint/big/src/out/prettyprinter-output-stream.api

	make_plain_file_prettyprinter_output_stream_avoiding_pointless_file_rewrites
	    :
	    (String, Int) -> Prettyprinter_Output_Stream;		# Arg is (filename, width_in_chars).

	close:  Prettyprinter_Output_Stream -> Void;
    }
    {
	Prettyprinter_Output_Stream
	    =
	    PRETTYPRINTER_OUTPUT_STREAM
	      {
		filename:	String,
		markup_buffer:  Ref(  List(  String ) ),
		wid:		Int
	      };

	Textstyle = Void;		    #  Bo textstyle support 

	fun same_textstyle    _ = TRUE;
	fun push_textstyle    _ = ();
	fun pop_textstyle     _ = ();
	fun default_textstyle _ = ();


	#  Allocate an empty output stream and remember the file name. 

	fun make_plain_file_prettyprinter_output_stream_avoiding_pointless_file_rewrites
              ( f,
		w
	      )
	    =
	    PRETTYPRINTER_OUTPUT_STREAM
	      {
		filename => f,
		markup_buffer   => REF [],
		wid      => w
	      };

	# Calculate the final output and
	# compare it with the current
	# contents of the file.
	#
	# If they differ, write the file:

	fun close (PRETTYPRINTER_OUTPUT_STREAM { markup_buffer => REF l, filename, ... } )
	    =
	    {   s =   cat (reverse l);

		fun write ()
		    =
		    {   f = fil::open_for_write filename;
			fil::write (f, s);
			fil::close_output f;
		    };

		{   f = fil::open_for_read filename;
		    s' = fil::read_all f;

		    fil::close_input f;

		    if (s != s')    write ();    fi;
		}
		except
		    _ = write ();
	    };

	# Maximum printing depth (in terms of boxes) 
	#
	fun depth _ = NULL;

	# The width of the device 
	#
	fun line_width (PRETTYPRINTER_OUTPUT_STREAM { wid, ... } ) = THE wid;

	# The suggested maximum width of text on a line 
	#
	fun text_width _ = NULL;

	# Write a string/character in the current textstyle to the device 
	#
	fun string (PRETTYPRINTER_OUTPUT_STREAM { markup_buffer, ... }, s)
	    =
	    markup_buffer := s ! *markup_buffer;

	fun char (d, c) = string (d, string::from_char c);
	fun space (d, n) = string (d, number_string::pad_left ' ' n "");
	fun newline d = string (d, "\n");

	fun flush d = ();
    };
end;


## (C) 2002, Lucent Technologies, Bell Labs
## author: Matthias Blume (blume@research.bell-labs.com)
