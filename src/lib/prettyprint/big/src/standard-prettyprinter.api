## standard-prettyprinter.api
#
# I find the original prettyprinter interface ugly and clumsy;
# this is an attempt to provide something simpler and cleaner.
#
# My idea here is to do
#
#     pp.align .{
#         pp.txt "Various stuff of consequence.\n";
#     };
#
# instead of
#
#     pp::begin_align_box pp;
#     pp::string          pp "Various";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::string          pp "stuff";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::string          pp "of";
#     pp::break           pp { spaces=>1; indent_on_wrap=>4 };
#     pp::string          pp "consequence.";
#     pp::newline         pp;
#     pp::end_box         pp;
#
# approximately.  In particular, I see the former as:
#
#  o  Inherently keeping block open/close pairs matched.
#     (The original code had at least one such bug.)
#
#  o  Reducing clutter by making the 'pp' arguments implicit.
#
#  o  Reducing clutter by allowing newlines and blanks be
#     included in strings instead of having to be separate calls.
# Apparently this is actually in use in:
#     src/lib/compiler/back/low/mcg/print-machcode-controlflow-graph-g.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprinting.lib

stipulate
    package fil =  file__premicrothread;				# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package ppb =  core_prettyprinter;					# core_prettyprinter	is from   src/lib/prettyprint/big/src/core-prettyprinter.pkg

    Standard_Prettyprinter
      =
      { pp:      ppb::Prettyprinter,
	#
	align:   (Void -> Void) -> Void,
	wrap:    (Void -> Void) -> Void,

	align':   Int -> (Void -> Void) -> Void,
	wrap':    Int -> (Void -> Void) -> Void,

	flush:     Void -> Void,
	close:     Void -> Void,

	lit:       String -> Void,					# Output string literally -- no chars receive special treatment.
	str:       String -> Void,					# n blanks == break { spaces => 3, indent_on_wrap => 0 }
	txt:       String -> Void					# n blanks == break { spaces => n, indent_on_wrap => 4 }
      };  
herein

    api Standard_Prettyprinter {
	#
	include Core_Prettyprinter					# Make standard_prettyprinter a 100% drop-in replacement for core_prettyprinter.
		where Prettyprinter == Standard_Prettyprinter;
#		where Pp	    == Standard_Prettyprinter;	 

	make_standard_prettyprinter
	    :
	    String
	    -> List( Prettyprinter_Args )
            -> Standard_Prettyprinter;

    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
