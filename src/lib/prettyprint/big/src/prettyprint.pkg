## prettyprint.pkg
#
# Compare to:
#     src/lib/prettyprint/simple/simple-prettyprinter.pkg

# Compiled by:
#     src/lib/prettyprint/big/prettyprint.lib


# An implementation of the Prettyprint interface.
#   - This is an (almost) literal copy of the original code in
#     lib/prettyprint/big/examples/old-prettyprint.sml



###            "The gods too are fond of a joke."
###
###                            -- Aristotle


api Prettyprint {
    #
    include Prettyprint_Stream;				# Prettyprint_Stream	is from   src/lib/prettyprint/big/src/prettyprint-stream.api

    with_prettyprint_buffer:  Markup_Buffer
                              -> (Stream -> Void)
                              -> Void;

    prettyprint_to_string:  Int
                            -> (Stream -> X -> Void)
                            -> X
                            -> String;
};



package   prettyprint
: (weak)  Prettyprint
{
    Prettyprint_Consumer
        =
        { consumer:   String -> Void,
	  linewidth:  Int,
	  flush:      Void -> Void
        };

    package mut {
	#
	Markup_Buffer = Prettyprint_Consumer;
	Textstyle  = Void;

	fun same_textstyle _    = TRUE;
	fun push_textstyle _    = ();
	fun pop_textstyle _     = ();
	fun default_textstyle _ = ();

	fun depth _ = NULL;
	fun line_width { consumer, linewidth, flush } = THE linewidth;
	fun text_width _ = NULL;

	fun space ( { consumer, linewidth, flush }, n)
	    =
	    consumer (number_string::pad_left ' ' n "");

	fun newline  { consumer, linewidth, flush }     =  consumer "\n";
	fun string ( { consumer, linewidth, flush }, s) =  consumer s;
	fun char   ( { consumer, linewidth, flush }, c) =  consumer (str c);
	fun flush    { consumer, linewidth, flush }     =  flush();
    };

    package pp
        =
        prettyprint_stream_g (						# prettyprint_stream_g		def in    src/lib/prettyprint/big/src/prettyprint-stream-g.pkg
	    #
            package ss  =  unstyled_string;				# unstyled_string		is from   src/lib/prettyprint/big/devices/unstyled-string.pkg
            package mut =  mut;
        );

    include pp;

    fun with_prettyprint_buffer  markup_buffer  (f: pp::Stream -> Void)
        =
	{   stream =   pp::open_stream  markup_buffer;
	    #
            f stream;

	    pp::close_stream  stream;
	};

    fun prettyprint_to_string   linewidth   prettyprint_fn   chunk
        =
	{   l =   REF ([] : List( String ));
	    #
	    fun attach s =    l :=  s ! *l;

	    device =    { consumer => attach,
			  linewidth,
			  flush =>  fn()=()
			};

            with_prettyprint_buffer
                device
	        (fn prettyprint_stream =  prettyprint_fn  prettyprint_stream  chunk);

	    string::cat (list::reverse *l);
	};

};									# package prettyprint 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2003 The SML/NJ Fellowship
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
