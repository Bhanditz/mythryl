## mark-up-text-with-escape-sequences.api
#
# API for packages encapsulating knowledge of how to
# set text characteristics such as font and color.
#
# This is an unimplemented base API from which we
# derive the apis defined and implemented in
#
#     src/lib/prettyprint/big/devices/mark-up-text-with-no-escape-sequences.pkg
#     src/lib/prettyprint/big/devices/ansi-terminal-markup-buffer.pkg
#     src/lib/prettyprint/big/devices/html-markup-buffer.pkg
# also
#     src/app/c-glue-maker/plain-markup-buffer-avoiding-pointless-file-rewrites.pkg

# Compiled by:
#     src/lib/prettyprint/big/src/prettyprinting.sublib


api Markup_Buffer {
    #
    Markup_Buffer;						# The markup buffer accumulates content until it is time to actually do the markup.

    Textstyle;							# A Textstyle specifies text attributes like bold/italic/color/...
								# A buffer keeps a stack of textstyles, with the
								# top of stack being the "current" textstyle.
								#
								# Implementers of this api should extend it
								# with functions for creating textstyle values:


    same_textstyle:  (Textstyle, Textstyle) -> Bool;		#  Are two textstyles the same? 




    push_textstyle:  (Markup_Buffer, Textstyle) -> Void;	# Push a textstyle onto the markup_buffer's textstyle stack.
    pop_textstyle:    Markup_Buffer -> Void;			# Pop  a textstyle from the markup_buffer's textstyle stack.  A pop on an empty textstyle stack is a no-op.

    default_textstyle:  Markup_Buffer -> Textstyle;		# The default textstyle for the buffer. This is the current textstyle if the textstyle stack is empty.


    depth:       Markup_Buffer -> Null_Or(Int);			# Maximum printing depth (in terms of boxes) 
    line_width:  Markup_Buffer -> Null_Or(Int);			# The width of the markup_buffer. 
    text_width:  Markup_Buffer -> Null_Or(Int);			# The suggested maximum width of text on a line 

    space:    (Markup_Buffer, Int)	-> Void;		# Append given number of spaces to the markup_buffer.
    string:   (Markup_Buffer, String)	-> Void;		# Append a string in the current textstyle to the markup_buffer.
    char:     (Markup_Buffer, Char)	-> Void;		# Append a char   in the current textstyle to the markup_buffer.
    newline:   Markup_Buffer		-> Void;		# Append a newline to the markup_buffer 

    flush:     Markup_Buffer		-> Void;		# Flush markup_buffer contents.
};



## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
