## default-bounce-theme-imp-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
    package axp =  appwindow;					# appwindow			is from   src/lib/x-kit/widget/theme/appwindow.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    package osi =  bounce_space_imp;				# bounce_space_imp		is from   src/lib/x-kit/widget/space/bounce/bounce-space-imp.pkg
    package bsi =   ball_state_imp;				#   ball_state_imp		is from   src/lib/x-kit/widget/space/bounce/ball/ball-state-imp.pkg
    package bli =    ball_look_imp;				#    ball_look_imp		is from   src/lib/x-kit/widget/theme/bounce/ball/ball-look-imp.pkg
    package blx =  default_ball_look_imp_for_x;			# default_ball_look_imp_for_x	is from   src/lib/x-kit/widget/xkit/theme/bounce/default/look/default-ball-look-imp-for-x.pkg
    package bwe =  bounce_widget_egg;				# bounce_widget_egg		is from   src/lib/x-kit/widget/space/bounce/bounce-widget-egg.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_bounce_theme_imp_for_x
    :               Bounce_Theme_Imp											# Bounce_Theme_Imp	is from   src/lib/x-kit/widget/theme/bounce-theme-imp.api
    {
	#
	include bounce_theme;												# bounce_theme	is from   src/lib/x-kit/widget/theme/bounce/bounce-theme.pkg
	#
	Theme_State = Ref( Void );											# Holds all nonephemeral mutable state maintained by skin.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:	Int -> Void,
		    appwindow:	axp::Appwindow
		  };

	Me_Slot = Mailslot( { imports:	Imports,
				  me:		Theme_State,
				  run_gun':	Run_Gun,
				  end_gun':	End_Gun
                                }
                              );

	Exports	= {													# Ports we provide for use by other imps.
		    bounce_theme:	Bounce_Theme
		  };


	Option = MICROTHREAD_NAME String;										# 

	Bounce_Theme_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun										# We shut down the microthread when this fires.
		    };

	Theme_Q    = Mailqueue( Runstate -> Void );

	fun run ( theme_q:		Theme_Q,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun										# We shut down the microthread when this fires.
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_theme_imp'),
			    (take_from_mailqueue' theme_q    ==>  do_theme_plea)
			];

			loop ();
		    }	
		    where
			fun do_theme_plea thunk
			    =
			    thunk runstate;

			fun shut_down_theme_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		bounce_theme
		    =
		    { do_something,
		      exercise_appwindow,
		      pass_something,
		      pass_appwindow_exercise_results,
		      bounce_space,
		      ball	
		    };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { bounce_theme }));						# Return value from bounce_theme_egg'().

		(take_from_mailslot  me_slot)										# Input args from bounce_theme_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (theme_q, { me, imports, to, end_gun' });								# Will not return.
	    }
	    where
		theme_q     =  make_mailqueue (get_current_microthread()):  Theme_Q;

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (theme_q,
			#
			fn ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );

		fun exercise_appwindow ()										# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, to, ... }: Runstate)
				=
				imports.appwindow.pass_appwindow_exercise_results
				    to
				    {.  put_in_oneshot (reply_oneshot, #i);   }
			);

			fn () =  get_from_oneshot reply_oneshot;
		    };

		fun  pass_appwindow_exercise_results  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)		# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, to, ... }: Runstate)
				=
				imports.appwindow.pass_appwindow_exercise_results
				    to
				    {.  put_in_oneshot (reply_oneshot, #i);   }
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, ... }: Runstate)
			        =
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun bounce_space  (options: osi::Bounce_Space_Arg)							# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( osi::Bounce_Space_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, ... })
				=
				{   (osi::make_bounce_space_egg	options NULL) -> bounce_space_egg;
				    #
				    put_in_oneshot (reply_oneshot, bounce_space_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

		fun ball  ( ball_arg:				         bsi::Ball_Arg,				# PUBLIC.
			    ball_look_arg:				 bli::Ball_Look_Arg
			  )
			  ( state_endstate_oneshot:	Null_Or(Oneshot_Maildrop(bsi::Ball_Arg     )),
			     look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(bli::Ball_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( bwe::Bounce_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, ... }: Runstate)
				=
				{   (bsi::make_ball_state_egg  ball_arg  state_endstate_oneshot)
					->
					ball_state_egg;				# Currently unused!
				    #
				    (blx::make_ball_egg	( /* imports.appwindow, */ ball_arg, ball_look_arg, state_endstate_oneshot, look_endstate_oneshot))
					->
					ball_look_egg;

#				    (ball_look_egg			()) -> (ball_look_exports, ball_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, ball_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };
	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_bounce_theme_egg (options: List(Option))								# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "tmp" }))
		    ->
		    { name };
	
		me = REF ();

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				};

			    (exports, phase3);
			};
	    };
    };

end;
