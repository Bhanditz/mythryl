## widget-imp.api
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  client_to_atom;				# client_to_atom		is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package xet =  xevent_types;				# xevent_types			is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver	is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap	is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package sep =  client_to_selection;				# client_to_selection		is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer		is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/old/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  client_to_window_watcher;			# client_to_window_watcher	is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package gtg =  guiboss_to_guishim;				# guiboss_to_guishim		is from   src/lib/x-kit/widget/theme/guiboss-to-guishim.pkg

    package gd  =  gui_displaylist;				# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    #
    package g2p =  gadget_to_pixmap;				# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
    package g2d =  geometry2d;					# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;				# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package gts =  gui_event_to_string;				# gui_event_to_string		is from   src/lib/x-kit/widget/gui/gui-event-to-string.pkg

    package gt  =  guiboss_types;				# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package wt  =  widget_theme;				# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg

    package iul =  issue_unique_look_id;			# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg


    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    #
    api Widget_Imp {

	#
	Widget												# This turns out not to get used in practice, and probably should be dropped if no use turns up for it.
	  =
	  { id:					iul::Id,						# Unique id to facilitate storing node_state instances in indexed datastructures like red-black trees.
	    pass_something:			Replyqueue -> (Int -> Void) -> Void,
	    do_something:			Int -> Void,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  };

	Startup_Fn
	  =
	  { 
	    id:					iul::Id,						# Unique id.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    saved_widget_state:			Null_Or(Exception),					# Used to preserve state across gui stop/restart cycles.
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Shutdown_Fn
	  =
	  Void
	  ->
	  Null_Or(Exception);										# saved_widget_state, used to preserve state across gui stop/restart cycles.

	Initialize_Gadget_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    site:				g2d::Box,						# Window rectangle in which to draw.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    theme:				wt::Widget_Theme,
	    pass_font:				List(String) -> Replyqueue
							     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
	     get_font:				List(String) ->	 evt::Font,				# Accepts a list of font names which are tried in order.
	    make_rw_pixmap:			g2d::Size -> g2p::Gadget_To_Rw_Pixmap,			# Make an Xserver-side rw_pixmap for scratch use by widget.  In general there is no need for the widget to explicitly free these -- guiboss_imp will do this automatically when the gui is killed.
	    #
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Redraw_Request_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    frame_number:			Int,							# 1,2,3,... Purely for convenience of widget, guiboss-imp makes no use of this.
	    site:				g2d::Box,						# Window rectangle in which to draw.
	    visible:				Bool,							# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
	    duration_in_seconds:		Float,							# If state has changed look-imp should call note_changed_gadget_foreground() before this time is up. Also useful for motionblur.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    gadget_mode:			gt::Gadget_Mode,
	    theme:				wt::Widget_Theme,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Mouse_Click_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
	    button:				evt::Mousebutton,
	    point:				g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    theme:				wt::Widget_Theme,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Mouse_Drag_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event_point:			g2d::Point,
	    start_point:			g2d::Point,
	    last_point:				g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    phase:				gt::Drag_Phase,	
	    button:				evt::Mousebutton,
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    theme:				wt::Widget_Theme,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Mouse_Transit_Fn										# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event_point:			g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    transit:				gt::Gadget_Transit,					# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    theme:				wt::Widget_Theme,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Key_Event_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    key_event:				gt::Key_Event,						# KEY_PRESS or KEY_RELEASE
	    keycode:				evt::Keycode,						# Keycode of the depressed key. (Is this of any conceivable use?)
	    keysym:				evt::Keysym,						# Keysym  of the depressed key.  See Note[1].  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
	    string:				String,							# Ascii  for the depressed key.  See Note[1].  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
	    char:				Char,							# First char of 'string' ('\0' if string-length != 1).
	    event_point:			g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    widget_to_guiboss:			gt::Widget_To_Guiboss,
	    theme:				wt::Widget_Theme,
	    do:					(Void -> Void) -> Void					# Used by widget subthreads to run code in main widget microthread.
	  }
	  ->
	  Void;

	Widget_Option
	    #
	    = MICROTHREAD_NAME			String							# 
	    | ID				iul::Id							# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	    #
	    | WIDGET_CONTROL_CALLBACK		( gt::Guiboss_To_Widget -> Void )			# Gui boss registers this maildrop to get a port to us once we start up.
	    | WIDGET_CALLBACK			(       Null_Or(Widget) -> Void )			# App      registers this maildrop to get (THE widget_port) from us once we start up, and NULL when we shut down.
	    #
	    | STARTUP_FN			Startup_Fn						# Args include various values of possible use to gadget code, e.g. 'saved_widget_state'.  No required response.
	    | SHUTDOWN_FN			Shutdown_Fn						# Application-specific handler for widget-imp shutdown -- mainly saving state for possible later widget restart.
	    #												# 
	    | INITIALIZE_GADGET_FN		Initialize_Gadget_Fn					# Args include various values of possible use to widget code.  No required response.
	    | REDRAW_REQUEST_FN			Redraw_Request_Fn					# Guiboss request for widget to redraw itself.          Fn should always respond by calling gadget_to_guiboss.redraw_gadget().
	    #
	    | MOUSE_CLICK_FN			Mouse_Click_Fn						# Application-specific handler for mousebutton clicks.  Fn should call gadget_to_guiboss.needs_redraw_gadget_request() if widget needs to redraw in response to user input.
	    #
	    | MOUSE_DRAG_FN			Mouse_Drag_Fn						# Application-specific handler for mouse motions.       Fn should call gadget_to_guiboss.needs_redraw_gadget_request() if widget needs to redraw in response to user input.
	    | MOUSE_TRANSIT_FN			Mouse_Transit_Fn					# Application-specific handler for mouse motions.       Fn should call gadget_to_guiboss.needs_redraw_gadget_request() if widget needs to redraw in response to user input.
	    #
	    | KEY_EVENT_FN			Key_Event_Fn						# Application-specific handler for keyboard input.      Fn should call gadget_to_guiboss.needs_redraw_gadget_request() if widget needs to redraw in response to user input.
	    #
	    | PIXELS_HIGH_MIN			Int							# Widget is guaranteed this many vertical   pixels (but may get pushed out of sight on bottom of the COL it is in).
	    | PIXELS_WIDE_MIN			Int							# Widget is guaranteed this many horizontal pixels (but may get pushed out of sight on right  of the ROW it is in).
	    #
	    | PIXELS_HIGH_CUT			Float							# This value determines our share of pixels remaining after guaranteed pixels are alloted.
	    | PIXELS_WIDE_CUT			Float							# This value determines our share of pixels remaining after guaranteed pixels are alloted.
	    ;

	Widget_Arg	  =  List(Widget_Option);							# No required components at present.

	make_widget_start_fn
	    :
	    Widget_Arg
	    ->
	    gt::Widget_Start_Fn
	    ;


	pprint_widget_arg:	pp::Prettyprint_Mill -> Widget_Arg -> Void;
    };


end;



################################################
#
# Note[1]:
# The intention here is that most code can simply use 'string'.
#
# For plain-ascii keystrokes, 'string' will have string::length 1.
#
# For special keys, 'string' will be "<F1>" or such.
# This coding is done in
#
#     src/lib/x-kit/xclient/src/window/keysym-to-ascii.pkg
#
# so consult it for ground truth, but the basic set is:
#
#     "<Clear>"
#     "<Pause>"
#     "<ScrollLock>"
#     "<F1>"
#     "<F2>"
#     "<F3>"
#     "<F4>"
#     "<F5>"
#     "<F6>"
#     "<F7>"
#     "<F8>"
#     "<F9>"
#     "<F10>"
#     "<F11>"
#     "<F12>"
#     "<F13>"
#     "<F14>"
#     "<F15>"
#     "<F16>"
#     "<F17>"
#     "<F18>"
#     "<F19>"
#     "<F20>"
#     "<F21>"
#     "<F22>"
#     "<F23>"
#     "<F24>"
#     "<F25>"
#     "<F26>"
#     "<F27>"
#     "<F28>"
#     "<F29>"
#     "<F30>"
#     "<F31>"
#     "<F32>"
#     "<F33>"
#     "<F34>"
#     "<F35>"
#     "<LeftShift>"
#     "<RightShift>"
#     "<LeftCtrl>"
#     "<RightCtrl>"
#     "<CapsLock>"
#     "<LeftMeta>"
#     "<RightMeta>"
#     "<LeftAlt>"
#     "<RightAlt>"
#     "<Cmd>"
#     "<Home>"
#     "<Left>"
#     "<Up>"
#     "<Right>"
#     "<Down>"
#     "<PageUp>"
#     "<PageDown>"
#     "<End>"
#     "<Select>"
#     "<PrintScr>"
#     "<Execute>"
#     "<Insert>"
#     "<Undo>"
#     "<Redo>"
#     "<Menu>"
#     "<Find>"
#     "<Cancel>"
#     "<Help>"
#     "<Break>"
#     "<NumLock>"
#
# As a convenience for (most) code, a few special keys
# are mapped to single ascii characters:
#
#    0uxFF80 => "\x20";	# KP_Space => " " 	("KP_"=="Keypad_" here.)
#    0ux00AD => "\x2D";	# hyphen => "-" 
#    0uxFF08 => "\x08";	# Backspace => BS 
#    0uxFF09 => "\x09";	# Tab => HT 
#    0uxFF0A => "\x0A";	# Linefeed => LF 
#    0uxFF0D => "\x0D";	# Return => CR 
#    0uxFF1B => "\x1B";	# Escape => ESC 
#    0uxFFFF => "\x7F";	# Delete => DEL 
#    0uxFF8D => "\x0D";	# KP_Enter => CR 
#    0uxFFAA => "*";	# KP_Multiply => "*" 
#    0uxFFAB => "+";	# KP_Add => "+" 
#    0uxFFAD => "-";	# KP_Subtract => "-" 
#    0uxFFAF => "/";	# KP_Divide => "/" 
#    0uxFFB1 => "1";	# KP_1 => "1" 
#    0uxFFB2 => "2";	# KP_2 => "2" 
#    0uxFFB3 => "3";	# KP_3 => "3" 
#    0uxFFB4 => "4";	# KP_4 => "4" 
#    0uxFFB5 => "5";	# KP_5 => "5" 
#    0uxFFB6 => "6";	# KP_6 => "6" 
#    0uxFFB7 => "7";	# KP_7 => "7" 
#    0uxFFB8 => "8";	# KP_8 => "8" 
#    0uxFFB9 => "9";	# KP_9 => "9" 
#    0uxFFBD => "=";	# KP_Equal => "=" 
#
# The expectation here is that most programs don't need or
# want to distinguish between (say) Ctrl-H and <Backspace>.
#
# Those programs which do need to so distinguish should
# disambiguate by examining the 'keysym' field for the
# key event, for example by comparing
#
#     package evt = gui_event_types;
#     ...
#     event.keysym ->  evt::KEYSYM k;
#     ...
#     if (k == evt:;k::backspace)
#         ...
#     else
#         ...
#     fi;
