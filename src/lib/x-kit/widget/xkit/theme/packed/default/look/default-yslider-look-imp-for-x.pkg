## default-yslider-look-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package aw  =  appwindow;					# appwindow			is from   src/lib/x-kit/widget/theme/appwindow.pkg
    package mid =  make_fresh_imp_id;				# make_fresh_imp_id		is from   src/lib/src/make-fresh-imp-id.pkg
    package pwc =  packed_widget_control;			# packed_widget_control		is from   src/lib/x-kit/widget/space/packed/packed-widget-control.pkg
    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed-widget-egg.pkg
    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package ssi =  slider_state_imp;				# slider_state_imp		is from   src/lib/x-kit/widget/space/packed/slider/slider-state-imp.pkg
    package yl  =  yslider_look;				# yslider_look			is from   src/lib/x-kit/widget/theme/packed/look/yslider-look.pkg
    package yli =  yslider_look_imp;				# yslider_look_imp		is from   src/lib/x-kit/widget/theme/packed/look/yslider-look-imp.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_yslider_look_imp_for_x
    :               Yslider_Look_Imp											# Yslider_Look_Imp	is from   src/lib/x-kit/widget/theme/packed/yslider-look-imp.api
    {
	#
	include yslider_look;												# yslider_look		is from   src/lib/x-kit/widget/theme/packed/yslider-look.pkg
	#
	Yslider_Look_State
	  =
	  { id:		Int,
	    state:	Ref( ssi::Slider_State_Needs )									# Opaque wrapper for all nonephemeral mutable state maintained by look.
	  };

	Imports =  pwe::Imports;
	Exports =  pwe::Exports;

	Yslider_Look_Option ==  yli::Yslider_Look_Option;
	Yslider_Look_Arg    =   yli::Yslider_Look_Arg;

	Yslider_Look_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Me_Slot = Mailslot( { imports:			Imports,
			      me:			Yslider_Look_State,
			      options:			List(Yslider_Look_Option),
			      run_gun':			Run_Gun,
			      end_gun':			End_Gun,
			      endstate_oneshot:		Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)),
			      yslider_look_callbacks:	List(          yl::Yslider_Look -> Void),
			      widget_control_callbacks:	List(pwc::Packed_Widget_Control -> Void)
			    }
			  );

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Yslider_Look_State,								# State which is preserved across imp shutdown/restart cycles.
		      options:		List(Yslider_Look_Option),
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun,									# We shut down the microthread when this fires.
		      endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg))
		    };

	Yslider_Q    = Mailqueue( Runstate -> Void );

	fun run ( yslider_q:		Yslider_Q,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Yslider_Look_State,								# State which is preserved across imp shutdown/restart cycles.
		    options:		List(Yslider_Look_Option),
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg))
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_yslider_imp'),
			    (take_from_mailqueue' yslider_q  ==>  do_yslider_plea)
			];

			loop ();
		    }	
		    where
			fun do_yslider_plea thunk
			    =
			    thunk runstate;

			fun shut_down_yslider_imp' ()
			    =
			    {
# XXX BUGGO NOT YET USING endstate_oneshot:
#				case endstate_oneshot									# Pass our state back to gui-boss to allow later impnet restart without state loss.
#				    #
#				    NULL	=> ();
#				    THE oneshot => put_in_oneshot (oneshot, options);					# 
#				esac;

				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (id: Int,  reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports, ssi::Slider_State_Needs -> Void) ))   ()	# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		packed_widget_control	=  { id, do_something, pass_something, pass_draw_done_flag };
		yslider_look		=  { id, do_something, pass_something };
		exports			=  { packed_widget_control };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports, note_new_state));					# Return value from make_yslider_look().

		(take_from_mailslot  me_slot)										# Input args from configure_default_yslider_look_for_x().
		    ->
		    { me, options, imports, run_gun', end_gun', endstate_oneshot,
		      widget_control_callbacks,
		        yslider_look_callbacks
		    };

		apply   {. #callback          yslider_look; }   yslider_look_callbacks;					# Pass our port to everyone who asked for it.
		apply   {. #callback packed_widget_control; }   widget_control_callbacks;				# Pass our port to everyone who asked for it.

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (yslider_q, { me, options, imports, to, end_gun', endstate_oneshot });					# Will not return.
	    }
	    where
		yslider_q     =  make_mailqueue (get_current_microthread()):  Yslider_Q;


		fun note_new_state (state: ssi::Slider_State_Needs)							# External entrypoint.
		    =	
		    put_in_mailqueue  (yslider_q,
			#
			fn ({ me, ... }: Runstate)
			    =
			    me.state := state										# Do we need to notify gui-boss that we need to redraw?
		    );


		fun do_something (i: Int)										# External entrypoint.
		    =	
		    put_in_mailqueue  (yslider_q,
		        #
			fn ({ imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (yslider_q,
			    #
			    fn (_: Runstate)	
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_draw_done_flag  (replyqueue: Replyqueue)  (reply_handler: Void -> Void)			# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (yslider_q,
			    #
			    fn (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, ())
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


	fun process_options
	    ( options: List(Yslider_Look_Option),
	      #
	      { name,
		id,
	        yslider_look_callbacks,
	        widget_control_callbacks
	      }
	    )
	    =
	    {   my_name				=  REF name;
		my_id				=  REF id;
		my_yslider_look_callbacks	=  REF yslider_look_callbacks;
		my_widget_control_callbacks	=  REF widget_control_callbacks;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME        n) =>   my_name			:=  n;
			do_option (ID      	           i) =>   my_id                   	:=  i;
			#
			do_option (WIDGET_CONTROL_CALLBACK c) =>   my_widget_control_callbacks	:=  c ! *my_widget_control_callbacks;
			do_option (YSLIDER_LOOK_CALLBACK   c) =>   my_yslider_look_callbacks	:=  c ! *my_yslider_look_callbacks;
		    end;
		end;

		{ name			    =>  *my_name,
		  id 			    =>  *my_id,
		  yslider_look_callbacks    =>  *my_yslider_look_callbacks,
		  widget_control_callbacks  =>  *my_widget_control_callbacks
		};
	    };


        ##########################################################################################
	# External entrypoints
	#
	fun make_yslider_egg												# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	      (
#		appwindow:		aw::Appwindow,
		slider_arg:		ssi::Slider_Arg,
		options:		List(Yslider_Look_Option),
		endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg))
	      )
	    =
	    {   (process_options
		  ( options,
		    { name			=>  "yslider_look",
		      id			=>  0,
		      yslider_look_callbacks	=>  [],
		      widget_control_callbacks	=>  []
		    }
		) )
		    ->
		    { name,
		      id,
		      yslider_look_callbacks,
		      widget_control_callbacks
		    };
	
		slider_arg -> (slider_state_needs, slider_state_options);

		my (id, options)
		    =
		    if (id == 0)
			id = mid::make_fresh_imp_id();									# Allocate unique imp id.
			(id, ID id ! options);										# Make our id stable across stop/restart cycles.
		    else
			(id, options);											# Nop.
		    fi;

		me = { id, state => REF slider_state_needs };

		slider_state_egg =  ssi::make_slider_state_egg  slider_arg  endstate_oneshot;

		fn () = {   reply_oneshot										# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
				=
				make_oneshot_maildrop ()
				:    Oneshot_Maildrop( (Me_Slot, Exports, ssi::Slider_State_Needs -> Void) );

			    xlogger::make_thread  name  (startup  (id, reply_oneshot));					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports, note_new_state);

			    (slider_state_egg ()) -> (slider_state_exports, slider_state_egg');

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{   slider_state_imports = { state_sink => note_new_state };
				    #
				    slider_state_egg' (slider_state_imports, run_gun', end_gun');

				    put_in_mailslot  (me_slot, { me, options, imports, run_gun', end_gun', endstate_oneshot,
							         yslider_look_callbacks,
							         widget_control_callbacks
							       }
						     );
				};

			    (exports, phase3);
			};
	    };

	fun pprint_yslider_look_arg
	      (pp:			pp::Prettyprint_Mill)
	      (yslider_look_arg:	Yslider_Look_Arg)
	    =
	    {
		yslider_look_arg
		  ->
		  ( options:	List(Yslider_Look_Option)
		  );

		pp.box {.
		    pp.txt " [";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name		=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			ID			id	=>  {  pp.lit (sprintf "ID %d" id                    );		};
			WIDGET_CONTROL_CALLBACK _	=>  {  pp.lit          "WIDGET_CONTROL_CALLBACK (callback)";	};
			YSLIDER_LOOK_CALLBACK _		=>  {  pp.lit          "YSLIDER_LOOK_CALLBACK (callback)";	};
		    esac;
	    end;
    };

end;
