## packed-look-imp-g.pkg
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  client_to_atom;				# client_to_atom		is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package xet =  xevent_types;				# xevent_types			is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver	is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap	is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package sep =  client_to_selection;				# client_to_selection		is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer		is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  client_to_window_watcher;			# client_to_window_watcher	is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
#   package g2w =  guiboss_to_windowsystem;			# guiboss_to_windowsystem	is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg

    package gd  =  gui_displaylist;				# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    #
    package l2g =  look_to_gui;					# look_to_gui			is from   src/lib/x-kit/widget/gui/look-to-gui.pkg
    package l2p =  look_to_packed;				# look_to_packed		is from   src/lib/x-kit/widget/space/packed/look-to-packed.pkg
    package p2l =  packed_to_look;				# packed_to_look		is from   src/lib/x-kit/widget/space/packed/packed-to-look.pkg
    #
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package evt =  gui_event_types;				# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package gts =  gui_event_to_string;				# gui_event_to_string		is from   src/lib/x-kit/widget/gui/gui-event-to-string.pkg




    package iul =  issue_unique_look_id;			# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg

# phasing this out because it needs to be specialized to 'package ss' below:
#   package ll  =  packed_look;					# packed_look			is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg

    package g2l =  gui_to_look;					# gui_to_look			is from   src/lib/x-kit/widget/gui/gui-to-look.pkg

    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    # This generic is invoked from:
    #
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/bool-look-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/exception-look-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/float-look-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/image-look-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/int-look-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/string-look-imp.pkg
    #
    generic package   packed_look_imp_g   (
	#             ==================
	#
	# Our argument package mainly specializes us to one						# Is there a better way of formulating this generic?
	# particular type of Value, such as String or Float:
	#
	package ss:	Client_To_Packed_State;								# Client_To_Packed_State	is from   src/lib/x-kit/widget/space/packed/client-to-packed-state.api
													#
													# client_to_bool_state		is from   src/lib/x-kit/widget/space/packed/client-to-bool-state.pkg
													# client_to_exception_state	is from   src/lib/x-kit/widget/space/packed/client-to-exception-state.pkg
													# client_to_float_state		is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
													# client_to_image_state		is from   src/lib/x-kit/widget/space/packed/client-to-image-state.pkg
													# client_to_int_state		is from   src/lib/x-kit/widget/space/packed/client-to-int-state.pkg
        												# client_to_string_state	is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
	    					


													# bool_state_imp		is from   src/lib/x-kit/widget/space/packed/bool-state-imp.pkg
													# exception_state_imp		is from   src/lib/x-kit/widget/space/packed/exception-state-imp.pkg
													# float_state_imp		is from   src/lib/x-kit/widget/space/packed/float-state-imp.pkg
													# image_state_imp		is from   src/lib/x-kit/widget/space/packed/image-state-imp.pkg
													# int_state_imp			is from   src/lib/x-kit/widget/space/packed/int-state-imp.pkg
													# string_state_imp		is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg
	package si:	    api {
				#
				Exports	= {								# Ports we provide for use by other imps.
					    client_to_state:		ss::Client_To_State
					  };

				Imports = {								# Ports we use, provided by other imps.
					    state_sink:			ss::Value -> Void		# To notify our look-imp of value changes.  Just like CHANGE_CALLBACK, but we want our look-imp link to be mandatory. 
					  };

				Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

				make_egg
				    :
				    ss::Make_Arg
				 -> Null_Or(Oneshot_Maildrop(ss::Make_Arg))				# The optional oneshot is used by guiboss to capture final state of imp when endgun fires.
				 -> Egg
				    ;

				pprint_make_arg:	pp::Prettyprint_Mill -> ss::Make_Arg -> Void;
			    };

													# Client_To_Packed_State	is from   src/lib/x-kit/widget/space/packed/client-to-packed-state.api
    )
    : api  {
	#
# It isn't clear that this is needed.
# There's nothing useful defined here,
# and we already have and
#    gui_to_look
#    packed_to_look
# -- it isn't clear we need another
# exported interface currently.
# [LATER:] -- BUT THIS IS CURRENTLY USED in 1277:src/lib/x-kit/widget/gui/guiboss-imp.pkg
#             It currently winds up stored in   src/lib/x-kit/widget/gui/running-gui.pkg
# 	      as BOOL.look, INT.look, IMAGE.look, OTHER.look, STRING.look, FLOAT.look.
#	      I'm leaving it for the moment; it might prove useful.  If so it should
#	      most likely be renamed Client_To_Packed_Look.
	Packed_Look
	  =
	  { id:					iul::Id,						# Unique id to facilitate storing node_state instances in indexed datastructures like red-black trees.
	    pass_something:			Replyqueue -> (Int -> Void) -> Void,
	    do_something:			Int -> Void
	  };

	Value		=	ss::Value;
	Client_To_State =	ss::Client_To_State;

	State_Change_Fn
	  =
	  { value:				ss::Value,
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Start_Of_Frame_Fn
	  =
	  { value:				ss::Value,
	    frame_number:			Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
	    site:				xg::Box,				# Window rectangle in which to draw.
	    visible:				Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
	    duration_in_seconds:		Float,					# If state has changed look-imp should call note_changed_widget_foreground() before this time is up. Also useful for motionblur.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Button_Press_Fn
	  =
	  { value:				ss::Value,
	    button:				evt::Mousebutton,
	    point:				xg::Point,
	    site:				xg::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Key_Press_Fn
	  =
	  { value:				ss::Value,
	    keycode:				evt::Keycode,
	    point:				xg::Point,
	    site:				xg::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Packed_Look_Option
	    #
	    = MICROTHREAD_NAME			String							# 
	    | ID				iul::Id							# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	    #
	    | WIDGET_CONTROL_CALLBACK		( p2l::Packed_To_Look -> Void	)			# Gui boss registers this maildrop to get a port to us once we start up.
	    | PACKED_LOOK_CALLBACK		(         Packed_Look -> Void	)			# App      registers this maildrop to get a port to us once we start up.
	    #
	    | STATE_CHANGE_FN			State_Change_Fn
	    | START_OF_FRAME_FN			Start_Of_Frame_Fn
	    #
	    | BUTTON_PRESS_FN			Button_Press_Fn
	    | BUTTON_RELEASE_FN			Button_Press_Fn
	    #
	    | KEY_PRESS_FN			Key_Press_Fn
	    | KEY_RELEASE_FN			Key_Press_Fn
	    ;

	Packed_Look_Arg	  =  List(Packed_Look_Option);							# No required components at present.

        make_egg:	  ( Packed_Look_Arg,								# Initialization data for us.
			    ss::Make_Arg,								# Initialization data for our underlying string-state imp.
			    l2p::Look_To_Packed,
			    Null_Or(Oneshot_Maildrop(ss::Make_Arg)),					# guiboss uses this to capture final state of state-imp when endgun fires.
			    Null_Or(Oneshot_Maildrop(Packed_Look_Arg))					# guiboss uses this to capture final state of  look-imp when endgun fires.
			  )
			  ->
			  pwe::Packed_Widget_Egg;							# 


	pprint_packed_look_arg:	pp::Prettyprint_Mill -> Packed_Look_Arg -> Void;
    }
    {																		 	  
# It isn't clear that this is needed.
# There's nothing useful defined here,
# and we already have and
#    gui_to_look
#    packed_to_look
# -- it isn't clear we need another
# exported interface currently.
# [LATER:] -- BUT THIS IS CURRENTLY USED in 1277:src/lib/x-kit/widget/gui/guiboss-imp.pkg
#             It currently winds up stored in   src/lib/x-kit/widget/gui/running-gui.pkg
# 	      as BOOL.look, INT.look, IMAGE.look, OTHER.look, STRING.look, FLOAT.look.
#	      I'm leaving it for the moment; it might prove useful.  If so it should
#	      most likely be renamed Client_To_Packed_Look.
	Packed_Look
	  =
	  { id:					iul::Id,						# Unique id to facilitate storing node_state instances in indexed datastructures like red-black trees.
	    pass_something:			Replyqueue -> (Int -> Void) -> Void,
	    do_something:			Int -> Void
	  };

	Value		=	ss::Value;
	Client_To_State =	ss::Client_To_State;

	State_Change_Fn
	  =
	  { value:				ss::Value,
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Start_Of_Frame_Fn
	  =
	  { value:				ss::Value,
	    frame_number:			Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
	    site:				xg::Box,				# Window rectangle in which to draw.
	    visible:				Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
	    duration_in_seconds:		Float,					# If state has changed look-imp should call note_changed_widget_foreground() before this time is up. Also useful for motionblur.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Button_Press_Fn
	  =
	  { value:				ss::Value,
	    button:				evt::Mousebutton,
	    point:				xg::Point,
	    site:				xg::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:			evt::Mousebuttons_State,				# State of mouse buttons.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Key_Press_Fn
	  =
	  { value:				ss::Value,
	    keycode:				evt::Keycode,
	    point:				xg::Point,
	    site:				xg::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:			evt::Mousebuttons_State,				# State of mouse buttons.
	    client_to_state:			ss::Client_To_State,
	    look_to_gui:			l2g::Look_To_Gui,
	    look_to_packed:			l2p::Look_To_Packed
	  }
	  ->
	  Void;

	Packed_Look_Option
	    #
	    = MICROTHREAD_NAME			String							# 
	    | ID				iul::Id							# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	    #
	    | WIDGET_CONTROL_CALLBACK		( p2l::Packed_To_Look -> Void	)			# Gui boss registers this maildrop to get a port to us once we start up.
	    | PACKED_LOOK_CALLBACK		(         Packed_Look -> Void	)			# App      registers this maildrop to get a port to us once we start up.
	    #
	    | STATE_CHANGE_FN			State_Change_Fn
	    | START_OF_FRAME_FN			Start_Of_Frame_Fn
	    #
	    | BUTTON_PRESS_FN			Button_Press_Fn
	    | BUTTON_RELEASE_FN			Button_Press_Fn
	    #
	    | KEY_PRESS_FN			Key_Press_Fn
	    | KEY_RELEASE_FN			Key_Press_Fn
	    ;

	Packed_Look_Arg	  =  List(Packed_Look_Option);							# No required components at present.



	#
	Look_State
	  =
	  { id:		iul::Id,
	    value:	Ref( ss::Value )										# Opaque wrapper for all nonephemeral mutable state maintained by look.
	  };

	Imports =  pwe::Imports;
	Exports =  pwe::Exports;

	Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Me_Slot = Mailslot( { imports:			Imports,
			      me:			Look_State,
			      look_arg:			Packed_Look_Arg,
			      client_to_state:		ss::Client_To_State,
			      look_to_packed:		l2p::Look_To_Packed,
			      run_gun':			Run_Gun,
			      end_gun':			End_Gun,
			      look_endstate_oneshot:	Null_Or(Oneshot_Maildrop( Packed_Look_Arg	 )),
			      look_callbacks:	List(        ( Packed_Look -> Void		 )),
			      widget_control_callbacks:	List(        (p2l::Packed_To_Look -> Void ))
			    }
			  );

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:			Look_State,								# State which is preserved across imp shutdown/restart cycles.
		      look_arg:			Packed_Look_Arg,
		      client_to_state:		ss::Client_To_State,
		      look_to_packed:		l2p::Look_To_Packed,
		      imports:			Imports,								# Imps to which we send requests.
		      to:			Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':			End_Gun,								# We shut down the microthread when this fires.
		      look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(Packed_Look_Arg))
		    };

	Mailq    = Mailqueue( Runstate -> Void );

	fun default_state_change_fn
	      {
	        value:				ss::Value,
		client_to_state:		ss::Client_To_State,
		look_to_gui:			l2g::Look_To_Gui,
		look_to_packed:			l2p::Look_To_Packed
	      }
	    =
	    ();	

	fun default_start_of_frame_fn
	      {
	        value:				ss::Value,
		frame_number:			Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
		site:				xg::Box,				# Window rectangle in which to draw.
		visible:			Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
		duration_in_seconds:		Float,					# If state has changed look-imp should call note_changed_widget_foreground() before this time is up. Also useful for motionblur.
		client_to_state:		ss::Client_To_State,
		look_to_gui:			l2g::Look_To_Gui,
		look_to_packed:			l2p::Look_To_Packed
	      }
	    =
	    ();	

	fun default_button_press_fn
	      {
	        value:				ss::Value,
		button:				evt::Mousebutton,
		point:				xg::Point,
	        site:				xg::Box,						# Widget's assigned area in window coordinates.
		modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    	mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
		client_to_state:		ss::Client_To_State,
		look_to_gui:			l2g::Look_To_Gui,
		look_to_packed:			l2p::Look_To_Packed
	      }
	    =
	    ();	

	fun default_key_press_fn
	      {
	        value:				ss::Value,
		keycode:			evt::Keycode,
		point:				xg::Point,
	        site:				xg::Box,						# Widget's assigned area in window coordinates.
		modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    	mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
		client_to_state:		ss::Client_To_State,
		look_to_gui:			l2g::Look_To_Gui,
		look_to_packed:			l2p::Look_To_Packed
	      }
	    =
	    ();	

	fun run (
		  mailq:			Mailq,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:				Look_State,								# State which is preserved across imp shutdown/restart cycles.
		    look_arg:			Packed_Look_Arg,
		    client_to_state:		ss::Client_To_State,
		    look_to_packed:		l2p::Look_To_Packed,
		    imports:			Imports,								# Imps to which we send requests.
		    to:				Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':			End_Gun,								# We shut down the microthread when this fires.
		    look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(Packed_Look_Arg))
		  }
		)
	    =
	    {
# text  = (*me.string_state_needs).text;
# printf "label(%s): run() entering loop() -- string-look-imp.pkg\n" text;
		loop ();
	    }
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                   ==>  shut_down_look_imp'),
			    (take_from_mailqueue' mailq ==>  do_plea)
			];

			loop ();
		    }	
		    where
			fun do_plea thunk
			    =
			    thunk runstate;

			fun shut_down_look_imp' ()
			    =
			    {
				case look_endstate_oneshot								# Pass our state back to guiboss to allow later impnet restart without state loss.
				    #
				    NULL	=> ();
				    THE oneshot => put_in_oneshot (oneshot, look_arg);					# 
				esac;

# text  = (*me.string_state_needs).text;
# printf "label(%s): loop() shutting down.  -- string-look-imp.pkg\n" ((*me.string_state_needs).text);
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup													# Root fn of imp microthread.
	      { id:			iul::Id,
		reply_oneshot:		Oneshot_Maildrop( (Me_Slot, Exports, ss::Value -> Void) ),
		#
		state_change_fn:	State_Change_Fn,
		start_of_frame_fn:	Start_Of_Frame_Fn,
		#
		button_press_fn:	Button_Press_Fn,
		button_release_fn:	Button_Press_Fn,
		#
		key_press_fn:		Key_Press_Fn,
		key_release_fn:		Key_Press_Fn,
		#
		wants_keystrokes:	Bool,
		wants_mouseclicks:	Bool
	      }
	      ()													# Note currying.
	    =
	    {   me_slot  		=  make_mailslot  ()	:  Me_Slot;
		#
		packed_to_look		= { id, do_something, pass_something, pass_draw_done_flag };

		gui_to_look		= { id,
					    #
					    wants_keystrokes,
					    wants_mouseclicks,
					    #
					    start_of_frame,
					    #
					    note_key_press_event,
					    note_key_release_event,
					    #
					    note_mousebutton_press_event,
					    note_mousebutton_release_event,
					    note_mouse_motion_event
					  };

		packed_look		=  { id, do_something, pass_something };

		exports			=  { gui_to_look, packed_to_look };

		to			=  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports, note_new_state));					# Return value from make_label_look().

		(take_from_mailslot  me_slot)										# Input args from configure_default_label_look_for_x().
		    ->
		    { me,
		      look_arg,
		      client_to_state,
		      look_to_packed,
		      imports,
		      run_gun',
		      end_gun',
		      look_endstate_oneshot,
		      widget_control_callbacks,
		      look_callbacks
                    };

		apply   {. #callback  packed_look;	}   look_callbacks;						# Pass our port to everyone who asked for it.
		apply   {. #callback  packed_to_look;	}   widget_control_callbacks;					# Pass our port to everyone who asked for it.

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (mailq, { me,	  										# Will not return.
			      look_arg,
			      client_to_state,
			      look_to_packed,
			      imports,
			      to,
			      end_gun',
			      look_endstate_oneshot
			    }
		    );
	    }
	    where
		mailq     =  make_mailqueue (get_current_microthread()):  Mailq;


		#######################################################################
		# gui_to_look fns:

		fun start_of_frame							# We get this call at the start of every frame from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
		      {
			frame_number:		Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
			site:			xg::Box,				# Window rectangle in which to draw.
			visible:		Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
			duration_in_seconds:	Float					# If state has changed look-imp should call note_changed_widget_foreground() before this time is up. Also useful for motionblur.
		      }
		    =
		    put_in_mailqueue  (mailq,
			#
			\\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
			    =
			    {
##########################
# Some or all of this should probably be moved to default_start_of_frame_fn():
# XXX SUCKO FIXME
				background_box =  site;
				foreground_box =  xg::box::make_nested_box (background_box, 4);
				#
				background = gd::COLOR (r8::rgb8_blue,  [ gd::POLY_FILL_BOX [ background_box ]]);
				foreground = gd::COLOR (r8::rgb8_green, [ gd::POLY_FILL_BOX [ foreground_box ]]);

				id = me.id;

				imports.look_to_gui.note_changed_widget_foreground { id, foreground };
				imports.look_to_gui.note_changed_widget_background { id, background };
# End of section to move.
##########################

				start_of_frame_fn										# Let application-specific code handle start-of-frame however it likes.
				  {
				    value		=>  *me.value,
				    #
				    frame_number,
				    site,
				    visible,
				    duration_in_seconds,
				    #
				    client_to_state,
				    look_to_gui		=>  imports.look_to_gui,
				    look_to_packed
				  };
			    }
		    );

		fun note_key_press_event
                      (
			keycode:			evt::Keycode,
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    		mousebuttons_state:	        evt::Mousebuttons_State,				# State of mouse buttons.
			point:				xg::Point,
			site:				xg::Box							# Widget's assigned area in window coordinates.
		      )				# Note  keyboard keypress at 'point'.
		    =				#	^								# 'point'  ise the click point the window's coordinate system.
		    {				#	Keyboard key just pressed down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
				=
				key_press_fn
				  {
				    value       =>  *me.value,
				    look_to_gui =>   imports.look_to_gui,
				    keycode,
				    point,
				    site,
				    modifier_keys_state,
				    mousebuttons_state,
				    client_to_state,
				    look_to_packed
				  }
			);
		    };

		fun note_key_release_event
		      (
			keycode:			evt::Keycode,
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    		mousebuttons_state:	        evt::Mousebuttons_State,				# State of mouse buttons.
			point:				xg::Point,
			site:				xg::Box							# Widget's assigned area in window coordinates.
		      )				# Note keyboard key release at 'point'.
		    =				#	^								#'point' is the click point in the window's coordinate system.
		    {				#	Keyboard key just released.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
				=
				key_release_fn
				  {
				    value       =>  *me.value,
				    look_to_gui =>   imports.look_to_gui,
				    keycode,
				    modifier_keys_state,
	  		            mousebuttons_state,
				    point,
				    site,
				    client_to_state,
				    look_to_packed
				  }
			);
		    };

		fun note_mousebutton_press_event
		      (
			button:			evt::Mousebutton,
			modifier_keys_state:	evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    		mousebuttons_state:	evt::Mousebuttons_State,				# State of mouse buttons.
			point:		 	xg::Point,
			site:			xg::Box							# Widget's assigned area in window coordinates.
		      )			# Note mousebutton click at 'point'.
		    =				#	^								# 'point' is the click point in the window's coordinate system.
		    {				#	Mouse button just clicked down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
				=
				button_press_fn
				  {
				    value       =>  *me.value,
				    look_to_gui =>   imports.look_to_gui,
				    button,
				    point,
				    site,
				    modifier_keys_state,						# State of the modifier keys (shift, ctrl...).
	    	                    mousebuttons_state,							# State of mouse buttons.
				    client_to_state,
				    look_to_packed
				  }
			);
		    };

		fun note_mousebutton_release_event
		      (
			button:			evt::Mousebutton,
			modifier_keys_state:	evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    		mousebuttons_state:	evt::Mousebuttons_State,				# State of mouse buttons.
			point:			xg::Point,
			site:			xg::Box							# Widget's assigned area in window coordinates.
		      )			# Note mousebutton release at 'point'.
		    =				#	^								# 'point' is the button-release point in the window's coordinate system.
		    {				#	Mouse button just released.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
				=
				button_release_fn
				  {
				    value       =>  *me.value,
				    look_to_gui =>   imports.look_to_gui,
				    button,
				    point,
				    site,
				    modifier_keys_state,
	 			    mousebuttons_state,
				    client_to_state,
				    look_to_packed
				  }
			);
		    };

		fun note_mouse_motion_event	     (buttons: List(evt::Mousebutton),  point: xg::Point)		# Note a mouse "drag" operations.
		    =				#	^								# 'point' is the mouse-pointer location in the window's coordinate system.
		    {				#	Mouse button(s) being dragged.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
				=
				()
			);
		    };


		#######################################################################
		# packed_to_look fns:


		fun note_new_state (value: ss::Value)									# PUBLIC.
		    =	
# This is presumably actually coming from our state-imp, not the packed-space imp...?  XXX QUERO FIXME
		    put_in_mailqueue  (mailq,
			#
			\\ ({ me, imports, client_to_state, look_to_packed, ... }: Runstate)
			    =
			    {   me.value :=  value;									# Do we need to notify guiboss that we need to redraw?
				#
				state_change_fn										# Let application-specific code handle state change however it likes.
				  {
				    value		=>  *me.value,
				    client_to_state,
				    look_to_gui		=>  imports.look_to_gui,
				    look_to_packed
				  };
			    }
		    );


		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (mailq,
			#
			\\ ({ imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (mailq,
			    #
			    \\ (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_draw_done_flag  (replyqueue: Replyqueue)  (reply_handler: Void -> Void)			# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (mailq,
			    #
			    \\ (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, ())
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


	fun process_options
	    ( options: List(Packed_Look_Option),
	      #
	      {	name,
		id,
		#
		look_callbacks,
		widget_control_callbacks,
		#
		state_change_fn,
		start_of_frame_fn,
		#
		button_press_fn,
		button_release_fn,
		#
		key_press_fn,
		key_release_fn,
		#
		wants_keystrokes,
		wants_mouseclicks
	      }
	    )
	    =
	    {   my_name				=  REF name;
		my_id				=  REF id;
		#
		my_widget_control_callbacks	=  REF widget_control_callbacks;
		my_look_callbacks		=  REF     look_callbacks;
		#
		my_state_change_fn		=  REF state_change_fn; 
		my_start_of_frame_fn		=  REF start_of_frame_fn; 
		#
		my_button_press_fn		=  REF button_press_fn; 
		my_button_release_fn		=  REF button_release_fn; 
		#
		my_key_press_fn			=  REF key_press_fn; 
		my_key_release_fn		=  REF key_release_fn; 
		#
		my_wants_keystrokes		=  REF wants_keystrokes;
		my_wants_mouseclicks		=  REF wants_mouseclicks; 
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME        n) =>   my_name			:=  n;
			do_option (ID      	           i) =>   my_id                   	:=  i;
			#
			do_option (WIDGET_CONTROL_CALLBACK c) =>   my_widget_control_callbacks	:=  c ! *my_widget_control_callbacks;
			do_option (PACKED_LOOK_CALLBACK    c) =>   my_look_callbacks		:=  c ! *my_look_callbacks;
			#
			do_option (STATE_CHANGE_FN        fn) =>   my_state_change_fn		:=  fn;
			do_option (START_OF_FRAME_FN      fn) =>   my_start_of_frame_fn		:=  fn;
			#
			do_option (BUTTON_PRESS_FN        fn) => {  my_button_press_fn		:=  fn;		my_wants_mouseclicks := TRUE;	 };
			do_option (BUTTON_RELEASE_FN      fn) => {  my_button_release_fn	:=  fn;		my_wants_mouseclicks := TRUE;	 };
			#
			do_option (KEY_PRESS_FN           fn) => {  my_key_press_fn		:=  fn;		my_wants_keystrokes  := TRUE;	 };
			do_option (KEY_RELEASE_FN         fn) => {  my_key_release_fn		:=  fn;		my_wants_keystrokes  := TRUE;	 };
		    end;
		end;

		{ name			    =>  *my_name,
		  id			    =>  *my_id,
		  look_callbacks	    =>  *my_look_callbacks,
		  widget_control_callbacks  =>  *my_widget_control_callbacks,
		  #
		  state_change_fn	    =>  *my_state_change_fn,
		  start_of_frame_fn	    =>  *my_start_of_frame_fn,
		  #
		  button_press_fn	    =>  *my_button_press_fn,
		  button_release_fn	    =>  *my_button_release_fn,
		  #
		  key_press_fn		    =>  *my_key_press_fn,
		  key_release_fn	    =>  *my_key_release_fn,
		  #
		  wants_keystrokes	    =>  *my_wants_keystrokes,
		  wants_mouseclicks	    =>  *my_wants_mouseclicks
		};
	    };


        ##########################################################################################
	# External entrypoints
	#

	# Here we are mostly trying to be a transparent
	# wrapper to make_egg from
	#
	#     src/lib/x-kit/widget/space/packed/string-state-imp.pkg
	#
	# Two things we need to do:
	#
	#  o  Export a p2l::Packed_To_Look port to 									# packed_to_look	is from   src/lib/x-kit/widget/space/packed/packed-to-look.pkg
	#     guiboss so it can tell us when to redraw.
	#     We use our WIDGET_CONTROL_CALLBACK option for this.
	#
	#  o  Register with string_state_imp to get change updates,							# string_state_imp	is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg
	#     so we know what information to display wne redrawing.
	#     We do this by passing note_new_state to string_state_imp
	#     via string_state_imports.
	#
	fun make_egg												# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	      (
#		appwindow:		g2w::Appwindow,
		look_arg:		Packed_Look_Arg,
		make_arg:		ss::Make_Arg,
# XXX SUCKO FIXME look_to_packed is not yet used anywhere.
		look_to_packed:		l2p::Look_To_Packed,
		state_endstate_oneshot:	Null_Or(Oneshot_Maildrop(ss::Make_Arg)),					# guiboss uses this to capture final state of state-imp when endgun fires.
		 look_endstate_oneshot: Null_Or(Oneshot_Maildrop(Packed_Look_Arg))					# guiboss uses this to capture final state of  look-imp when endgun fires.
	      )
	    =
	    {
		make_arg -> (string_state_needs, string_state_options);
		look_arg -> (		                 look_options);

	        (process_options
		  ( look_options,
		    { name			=>  "packed_look",
		      id			=>  iul::id_zero,
		      #
		      look_callbacks		=>  [],
		      widget_control_callbacks	=>  [],
		      #
		      state_change_fn		=>  default_state_change_fn,
		      start_of_frame_fn		=>  default_start_of_frame_fn,
		      #
		      button_press_fn		=>  default_button_press_fn,
		      button_release_fn		=>  default_button_press_fn,
		      #
		      key_press_fn		=>  default_key_press_fn,
		      key_release_fn		=>  default_key_press_fn,
		      #
		      wants_keystrokes		=>  FALSE,
		      wants_mouseclicks		=>  FALSE
		    }
		) )
		    ->
		    { name,
		      id,
		      #
		      look_callbacks,
		      widget_control_callbacks,
		      #
		      state_change_fn,
		      start_of_frame_fn,
		      #
		      button_press_fn,
		      button_release_fn,
		      #
		      key_press_fn,
		      key_release_fn,
		      #
		      wants_keystrokes,
		      wants_mouseclicks
		    };
	


		my (id, look_options)
		    =
		    if (iul::id_to_int(id) == 0)
			id = iul::issue_unique_id();									# Allocate unique imp id.
nb {. sprintf "issue_unique_id returned %d   -- make_egg() in packed-look-imp-g.pkg" (iul::id_to_int id); };
			(id, ID id ! look_options);									# Make our id stable across stop/restart cycles.
		    else
			(id, look_options);										# Nop.
		    fi;

		look_arg = (look_options);

		me = { id, value => REF string_state_needs.value };

		state_egg =  si::make_egg  make_arg  state_endstate_oneshot;

		\\ () = {   reply_oneshot										# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
				=
				make_oneshot_maildrop ()
				:    Oneshot_Maildrop( (Me_Slot, Exports, ss::Value -> Void) );

			    xlogger::make_thread
				name
				(startup  { id,										# Note that startup() is curried.
					    reply_oneshot,
					    #
					    state_change_fn,
					    start_of_frame_fn,
					    #
					    button_press_fn,
					    button_release_fn,
					    #
					    key_press_fn,
					    key_release_fn,
					    #
					    wants_keystrokes,
					    wants_mouseclicks
					  }
				);

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports, note_new_state);

			    (state_egg ()) -> (state_exports, state_egg');


			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{   state_imports = { state_sink => note_new_state };
				    #
				    state_egg' (state_imports, run_gun', end_gun');

				    client_to_state = state_exports.client_to_state;

				    put_in_mailslot  (me_slot, { me,
								 look_arg,
								 client_to_state,
								 look_to_packed,
								 imports,
								 run_gun', end_gun',
								 look_endstate_oneshot,
								 look_callbacks,
								 widget_control_callbacks
							       }
						     );
				};

			    (exports, phase3);
			};
	    };


	fun pprint_packed_look_arg
	      (pp:		pp::Prettyprint_Mill)
	      (look_arg:	Packed_Look_Arg)
	    =
	    {
		look_arg
		  ->
		  ( options:		List(Packed_Look_Option)
		  );

		pp.box {.
		    pp.txt " [";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.txt " )";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name		=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			ID			id	=>  {  pp.lit (sprintf "ID %d" (iul::id_to_int id)        );	};
			#
			WIDGET_CONTROL_CALLBACK _	=>  {  pp.lit          "WIDGET_CONTROL_CALLBACK (callback)";	};
			PACKED_LOOK_CALLBACK _		=>  {  pp.lit          "PACKED_LOOK_CALLBACK (callback)";	};
			#
			STATE_CHANGE_FN	_		=>  {  pp.lit          "STATE_CHANGE_FN _";			};
			START_OF_FRAME_FN	_	=>  {  pp.lit          "START_OF_FRAME_FN _";			};
			#
			BUTTON_PRESS_FN	_		=>  {  pp.lit          "BUTTON_PRESS_FN _";			};
			BUTTON_RELEASE_FN _		=>  {  pp.lit          "BUTTON_RELEASE_FN _";			};
			#
			KEY_PRESS_FN	_		=>  {  pp.lit          "KEY_PRESS_FN _";			};
			KEY_RELEASE_FN _		=>  {  pp.lit          "KEY_RELEASE_FN _";			};
		    esac;
	    end;
    };

end;
