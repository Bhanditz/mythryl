## default-packed-theme-imp-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port				is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
    package g2a =  gui_to_appwindow;				# gui_to_appwindow			is from   src/lib/x-kit/widget/theme/gui-to-appwindow.pkg
#   package au  =  authentication;				# authentication			is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap				is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat				is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display				is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types				is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package w2x =  widget_to_xserver;				# widget_to_xserver			is from   src/lib/x-kit/xclient/src/window/widget-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread			is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index				is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap				is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix				is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb					is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap				is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window				is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector				is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window			is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port			is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade					is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer			is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package tr  =  logger;					# logger				is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt				is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire				is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget				is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window				is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink			is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher			is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style				is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string			is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient				is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk				is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #	
    package ps  =  packed_space;				# packed_space				is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    package psi =  packed_space_imp;				# packed_space_imp			is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg
    #	
    package ss  =  client_to_string_state;			# client_to_string_state		is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package fs  =  client_to_float_state;			# client_to_float_state			is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
    #	
    package lsi =  string_state_imp;				# string_state_imp			is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg
    package ssi =  float_state_imp;				# float_state_imp			is from   src/lib/x-kit/widget/space/packed/float-state-imp.pkg
    package pwe =  packed_widget_egg;				# packed_widget_egg			is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    #
    package l2p =  look_to_packed;				# look_to_packed			is from   src/lib/x-kit/widget/space/packed/look-to-packed.pkg	
    #
    package pl  = packed_look;					# packed_look				is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg
    #
    package fli =   float_look_imp_for_x;			#  float_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/float-look-imp-for-x.pkg
    package lli =  string_look_imp_for_x;			# string_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/string-look-imp-for-x.pkg

    #
    package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg

    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_packed_theme_imp_for_x
    :               Packed_Theme_Imp											# Packed_Theme_Imp		is from   src/lib/x-kit/widget/theme/packed/packed-theme-imp.api
    {
	#
	include client_to_packed_theme;											# client_to_packed_theme	is from   src/lib/x-kit/widget/theme/packed/client-to-packed-theme.pkg
	#
	Theme_State = Ref( Void );											# Holds all nonephemeral mutable state maintained by skin.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:		Int -> Void,
		    gui_to_appwindow:	g2a::Gui_To_Appwindow
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Theme_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );
	Exports	= {													# Ports we provide for use by other imps.
		    client_to_packed_theme:	Client_To_Packed_Theme
		  };


	Option = MICROTHREAD_NAME String;										# 

	Packed_Theme_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun										# We shut down the microthread when this fires.
		    };

	Theme_Q    = Mailqueue( Runstate -> Void );

	fun run ( theme_q:		Theme_Q,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun										# We shut down the microthread when this fires.
		  }
		)
	    =
	    loop ()
	    where
		fun exercise_appwindow  (reply_oneshot:  Oneshot_Maildrop(Int))
		    =
		    imports.gui_to_appwindow.pass_appwindow_exercise_results
			to
			{.  put_in_oneshot (reply_oneshot, #i);   };

		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_theme_imp'),
			    (take_from_mailqueue' theme_q    ==>  do_theme_plea)
			];

			loop ();
		    }	
		    where
			fun do_theme_plea thunk
			    =
			    thunk runstate;

			fun shut_down_theme_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		client_to_packed_theme
		  =
		  { do_something,
		    exercise_appwindow,
		    pass_window_site,
		    pass_appwindow_exercise_results,
		    packed_space,
		    label,
		    knob
		  };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { client_to_packed_theme }));					# Return value from packed_theme_egg'().

		(take_from_mailslot  me_slot)										# Input args from packed_theme_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (theme_q, { me, imports, to, end_gun' });								# Will not return.
	    }
	    where
		theme_q     =  make_mailqueue (get_current_microthread()):  Theme_Q;

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (theme_q,
			#
			fn ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun exercise_appwindow ()										# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, to, ... }: Runstate)
				=
				imports.gui_to_appwindow.pass_appwindow_exercise_results
				    to
				    {.  put_in_oneshot (reply_oneshot, #i);   }
			);

			fn () =  get_from_oneshot reply_oneshot;
		    };

		fun  pass_appwindow_exercise_results  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)		# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, to, ... }: Runstate)
				=
				imports.gui_to_appwindow.pass_appwindow_exercise_results
				    to
				    {.  put_in_oneshot (reply_oneshot, #i);   }
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_window_site  (reply_queue: Replyqueue)  (reply_handler: xg::Window_Site -> Void)		# PUBLIC.
		    =
		    {   put_in_mailqueue  (theme_q,
			    #
			    fn ({ imports, ... }: Runstate)
			        =
				imports.gui_to_appwindow.pass_window_site  reply_queue  reply_handler
			);
		    };


		fun packed_space  (options: ps::Packed_Space_Arg)							# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( psi::Packed_Space_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, ... })
				=
				{   (psi::make_packed_space_egg	options NULL) -> packed_space_egg;
				    #
				    put_in_oneshot (reply_oneshot, packed_space_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

		fun label ( state_arg:		ss::Make_Arg,								# PUBLIC.
			    look_arg:	lli::Packed_Look_Arg,
			    look_to_packed:	l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:	Null_Or(Oneshot_Maildrop(ss::Make_Arg     )),
			     look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(lli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, ... }: Runstate)
			        =
				{
				    (lsi::make_egg  state_arg  state_endstate_oneshot)
					->
					string_state_egg;				# Currently unused!
				    #

				    (lli::make_egg	(/* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					label_look_egg;

#				    (label_look_egg			()) -> (label_look_exports, label_look_egg');		# Shouldn't do yet!

				    #
				    put_in_oneshot (reply_oneshot, label_look_egg);
				}
			);


			get_from_oneshot reply_oneshot;
		    };


		fun float ( state_arg:				         fs::Make_Arg,				# PUBLIC.
			    look_arg:				 	fli::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fs::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, ... }: Runstate)
				=
				{   (ssi::make_egg  state_arg  state_endstate_oneshot)
					->
					float_state_egg;				# Currently unused!
				    #
				    (fli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					float_look_egg;

#				    (float_look_egg			()) -> (float_look_exports, float_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, float_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

		fun knob ( state_arg:				         fs::Make_Arg,				# PUBLIC.
			    look_arg:				 	fli::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fs::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    fn ({ me, imports, ... }: Runstate)
				=
				{   (ssi::make_egg  state_arg  state_endstate_oneshot)
					->
					float_state_egg;				# Currently unused!
				    #
				    (fli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					float_look_egg;

#				    (float_look_egg			()) -> (float_look_exports, float_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, float_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };



	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_packed_theme_egg (options: List(Option))								# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "tmp" }))
		    ->
		    { name };
	
		me = REF ();

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				};

			    (exports, phase3);
			};
	    };
    };

end;
