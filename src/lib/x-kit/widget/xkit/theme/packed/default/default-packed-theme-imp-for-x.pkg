## default-packed-theme-imp-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;				# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  client_to_atom;				# client_to_atom			is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
#   package au  =  authentication;				# authentication			is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap				is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat				is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display				is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package xet =  xevent_types;				# xevent_types				is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver		is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread			is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index				is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap		is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix				is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb					is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap				is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window				is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector				is from   src/lib/std/src/rw-vector.pkg
#   package sep =  client_to_selection;				# client_to_selection			is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
#   package shp =  shade;					# shade					is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer			is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package tr  =  logger;					# logger				is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt				is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire				is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget				is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window				is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink			is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  client_to_window_watcher;			# client_to_window_watcher		is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
#   package wy  =  widget_style;				# widget_style				is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string			is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient				is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk				is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #	
    package g2a =  guiboss_to_windowsystem;			# guiboss_to_windowsystem		is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg
    #	
    package ps  =  guiboss_to_packed_space;			# guiboss_to_packed_space				is from   src/lib/x-kit/widget/space/packed/guiboss-to-packed-space.pkg
    package psi =  packed_space_imp;				# packed_space_imp			is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg
    #	
    package c2s =  client_to_string_state;			# client_to_string_state		is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package sli =  string_look_imp_for_x;			# string_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/string-look-imp-for-x.pkg
    package ssi =  string_state_imp;				# string_state_imp			is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg

    #	
    package c2x =  client_to_exception_state;			# client_to_exception_state		is from   src/lib/x-kit/widget/space/packed/client-to-exception-state.pkg
    package xli =  exception_look_imp_for_x;			# exception_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/exception-look-imp-for-x.pkg
    package xsi =  exception_state_imp;				# exception_state_imp			is from   src/lib/x-kit/widget/space/packed/exception-state-imp.pkg

    package c2m =  client_to_image_state;			# client_to_image_state			is from   src/lib/x-kit/widget/space/packed/client-to-image-state.pkg
    package mli =  image_look_imp_for_x;			# image_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/image-look-imp-for-x.pkg
    package msi =  image_state_imp;				# image_state_imp			is from   src/lib/x-kit/widget/space/packed/image-state-imp.pkg

    package c2t =  client_to_bool_state;			# client_to_bool_state			is from   src/lib/x-kit/widget/space/packed/client-to-bool-state.pkg
    package tli =  bool_look_imp_for_x;				# bool_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/bool-look-imp-for-x.pkg
    package tsi =  bool_state_imp;				# bool_state_imp			is from   src/lib/x-kit/widget/space/packed/bool-state-imp.pkg

    package c2i =  client_to_int_state;				# client_to_int_state			is from   src/lib/x-kit/widget/space/packed/client-to-int-state.pkg
    package ili =   int_look_imp_for_x;				#  int_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/int-look-imp-for-x.pkg
    package isi =  int_state_imp;				# int_state_imp				is from   src/lib/x-kit/widget/space/packed/int-state-imp.pkg

    package c2f =  client_to_float_state;			# client_to_float_state			is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
    package fli =   float_look_imp_for_x;			#  float_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/float-look-imp-for-x.pkg
    package fsi =  float_state_imp;				# float_state_imp			is from   src/lib/x-kit/widget/space/packed/float-state-imp.pkg
    #	
    package pwe =  packed_widget_egg;				# packed_widget_egg			is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    #
    package l2p =  look_to_packed;				# look_to_packed			is from   src/lib/x-kit/widget/space/packed/look-to-packed.pkg	
    #
    package sg  =  stopped_gui;					# stopped_gui				is from   src/lib/x-kit/widget/gui/stopped-gui.pkg
    package gp  =  gui_plan;					# gui_plan				is from   src/lib/x-kit/widget/gui/gui-plan.pkg
    package pl  =  packed_look;					# packed_look				is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg
    #

    #
    package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg

    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_packed_theme_imp_for_x
    :               Packed_Theme_Imp											# Packed_Theme_Imp		is from   src/lib/x-kit/widget/theme/packed/packed-theme-imp.api
    {
	#
	include package   gui_to_packed_theme;										# gui_to_packed_theme		is from   src/lib/x-kit/widget/theme/packed/gui-to-packed-theme.pkg
	#
	Theme_State = Ref( Void );											# Holds all nonephemeral mutable state maintained by skin.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:		Int -> Void,
		    guiboss_to_windowsystem:	g2a::Guiboss_To_Windowsystem
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Theme_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );
	Exports	= {													# Ports we provide for use by other imps.
		    gui_to_packed_theme:	Gui_To_Packed_Theme
		  };


	Option = MICROTHREAD_NAME String;										# 

	Packed_Theme_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun										# We shut down the microthread when this fires.
		    };

	Theme_Q    = Mailqueue( Runstate -> Void );

	fun run ( theme_q:		Theme_Q,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun										# We shut down the microthread when this fires.
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_theme_imp'),
			    (take_from_mailqueue' theme_q    ==>  do_theme_plea)
			];

			loop ();
		    }	
		    where
			fun do_theme_plea thunk
			    =
			    thunk runstate;

			fun shut_down_theme_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		gui_to_packed_theme
		  =
		  { do_something,
		    packed_space,
		    #
		    make_bool_widget_state_imp_egg,
		    make_other_widget_state_imp_egg,
		    make_image_widget_state_imp_egg,
		    make_int_widget_state_imp_egg,
		    make_string_widget_state_imp_egg,
		    make_float_widget_state_imp_egg,
		    #
		    #
		    make_checkbox_widget,
		    #
		    make_knob_widget,
		    make_xslider_widget,
		    make_yslider_widget,
		    #
		    make_image_widget,
		    make_select_widget,
		    make_label_widget,
		    make_other_widget
		  };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { gui_to_packed_theme }));					# Return value from packed_theme_egg'().

		(take_from_mailslot  me_slot)										# Input args from packed_theme_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (theme_q, { me, imports, to, end_gun' });								# Will not return.
	    }
	    where
		theme_q     =  make_mailqueue (get_current_microthread()):  Theme_Q;

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (theme_q,
			#
			\\ ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun packed_space  (options: ps::Packed_Space_Arg)							# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( psi::Packed_Space_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, ... })
				=
				{   (psi::make_packed_space_egg	options NULL) -> packed_space_egg;
				    #
				    put_in_oneshot (reply_oneshot, packed_space_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };




		################################################################################
		# Following calls allow the packed theme to customize interpretation of Stopped_Gui
		# widget descriptions during guiboss-imp translation of Stopped_Gui to Running_Gui:

		fun make_bool_widget_state_imp_egg
			  (
			    state_arg:		c2t::Make_Arg,								# PUBLIC.
			    look_arg:		tli::Packed_Look_Arg,
			    look_to_packed:	l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:	Null_Or(Oneshot_Maildrop(c2t::Make_Arg     )),
			     look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(tli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
			        =
				{
				    (tsi::make_egg  state_arg  state_endstate_oneshot)
					->
					string_state_egg;				# Currently unused!
				    #

				    (tli::make_egg	(/* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					label_look_egg;

#				    (label_look_egg			()) -> (label_look_exports, label_look_egg');		# Shouldn't do yet!

				    #
				    put_in_oneshot (reply_oneshot, label_look_egg);
				}
			);


			get_from_oneshot reply_oneshot;
		    };

		fun make_string_widget_state_imp_egg
			  (
			    state_arg:		c2s::Make_Arg,								# PUBLIC.
			    look_arg:	sli::Packed_Look_Arg,
			    look_to_packed:	l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:	Null_Or(Oneshot_Maildrop(c2s::Make_Arg     )),
			     look_endstate_oneshot:	Null_Or(Oneshot_Maildrop(sli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
			        =
				{
				    (ssi::make_egg  state_arg  state_endstate_oneshot)
					->
					string_state_egg;				# Currently unused!
				    #

				    (sli::make_egg	(/* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					label_look_egg;

#				    (label_look_egg			()) -> (label_look_exports, label_look_egg');		# Shouldn't do yet!

				    #
				    put_in_oneshot (reply_oneshot, label_look_egg);
				}
			);


			get_from_oneshot reply_oneshot;
		    };


		fun make_other_widget_state_imp_egg
			  ( state_arg:				        c2x::Make_Arg,				# PUBLIC.
			    look_arg:				 	xli::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(c2x::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(xli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
				=
				{   (xsi::make_egg  state_arg  state_endstate_oneshot)
					->
					excepption_state_egg;				# Currently unused!
				    #
				    (xli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					exception_look_egg;

#				    (exception_look_egg			()) -> (exception_look_exports, exception_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, exception_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

		fun make_image_widget_state_imp_egg
			  (
			    state_arg:				        c2m::Make_Arg,					# PUBLIC.
			    look_arg:				 	mli::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(c2m::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(mli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
				=
				{   (msi::make_egg  state_arg  state_endstate_oneshot)
					->
					image_state_egg;				# Currently unused!
				    #
				    (mli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					image_look_egg;

#				    (image_look_egg			()) -> (image_look_exports, image_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, image_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

		fun make_int_widget_state_imp_egg
			  (
			    state_arg:				        c2i::Make_Arg,					# PUBLIC.
			    look_arg:				 	ili::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(c2i::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(ili::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
				=
				{   (isi::make_egg  state_arg  state_endstate_oneshot)
					->
					int_state_egg;				# Currently unused!
				    #
				    (ili::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					int_look_egg;

#				    (int_look_egg			()) -> (int_look_exports, int_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, int_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };

# 		fun float ( state_arg:				         c2f::Make_Arg,					# PUBLIC.
# 			    look_arg:				 	fli::Packed_Look_Arg,
# 			    look_to_packed:				l2p::Look_To_Packed
# 			  )
# 			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(c2f::Make_Arg   )),
# 			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fli::Packed_Look_Arg))
# 			  )
# 		    =
# 		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
# 			#
# 			put_in_mailqueue  (theme_q,
# 			    #
# 			    \\ ({ me, imports, ... }: Runstate)
# 				=
# 				{   (fsi::make_egg  state_arg  state_endstate_oneshot)
# 					->
# 					float_state_egg;				# Currently unused!
# 				    #
# 				    (fli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
# 					->
# 					float_look_egg;
# 
# #				    (float_look_egg			()) -> (float_look_exports, float_look_egg');		# Shouldn't do yet!
# 
# 				    put_in_oneshot (reply_oneshot, float_look_egg);
# 				}
# 			);
# 
# 			get_from_oneshot reply_oneshot;
# 		    };

		fun make_float_widget_state_imp_egg
			  (
			    state_arg:				        c2f::Make_Arg,					# PUBLIC.
			    look_arg:				 	fli::Packed_Look_Arg,
			    look_to_packed:				l2p::Look_To_Packed
			  )
			  ( state_endstate_oneshot:			Null_Or(Oneshot_Maildrop(c2f::Make_Arg   )),
			     look_endstate_oneshot:			Null_Or(Oneshot_Maildrop(fli::Packed_Look_Arg))
			  )
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
				=
				{   (fsi::make_egg  state_arg  state_endstate_oneshot)
					->
					float_state_egg;				# Currently unused!
				    #
				    (fli::make_egg	( /* imports.appwindow, */ look_arg, state_arg, look_to_packed, state_endstate_oneshot, look_endstate_oneshot))
					->
					float_look_egg;

#				    (float_look_egg			()) -> (float_look_exports, float_look_egg');		# Shouldn't do yet!

				    put_in_oneshot (reply_oneshot, float_look_egg);
				}
			);

			get_from_oneshot reply_oneshot;
		    };



		################################################################################
		# Following calls allow the packed theme to customize interpretation of Gui_Plan
		# widget descriptions during guiboss-imp translation of Gui_Plan to Stopped_Gui:

		fun make_checkbox_widget
		    ( arg as
			{ value:	gp::checkbox::Value,								# Bool
			  options:	List( gp::checkbox::Checkbox_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			bool_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::checkbox::MICROTHREAD_NAME		name) =>  c2t::MICROTHREAD_NAME		name;
				    process_option (gp::checkbox::ID				id  ) =>  c2t::ID			id;
				    process_option (gp::checkbox::IS_BAD_VALUE			f   ) =>  c2t::IS_BAD_VALUE		f;
				    process_option (gp::checkbox::CHANGE_CALLBACK		cb  ) =>  c2t::CHANGE_CALLBACK		cb;
				    process_option (gp::checkbox::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2t::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			bool_state_needs   = { value };
			bool_look_options  = [];

			#
			sg::BOOL
			  (
			    (bool_state_needs, bool_state_options):				c2t::Make_Arg,
			    (                  bool_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_image_widget
		    ( arg as
			{ value:	gp::image::Value,								# String
			  options:	List( gp::image::Image_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			image_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::image::MICROTHREAD_NAME		name) =>  c2m::MICROTHREAD_NAME		name;
				    process_option (gp::image::ID			id  ) =>  c2m::ID			id;
				    process_option (gp::image::IS_BAD_VALUE		f   ) =>  c2m::IS_BAD_VALUE		f;
				    process_option (gp::image::CHANGE_CALLBACK		cb  ) =>  c2m::CHANGE_CALLBACK		cb;
				    process_option (gp::image::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2m::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			image_state_needs   = { value };
			image_look_options  = [];

			#
			sg::IMAGE
			  (
			    (image_state_needs, image_state_options):				c2m::Make_Arg,
			    (                  image_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_other_widget
		    ( arg as
			{ value:	gp::other::Value,								# String
			  options:	List( gp::other::Other_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			other_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::other::MICROTHREAD_NAME		name) =>  c2x::MICROTHREAD_NAME		name;
				    process_option (gp::other::ID			id  ) =>  c2x::ID			id;
				    process_option (gp::other::IS_BAD_VALUE		f   ) =>  c2x::IS_BAD_VALUE		f;
				    process_option (gp::other::CHANGE_CALLBACK		cb  ) =>  c2x::CHANGE_CALLBACK		cb;
				    process_option (gp::other::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2x::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			other_state_needs   = { value };
			other_look_options  = [];

			#
			sg::OTHER
			  (
			    (other_state_needs, other_state_options):				c2x::Make_Arg,
			    (                  other_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_label_widget
		    ( arg as
			{ value:	gp::label::Value,								# String
			  options:	List( gp::label::Label_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			string_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::label::MICROTHREAD_NAME		name) =>  c2s::MICROTHREAD_NAME		name;
				    process_option (gp::label::ID			id  ) =>  c2s::ID			id;
				    process_option (gp::label::IS_BAD_VALUE		f   ) =>  c2s::IS_BAD_VALUE		f;
				    process_option (gp::label::CHANGE_CALLBACK		cb  ) =>  c2s::CHANGE_CALLBACK		cb;
				    process_option (gp::label::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2s::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			string_state_needs   = { value };
			string_look_options  = [];

			#
			sg::STRING
			  (
			    (string_state_needs, string_state_options):				c2s::Make_Arg,
			    (                    string_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_select_widget
		    ( arg as
			{ value:	gp::select::Value,								# Int
			  options:	List( gp::select::Select_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			int_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::select::MICROTHREAD_NAME		name) =>  c2i::MICROTHREAD_NAME		name;
				    process_option (gp::select::ID				id  ) =>  c2i::ID			id;
				    process_option (gp::select::IS_BAD_VALUE			f   ) =>  c2i::IS_BAD_VALUE		f;
				    process_option (gp::select::CHANGE_CALLBACK			cb  ) =>  c2i::CHANGE_CALLBACK		cb;
				    process_option (gp::select::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2i::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			int_state_needs   = { value };
			int_look_options  = [];

			#
			sg::INT
			  (
			    (int_state_needs, int_state_options):				c2i::Make_Arg,
			    (                  int_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_knob_widget
		    ( arg as
			{ value:	gp::knob::Value,								# Float
			  options:	List( gp::knob::Knob_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			float_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::knob::MICROTHREAD_NAME		name) =>  c2f::MICROTHREAD_NAME		name;
				    process_option (gp::knob::ID			id  ) =>  c2f::ID			id;
				    process_option (gp::knob::IS_BAD_VALUE		f   ) =>  c2f::IS_BAD_VALUE		f;
				    process_option (gp::knob::CHANGE_CALLBACK		cb  ) =>  c2f::CHANGE_CALLBACK		cb;
				    process_option (gp::knob::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2f::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			float_state_needs   = { value };
			float_look_options  = [];

			#
			sg::FLOAT
			  (
			    (float_state_needs, float_state_options):				c2f::Make_Arg,
			    (                   float_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_xslider_widget
		    ( arg as
			{ value:	gp::xslider::Value,								# Float
			  options:	List( gp::xslider::Xslider_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			float_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::xslider::MICROTHREAD_NAME		name) =>  c2f::MICROTHREAD_NAME		name;
				    process_option (gp::xslider::ID				id  ) =>  c2f::ID			id;
				    process_option (gp::xslider::IS_BAD_VALUE			f   ) =>  c2f::IS_BAD_VALUE		f;
				    process_option (gp::xslider::CHANGE_CALLBACK		cb  ) =>  c2f::CHANGE_CALLBACK		cb;
				    process_option (gp::xslider::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2f::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			float_state_needs   = { value };
			float_look_options  = [];

			#
			sg::FLOAT
			  (
			    (float_state_needs, float_state_options):				c2f::Make_Arg,
			    (                   float_look_options):				pl::Packed_Look_Arg
			  );
		    };

		fun make_yslider_widget
		    ( arg as
			{ value:	gp::yslider::Value,								# Float
			  options:	List( gp::yslider::Yslider_Option )
			}
		    )
		    =													# We don't (yet?) need an imp here, so we treat this as a straight fn call.
		    {
			float_state_options
			    =
			    map  process_option  options
			    where
				fun process_option (gp::yslider::MICROTHREAD_NAME		name) =>  c2f::MICROTHREAD_NAME		name;
				    process_option (gp::yslider::ID				id  ) =>  c2f::ID			id;
				    process_option (gp::yslider::IS_BAD_VALUE			f   ) =>  c2f::IS_BAD_VALUE		f;
				    process_option (gp::yslider::CHANGE_CALLBACK		cb  ) =>  c2f::CHANGE_CALLBACK		cb;
				    process_option (gp::yslider::CLIENT_TO_STATE_CALLBACK	cb  ) =>  c2f::CLIENT_TO_STATE_CALLBACK	cb;
				end;
			    end;

			float_state_needs   = { value };
			float_look_options  = [];

			#
			sg::FLOAT
			  (
			    (float_state_needs, float_state_options):				c2f::Make_Arg,
			    (                   float_look_options):				pl::Packed_Look_Arg
			  );
		    };

	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_packed_theme_egg (options: List(Option))								# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "tmp" }))
		    ->
		    { name };
	
		me = REF ();

		\\ () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				};

			    (exports, phase3);
			};
	    };
    };

end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
