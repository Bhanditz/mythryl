## default-packed-theme-imp-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port				is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
    package axp =  appwindow;					# appwindow				is from   src/lib/x-kit/widget/theme/appwindow.pkg
#   package au  =  authentication;				# authentication			is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap				is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat				is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display				is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types				is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver				is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread			is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index				is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap				is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix				is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb					is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap				is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window				is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector				is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window			is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port			is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade					is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer				is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger				is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt				is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire				is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget				is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window				is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink			is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher			is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style				is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string			is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient				is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk				is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #	
    package psi =  packed_space_imp;				# packed_space_imp			is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg
    #	
    package lsi =  label_state_imp;				# label_state_imp			is from   src/lib/x-kit/widget/space/packed/label/label-state-imp.pkg
    package ssi =  slider_state_imp;				# slider_state_imp			is from   src/lib/x-kit/widget/space/packed/slider/slider-state-imp.pkg
    package pwe =  packed_widget_egg;				# packed_widget_egg			is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    #
    package lli =  default_label_look_imp_for_x;		# default_label_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-label-look-imp-for-x.pkg
    package kli =  default_knob_look_imp_for_x;			# default_knob_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-knob-look-imp-for-x.pkg
    package xli =  default_xslider_look_imp_for_x;		# default_xslider_look_imp_for_x	is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-xslider-look-imp-for-x.pkg
    package yli =  default_yslider_look_imp_for_x;		# default_yslider_look_imp_for_x	is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-yslider-look-imp-for-x.pkg

    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_packed_theme_imp_for_x
    :               Packed_Theme_Imp											# Packed_Theme_Imp	is from   src/lib/x-kit/widget/theme/packed-theme-imp.api
    {
	#
	include packed_theme;												# packed_theme	is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg
	#
	Theme_State = Ref( Void );											# Holds all nonephemeral mutable state maintained by skin.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:	Int -> Void,
		    appwindow:	axp::Appwindow
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Theme_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );

	Theme_Plea =  DO_SOMETHING			Int
		   |  EXERCISE_APPWINDOW		Oneshot_Maildrop(Int)
		   |  PASS_APPWINDOW_EXERCISE_RESULTS	Oneshot_Maildrop(Int)
		   |  PASS_SOMETHING			Oneshot_Maildrop(Int)
		   |  MAKE_PACKED_SPACE_EGG		(List(psi::Option), Oneshot_Maildrop(psi::Packed_Space_Egg))
		   |  MAKE_LABEL_EGG			(lsi::Label_Arg,  Null_Or(Oneshot_Maildrop(lsi::Label_Arg )), Oneshot_Maildrop(pwe::Packed_Widget_Egg))
		   |  MAKE_KNOB_EGG			(ssi::Slider_Arg, Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)), Oneshot_Maildrop(pwe::Packed_Widget_Egg))
		   |  MAKE_XSLIDER_EGG			(ssi::Slider_Arg, Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)), Oneshot_Maildrop(pwe::Packed_Widget_Egg))
		   |  MAKE_YSLIDER_EGG			(ssi::Slider_Arg, Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)), Oneshot_Maildrop(pwe::Packed_Widget_Egg))
		   ;

	Theme_Q    = Mailqueue( Theme_Plea );


	Exports	= {													# Ports we provide for use by other imps.
		    packed_theme:	Packed_Theme
		  };


	Option = MICROTHREAD_NAME String;										# 

	Packed_Theme_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Theme_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    theme_q:		Theme_Q										# 
		}
	    =
	    loop ()
	    where
		fun exercise_appwindow  (reply_oneshot:  Oneshot_Maildrop(Int))
		    =
		    imports.appwindow.pass_appwindow_exercise_results
			to
			{.  put_in_oneshot (reply_oneshot, #i);   };

		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_theme_imp'),
			    (take_from_mailqueue' theme_q    ==>  do_theme_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_theme_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun make_packed_space_egg
			      (
				options:		List(psi::Option),
				reply_oneshot:		Oneshot_Maildrop(psi::Packed_Space_Egg)
			      )
			    =
			    {   (psi::make_packed_space_egg	options) -> packed_space_egg;
				#
				put_in_oneshot (reply_oneshot, packed_space_egg);
			    };

			fun make_label_egg
			      (
				label_arg:		lsi::Label_Arg,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(lsi::Label_Arg)),
				reply_oneshot:		Oneshot_Maildrop(pwe::Packed_Widget_Egg)
			      )
			    =
			    {
				(lsi::make_label_state_egg  label_arg  endstate_oneshot)
				    ->
				    label_state_egg;				# Currently unused!
				#

				(lli::make_label_look_egg	(imports.appwindow, [], label_arg, endstate_oneshot))
				    ->
				    label_look_egg;

#				(label_look_egg			()) -> (label_look_exports, label_look_egg');		# Shouldn't do yet!

				#
				put_in_oneshot (reply_oneshot, label_look_egg);
			    };
			fun make_knob_egg
			      (
				arg:			ssi::Slider_Arg,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)),
				reply_oneshot:		Oneshot_Maildrop(pwe::Packed_Widget_Egg)
			      )
			    =
			    {   (ssi::make_slider_state_egg	arg) -> slider_state_egg;				# Currently unused!
				#
				(kli::make_knob_look_egg	(imports.appwindow, arg, endstate_oneshot))
				    ->
				    knob_look_egg;

#				(knob_look_egg			()) -> (knob_look_exports, knob_look_egg');		# Shouldn't do yet!

				put_in_oneshot (reply_oneshot, knob_look_egg);
			    };
			fun make_xslider_egg
			      (
				arg:			ssi::Slider_Arg,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)),
				reply_oneshot:		Oneshot_Maildrop(pwe::Packed_Widget_Egg)
			      )
			    =
			    {   (ssi::make_slider_state_egg	arg) -> slider_state_egg;				# Currently unused!
				#
				(xli::make_xslider_look_egg	(imports.appwindow, arg, endstate_oneshot))
				    ->
				    xslider_look_egg;

#				(xslider_look_egg		()) -> (xslider_look_exports, xslider_look_egg');	# Shouldn't do yet!

				put_in_oneshot (reply_oneshot, xslider_look_egg);
			    };
			fun make_yslider_egg
			      (
				arg:			ssi::Slider_Arg,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)),
				reply_oneshot:		Oneshot_Maildrop(pwe::Packed_Widget_Egg)
			      )
			    =
			    {   (ssi::make_slider_state_egg	arg) -> slider_state_egg;				# Currently unused!
				#
				(yli::make_yslider_look_egg	(imports.appwindow, arg, endstate_oneshot))
				    ->
				    yslider_look_egg;

#				(yslider_look_egg		()) -> (yslider_look_exports, yslider_look_egg');	# Shouldn't do yet!

				put_in_oneshot (reply_oneshot, yslider_look_egg);
			    };

			fun do_theme_plea  (DO_SOMETHING i)
			        =>
				{   imports.int_sink i;									# Demonstrate use of imports.
				};

			    do_theme_plea  (EXERCISE_APPWINDOW reply_oneshot)
				=>
				exercise_appwindow  reply_oneshot;

			    do_theme_plea  (PASS_APPWINDOW_EXERCISE_RESULTS reply_oneshot)
				=>
				exercise_appwindow  reply_oneshot;

			    do_theme_plea  (PASS_SOMETHING reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, 0);
				};

			    do_theme_plea (MAKE_PACKED_SPACE_EGG    a)	=>  make_packed_space_egg   a;
			    #
			    do_theme_plea (MAKE_LABEL_EGG   	    a)	=>  make_label_egg	    a;
			    do_theme_plea (MAKE_KNOB_EGG	    a)	=>  make_knob_egg	    a;
			    do_theme_plea (MAKE_XSLIDER_EGG	    a)	=>  make_xslider_egg	    a;
			    do_theme_plea (MAKE_YSLIDER_EGG	    a)	=>  make_yslider_egg	    a;
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		packed_theme
		  =
		  { do_something,
		    exercise_appwindow,
		    pass_something,
		    pass_appwindow_exercise_results,
		    packed_space,
		    label,
		    knob,
		    xslider,
		    yslider
		  };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { packed_theme }));						# Return value from packed_theme_egg'().

		(take_from_mailslot  me_slot)										# Input args from packed_theme_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, theme_q, imports, to, end_gun' };								# Will not return.
	    }
	    where
		theme_q     =  make_mailqueue (get_current_microthread()):  Theme_Q;

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (theme_q, DO_SOMETHING i);


		fun exercise_appwindow ()										# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q, EXERCISE_APPWINDOW reply_oneshot);

			fn () =  get_from_oneshot reply_oneshot;
		    };

		fun  pass_appwindow_exercise_results  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)		# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q, PASS_APPWINDOW_EXERCISE_RESULTS reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (theme_q, PASS_SOMETHING reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };


		fun packed_space  (options: List(psi::Option))							# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( psi::Packed_Space_Egg );
			#
			put_in_mailqueue  (theme_q, MAKE_PACKED_SPACE_EGG (options, reply_oneshot));

			get_from_oneshot reply_oneshot;
		    };

		fun label (label_arg:		lsi::Label_Arg)								# PUBLIC.
			  (endstate_oneshot:	Null_Or(Oneshot_Maildrop(lsi::Label_Arg)))
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q, MAKE_LABEL_EGG (label_arg, endstate_oneshot, reply_oneshot));

			get_from_oneshot reply_oneshot;
		    };
		fun knob  (slider_arg:				         ssi::Slider_Arg)				# PUBLIC.
			  (endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)))
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q, MAKE_KNOB_EGG (slider_arg, endstate_oneshot, reply_oneshot));

			get_from_oneshot reply_oneshot;
		    };
		fun xslider (slider_arg:			 	 ssi::Slider_Arg)				# PUBLIC.
			    (endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)))
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q, MAKE_XSLIDER_EGG (slider_arg, endstate_oneshot, reply_oneshot));

			get_from_oneshot reply_oneshot;
		    };
		fun yslider (slider_arg:			         ssi::Slider_Arg)				# PUBLIC.
			    (endstate_oneshot:	Null_Or(Oneshot_Maildrop(ssi::Slider_Arg)))
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( pwe::Packed_Widget_Egg );
			#
			put_in_mailqueue  (theme_q, MAKE_YSLIDER_EGG (slider_arg, endstate_oneshot, reply_oneshot));

			get_from_oneshot reply_oneshot;
		    };

	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_packed_theme_egg (options: List(Option))								# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "tmp" }))
		    ->
		    { name };
	
		me = REF ();

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    phase3
				=
				fn  ( imports:	Imports,								# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				      run_gun':	Run_Gun,	
				      end_gun':	End_Gun
				    )
				    =
				    {
					put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				    };

			    (exports, phase3);
			};
	    };
    };

end;
