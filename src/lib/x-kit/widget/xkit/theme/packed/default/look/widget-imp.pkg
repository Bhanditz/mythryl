# widget-imp.pkg
#
#
# For general background see the comments and diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
#
# widget-imp.pkg interfaces the world of specific widgets like
#
#     src/lib/x-kit/widget/leaf/arrowbutton.pkg
#
# to the world of guiboss-imp.pkg mechanics implemented in
#
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
#     src/lib/x-kit/widget/gui/gui-plan.pkg
#     src/lib/x-kit/widget/gui/running-gui.pkg
#
# The primary design goal here is to achieve good
# separation of concerns between these two worlds.
#
# In particular:
#
#  o  The guiboss  world shouldn't know or care about any
#     of the state information managed by widgets or the
#     communication interfaces between those widgets and
#     the application logic at large.
#
#  o  The individual widgets like arrowbutton should know
#     as little as possible about the mechanics of event
#     delivery, gui impnet startup and shutdown etc etc.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  client_to_atom;				# client_to_atom		is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package xet =  xevent_types;				# xevent_types			is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver	is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap	is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package sep =  client_to_selection;				# client_to_selection		is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package x2s =  xclient_to_sequencer;			# xclient_to_sequencer		is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/old/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  client_to_window_watcher;			# client_to_window_watcher	is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
#   package gws =  guiboss_to_windowsystem;			# guiboss_to_windowsystem	is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg

    package gd  =  gui_displaylist;				# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
# Introduces cyclic dependencies

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    #
    package w2p =  widget_to_packedspace;			# widget_to_packedspace		is from   src/lib/x-kit/widget/space/packed/widget-to-packedspace.pkg
    package p2w =  packedspace_to_widget;			# packedspace_to_widget		is from   src/lib/x-kit/widget/space/packed/packedspace-to-widget.pkg
    #
    package g2d =  geometry2d;					# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;				# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package gts =  gui_event_to_string;				# gui_event_to_string		is from   src/lib/x-kit/widget/gui/gui-event-to-string.pkg

    package gt  =  guiboss_types;				# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package pt  =  packed_theme;				# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg

    package iul =  issue_unique_look_id;			# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
#   package g2g =  gadget_to_guiboss;				# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package g2p =  gadget_to_pixmap;				# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
#   package b2g =  guiboss_to_gadget;				# guiboss_to_gadget		is from   src/lib/x-kit/widget/gui/guiboss-to-gadget.pkg

    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    # This package is referenced in:
    #
    #
    package   widget_imp
    :         Widget_Imp										# Widget_Imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.api
    {
	Packed_Widget
	  =
	  { id:					iul::Id,						# Unique id to facilitate storing node_state instances in indexed datastructures like red-black trees.
	    pass_something:			Replyqueue -> (Int -> Void) -> Void,
	    do_something:			Int -> Void
	  };

	Startup_Fn
	  =
	  { 
	    id:					iul::Id,						# Unique id.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    saved_widget_state:			Null_Or(Exception)
	  }
	  ->
	  Void;

	Shutdown_Fn
	  =
	  Void
	  ->
	  Null_Or(Exception);										# saved_widget_state, used to preserve state across gui stop/restart cycles.

	Before_First_Frame_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    site:				g2d::Box,						# Window rectangle in which to draw.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    theme:				pt::Packed_Theme,
	    #
	    pass_font:				List(String) -> Replyqueue
							     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
	     get_font:				List(String) ->	 evt::Font,				# Accepts a list of font names which are tried in order.
	    #
	    make_rw_pixmap:			g2d::Size -> g2p::Gadget_To_Rw_Pixmap
	  }
	  ->
	  Void;

	Start_Of_Frame_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    frame_number:			Int,							# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
	    site:				g2d::Box,						# Window rectangle in which to draw.
	    visible:				Bool,							# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
	    duration_in_seconds:		Float,							# If state has changed look-imp should call update_gadget_appearance() before this time is up. Also useful for motionblur.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    this_gadget_mode:			gt::Gadget_Mode,
	    theme:				pt::Packed_Theme
	  }
	  ->
	  Void;

	Mousebutton_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
	    button:				evt::Mousebutton,
	    point:				g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    theme:				pt::Packed_Theme
	  }
	  ->
	  Void;

	Mouse_Transit_Fn										# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event_point:			g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    transit:				gt::Gadget_Transit,					# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    theme:				pt::Packed_Theme
	  }
	  ->
	  Void;

	Mouse_Drag_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event_point:			g2d::Point,
	    start_point:			g2d::Point,
	    last_point:				g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    phase:				gt::Drag_Phase,	
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    theme:				pt::Packed_Theme
	  }
	  ->
	  Void;

	Key_Event_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    key_event:				gt::Key_Event,						# KEY_PRESS or KEY_RELEASE
	    keycode:				evt::Keycode,						# Keycode of the depressed key.
	    keysym:				evt::Keysym,						# Keysym  of the depressed key.
	    string:				String,							# Ascii  for the depressed key.
	    event_point:			g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_packedspace:		w2p::Widget_To_Packedspace,
	    theme:				pt::Packed_Theme
	  }
	  ->
	  Void;

	Packed_Widget_Option
	    #
	    = MICROTHREAD_NAME			String							# 
	    | ID				iul::Id							# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	    #
	    | WIDGET_CONTROL_CALLBACK		( p2w::Packedspace_To_Widget -> Void )			# Gui boss registers this maildrop to get a port to us once we start up.
	    | PACKED_WIDGET_CALLBACK		(     Null_Or(Packed_Widget) -> Void )			# App      registers this maildrop to get a port to us once we start up.
	    #
	    | STARTUP_FN			Startup_Fn						# Application-specific handler for widget-imp startup.
	    | SHUTDOWN_FN			Shutdown_Fn						# Application-specific handler for widget-imp shutdown -- mainly saving state for possible later widget restart.
	    #												# 
	    | BEFORE_FIRST_FRAME_FN		Before_First_Frame_Fn					# Typically used to set up widget background.
	    | START_OF_FRAME_FN			Start_Of_Frame_Fn					# Application-specific handler for start-of-frame events from guiboss-imp.
	    #
	    | MOUSEBUTTON_FN			Mousebutton_Fn						# Application-specific handler for mousebutton clicks.
	    #
	    | MOUSE_DRAG_FN			Mouse_Drag_Fn						# Application-specific handler for mouse motions.
	    | MOUSE_TRANSIT_FN			Mouse_Transit_Fn					# Application-specific handler for mouse motions.
	    #
	    | KEY_EVENT_FN			Key_Event_Fn						# Application-specific handler for keyboard key-press and key-release events.
	    #
	    | PIXELS_HIGH_MIN			Int							# Widget is guaranteed this many vertical   pixels (but may get pushed out of sight on bottom of the COL it is in).
	    | PIXELS_WIDE_MIN			Int							# Widget is guaranteed this many horizontal pixels (but may get pushed out of sight on right  of the ROW it is in).
	    #
	    | PIXELS_HIGH_CUT			Float							# This value determines our share of pixels remaining after guaranteed pixels are alloted.
	    | PIXELS_WIDE_CUT			Float							# This value determines our share of pixels remaining after guaranteed pixels are alloted.
	    ;

	Packed_Widget_Arg	  =  List(Packed_Widget_Option);					# No required components at present.



# 	pprint_packed_widget_arg:	pp::Prettyprint_Mill -> Packed_Widget_Arg -> Void;
# 


	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      to:				Replyqueue,							# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      id:				iul::Id,
		      #
		      startup_fn:			Startup_Fn,							# 
		      shutdown_fn:			Shutdown_Fn,							# 
		      #
		      before_first_frame_fn:		Before_First_Frame_Fn,
		      start_of_frame_fn:		Start_Of_Frame_Fn,
		      #
		      mousebutton_fn:			Mousebutton_Fn,
		      #
		      mouse_drag_fn:			Mouse_Drag_Fn,
		      mouse_transit_fn:			Mouse_Transit_Fn,
		      #
		      key_event_fn:			Key_Event_Fn,
		      #
		      wants_keystrokes:			Bool,
		      wants_mouseclicks:		Bool,
															# These five provide generic widget connectivity with the guiboss world.
		      gadget_to_guiboss:		gt::Gadget_To_Guiboss,						# 
		      widget_to_packedspace:		w2p::Widget_To_Packedspace,					# 

		      packed_widget_callbacks:		List( Null_Or(Packed_Widget) -> Void ),				# In shut_down_widget_imp' () we use these to inform guiboss that our packed_widget ports are no longer valid. DO WE ACTUALLY NEED THIS?  XXX QUERO FIXME
		      end_gun':				End_Gun,
		      endstate_oneshot:			Oneshot_Maildrop ( ( gt::Packed_Widget_Start_Fn,
									     Null_Or(Exception)				# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
									 ) ),

		      packed_widget_start_fn:		gt::Packed_Widget_Start_Fn,
		      saved_widget_state:		Null_Or(Exception)	
		    };
 
	Mailq    = Mailqueue( Runstate -> Void );
 
	fun default_startup_fn
	      {
		id:				iul::Id,						# Unique id.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		saved_widget_state:		Null_Or(Exception)
	      }
	    =
	    ();	

	fun default_shutdown_fn ()
	    =
	    NULL;	

	fun default_before_first_frame_fn
	      {
		id:				iul::Id,						# Unique id.
		site:				g2d::Box,						# Window rectangle in which to draw.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		theme:				pt::Packed_Theme,
		pass_font:			List(String) -> Replyqueue
							     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
		 get_font:			List(String) ->	 evt::Font,				# Accepts a list of font names which are tried in order.
	        make_rw_pixmap:			g2d::Size -> g2p::Gadget_To_Rw_Pixmap
	      }
	    =
	    {
	    };	

	fun default_start_of_frame_fn
	      {
		id:				iul::Id,						# Unique id.
		frame_number:			Int,							# 1,2,3,... Purely for convenience of widget-imp, guiboss-imp makes no use of this.
		site:				g2d::Box,						# Window rectangle in which to draw.
		visible:			Bool,							# If FALSE, widget is not visible on screen, so widget-imp may be able to avoid updating foreground and background.
		duration_in_seconds:		Float,							# If state has changed widget-imp should call update_gadget_appearance() before this time is up. Also useful for motionblur.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		this_gadget_mode:		gt::Gadget_Mode,
		theme:				pt::Packed_Theme
	      }
	    =
	    {
	    };	

	fun default_mousebutton_fn
	      {
		id:				iul::Id,						# Unique id.
		event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
		button:				evt::Mousebutton,
		point:				g2d::Point,
	        site:				g2d::Box,						# Widget's assigned area in window coordinates.
		modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		theme:				pt::Packed_Theme
	      }
	    =
	    ();	

	fun default_mouse_transit_fn									# Note that buttons are always all up in a mouse motion -- otherwise it is a mouse-drag event.
	      {
		id:				iul::Id,						# Unique id.
		event_point:			g2d::Point,
	        site:				g2d::Box,						# Widget's assigned area in window coordinates.
		transit:			gt::Gadget_Transit,					# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
		modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		theme:				pt::Packed_Theme
	      }
	    =
	    ();	

	fun default_mouse_drag_fn
	      {
		id:				iul::Id,						# Unique id.
		event_point:			g2d::Point,
		start_point:			g2d::Point,
		last_point:			g2d::Point,
	        site:				g2d::Box,						# Widget's assigned area in window coordinates.
		phase:				gt::Drag_Phase,	
		modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		theme:				pt::Packed_Theme
	      }
	    =
	    ();	

	fun default_key_event_fn
	      {
		id:				iul::Id,						# Unique id.
		key_event:			gt::Key_Event,						# KEY_PRESS or KEY_RELEASE.
		keycode:			evt::Keycode,						# Keycode of the depressed key.
		keysym:				evt::Keysym,						# Keysym  of the depressed key.
		string:				String,							# Ascii  for the depressed key.
		event_point:			g2d::Point,
	        site:				g2d::Box,						# Widget's assigned area in window coordinates.
		modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_packedspace:		w2p::Widget_To_Packedspace,
		theme:				pt::Packed_Theme
	      }
	    =
	    ();	

	fun run (
		  mailq:			Mailq,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    to:				Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    id:				iul::Id,
		    #
		    startup_fn:			Startup_Fn,								# 
		    shutdown_fn:		Shutdown_Fn,								# 
		    #
		    before_first_frame_fn:	Before_First_Frame_Fn,
		    start_of_frame_fn:		Start_Of_Frame_Fn,
		    #
		    mousebutton_fn:		Mousebutton_Fn,
		    #
		    mouse_drag_fn:		Mouse_Drag_Fn,
		    mouse_transit_fn:		Mouse_Transit_Fn,
		    #
		    key_event_fn:		Key_Event_Fn,
		    #
		    wants_keystrokes:		Bool,
		    wants_mouseclicks:		Bool,
															# These five provide generic widget connectivity with the guiboss world.
		    gadget_to_guiboss:		gt::Gadget_To_Guiboss,							# 
		    widget_to_packedspace:	w2p::Widget_To_Packedspace,						# 

		    packed_widget_callbacks:	List( Null_Or(Packed_Widget) -> Void ),					# In shut_down_widget_imp' () we use these to inform guiboss that our ports are no longer valid.
		    end_gun':			End_Gun,
		    endstate_oneshot:		Oneshot_Maildrop( ( gt::Packed_Widget_Start_Fn,
								    Null_Or(Exception)
								) ),

		    packed_widget_start_fn:	gt::Packed_Widget_Start_Fn,
		    saved_widget_state:		Null_Or(Exception)	
		  }
		)
	    =
	    {
		loop ();
	    }
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                   ==>  shut_down_widget_imp'),
			    (take_from_mailqueue' mailq ==>  do_plea)
			];

			loop ();
		    }	
		    where
			fun do_plea thunk
			    =
			    thunk runstate;

			fun shut_down_widget_imp' ()
			    =
			    {	apply   {. #callback  NULL; }   packed_widget_callbacks;				# Tell guiboss that our packed_widget port is no longer valid.
				#
				saved_widget_state = shutdown_fn ();

				put_in_oneshot (endstate_oneshot, (packed_widget_start_fn, saved_widget_state));	# Pass our state back to guiboss to allow later impnet restart without state loss.
				#											# The point here is that we could build and return a new closure locking in updated state if we wished.
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	

	fun startup													# Root fn of imp microthread.
	      { id:				iul::Id,
		reply_oneshot:			Oneshot_Maildrop( gt::Widget_Exports ),
		#
		packed_widget_callbacks:	List( Null_Or(Packed_Widget) -> Void ),					# We use these to pass our ports to app code.
		widget_control_callbacks,

		startup_fn:			Startup_Fn,								# 
		shutdown_fn:			Shutdown_Fn,								# 
		#
		before_first_frame_fn:		Before_First_Frame_Fn,
		start_of_frame_fn:		Start_Of_Frame_Fn,
		#
		mousebutton_fn:			Mousebutton_Fn,
		#
		mouse_drag_fn:			Mouse_Drag_Fn,
		mouse_transit_fn:		Mouse_Transit_Fn,
		#
		key_event_fn:			Key_Event_Fn,
		#
		wants_keystrokes:		Bool,
		wants_mouseclicks:		Bool,

		pixels_high_min:		Int,
		pixels_wide_min:		Int,
		#
		pixels_high_cut:		Float,
		pixels_wide_cut:		Float,
															# These five provide generic widget connectivity with the guiboss world.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,							# 
		widget_to_packedspace:		w2p::Widget_To_Packedspace,						# 
		run_gun':			Run_Gun,
		end_gun':			End_Gun,
		endstate_oneshot:		Oneshot_Maildrop( ( gt::Packed_Widget_Start_Fn,
								    Null_Or(Exception)					# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
								) ),

		packed_widget_start_fn:		gt::Packed_Widget_Start_Fn,
		saved_widget_state:		Null_Or(Exception)	
	      }
	      ()													# Note currying.
	    =
	    {   packedspace_to_widget	= { id,
					    #
	    				    pixels_high_min,
	    				    pixels_wide_min,
					    #
	    				    pixels_high_cut,
	    				    pixels_wide_cut,
					    #
					    do_something,
					    pass_something,
					    pass_draw_done_flag
					  };

		packed_widget		= { id, do_something, pass_something };

		guiboss_to_gadget	=   gt::GUIBOSS_TO_GADGET
					      { id,
						#
						wants_keystrokes,
						wants_mouseclicks,
						#
						before_first_frame,
						start_of_frame,
						#
						note_key_event,
						#
						note_mousebutton_event,
						#
						note_mouse_drag_event,
						note_mouse_transit
					      };

		exports			= { guiboss_to_gadget,
					    packedspace_to_widget
					  };

		to			=  make_replyqueue();	

		put_in_oneshot (reply_oneshot, exports);								# Return value from packed_widget_start_fn().


		apply   {. #callback  (THE packed_widget);	}   packed_widget_callbacks;				# Pass our packed_widget port to everyone who asked for it.
		apply   {. #callback  packedspace_to_widget;	}   widget_control_callbacks;				# Pass our port to everyone who asked for it.

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		startup_fn												# Let application-specific code handle startup however it likes.
		  {													# 
		    id,
		    gadget_to_guiboss,
		    widget_to_packedspace,
		    saved_widget_state
		  };

		run (mailq, {		 										# Will not return.
			      to,
			      id,

			      startup_fn,										# 
			      shutdown_fn,										# 
			      #
			      before_first_frame_fn,
			      start_of_frame_fn,
			      #
			      mousebutton_fn,
			      #
			      mouse_drag_fn,
			      mouse_transit_fn,
			      #
			      key_event_fn,
			      #
			      wants_keystrokes,
			      wants_mouseclicks,
															# These provide generic widget connectivity with the guiboss world.
			      gadget_to_guiboss,									# 
			      widget_to_packedspace,									# 
			      packed_widget_callbacks,									# In shut_down_widget_imp' () we use these to inform guiboss code that our ports are no longer valid.
			      end_gun',
			      endstate_oneshot,
			      packed_widget_start_fn,
			      saved_widget_state
			    }
		    );
	    }
	    where
		mailq     =  make_mailqueue (get_current_microthread()):  Mailq;


		#######################################################################
		# guiboss_to_gadget fns:

		fun before_first_frame											# 
		      {
			site:			g2d::Box,								# Window rectangle in which to draw.
			theme:			pt::Packed_Theme,
			 get_font:		List(String) ->  evt::Font,						# Accepts a list of font names which are tried in order; returns font 'ascent' and 'descent' in pixels -- sum them to get  font height.
			pass_font:		List(String) -> Replyqueue						#
							     -> (evt::Font -> Void)					#
							     -> Void,							# Nonblocking version of next, for use in imps.
			make_rw_pixmap:		g2d::Size -> g2p::Gadget_To_Rw_Pixmap
# Doesn't work due to cyclic dependencies
#			make_popup:		gt::Gui_Plan -> Void
		      }
		    =
		    put_in_mailqueue  (mailq,
			#
			\\ ({ id, gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
			    =
			    {
				before_first_frame_fn									# Let application-specific code handle background setup
				  {
				    id,
				    site,
				    #
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    theme,
				     get_font,
				    pass_font,
				    make_rw_pixmap
				  };
			    }
		    );

		fun start_of_frame											# We get this call at the start of every frame from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
		      {
			frame_number:		Int,									# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
			site:			g2d::Box,								# Window rectangle in which to draw.
			visible:		Bool,									# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
			duration_in_seconds:	Float,									# If state has changed look-imp should call update_gadget_appearance() before this time is up. Also useful for motionblur.
			this_gadget_mode:	gt::Gadget_Mode,							# is_active/has_keyboard_focus/has_mouse_focus flags.
			theme:			pt::Packed_Theme
		      }
		    =
		    put_in_mailqueue  (mailq,
			#
			\\ ({ id, gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
			    =
			    {
				start_of_frame_fn									# Let application-specific code handle start-of-frame however it likes.
				  {
				    id,
				    frame_number,
				    site,
				    visible,
				    duration_in_seconds,
				    #
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    this_gadget_mode,
				    theme
				  };
			    }
		    );

		fun note_mouse_transit											# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
		      {
			transit:			gt::Gadget_Transit,						# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
			modifier_keys_state:	        evt::Modifier_Keys_State,					# State of the modifier keys (shift, ctrl...).
			event_point:			g2d::Point,
			site:				g2d::Box,							# Widget's assigned area in window coordinates.
			theme:				pt::Packed_Theme
		      }				# Note  keyboard keypress at 'point'.
		    =				#	^								# 'point'  ise the click point the window's coordinate system.
		    {				#	Keyboard key just pressed down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ id, gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
				=
				mouse_transit_fn
				  {
				    id,
				    event_point,
				    site,
				    transit,
				    modifier_keys_state,
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    theme
				  }
			);

			();
		    };

		fun note_mouse_drag_event
                      {
			phase:				gt::Drag_Phase,						# LAUNCH/MOTION/FINISH.
			modifier_keys_state:	        evt::Modifier_Keys_State,					# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,					# State of mouse buttons as a bool record.
			event_point:			g2d::Point,
			start_point:			g2d::Point,
			last_point:			g2d::Point,
			site:				g2d::Box,							# Widget's assigned area in window coordinates.
			theme:				pt::Packed_Theme
		      }				# Note  keyboard keypress at 'point'.
		    =				#	^								# 'point'  ise the click point the window's coordinate system.
		    {				#	Keyboard key just pressed down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ id, gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
				=
				mouse_drag_fn
				  {
				    id,
				    event_point,
				    start_point,
				    last_point,
				    site,
				    phase,
				    modifier_keys_state,
				    mousebuttons_state,
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    theme
				  }
			);

			();
		    };

		fun note_key_event
                      {
			key_event:			gt::Key_Event,							# KEY_PRESS or KEY_RELEASE.
			keycode:			evt::Keycode,							# Keycode of the depressed key.
			keysym:				evt::Keysym,							# Keysym  of the depressed key.
			string:				String,								# Ascii  for the depressed key.
			modifier_keys_state:	        evt::Modifier_Keys_State,					# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,					# State of mouse buttons as a bool record.
			event_point:			g2d::Point,
			site:				g2d::Box,							# Widget's assigned area in window coordinates.
			theme:				pt::Packed_Theme
		      }				# Note  keyboard keypress at 'point'.
		    =				#	^								# 'point'  ise the click point the window's coordinate system.
		    {				#	Keyboard key just pressed down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
				=
				key_event_fn
				  {
				    id,
				    key_event,
				    keycode,
				    keysym,
				    string,
				    event_point,
				    site,
				    modifier_keys_state,
				    mousebuttons_state,
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    theme
				  }
			);
		    };

		fun note_mousebutton_event
		      {
			mousebutton_event:	gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
			mouse_button:		evt::Mousebutton,
			modifier_keys_state:	evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:	evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			event_point:		g2d::Point,
			site:			g2d::Box,						# Widget's assigned area in window coordinates.
			theme:			pt::Packed_Theme
		      }			# Note mousebutton click at 'point'.
		    =				#	^								# 'point' is the click point in the window's coordinate system.
		    {				#	Mouse button just clicked down.					#
			put_in_mailqueue  (mailq,
			    #
			    \\ ({ gadget_to_guiboss, widget_to_packedspace, ... }: Runstate)
				=
				mousebutton_fn
				  {
				    id,
				    event  => mousebutton_event,
				    button => mouse_button,
				    point  => event_point,
				    site,
				    modifier_keys_state,						# State of the modifier keys (shift, ctrl...).
	   	                    mousebuttons_state,							# State of mouse buttons as a bool record.
				    gadget_to_guiboss,
				    widget_to_packedspace,
				    theme
				  }
			);
		    };



		#######################################################################
		# packedspace_to_widget fns:


		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (mailq,
			#
			\\ ({ gadget_to_guiboss, ... }: Runstate)
			    =
			    ()
		    );
 
 
		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (mailq,
			    #
			    \\ (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);
 
			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
 
		fun pass_draw_done_flag  (replyqueue: Replyqueue)  (reply_handler: Void -> Void)			# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (mailq,
			    #
			    \\ (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, ())
			);
 
			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


	fun process_options
	    ( options: List(Packed_Widget_Option),
	      #
	      {	name,
		id,
		#
		packed_widget_callbacks,
		widget_control_callbacks,
		#
		startup_fn,
		shutdown_fn,
		#
		before_first_frame_fn,
		start_of_frame_fn,
		#
		mousebutton_fn,
		#
		mouse_drag_fn,
		mouse_transit_fn,
		#
		key_event_fn,
		#
		wants_keystrokes,
		wants_mouseclicks,

		pixels_high_min,
		pixels_wide_min,
		#
		pixels_high_cut,
		pixels_wide_cut
	      }
	    )
	    =
	    {   my_name				=  REF name;
		my_id				=  REF id;
		#
		my_packed_widget_callbacks	=  REF  packed_widget_callbacks;
		my_widget_control_callbacks	=  REF widget_control_callbacks;
		#
		my_startup_fn			=  REF startup_fn; 
		my_shutdown_fn			=  REF shutdown_fn; 
		#
		my_before_first_frame_fn	=  REF before_first_frame_fn; 
		my_start_of_frame_fn		=  REF start_of_frame_fn; 
		#
		my_mousebutton_fn		=  REF mousebutton_fn; 
		#
		my_mouse_drag_fn		=  REF mouse_drag_fn; 
		my_mouse_transit_fn		=  REF mouse_transit_fn; 
		#
		my_key_event_fn			=  REF key_event_fn; 
		#
		my_wants_keystrokes		=  REF wants_keystrokes;
		my_wants_mouseclicks		=  REF wants_mouseclicks; 
		#
		my_pixels_high_min		=  REF pixels_high_min;
		my_pixels_wide_min		=  REF pixels_wide_min;
		#
		my_pixels_high_cut		=  REF pixels_high_cut;
		my_pixels_wide_cut		=  REF pixels_wide_cut;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME        n) =>   my_name			:=  n;
			do_option (ID     	           i) =>   my_id                  	:=  i;
			#
			do_option (PACKED_WIDGET_CALLBACK  c) =>   my_packed_widget_callbacks	:=  c ! *my_packed_widget_callbacks;
			do_option (WIDGET_CONTROL_CALLBACK c) =>   my_widget_control_callbacks	:=  c ! *my_widget_control_callbacks;
			#
			do_option (STARTUP_FN             fn) =>   my_startup_fn		:=  fn;
			do_option (SHUTDOWN_FN            fn) =>   my_shutdown_fn		:=  fn;
			#
			do_option (BEFORE_FIRST_FRAME_FN  fn) =>   my_before_first_frame_fn	:=  fn;
			do_option (START_OF_FRAME_FN      fn) =>   my_start_of_frame_fn		:=  fn;
			#
			do_option (MOUSEBUTTON_FN         fn) => {  my_mousebutton_fn		:=  fn;		my_wants_mouseclicks := TRUE;	 };
			#
			do_option (MOUSE_DRAG_FN          fn) => {  my_mouse_drag_fn		:=  fn;						 };
			do_option (MOUSE_TRANSIT_FN       fn) => {  my_mouse_transit_fn		:=  fn;						 };
			#
			do_option (KEY_EVENT_FN           fn) => {  my_key_event_fn		:=  fn;		my_wants_keystrokes  := TRUE;	 };
			#
			do_option (PIXELS_HIGH_MIN         i) =>    my_pixels_high_min		:=  i;
			do_option (PIXELS_WIDE_MIN         i) =>    my_pixels_wide_min		:=  i;
			#
			do_option (PIXELS_HIGH_CUT         f) =>    my_pixels_high_cut		:=  f;
			do_option (PIXELS_WIDE_CUT         f) =>    my_pixels_wide_cut		:=  f;
		    end;
		end;

		{ name			    =>  *my_name,
		  id			    =>  *my_id,
		  #
		  packed_widget_callbacks   =>  *my_packed_widget_callbacks,
		  widget_control_callbacks  =>  *my_widget_control_callbacks,
		  #
		  startup_fn	   	    =>  *my_startup_fn,
		  shutdown_fn	   	    =>  *my_shutdown_fn,
		  #
		  before_first_frame_fn	    =>  *my_before_first_frame_fn,
		  start_of_frame_fn	    =>  *my_start_of_frame_fn,
		  #
		  mousebutton_fn	    =>  *my_mousebutton_fn,
		  #
		  mouse_drag_fn		    =>  *my_mouse_drag_fn,
		  mouse_transit_fn	    =>  *my_mouse_transit_fn,
		  #
		  key_event_fn		    =>  *my_key_event_fn,
		  #
		  wants_keystrokes	    =>  *my_wants_keystrokes,
		  wants_mouseclicks	    =>  *my_wants_mouseclicks,
		  #
		  pixels_high_min	    =>  *my_pixels_high_min,
		  pixels_wide_min	    =>  *my_pixels_wide_min,
		  #
		  pixels_high_cut	    =>  *my_pixels_high_cut,
		  pixels_wide_cut	    =>  *my_pixels_wide_cut
		};
	    };


	fun make_packed_widget_start_fn  (widget_options:  List(Packed_Widget_Option))					# PUBLIC
	    =
	    # Here we have a critical linkage in the GUI
	    # code factorization design.
	    #
	    # make_packed_widget_start_fn is called by the
	    # various client-level widgets like
	    #
	    #    src/lib/x-kit/widget/leaf/boxbutton.pkg
	    #    src/lib/x-kit/widget/leaf/roundbutton.pkg
	    #    src/lib/x-kit/widget/leaf/diamondbutton.pkg
	    #    src/lib/x-kit/widget/leaf/arrowbutton.pkg
	    #
	    # The resulting packed_widget_start_fn values
	    # then get stored in
	    #
	    #    guiboss_types::Packed_Widget::WIDGET									# guiboss_types		is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
	    #
	    # nodes and eventually called by the guiboss_imp fn								# guiboss_imp		is from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
	    #
	    #    stopped_gui__to__running_gui
	    #
	    # to actually start the widgets running.
	    #
	    # We do not use our usual Imports/Exports driven
	    # imp startup protocol here because we want
	    # guiboss_imp to do the actual widget-imp but we
	    # do now want guiboss_imp to know anything about
	    # the state types of widgets (to avoid an explosion
	    # of cases in guiboss_imp, one per widget).
	    #
	    {
	        (process_options
		  ( widget_options,
		    { name			=>  "packed_widget",
		      id			=>  iul::id_zero,
		      #
		      packed_widget_callbacks	=>  [],
		      widget_control_callbacks	=>  [],
		      #
		      startup_fn		=>  default_startup_fn,
		      shutdown_fn		=>  default_shutdown_fn,
		      #
		      before_first_frame_fn	=>  default_before_first_frame_fn,
		      start_of_frame_fn		=>  default_start_of_frame_fn,
		      #
		      mousebutton_fn		=>  default_mousebutton_fn,
		      #
		      mouse_drag_fn		=>  default_mouse_drag_fn,
		      mouse_transit_fn		=>  default_mouse_transit_fn,
		      #
		      key_event_fn		=>  default_key_event_fn,
		      #
		      wants_keystrokes		=>  FALSE,
		      wants_mouseclicks		=>  FALSE,
		      #
		      pixels_high_min		=>  0,
		      pixels_wide_min		=>  0,
		      #
		      pixels_high_cut		=>  1.0,
		      pixels_wide_cut		=>  1.0
		    }
		) )
		    ->
		    { name,
		      id,
		      #
		      packed_widget_callbacks,
		      widget_control_callbacks,
		      #
		      startup_fn,
		      shutdown_fn,
		      #
		      before_first_frame_fn,
		      start_of_frame_fn,
		      #
		      mousebutton_fn,
		      #
		      mouse_drag_fn,
		      mouse_transit_fn,
		      #
		      key_event_fn,
		      #
		      wants_keystrokes,
		      wants_mouseclicks,
		      #
		      pixels_high_min,
		      pixels_wide_min,
		      #
		      pixels_high_cut,
		      pixels_wide_cut
		    };

		id  =	if (iul::id_to_int(id) == 0)	iul::issue_unique_id();						# Allocate unique imp id.
			else				id;
			fi;


		fun packed_widget_start_fn										# This fn will get called by   stopped_gui__to__running_gui()  in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
		    {													#
		      gadget_to_guiboss:	gt::Gadget_To_Guiboss,							# 
		      widget_to_packedspace:	w2p::Widget_To_Packedspace,						# 
		      run_gun':			Run_Gun,
		      end_gun':			End_Gun,
		      endstate_oneshot:		Oneshot_Maildrop( ( gt::Packed_Widget_Start_Fn,
								    Null_Or(Exception)					# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
								) ),
		      saved_widget_state:	Null_Or(Exception)	
		    }
		    : gt::Widget_Exports
		    =
		    {	reply_oneshot =  make_oneshot_maildrop ():	Oneshot_Maildrop( gt::Widget_Exports );
			#
			xlogger::make_thread
			    name
			    (startup  { id,										# Note that startup() is curried.
					reply_oneshot,
					#
					packed_widget_callbacks,
					widget_control_callbacks,

					startup_fn,									# Pass in widget-specific args. 
					shutdown_fn,									# Save state for possible widget restart.
					#
					before_first_frame_fn,
					start_of_frame_fn,
					#
					mousebutton_fn,
					#
					mouse_drag_fn,
					mouse_transit_fn,
					#
					key_event_fn,
					#
					wants_keystrokes,
					wants_mouseclicks,
					#
					pixels_high_min,
					pixels_wide_min,
					#
					pixels_high_cut,
					pixels_wide_cut,
															# These five args pass in the ports etc that guiboss-imp gave us.
					gadget_to_guiboss,								# 
					widget_to_packedspace,								# 
					run_gun',
					end_gun',
					endstate_oneshot,

					packed_widget_start_fn =>  gt::PACKED_WIDGET_START_FN  packed_widget_start_fn,	# Because we need to put this in endstate_oneshot at end of run.
					saved_widget_state
				      }
			    );

			(get_from_oneshot  reply_oneshot);								# Return gt::Widget_Exports to guiboss-imp.

		    };

		gt::PACKED_WIDGET_START_FN  packed_widget_start_fn;							# The value-added is that we've locked in the values of *_fn etc, and guiboss-imp can be agnostic about their types.
	    };


	fun pprint_packed_widget_arg
	      (pp:		pp::Prettyprint_Mill)
	      (widget_arg:	Packed_Widget_Arg)
	    =
	    {
		widget_arg
		  ->
		  ( options:		List(Packed_Widget_Option)
		  );

		pp.box {.
		    pp.txt " [";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.txt " )";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name		=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			ID			id	=>  {  pp.lit (sprintf "ID %d" (iul::id_to_int id)        );	};
			#
			WIDGET_CONTROL_CALLBACK _	=>  {  pp.lit          "WIDGET_CONTROL_CALLBACK (callback)";	};
			PACKED_WIDGET_CALLBACK _	=>  {  pp.lit          "PACKED_WIDGET_CALLBACK (callback)";	};
			#
			STARTUP_FN	_		=>  {  pp.lit          "STARTUP_FN _";				};
			SHUTDOWN_FN	_		=>  {  pp.lit          "SHUTDOWN_FN _";				};
			#
			BEFORE_FIRST_FRAME_FN	_	=>  {  pp.lit          "BEFORE_FIRST_FRAME_FN _";		};
			START_OF_FRAME_FN	_	=>  {  pp.lit          "START_OF_FRAME_FN _";			};
			#
			MOUSEBUTTON_FN	_		=>  {  pp.lit          "MOUSEBUTTON_FN _";			};
			#
			MOUSE_DRAG_FN _			=>  {  pp.lit          "MOUSE_DRAG_FN _";			};
			MOUSE_TRANSIT_FN _		=>  {  pp.lit          "MOUSE_TRANSIT_FN _";			};
			#
			KEY_EVENT_FN	_		=>  {  pp.lit          "KEY_EVENT_FN _";			};
			#
			PIXELS_HIGH_MIN	i		=>  {  pp.lit (sprintf "PIXELS_HIGH_MIN %d" i);			};
			PIXELS_WIDE_MIN	i		=>  {  pp.lit (sprintf "PIXELS_WIDE_MIN %d" i);			};
			#
			PIXELS_HIGH_CUT	f		=>  {  pp.lit (sprintf "PIXELS_HIGH_CUT %f" f);			};
			PIXELS_WIDE_CUT	f		=>  {  pp.lit (sprintf "PIXELS_WIDE_CUT %g" f);			};
		    esac;
	    end;
    };

end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
