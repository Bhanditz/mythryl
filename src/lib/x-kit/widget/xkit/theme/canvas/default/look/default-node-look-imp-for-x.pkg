## default-node-look-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package aw  =  appwindow;					# appwindow			is from   src/lib/x-kit/widget/theme/appwindow.pkg
    package lsi =  node_state_imp;				# node_state_imp		is from   src/lib/x-kit/widget/space/canvas/node/node-state-imp.pkg
    package pwe =  canvas_widget_egg;				# canvas_widget_egg		is from   src/lib/x-kit/widget/space/canvas-widget-egg.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package default_node_look_imp_for_x
    :               Node_Look_Imp											# Node_Look_Imp	is from   src/lib/x-kit/widget/theme/canvas/node-look-imp.api
    {
	#
	include node_look;												# node_look		is from   src/lib/x-kit/widget/theme/canvas/node-look.pkg
	#
	Node_Look_State = Ref( Void );											# Opaque wrapper for all nonephemeral mutable state maintained by look.

	Imports =  pwe::Imports;
	Exports =  pwe::Exports;

#	Imports = {													# Ports we use, provided by other imps.
#		    int_sink: Int -> Void
#		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Node_Look_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );

	Node_Plea =  DO_SOMETHING		Int
		   |  PASS_SOMETHING		Oneshot_Maildrop( Int )
		   |  PASS_DRAW_DONE_FLAG	Oneshot_Maildrop( Void )
		   ;

	Node_Q    = Mailqueue( Node_Plea );


#	Exports	= {													# Ports we provide for use by other imps.
#		    gui_boss_port:	gbp::Gui_Boss_Port,								# Gui boss uses this to tell us when to redraw.
#		    node_look:		Node_Look
#		  };

	Option = MICROTHREAD_NAME  String;										# 

	Node_Look_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Node_Look_State,								# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    node_q:		Node_Q										# 
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_node_imp'),
			    (take_from_mailqueue' node_q    ==>  do_node_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_node_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_node_plea  (DO_SOMETHING i)
			        =>
				{   imports.int_sink i;									# Demonstrate use of imports.
				};

			    do_node_plea  (PASS_SOMETHING reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, 0);
				};

			    do_node_plea  (PASS_DRAW_DONE_FLAG reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, ());
				};
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		canvas_widget_control	=  { do_something, pass_something, pass_draw_done_flag };
		exports			=  { canvas_widget_control };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from make_node_look().

		(take_from_mailslot  me_slot)										# Input args from configure_default_node_look_for_x().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, node_q, imports, to, end_gun' };								# Will not return.
	    }
	    where
		node_q     =  make_mailqueue (get_current_microthread()):  Node_Q
;
		fun do_something (i: Int)										# External entrypoint.
		    =	
		    put_in_mailqueue  (node_q, DO_SOMETHING i);


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (node_q, PASS_SOMETHING reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_draw_done_flag  (replyqueue: Replyqueue)  (reply_handler: Void -> Void)			# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (node_q, PASS_DRAW_DONE_FLAG reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# External entrypoints
	#
	fun make_node_look_egg												# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	      (
		appwindow:		aw::Appwindow,
		options:		List(Option),
		node_state_options:	List(lsi::Option)
	      )
	    =
	    {   (process_options (options, { name => "node_look" }))
		    ->
		    { name };
	
		me = REF ();

		node_state_egg =  lsi::make_node_state_egg  node_state_options;

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    (node_state_egg ()) -> (node_state_exports, node_state_egg');


			    phase3
				=
				fn  ( imports:	Imports,								# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				      run_gun':	Run_Gun,	
				      end_gun':	End_Gun
				    )
				    =
				    {
					node_state_imports = { int_sink => fn (i: Int) = () };

					node_state_egg' (node_state_imports, run_gun', end_gun');

					put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				    };

			    (exports, phase3);
			};
	    };
    };

end;
