## widgetspace-imp.pkg
#
# For background see comments at top of
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  client_to_atom;				# client_to_atom		is from   src/lib/x-kit/xclient/src/iccc/client-to-atom.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package xet =  xevent_types;				# xevent_types			is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
#   package w2x =  windowsystem_to_xserver;			# windowsystem_to_xserver	is from   src/lib/x-kit/xclient/src/window/windowsystem-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package r2k =  xevent_router_to_keymap;			# xevent_router_to_keymap	is from   src/lib/x-kit/xclient/src/window/xevent-router-to-keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package sep =  client_to_selection;				# client_to_selection		is from   src/lib/x-kit/xclient/src/window/client-to-selection.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/old/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  client_to_window_watcher;			# client_to_window_watcher	is from   src/lib/x-kit/xclient/src/window/client-to-window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    package pl  =  paired_lists;				# paired_lists			is from   src/lib/std/src/paired-lists.pkg

    package g2d =  geometry2d;					# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package g2j =  geometry2d_junk;				# geometry2d_junk		is from   src/lib/std/2d/geometry2d-junk.pkg

    package b2s =  spritespace_to_sprite;			# spritespace_to_sprite		is from   src/lib/x-kit/widget/space/sprite/spritespace-to-sprite.pkg
    package c2o =  objectspace_to_object;			# objectspace_to_object		is from   src/lib/x-kit/widget/space/object/objectspace-to-object.pkg
    package g2p =  gadget_to_pixmap;				# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg

    package s2g =  space_to_gui;				# space_to_gui			is from   src/lib/x-kit/widget/gui/space-to-gui.pkg

    package iul =  issue_unique_look_id;			# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
    package im  =  int_red_black_map;				# int_red_black_map		is from   src/lib/src/int-red-black-map.pkg
    package gt  =  guiboss_types;				# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package blk =  blank;					# blank				is from   src/lib/x-kit/widget/leaf/blank.pkg

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    package widgetspace_imp
    :       Widgetspace_Imp												# Widgetspace_Imp		is from   src/lib/x-kit/widget/space/widget/widgetspace-imp.api
    {
	#
	Widgetspace_State												# Holds all nonephemeral mutable state maintained by shape.
	  =
	  { id:		Id,
	    state:	Ref( Void )
	  };

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:			Int -> Void,
		    space_to_gui:		s2g::Space_To_Gui							# Our channel to	src/lib/x-kit/widget/gui/guiboss-imp.pkg
		  };

	Exports	= {													# Ports we provide for use by other imps.
		    guiboss_to_widgetspace:	gt::Guiboss_To_Widgetspace
		  };

	Widgetspace_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Me_Slot = Mailslot  ( { imports:		Imports,
				me:			Widgetspace_State,
				options:		List(gt::Widgetspace_Option),
				run_gun':		Run_Gun,
				end_gun':		End_Gun,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(gt::Widgetspace_Arg)),			# When end_gun fires we save our state in this and exit.
				callback:		Null_Or(gt::Guiboss_To_Widgetspace -> Void)
                              }
                            );

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Widgetspace_State,								# State which is preserved across imp shutdown/restart cycles.
		      options:		List(gt::Widgetspace_Option),
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun,									# We shut down the microthread when this fires.
		      endstate_oneshot:	Null_Or(Oneshot_Maildrop(gt::Widgetspace_Arg))					# When end_gun fires we save our state in this and exit.
		    };

	Widgetspace_Q    = Mailqueue( Runstate -> Void );


	fun do_re_site_widget_tree											# Assign to each widget in given widget-tree a pixel-rectangle on which to draw itself, in window coordinates.
	        ( site:				g2d::Box,								# This is the available window rectangle to divide between our widgets.
		  rg_widget:			gt::Rg_Widget,								# This is the tree of widgets -- possibly a single leaf widget.
		  space_to_gui:			s2g::Space_To_Gui,							# We use this to tell guiboss-imp what site we have assigned to each widget.
		  subwindow_info:		gt::Subwindow_Data,
		  widget_layout_hints:		im::Map( gt::Widget_Layout_Hint )
		)
	    =
	    {	subwindow_info -> gt::SUBWINDOW_DATA subwindow_info;
		subwindow_info =  gt::SUBWINDOW_INFO subwindow_info;

		compute_size_preferences_for_rg_widget_tree  rg_widget;

		assign_sites_to_all_widgets (site, subwindow_info, rg_widget);
	    }
	    where
		#
		Sized_Widget
		  =
		  { rg_widget:		gt::Rg_Widget,
		    size_prefs: 	gt::Widget_Layout_Hint,
		    col_number:		Int,
		    row_number:		Int
		  };

		fun grid_dimensions (grid:	List( List( Sized_Widget ) )):   g2d::Size
		    =
		    {   high =  list::length grid;
			wide =  int::list_max (map list::length grid);
			#
			{ high, wide };
		    };

		fun nth_grid_row
		      (
			grid:	List( List( Sized_Widget ) ),
			row:	Int
		      )
		    :		List( Sized_Widget )
		    =
		    list::nth (grid, row);

		fun nth_grid_col
		      (
			grid:	List( List( Sized_Widget ) ),
			col:	Int
		      )
		    :		List( Sized_Widget )
		    =
		    map  get_colth  grid
		    where
			fun get_colth (row: List( Sized_Widget ))
			    =
			    list::nth (row, col);
		    end;

		fun grid_cols (grid:	List( List( Sized_Widget ) ))							# Return all columns in grid.
		    =
		    {   (grid_dimensions grid) ->  { high, wide };
			#
			grid_cols' (wide - 1, [])
			where
			    fun grid_cols' (-1, result)
				    =>
				    result;

				grid_cols' (i, result)
				    =>
				    grid_cols'  (i - 1,  (nth_grid_col (grid, i))  !  result);
			    end;
			end;
		    };


		fun get_widget_layout_hint (r: gt::Rgwidget)
		    =
		    {   id =  r.guiboss_to_gadget.id;
			i  =  iul::id_to_int id;

			case (im::get (widget_layout_hints, i))
			    #
			    THE hint    => hint;
			    #
			    NULL	=> gt::default_widget_layout_hint;					# This is not expected to happen; possibly we should log something here.
			esac;
		    };

 		fun get__pixels_high_cut (widget: Sized_Widget) =  widget.size_prefs.pixels_high_cut;
  		fun get__pixels_wide_cut (widget: Sized_Widget) =  widget.size_prefs.pixels_wide_cut;
		#
 		fun get__pixels_high_min (widget: Sized_Widget) =  widget.size_prefs.pixels_high_min;
 		fun get__pixels_wide_min (widget: Sized_Widget) =  widget.size_prefs.pixels_wide_min;

		fun find_max_of_pixels_high_mins (widgets:  List( Sized_Widget )) =    int::list_max (map  get__pixels_high_min  widgets);
 		fun find_max_of_pixels_wide_mins (widgets:  List( Sized_Widget )) =    int::list_max (map  get__pixels_wide_min  widgets);
		#
		fun find_max_of_pixels_high_cuts (widgets:  List( Sized_Widget )) =  float::list_max (map  get__pixels_high_cut  widgets);
 		fun find_max_of_pixels_wide_cuts (widgets:  List( Sized_Widget )) =  float::list_max (map  get__pixels_wide_cut  widgets);

		fun compute_size_preferences_for_grid_rows ([]: List( List( gt::Rg_Widget )), row_number, result_rows): List(List(Sized_Widget))	# A little helper fn used in the gt::RG_GRID cases of both  fun compute_size_preferences_for_rg_widget_tree  and  assign_sites_to_all_widgets.
			=>
			reverse result_rows;

		    compute_size_preferences_for_grid_rows (row ! rest, row_number, result)
			=>
			compute_size_preferences_for_grid_rows (rest, row_number + 1,  compute_size_preferences_for_grid_row (row, 0, []) ! result)
			where
			    fun compute_size_preferences_for_grid_row ([]: List(gt::Rg_Widget), col_number, result_row)
				    =>
				    reverse result_row;

				compute_size_preferences_for_grid_row (rg_widget ! rest, col_number, result_row)
				    =>
				    {
					entry   = { rg_widget,
						    size_prefs => compute_size_preferences_for_rg_widget_tree  rg_widget,
						    row_number,
						    col_number
						  };

					compute_size_preferences_for_grid_row (rest, col_number + 1, entry ! result_row);
				    };
			    end;
			end;
		end

		also
		fun compute_size_preferences_for_rg_widget_tree
		      #	
		      (rg_widget:	gt::Rg_Widget)								# This is the tree of widgets -- possibly a single leaf widget.
		    =
		    case rg_widget
			#
			gt::RG_ROW r
			    =>
			    {   do_row (r.widgets, 0, 0, 1.0, 1.0)
				where
				    fun do_row ([], pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut)
					    =>
					    {	r.pixels_high_min := pixels_high_min;
						r.pixels_wide_min := pixels_wide_min;
						#
						r.pixels_high_cut := pixels_high_cut;
						r.pixels_wide_cut := pixels_wide_cut;

					        { pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut };
					    };

					do_row ((widget: gt::Rg_Widget) ! rest,  pixels_high_min', pixels_wide_min', pixels_high_cut', pixels_wide_cut')
					    =>
					    {   (compute_size_preferences_for_rg_widget_tree  widget)							# This widget may be (for example) a nested ROW, COL or GRID:  If so, process it recursively.
						    ->
						    { pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut };


						pixels_high_min = max (pixels_high_min,  pixels_high_min');
						pixels_high_cut = max (pixels_high_cut,  pixels_high_cut');
						#
						pixels_wide_min =     (pixels_wide_min + pixels_wide_min');
						pixels_wide_cut = max (pixels_wide_cut,  pixels_wide_cut');


						do_row (rest,  pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut);
					    };
				    end;
				end;
			    };

			gt::RG_COL r
			    =>
			    {   do_col (r.widgets, 0, 0, 1.0, 1.0)
				where
				    fun do_col ([], pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut)
					    =>
					    {	r.pixels_high_min := pixels_high_min;
						r.pixels_wide_min := pixels_wide_min;
						#
						r.pixels_high_cut := pixels_high_cut;
						r.pixels_wide_cut := pixels_wide_cut;

					        { pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut };
					    };

					do_col ((widget: gt::Rg_Widget) ! rest,  pixels_high_min', pixels_wide_min', pixels_high_cut', pixels_wide_cut')
					    =>
					    {   (compute_size_preferences_for_rg_widget_tree widget)							# This widget may be (for example) a nested ROW, COL or GRID:  If so, process it recursively.
						    ->
						    { pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut };


						pixels_high_min =     (pixels_high_min + pixels_high_min');
						pixels_high_cut = max (pixels_high_cut,  pixels_high_cut');
						#
						pixels_wide_min = max (pixels_wide_min,  pixels_wide_min');
						pixels_wide_cut = max (pixels_wide_cut,  pixels_wide_cut');


						do_col (rest,  pixels_high_min, pixels_wide_min, pixels_high_cut, pixels_wide_cut);
					    };
				    end;
				end;
			    };

			gt::RG_GRID r
			    =>
			    {	grid =  compute_size_preferences_for_grid_rows (r.widgets, 0, []);
				#
				rows =             grid;
				cols =  grid_cols  grid;									# Columns of grid, so we can compute column-by-column values conveniently.
				
 				row_high_mins =  map  find_max_of_pixels_high_mins  rows;					# The min height for each row is the max of the min-heights of the widgets in that row.
 				col_wide_mins =  map  find_max_of_pixels_wide_mins  cols;					# The min width  for each col is the max of the min-widths  of the widgets in that col.
 
 				pixels_high_min =  int::sum  row_high_mins;							# The min height for the grid widget is the sum of the row min-heights.
 				pixels_wide_min =  int::sum  col_wide_mins;							# The min width  for the grid widget is the sum of the col min-widths.
 
 				all_widgets   =  list::cat  grid;
 
 				pixels_high_cut =  float::list_max  (map  get__pixels_high_cut  all_widgets);			# The grid high-cut is max height-cut over all widgets in the grid.
 				pixels_wide_cut =  float::list_max  (map  get__pixels_wide_cut  all_widgets);			# The grid high-cut is max height-cut over all widgets in the grid.

				{ pixels_high_min,
				  pixels_wide_min,
				  #
				  pixels_high_cut,
				  pixels_wide_cut
				};
			    };

			gt::RG_SCROLLPORT r
			    =>
			    {													# Supply default layout parameters.  User can override by providing WIDGET_PIXELS_CUT and WIDGET_PIXELS_MIN hints in ROW and COL specs -- see  src/lib/x-kit/widget/gui/gui-plan.pkg
				{ pixels_high_min =>  0,
				  pixels_wide_min =>  0,
				  #
				  pixels_high_cut =>  1.0,
				  pixels_wide_cut =>  1.0
				};
			    };

			gt::RG_TABPORT r
			    =>
			    {													# Supply default layout parameters.  User can override by providing WIDGET_PIXELS_CUT and WIDGET_PIXELS_MIN hints in ROW and COL specs -- see  src/lib/x-kit/widget/gui/gui-plan.pkg
				{ pixels_high_min =>  0,
				  pixels_wide_min =>  0,
				  #
				  pixels_high_cut =>  1.0,
				  pixels_wide_cut =>  1.0
				};
			    };

			gt::RG_FRAME r
			    =>
			    {													# Blindly copied from above
				{ pixels_high_min =>  0,
				  pixels_wide_min =>  0,
				  #
				  pixels_high_cut =>  1.0,
				  pixels_wide_cut =>  1.0
				};
			    };

			gt::RG_WIDGET r
			    =>
			    get_widget_layout_hint r;

			gt::RG_OBJECTSPACE r
			    =>
			    {
msg = sprintf "do_re_site_widget_tree/pass1/OBJECTSPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			    };
			gt::RG_SPRITESPACE r
			    =>
			    {
msg = sprintf "do_re_site_widget_tree/pass1/SPRITESPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			    };

			gt::RG_NULL_WIDGET /* r */
			    =>
			    { pixels_wide_min => 0, pixels_high_min => 0, pixels_wide_cut => 0.0, pixels_high_cut => 0.0 };
		    esac;


		fun wide_min_for_widget ( widget as gt::RG_WIDGET r				: gt::Rg_Widget) =>   (get_widget_layout_hint r).pixels_wide_min;
		    wide_min_for_widget ( widget as gt::RG_ROW    { pixels_wide_min => i,  ... }: gt::Rg_Widget) =>  *i;
		    wide_min_for_widget ( widget as gt::RG_COL    { pixels_wide_min => i,  ... }: gt::Rg_Widget) =>  *i;
# Do we need RG_GRID here?
		    wide_min_for_widget _						      			 =>   0;
		end;

		fun high_min_for_widget ( widget as gt::RG_WIDGET r				: gt::Rg_Widget) =>   (get_widget_layout_hint r).pixels_wide_min;
		    high_min_for_widget ( widget as gt::RG_ROW    { pixels_high_min => i,  ... }: gt::Rg_Widget) =>  *i;
		    high_min_for_widget ( widget as gt::RG_COL    { pixels_high_min => i,  ... }: gt::Rg_Widget) =>  *i;
# Do we need RG_GRID here?
		    high_min_for_widget  _									 =>   0;
		end;

		fun wide_cut_for_widget ( widget as gt::RG_WIDGET r				: gt::Rg_Widget) =>   (get_widget_layout_hint r).pixels_wide_cut;
		    wide_cut_for_widget ( widget as gt::RG_ROW    { pixels_wide_cut => f,  ... }: gt::Rg_Widget) =>  *f;
		    wide_cut_for_widget ( widget as gt::RG_COL    { pixels_wide_cut => f,  ... }: gt::Rg_Widget) =>  *f;
# Do we need RG_GRID here?
		    wide_cut_for_widget _									 => 1.0;
		end;

		fun high_cut_for_widget ( widget as gt::RG_WIDGET r				: gt::Rg_Widget) =>   (get_widget_layout_hint r).pixels_high_cut;
		    high_cut_for_widget ( widget as gt::RG_ROW    { pixels_high_cut => f,  ... }: gt::Rg_Widget) =>  *f;
		    high_cut_for_widget ( widget as gt::RG_COL    { pixels_high_cut => f,  ... }: gt::Rg_Widget) =>  *f;
# Do we need RG_GRID here?
		    high_cut_for_widget  _									 => 1.0;
		end;

		fun assign_sites_to_all_widgets
		      ( site:				g2d::Box,							# This is the available window rectangle to divide between our widgets.
		        subwindow_or_view:		gt::Subwindow_Or_View,						# This is the pixmap on which our site is located.
			rg_widget:			gt::Rg_Widget							# This is the tree of widgets -- possibly a single leaf widget.
		      )
		    =
		    case rg_widget
			#
			gt::RG_ROW r
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
				min_widths =    int::sum  (map  wide_min_for_widget  r.widgets);			# Compute total pixels needed by fixed-width widgets.  Fixed-width widgets get first call on available space; variable-width widgets divide up what is left.
				total_cut  =  float::sum  (map  wide_cut_for_widget  r.widgets);			# Sum cut values of all widgets. Each variable-width widget will get widget.share/total_cut of sharable_pixels.  Which might be zero.

				total_cut  =	if (total_cut > 0.0)	total_cut;
						else			1.0;						# Prevent divide-by-zero in subsequent logic.
						fi;

				site -> { row, col, high, wide };

				sharable_pixels										# Compute pixels remaining after all fixed-width widgets have been given their cut.
				    =
				    if (wide > min_widths)	float::from_int  (wide - min_widths);			#
				    else			0.0;							# No pixels left after giving fixed-width widgets their allotments.
				    fi;

				assign_sites_to_widgets (r.widgets, col)
				where
				    fun assign_sites_to_widgets ([], col)
					    =>
					    ();

					assign_sites_to_widgets ((w as ( widget: gt::Rg_Widget)) ! rest,  col)
					    =>
					    {
						wide_min = wide_min_for_widget  w;
						wide_cut = wide_cut_for_widget  w;

						pixels_for_this_widget
						    #
						    =                wide_min
						    + float::round ((wide_cut / total_cut) * sharable_pixels);

						site = { row, col, high, wide => pixels_for_this_widget };

						assign_sites_to_all_widgets						# This widget may be a nested ROW, COL, GRID, SCROALLBLE_VIEW (...) so assign sites recursively within it.
						  (
						    site,
						    subwindow_or_view,
						    widget
						  );

						assign_sites_to_widgets  (rest, col + pixels_for_this_widget);		# Do remaining widgets in this ROW.
					    };
				    end;
				end;
			    };

			gt::RG_COL r
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
				min_heights =    int::sum  (map  high_min_for_widget  r.widgets);			# Compute total pixels needed by fixed-height widgets.  Fixed-height widgets get first call on available space; variable-height widgets divide up what is left.
				total_cut   =  float::sum  (map  high_cut_for_widget  r.widgets);			# Sum cut values of all widgets. Each variable-height widget will get widget.share/total_cut of sharable_pixels.  Which might be zero.

				total_cut  =	if (total_cut > 0.0)	total_cut;
						else			1.0;						# Prevent divide-by-zero in subsequent logic.
						fi;

				site -> { row, col, high, wide };

				sharable_pixels										# Compute pixels remaining after all fixed-height widgets have been given their cut.
				    =
				    if (high > min_heights)	float::from_int  (high - min_heights);			#
				    else			0.0;							# No pixels left after giving fixed-height widgets their allotments.
				    fi;

				assign_sites_to_widgets (r.widgets, row)
				where
				    fun assign_sites_to_widgets ([], row)
					    =>
					    ();

					assign_sites_to_widgets  ((w as (widget: gt::Rg_Widget))  !  rest,  row)
					    =>
					    {
						high_min =  high_min_for_widget  w;
						high_cut =  high_cut_for_widget  w;

						pixels_for_this_widget	=                high_min
									+ float::round ((high_cut / total_cut) * sharable_pixels);

						site = { row, col, wide, high => pixels_for_this_widget };

						assign_sites_to_all_widgets 						# This widget may be a nested ROW, COL, GRID, SCROALLBLE_VIEW (...) so assign sites recursively within it.
						  (
						    site,
						    subwindow_or_view,
						    widget
						  );

						assign_sites_to_widgets  (rest, row + pixels_for_this_widget);		# Do remaining widgets in this COL.
					    };
				    end;
				end;
			    };

			gt::RG_GRID r
			    =>
			    {	r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
				grid =  compute_size_preferences_for_grid_rows (r.widgets, 0, []);

				rows		=             grid;							# Rows    of grid, so we can compute column-by-row    values conveniently.
				cols		=  grid_cols  grid;							# Columns of grid, so we can compute column-by-column values conveniently.

				row_high_mins	=  map  find_max_of_pixels_high_mins  rows;				# The min height for each row is the max of the min-heights of the widgets in that row.
				col_wide_mins	=  map  find_max_of_pixels_wide_mins  cols;				# The min width  for each col is the max of the min-widths  of the widgets in that col.

				row_high_cuts	=  map  find_max_of_pixels_high_cuts  rows;				# 
				col_wide_cuts	=  map  find_max_of_pixels_wide_cuts  cols;				# 

				row_highs	=  pl::zip (row_high_mins, row_high_cuts);
				col_wides	=  pl::zip (col_wide_mins, col_wide_cuts);

				total_high_min	=  int::sum  row_high_mins;						# The min height for the grid widget is the sum of the row min-heights.
				total_wide_min	=  int::sum  col_wide_mins;						# The min width  for the grid widget is the sum of the col min-widths.

				total_high_cut	=  float::sum  row_high_cuts;						# The grid high-cut is max high-cut over all rows in the grid.
				total_wide_cut	=  float::sum  col_wide_cuts;						# The grid wide-cut is max wide-cut over all cols in the grid.

				total_high_cut  =  if (total_high_cut > 0.0)	total_high_cut;
						   else				1.0;					# Prevent divide-by-zero in subsequent logic.
						   fi;

				total_wide_cut  =  if (total_wide_cut > 0.0)	total_wide_cut;
						   else				1.0;					# Prevent divide-by-zero in subsequent logic.
						   fi;

				site -> { row, col, high, wide };

				sharable_vertical_pixels								# Compute pixels remaining after all fixed-height widgets have been given their cut.
				    =
				    if (high > total_high_min)	float::from_int  (high - total_high_min);		#
				    else			0.0;							# No pixels left after giving fixed-height widgets their allotments.
				    fi;

				sharable_horizontal_pixels								# Compute pixels remaining after all fixed-height widgets have been given their cut.
				    =
				    if (high > total_wide_min)	float::from_int  (wide - total_wide_min);		#
				    else			0.0;							# No pixels left after giving fixed-height widgets their allotments.
				    fi;

				col_wides										# For each column, its width in pixels.
				    = 
				    map  assign_width_to_column  col_wides
				    where
					fun assign_width_to_column (col_wide_min, col_wide_cut)
					    =
					    {
						pixels_for_this_col     =                col_wide_min
									+ float::round ((col_wide_cut / total_wide_cut) * sharable_horizontal_pixels);

						pixels_for_this_col;
					    };
				    end;

				row_highs										# For each row, its height in pixels.
				    = 
				    map  assign_width_to_row  row_highs
				    where
					fun assign_width_to_row (row_high_min, row_high_cut)
					    =
					    {
						pixels_for_this_row     =                row_high_min
									+ float::round ((row_high_cut / total_high_cut) * sharable_vertical_pixels);

						pixels_for_this_row;
					    };
				    end;

				assign_sites_to_grid_widget_rows  (grid, row, col)
				    where
					fun assign_sites_to_grid_widget_rows
					      (
						[]:		List(List(Sized_Widget)),				# We need to assign window sites to all these widgets
						row:		Int,							# This tracks which   vertical window pixel on which current widget should be located.
						col:		Int							# This tracks which horizontal window pixel on which current widget should be located.
					      )
						=>
						();

					    assign_sites_to_grid_widget_rows (widget_row ! rest,  row,  col)
						=>
						{   high = assign_sites_to_grid_widget_row  (widget_row, row, col);
						    #
						    assign_sites_to_grid_widget_rows (rest, row + high, col);
						}
						where
						    fun assign_sites_to_grid_widget_row
							  (
							    []:			List(Sized_Widget),
							    row:		Int,					# Which pixel row in window coordinates should current widget be located at?
							    col:		Int					# Which pixel col in window coordinates should current widget be located at?
							  )
							    =>
							    0;

							assign_sites_to_grid_widget_row (widget ! rest,  row,  col)
							    =>
							    {   wide = list::nth (col_wides, widget.col_number);
								high = list::nth (row_highs, widget.row_number);

								site = { row, col, wide, high };

								assign_sites_to_all_widgets				# This widget may be a nested ROW, COL, GRID, SCROALLBLE_VIEW (...) so assign sites recursively within it.
								  (
								    site,
								    subwindow_or_view,
								    widget.rg_widget
								  );

								assign_sites_to_grid_widget_row (rest, row, col + wide);

								high;
							    };
						    end;
						end;
					end;
				    end;
			    };

			gt::RG_SCROLLPORT r
			    =>
			    {
				r.site    :=  site;							# Remember this widget's assigned site on its home pixmap.
				#


				# Now to do recursive layout of this view:

				subwidget	=  *r.rg_widget;
				pixmap_size	=   r.pixmap.size;

				subsite = { row  => 0,  high => pixmap_size.high,					# Initially we have the entire subwindow_or_view for the view available for assignment to widgets.
					    col  => 0,  wide => pixmap_size.wide
					  };

				subpixmap = gt::SCROLLABLE_INFO r;

				assign_sites_to_all_widgets (subsite, subpixmap, subwidget);				# Recursively lay out the view's widget-tree on its pixmap.
			    };

			gt::RG_TABPORT r
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
############
# This is untested, immature code.  'pixmap_size' is inherited from
# scrollport, where it makes sense, since the size of the scrollable
# area visible through the viewport bears no necessary relation to
# scrollport.
#
# But the tabs all have the same size at the tabport, so either we
# should resize our pixmaps dynamically once we know what our site
# size is, or else maybe we shouldn't have per-tab pixmaps at all,
# and should just render our widgets directly onto our parent.
#
# This needs thought.  For now, the below code is at least a placeholder
# and a zero-th order approximation to what we need.
#
# The following magic constant is also buried in
#     pg_widget__to__rg_widget/do_pg_widget/gt::RG_TABPORT in src/lib/x-kit/widget/gui/guiboss-imp.pkg
############
				pixmap_size = { high => 400, wide => 800 }:	g2d::Size;

				apply   do_tab   r.tabs									# 
					#										# 
					where
					    fun do_tab (subpixmap: gt::Tabbable_Info)
						=
						{   subpixmap ->  { rg_widget => subwidget, pixmap => view_pixmap, ... };

						    # Now to do recursive layout of this view:
						    #
						    subsite = { row  => 0,  high => pixmap_size.high,			# Initially we have the entire subwindow_or_view for the view available for assignment to widgets.
								col  => 0,  wide => pixmap_size.wide
							      };

						    subpixmap =  gt::TABBABLE_INFO subpixmap;

						    assign_sites_to_all_widgets (subsite, subpixmap, subwidget);	# Recursively lay out the view's widget-tree on its pixmap.
						};
					end;
			    };

			gt::RG_FRAME r
			    =>
			    {
# XXX QUERO FIXME Here we're ignoring r.frame_widget.cooked_hints and r.widget.cooked_hints. (Compare to RG_ROW/RG_COL.) Can this be right?
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
				assign_sites_to_all_widgets (site, subwindow_or_view, r.frame_widget);			# Assign full site to frame_widget, which will almost always be   src/lib/x-kit/widget/leaf/frame.pkg

				indent = 9;										# This is intended to be    outer_margin_in_pixels + inner_margin_in_pixels + frame_width_in_pixels   from frame.pkg.
															# I have not yet worked out a way to actually pass that value through to here. XXX SUCKO FIXME
															# In practice I do not foresee using non-default values for those parameters any time soon, so this is not too pressing.

				indented_site =  g2d::box::make_nested_box (site, indent);				# This is the window area reserved for the widgets we're framing.

				assign_sites_to_all_widgets (indented_site, subwindow_or_view, r.widget);		# Recursively lay out the framed widgets. We expect r.widget to typically be a ROW, COL or GRID compound widget.
			    };

			gt::RG_WIDGET (r as { guiboss_to_gadget, ... })
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
				#
				space_to_gui.note_widget_site
				  {
				    id			=>  guiboss_to_gadget.id,
				    subwindow_or_view	=>  subwindow_or_view,
				    site
				  };
			    };

			gt::RG_OBJECTSPACE r
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
msg = sprintf "do_re_site_widget_tree/pass2/OBJECTSPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			    };
			gt::RG_SPRITESPACE r
			    =>
			    {
				r.site    :=  site;									# Remember this widget's assigned site on its home pixmap.
msg = sprintf "do_re_site_widget_tree/pass2/SPRITESPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			    };

			gt::RG_NULL_WIDGET /* r */
			    =>
			    ();
		    esac;	
    end;


	fun shut_down_widgetspace_imp ({ endstate_oneshot, options, ... }: Runstate)
	    =
	    {	case endstate_oneshot											# Pass our state back to guiboss to allow later impnet restart without state loss.
		    #
		    NULL	=> ();
		    THE oneshot =>  put_in_oneshot (oneshot, options);							# 
		esac;

		thread_exit { success => TRUE };									# Will not return.	
	    };

	fun run   ( widgetspace_q:	Widgetspace_Q,									# 
		    #
		    runstate as
		    {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Widgetspace_State,								# State which is preserved across imp shutdown/restart cycles.
		      options:		List(gt::Widgetspace_Option),
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun,									# We shut down the microthread when this fires.
		      endstate_oneshot:	Null_Or(Oneshot_Maildrop(gt::Widgetspace_Arg))					# When end_gun fires we save our state in this and exit.
		    }
		  )
	    =
	    {
		loop ();
	    }
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                           ==>  shut_down_label_imp'),
			    (take_from_mailqueue' widgetspace_q ==>  do_label_plea)
			];

			loop ();
		    }	
		    where
			fun do_label_plea thunk
			    =
			    thunk runstate;

			fun shut_down_label_imp' ()
			    =
			    shut_down_widgetspace_imp  runstate;
		    end;
	    end;	



	fun startup   (id: Id,   reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()				# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		guiboss_to_widgetspace	= { id, do_something, pass_something, re_site_widget_tree, pass_re_siting_done_flag, die	};

		exports =  { guiboss_to_widgetspace };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from widgetspace_egg'().

		(take_from_mailslot  me_slot)										# Imports from widgetspace_egg'().
		    ->
		    { me, options, imports, run_gun', end_gun', endstate_oneshot, callback };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		case callback   THE callback => callback guiboss_to_widgetspace;					# Tell application how to contact us.
				NULL	     => ();
		esac;

		run (widgetspace_q, { me, options, imports, to, end_gun', endstate_oneshot });				# Will not return.
	    }
	    where
		widgetspace_q     =  make_mailqueue (get_current_microthread()):  Widgetspace_Q;


		#######################################################################
		# widget_to_guiboss fns:

#		fun look_changed (id: Id)										# PUBLIC.
#		    =	
#		    put_in_mailqueue  (widgetspace_q,
#			#
#			\\ ({ imports, ... }: Runstate)
#			    =
#			    ()												# Demonstrate use of imports.
#		    );


		#######################################################################
		# guiboss_to_widgetspace fns:

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (widgetspace_q,
			#
			\\ ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );

		fun re_site_widget_tree											# PUBLIC.
		        ( site:			g2d::Box,
			  subwindow_info:	gt::Subwindow_Data,
			  rg_widget:		gt::Rg_Widget,
			  widget_layout_hints:	im::Map( gt::Widget_Layout_Hint )
			)
		    =
		    put_in_mailqueue  (widgetspace_q,
			#
			\\ ({ me, imports, ... }: Runstate)
			    =
			    {	do_re_site_widget_tree
				  (
				    site,
				    rg_widget,
				    imports.space_to_gui,
				    subwindow_info,
				    widget_layout_hints
				  );
			    }
		    );

		fun pass_re_siting_done_flag										# PUBLIC.
		        ( site:			g2d::Box,
			  subwindow_info:	gt::Subwindow_Data,
			  rg_widget:		gt::Rg_Widget,
			  widget_layout_hints:	im::Map( gt::Widget_Layout_Hint )
			)
			(replyqueue:		Replyqueue)
			(reply_handler: 	Void -> Void)
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (widgetspace_q,
			    #
			    \\ ({ me, imports, ... }: Runstate)
				=
				{
				    do_re_site_widget_tree
				      (
					site,
					rg_widget,
					imports.space_to_gui,
					subwindow_info,
					widget_layout_hints
				      );

				    put_in_oneshot (reply_oneshot, ());							# Signal that widget re-siting is now complete.
				}
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (widgetspace_q,
			    #
			    \\ ({ me, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun die ()
		    =
		    put_in_mailqueue  (widgetspace_q,
			#
			\\ (runstate: Runstate)
			    =
			    shut_down_widgetspace_imp  runstate
		    );

	    end;


	fun process_options
	    (
	      options:		List(gt::Widgetspace_Option),
	      #
	      { name,
		id,
		callback
	      }
	    )
	    =
	    {   my_name		=  REF name;
		my_id		=  REF id;
		my_callback	=  REF callback;
		#
		apply  do_option  options
		where
		    fun do_option (gt::PS_MICROTHREAD_NAME	n) =>  my_name		:=  n;
			do_option (gt::PS_ID			i) =>  my_id		:=  i;
			do_option (gt::PS_CALLBACK 		c) =>  my_callback	:=  THE c;
		    end;
		end;

		{ name     =>  *my_name,
		  id 	   =>  *my_id,
		  callback =>  *my_callback
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_widgetspace_egg
		(options:		List(gt::Widgetspace_Option))							# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
		(endstate_oneshot:	Null_Or(Oneshot_Maildrop(gt::Widgetspace_Arg)))					# When end_gun fires we save our state in this and exit.
	    =
	    {   (process_options
                  ( options,
		  #
		    { name	=> "widgetspace",
		      id	=>  id_zero,
		      callback	=>  NULL
		    } 
		) )
		    ->
		    { name,
		      id, 
		      callback
		    };

		my (id, options)
		    =
		    if (id_to_int(id) == 0)
			id = issue_unique_id();										# Allocate unique imp id.
			(id, gt::PS_ID id ! options);									# Make our id stable across stop/restart cycles.
		    else
			(id, options);
		    fi;

		me = { id, state => REF () };

		\\ () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  (id, reply_oneshot));					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				( imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, options, imports, run_gun', end_gun', endstate_oneshot, callback });
				};

			    (exports, phase3);
			};
	    };

    };

end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
