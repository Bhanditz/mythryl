## bounce-space-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package bs  =  bounce_space;				# bounce_space			is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
    tracefile   =  "widget-unit-test.trace.log";
herein

##############################################################
# WE SHOULD MAYBE EVENTUALLY RENAME THIS TO opengl_space_imp #
# But since we have zero opengl support at the moment, that  #
# would currently seem like overselling. :-)                 #
##############################################################

    package bounce_space_imp
    :       Bounce_Space_Imp											# Bounce_Space_Imp		is from   src/lib/x-kit/widget/space/bounce/bounce-space-imp.api
    {
	#
	include bounce_space;											# bounce_space			is from   src/lib/x-kit/widget/shape/label-shape.pkg
	#
	Bounce_Space_State = Ref( Void );									# Holds all nonephemeral mutable state maintained by shape.

	Imports = {												# Ports we use, provided by other imps.
		    int_sink: Int -> Void
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Bounce_Space_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun,
			      callback:	Null_Or(Bounce_Space -> Void)
			    }
                          );

	Exports	= {												# Ports we provide for use by other imps.
		    bounce_space:	Bounce_Space
		  };

	Bounce_Space_Option
	  #
	  = MICROTHREAD_NAME 		String									# 
	  | BOUNCE_SPACE_CALLBACK	Bounce_Space -> Void
	  ;


	Bounce_Space_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Bounce_Space_Arg =  List(Bounce_Space_Option);								# Currently no required component.

	Runstate =  {												# These values will be statically globally visible throughout the code body for the imp.
		      me:		Bounce_Space_State,							# State which is preserved across imp shutdown/restart cycles.
		      imports:		Imports,								# Imps to which we send requests.
		      to:		Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun									# We shut down the microthread when this fires.
		    };

	Label_Q    = Mailqueue( Runstate -> Void );

	fun run ( label_q:		Label_Q,								# 
		  #
		  runstate as
		  {												# These values will be statically globally visible throughout the code body for the imp.
		    me:			Bounce_Space_State,							# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,								# Imps to which we send requests.
		    to:			Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun									# We shut down the microthread when this fires.
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()											# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                         ==>  shut_down_label_imp'),
			    (take_from_mailqueue' label_q    ==>  do_label_plea)
			];

			loop ();
		    }	
		    where
			fun do_label_plea thunk
			    =
			    thunk runstate;

			fun shut_down_label_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	

	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		bounce_space = { do_something, pass_something };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { bounce_space }));						# Return value from bounce_space_egg'().

		(take_from_mailslot  me_slot)										# Imports from bounce_space_egg'().
		    ->
		    { me, imports, run_gun', end_gun', callback };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		case callback   THE callback => callback bounce_space;							# Tell application how to contact us.
				NULL	     => ();
		esac;

		run (label_q, { me, imports, to, end_gun' });								# Will not return.
	    }
	    where
		label_q     =  make_mailqueue (get_current_microthread()):  Label_Q;

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (label_q,
			#
			fn ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (label_q,
			    #
			    fn ({ me, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;

	fun process_options
	    (
	      options: List(Bounce_Space_Option),
	      #
	      { name,
		callback
	      }
	    )
	    =
	    {   my_name   	= REF name;
		my_callback	= REF callback;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME      n)  =>  my_name	:=  n;
			do_option (BOUNCE_SPACE_CALLBACK c)  =>  my_callback	:=  THE c;
		    end;
		end;

		{ name     => *my_name,
		  callback => *my_callback
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_bounce_space_egg (options: List(Bounce_Space_Option))							# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {
		(process_options ( options,
				   #
				   { name	=> "bounce_space",
				     callback	=> NULL
				   } 
		)		 )
		    ->
		    { name,
		      callback
		    };
	
		me = REF ();

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun', callback });
				};

			    (exports, phase3);
			};
	    };

	fun pprint_bounce_space_arg
	      (pp:			pp::Prettyprint_Mill)
	      (bounce_space_arg:	Bounce_Space_Arg)
	    =
	    {
		bounce_space_arg
		    ->
		    (
			options:	List(Bounce_Space_Option)
		    );

		pp.box {.
		    pp.txt "[ ";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name	=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			BOUNCE_SPACE_CALLBACK _	=>  {  pp.lit          "BOUNCE_SPACE_CALLBACK (callback)";	};
		    esac;
	    end;


	fun pprint_bounce_space_layout_hint
	      #	
	      (pp:		pp::Prettyprint_Mill)
	      (layout_hint:	bs::Bounce_Space_Layout_Hint)
	    =
	    case layout_hint
		#
		WEIGHT w =>    pp.lit (sprintf  "WEIGHT %g"  w);
	    esac;
    };

end;
