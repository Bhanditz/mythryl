## packed-state-imp-g.pkg
#
# Generic version of a packed-space widget state-imp
# for simple types like Float and String.
#
# 'Packed' space is the one with conventional GUI
# layout, as opposed to 'canvas' space which is
# intended for free-layout drawing, painting,
# drag-and-drop placement etc, and 'bounce' space,
# intended for game-engine sorts of stuff.
#
# Packed-space widgets are split into two halves, the
# state-imp and the look-imp -- in Model View
# Controller terms, the state-imp is the Model and the
# look-imp combines the View and Controller.
#
# The state-imp is responsible for maintaining the
# core state of a widget;  the look-imp is then
# responsible for displaying it.
#
# In general client app code talks to the state-imps while
# the guiboss-imp talks to the look-imps.
#
# Each state-imp notifies its look-imp when it changes state;
# the look-imp interprets mouse and keyboard input and tells
# the state-imp what new state value to assume.
#
# See also:
#
#     src/lib/x-kit/widget/space/packed/packed-space-imp.pkg
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    # This generic is invoked in:
    #
    #     src/lib/x-kit/widget/space/packed/float-state-imp.pkg
    #     src/lib/x-kit/widget/space/packed/string-state-imp.pkg
    #
    generic package packed_state_imp_g (
	#
	# Our argument package mainly specializes us to one						# Is there a better way of formulating this generic?
	# particular type of Value, such as String or Float:
	#
	package c2s:	Client_To_Packed_State;								# client_to_float_state		is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
        												# client_to_string_state	is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
	    												# Client_To_Packed_State	is from   src/lib/x-kit/widget/space/packed/client-to-packed-state.api
    )
    :
    api {
	#
	Exports	= {											# Ports we provide for use by other imps.
		    client_to_state:		c2s::Client_To_State
		  };

	Imports = {											# Ports we use, provided by other imps.
                    state_sink:			c2s::Value -> Void					# To notify our look-imp of value changes.  Just like CHANGE_CALLBACK, but we want our look-imp link to be mandatory. 
                  };

	Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

        make_egg
	    :
	    c2s::Make_Arg
         -> Null_Or(Oneshot_Maildrop(c2s::Make_Arg))						# The optional oneshot is used by guiboss to capture final state of imp when endgun fires.
	 -> Egg
	    ;

	pprint_make_arg:	pp::Prettyprint_Mill -> c2s::Make_Arg -> Void;
    }

    {
	include package c2s;													# 
	#
	Imports = {													# Ports we use, provided by other imps.
                    state_sink: Value -> Void
		  };

	State_State
	  =
	  { id:			Id,
	    state:		Ref( Needs ),
	    is_bad_value:	Is_Bad_Value
	  };

	Exports	= {													# Ports we provide for use by other imps.
		    client_to_state:	Client_To_State
		  };

	Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Me_Slot = Mailslot( { imports:			Imports,
			      me:			State_State,
			      options:			List(Option),
			      run_gun':			Run_Gun,
			      end_gun':			End_Gun,
			      endstate_oneshot:		Null_Or(Oneshot_Maildrop(Make_Arg)),				# When end_gun fires we save our state in this and exit.
			      change_callbacks:		Ref(List(Value -> Void)),
			      client_to_state_callbacks:	List(Client_To_State -> Void)
			    }
			  );

	Runstate = {													# These values will be statically globally visible throughout the code body for the imp.
		    me:				State_State,								# State which is preserved across imp shutdown/restart cycles.
		    options:			List(Option),
		    imports:			Imports,								# Imps to which we send requests.
		    to:				Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':			End_Gun,								# We shut down the microthread when this fires.
		    endstate_oneshot:		Null_Or(Oneshot_Maildrop(Make_Arg)),					# When end_gun fires we save our state in this and exit.
		    change_callbacks:		Ref(List(Value -> Void))						#
		   };

	Slider_Q    = Mailqueue( Runstate -> Void );

	fun run (
		  slider_q:			Slider_Q,								# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			        State_State,								# State which is preserved across imp shutdown/restart cycles.
		    options:			List(Option),
		    imports:			Imports,								# Imps to which we send requests.
		    to:				Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':			End_Gun,								# We shut down the microthread when this fires.
		    endstate_oneshot:		Null_Or(Oneshot_Maildrop(Make_Arg)),					# When end_gun fires we save our state in this and exit.
		    change_callbacks:		Ref(List(Value -> Void))						#
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_slider_imp'),
			    (take_from_mailqueue' slider_q   ==>  do_slider_plea)
			];

			loop ();
		    }	
		    where
			fun do_slider_plea  thunk
			    =
			    thunk runstate;


			fun shut_down_slider_imp' ()
			    =
			    {
				case endstate_oneshot									# Pass our state back to guiboss to allow later impnet restart without state loss.
				    #
				    NULL	=> ();
				    THE oneshot => put_in_oneshot (oneshot, (*me.state, options));			# 
				esac;

				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (id: Id,  reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()				# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		client_to_state	=  { id, subscribe_to_changes, pass_value, set_value };
		exports		=  { client_to_state };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from slider_egg'().

		(take_from_mailslot  me_slot)										# Imports from slider_egg'().
		    ->
		    { me, options, imports,
		      run_gun', end_gun',
		      endstate_oneshot, change_callbacks, client_to_state_callbacks
		    };

		apply   {. #callback client_to_state;   }   client_to_state_callbacks;					# Pass our port to everyone who asked for it.
		apply   {. #callback (*me.state).value; }           *change_callbacks;					# Pass our initial state to everyone who is change-subscribed.

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (slider_q, { me, options, imports, to, end_gun', endstate_oneshot, change_callbacks });		# Will not return.
	    }
	    where
		slider_q     =  make_mailqueue (get_current_microthread()):  Slider_Q;


		fun subscribe_to_changes   callback									# PUBLIC.
		    =	
		    put_in_mailqueue  (slider_q,
			#
			\\ ({ change_callbacks, ... }: Runstate)
			    =
			    change_callbacks :=  callback ! *change_callbacks
		    );


		fun pass_value  (replyqueue: Replyqueue)  (reply_handler: Value -> Void)			# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Value );
			#
			put_in_mailqueue  (slider_q,
			    #
			    \\ ({ me, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, (*me.state).value)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };


		fun set_value (f: Value)										# PUBLIC.
		    =	
		    put_in_mailqueue  (slider_q,
			#
			\\ ({ me as { id, state => REF { value }, is_bad_value }, change_callbacks, ... }: Runstate)
			    =
			    {
#				f = if (f < min)	min;								# Make sure our new value is not below min end of slider.
#				    else		f;
#				    fi;
#
#				f = if (f > max)	max;								# Make sure our new value is not above max end of slider.
#				    else		f;
#				    fi;

				case (is_bad_value f)
				    #
				    NULL =>
#					if (f != value)		# This won't work if Value == Exception
					{
					    #
					    state = { value => f };
					    me.state := state;								# Note new state of slider.

					    apply   {. #callback f; }   *change_callbacks;				# Tell everyone who cares what our new state is.
					};
#					fi;
				    _ => ();										# For the moment we're ignoring the diagnostic. XXX BUGGO FIXME.
				esac;
			    }
		    );
	    end;


	fun process_options (options: List(Option), { name, id, is_bad_value, change_callbacks, client_to_state_callbacks })
	    =
	    {   my_name		=  REF name;
		my_id		=  REF id;
		#
		my_is_bad_value	=  REF is_bad_value;
		#
		my_change_callbacks		=     change_callbacks;		# Comes with REF pre-installed.
		my_client_to_state_callbacks	= REF client_to_state_callbacks;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME 	  n)  =>  my_name          :=  n;
			do_option (ID                     i) =>   my_id            :=  i;
		        #
			do_option (IS_BAD_VALUE	    	  f)  =>  my_is_bad_value  :=  f;
		        #
			do_option (CHANGE_CALLBACK        c)  =>  my_change_callbacks       :=  c ! *my_change_callbacks;
			do_option (CLIENT_TO_STATE_CALLBACK  c)  =>  my_client_to_state_callbacks :=  c ! *my_client_to_state_callbacks;
		    end;
		end;

		{ name		=>  *my_name,
		  id 		=>  *my_id,
		  #
		  is_bad_value	=>  *my_is_bad_value,
		  #
		  change_callbacks	  =>   my_change_callbacks,
		  client_to_state_callbacks  =>  *my_client_to_state_callbacks
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_egg											# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	        ( needs:	     Needs,
		  options:	List(Option)
		)
		(endstate_oneshot:	 Null_Or(Oneshot_Maildrop(Make_Arg)))						# When end_gun fires we save our state in this and exit.
	    =
	    {   (process_options
		  ( options,
		    { name		=> "float_state",
		      id		=>  id_zero,
		      #	
		      is_bad_value	=>  \\ (v: Value) = NULL,
		      #	
		      change_callbacks		=> REF([]),
		      client_to_state_callbacks	=> []
		    }
		) )
		  ->
		  { name,
		    id, 
		    #
		    is_bad_value,
		    #
		    change_callbacks,
		    client_to_state_callbacks
		  };
	
		my (id, options)
		    =
		    if (id_to_int(id) == 0)
			id = issue_unique_id();									# Allocate unique imp id.
nb {. sprintf "issue_unique_id returned %d -- packed-state-imp-g.pkg" (id_to_int id); };
			(id, ID id ! options);										# Make our id stable across stop/restart cycles.
		    else
			(id, options);
		    fi;

		me =  { id,
                        state =>  REF { value => needs.value },
			is_bad_value
		      };

		\\ () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  (id, reply_oneshot));					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{   change_callbacks :=  imports.state_sink ! *change_callbacks;
				    #
				    put_in_mailslot  (me_slot, { me, options, imports, run_gun', end_gun', endstate_oneshot, change_callbacks, client_to_state_callbacks });
				};

			    (exports, phase3);
			};
	    };


	fun pprint_make_arg
	      (pp:		pp::Prettyprint_Mill)
	      (make_arg:	Make_Arg)
	    =
	    {
		make_arg ->     ( { value }:	Needs,
				   options:		List(Option)
			        );

		pp.box {.
		    pp.lit (sprintf "({ value => %s }" (c2s::value_to_string value));
		    pp.endlit ",";
		    pp.txt " [";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name	=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			ID               id	=>  {  pp.lit (sprintf "ID %d" (id_to_int id)         );	};
			IS_BAD_VALUE f	        =>  {  pp.lit (sprintf "IS_BAD_VALUE => {...}");		};
			CHANGE_CALLBACK _	=>  {  pp.lit          "CHANGE_CALLBACK (callback)";		};
			CLIENT_TO_STATE_CALLBACK _	=>  {  pp.lit          "CLIENT_TO_STATE_CALLBACK (callback)";	};
		    esac;
	    end;
    };

end;
