## packed-space-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package w2x =  widget_to_xserver;				# widget_to_xserver		is from   src/lib/x-kit/xclient/src/window/widget-to-xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package e2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg

    package b2l =  bounce_to_look;				# bounce_to_look		is from   src/lib/x-kit/widget/space/bounce/bounce-to-look.pkg
    package c2l =  canvas_to_look;				# canvas_to_look		is from   src/lib/x-kit/widget/space/canvas/canvas-to-look.pkg
    package p2l =  packed_to_look;				# packed_to_look		is from   src/lib/x-kit/widget/space/packed/packed-to-look.pkg

    package l2p =  look_to_packed;				# look_to_packed		is from   src/lib/x-kit/widget/space/packed/look-to-packed.pkg
    package s2g =  space_to_gui;				# space_to_gui			is from   src/lib/x-kit/widget/gui/space-to-gui.pkg

#   package c2f =  client_to_float_state;			# client_to_float_state		is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
#   package c2s =  client_to_string_state;			# client_to_string_state	is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package bs  =  ball_state;					# ball_state			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state.pkg
    package ns  =  node_state;					# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg

    package bl  =  ball_look;					# ball_look			is from   src/lib/x-kit/widget/theme/bounce/look/ball-look.pkg
    package nl  =  node_look;					# node_look			is from   src/lib/x-kit/widget/theme/canvas/look/node-look.pkg
    package ll  =  packed_look;					# packed_look			is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg

    package gt  =  gui_tree;					# gui_tree			is from   src/lib/x-kit/widget/gui/gui-tree.pkg

    package blh =  bounce_space_layout_hint;			# bounce_space_layout_hint	is from   src/lib/x-kit/widget/space/bounce/bounce-space-layout-hint.pkg
    package clh =  canvas_space_layout_hint;			# canvas_space_layout_hint	is from   src/lib/x-kit/widget/space/canvas/canvas-space-layout-hint.pkg
    package plh =  packed_space_layout_hint;			# packed_space_layout_hint	is from   src/lib/x-kit/widget/space/packed/packed-space-layout-hint.pkg

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package ps  =  packed_space;				# packed_space			is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";

    nb = log::note_on_stderr;					# log				is from   src/lib/std/src/log.pkg
herein

    package packed_space_imp
    :       Packed_Space_Imp												# Packed_Space_Imp		is from   src/lib/x-kit/widget/space/packed/packed-space-imp.api
    {
	#
	include packed_space;												# packed_space			is from   src/lib/x-kit/widget/shape/label-shape.pkg
	#
	Packed_Space_State												# Holds all nonephemeral mutable state maintained by shape.
	  =
	  { id:		Id,
	    state:	Ref( Void )
	  };

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:			Int -> Void,
		    space_to_gui:		s2g::Space_To_Gui							# Our channel to	src/lib/x-kit/widget/gui/gui-boss-imp.pkg
		  };

	Exports	= {													# Ports we provide for use by other imps.
		    look_to_packed:		l2p::Look_To_Packed,
		    packed_space:		Packed_Space
		  };

	Packed_Space_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Me_Slot = Mailslot  ( { imports:		Imports,
				me:			Packed_Space_State,
				options:		List(Packed_Space_Option),
				run_gun':		Run_Gun,
				end_gun':		End_Gun,
				endstate_oneshot:	Null_Or(Oneshot_Maildrop(ps::Packed_Space_Arg)),		# When end_gun fires we save our state in this and exit.
				callback:		Null_Or(Packed_Space -> Void)
                              }
                            );

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Packed_Space_State,								# State which is preserved across imp shutdown/restart cycles.
		      options:		List(Packed_Space_Option),
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun,									# We shut down the microthread when this fires.
		      endstate_oneshot:	Null_Or(Oneshot_Maildrop(ps::Packed_Space_Arg))					# When end_gun fires we save our state in this and exit.
		    };

	Packedspace_Q    = Mailqueue( Runstate -> Void );


	fun re_site_packed_widget_tree
	        ( site:			xg::Box,
		  packed_widget:	gt::Packed_Widget,
		  space_to_gui:		s2g::Space_To_Gui
		)
	    =
	    {
		#
nb {. sprintf "re_site_packed_widget_tree/TOP ({ row => %d, col => %d, high => %d, wide => %d }) -- packed-space-imp.pkg"  site.row  site.col  site.high  site.wide; };

		fun widget_share
		      ( widget:		gt::Packed_Widget,
			hints:		gt::Packed_Layout_Hints,
			raw_hints:	List(plh::Packed_Space_Layout_Hint)
		      )
		    =
		    hints.share;

		case packed_widget
		    #
		    gt::ROW r
			=>
			{
			    total_share  =  float::sum (map widget_share r.widgets);					# Sum SHARE values of all widgets. Each widget will get widget.share/total_share of available pixels.
			    site -> { row, col, high, wide };
			    total_pixels =  float::from_int wide;
			    assign_widget_sites (r.widgets, col)
			    where
				fun assign_widget_sites ([], col)
					=>
					();

				    assign_widget_sites ((widget, hints: gt::Packed_Layout_Hints, raw_hints) ! rest, col)
					=>
					{   pixels_for_this_widget =  float::floor ((hints.share/total_share) * total_pixels);
					    site = { row, col, high, wide => pixels_for_this_widget };
					    re_site_packed_widget_tree (site, widget, space_to_gui);
					    assign_widget_sites  (rest, col + pixels_for_this_widget);
					};
				end;
			    end;
			};

		    gt::COL r
			=>
			{
			    total_share = float::sum (map widget_share r.widgets);					# Sum SHARE values of all widgets. Each widget will get widget.share/total_share of available pixels.
			    site -> { row, col, high, wide };
			    total_pixels =  float::from_int high;
			    assign_widget_sites (r.widgets, row)
			    where
				fun assign_widget_sites ([], row)
					=>
					();

				    assign_widget_sites ((widget, hints: gt::Packed_Layout_Hints, raw_hints) ! rest, row)
					=>
					{   pixels_for_this_widget =  float::floor ((hints.share/total_share) * total_pixels);
					    site = { row, col, wide, high => pixels_for_this_widget };
					    re_site_packed_widget_tree (site, widget, space_to_gui);
					    assign_widget_sites  (rest, row + pixels_for_this_widget);
					};
				end;
			    end;
			};
	
		    gt::BOOL	r =>	{   space_to_gui.note_widget_site { id => r.look.id, site };	};
		    gt::STRING	r =>	{   space_to_gui.note_widget_site { id => r.look.id, site };	};
		    gt::FLOAT	r =>	{   space_to_gui.note_widget_site { id => r.look.id, site };	};
	
		    gt::CANVAS_SPACE r
			=>
			{
msg = sprintf "re_site_packed_widget_tree/BOUNCE_SPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			};
		    gt::BOUNCE_SPACE r
			=>
			{
msg = sprintf "re_site_packed_widget_tree/BOUNCE_SPACE unimplemented";
nb {. msg; };
raise exception FAIL msg;
			};
	
		    gt::NULL_PACKED_WIDGET /* r */
			=>
			();
		esac;



nb {. sprintf "re_site_packed_widget_tree/BOT ({ row => %d, col => %d, high => %d, wide => %d }) -- packed-space-imp.pkg"  site.row  site.col  site.high  site.wide; };
	    };


	fun run   ( packedspace_q:	Packedspace_Q,									# 
		    #
		    runstate as
		    {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Packed_Space_State,								# State which is preserved across imp shutdown/restart cycles.
		      options:		List(Packed_Space_Option),
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun,									# We shut down the microthread when this fires.
		      endstate_oneshot:	Null_Or(Oneshot_Maildrop(ps::Packed_Space_Arg))					# When end_gun fires we save our state in this and exit.
		    }
		  )
	    =
	    {
nb {. sprintf "run() entering loop() -- packed-space-imp.pkg"; };
		loop ();
	    }
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                     ==>  shut_down_label_imp'),
			    (take_from_mailqueue' packedspace_q ==>  do_label_plea)
			];

			loop ();
		    }	
		    where
			fun do_label_plea thunk
			    =
			    thunk runstate;

			fun shut_down_label_imp' ()
			    =
			    {
				case endstate_oneshot									# Pass our state back to gui-boss to allow later impnet restart without state loss.
				    #
				    NULL	=> ();
				    THE oneshot =>  put_in_oneshot (oneshot, options)		;			# 
				esac;

				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	



	fun startup   (id: Id,   reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()				# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		look_to_packed	= { id, look_changed						};
		packed_space	= { id, do_something, pass_something, pass_re_siting_done_flag	};

		exports =  { look_to_packed, packed_space };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from packed_space_egg'().

		(take_from_mailslot  me_slot)										# Imports from packed_space_egg'().
		    ->
		    { me, options, imports, run_gun', end_gun', endstate_oneshot, callback };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		case callback   THE callback => callback packed_space;							# Tell application how to contact us.
				NULL	     => ();
		esac;

		run (packedspace_q, { me, options, imports, to, end_gun', endstate_oneshot });				# Will not return.
	    }
	    where
		packedspace_q     =  make_mailqueue (get_current_microthread()):  Packedspace_Q;


		#######################################################################
		# look_to_packed fns:

		fun look_changed (id: Id)										# PUBLIC.
		    =	
		    put_in_mailqueue  (packedspace_q,
			#
			fn ({ imports, ... }: Runstate)
			    =
			    ()												# Demonstrate use of imports.
		    );


		#######################################################################
		# packed_space fns:

		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (packedspace_q,
			#
			fn ({ me, imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );

		fun pass_re_siting_done_flag										# PUBLIC.
		        ( site:			xg::Box,
			  packed_widget:	gt::Packed_Widget
			)
			(replyqueue:		Replyqueue)
			(reply_handler: 	Void -> Void)
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Void );
			#
			put_in_mailqueue  (packedspace_q,
			    #
			    fn ({ me, imports, ... }: Runstate)
				=
				{
nb {. sprintf "pass_re_siting_done_flag( { row => %d, col => %d, high => %d, wide => %d }) calling re_site_packed_widget -- packed-space-imp.pkg"  site.row  site.col  site.high  site.wide; };
				    re_site_packed_widget_tree (site, packed_widget, imports.space_to_gui);
nb {. sprintf "pass_re_siting_done_flag( { row => %d, col => %d, high => %d, wide => %d }) called  re_site_packed_widget -- packed-space-imp.pkg"  site.row  site.col  site.high  site.wide; };

nb {. sprintf "pass_re_siting_done_flag( { row => %d, col => %d, high => %d, wide => %d }) signaling done without doing squat. -- packed-space-imp.pkg"  site.row  site.col  site.high  site.wide; };
				    put_in_oneshot (reply_oneshot, ());							# Signal that widget re-siting is now complete.
				}
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (packedspace_q,
			    #
			    fn ({ me, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


	fun process_options
	    (
	      options: List(Packed_Space_Option),
	      #
	      { name,
		id,
		callback
	      }
	    )
	    =
	    {   my_name		=  REF name;
		my_id		=  REF id;
		my_callback	=  REF callback;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME      n)  =>  my_name	:=  n;
			do_option (ID                    i) =>   my_id		:=  i;
			do_option (PACKED_SPACE_CALLBACK c)  =>  my_callback	:=  THE c;
		    end;
		end;

		{ name     =>  *my_name,
		  id 	   =>  *my_id,
		  callback =>  *my_callback
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_packed_space_egg
		(options:		List(Packed_Space_Option))							# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
		(endstate_oneshot:	Null_Or(Oneshot_Maildrop(ps::Packed_Space_Arg)))				# When end_gun fires we save our state in this and exit.
	    =
	    {   (process_options
                  ( options,
		  #
		    { name	=> "packed_space",
		      id	=>  id_zero,
		      callback	=>  NULL
		    } 
		) )
		    ->
		    { name,
		      id, 
		      callback
		    };

		my (id, options)
		    =
		    if (id_to_int(id) == 0)
			id = issue_unique_id();										# Allocate unique imp id.
			(id, ID id ! options);										# Make our id stable across stop/restart cycles.
		    else
			(id, options);
		    fi;

		me = { id, state => REF () };

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  (id, reply_oneshot));					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				( imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, options, imports, run_gun', end_gun', endstate_oneshot, callback });
				};

			    (exports, phase3);
			};
	    };

	fun pprint_packed_space_arg
	      (pp:			pp::Prettyprint_Mill)
	      (packed_space_arg:	ps::Packed_Space_Arg)
	    =
	    {
		packed_space_arg
		    ->
		    (
			options:	List(Packed_Space_Option)
		    );

		pp.box {.
		    pp.txt "[ ";
		    pp::seq {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			MICROTHREAD_NAME name	=>  {  pp.lit (sprintf "MICROTHREAD_NAME \"%s\"" name);		};
			ID               id	=>  {  pp.lit (sprintf "ID %d" (id_to_int id)         );	};
			PACKED_SPACE_CALLBACK _	=>  {  pp.lit          "PACKED_SPACE_CALLBACK (callback)";	};
		    esac;
	    end;


	fun pprint_packed_space_layout_hint
	      #	
	      (pp:		pp::Prettyprint_Mill)
	      (layout_hint:	plh::Packed_Space_Layout_Hint)
	    =
	    case layout_hint
		#
		plh::SHARE s =>    pp.lit (sprintf  "SHARE %g"  s);
	    esac;
    };

end;
