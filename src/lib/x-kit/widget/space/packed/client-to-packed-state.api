## client-to-packed-state.api

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package threadkit;									# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein

    # This api is referenced in:
    #
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/packed-look-imp-for-x-g.pkg
    #     src/lib/x-kit/widget/space/packed/packed-state-imp-g.pkg
    #
    api Client_To_Packed_State {
	#
#	eqtype Value;										# This will be Float or String or such in practice -- it essentially a parameter.
	Value;											# This will be Float or String or such in practice -- it essentially a parameter.

	Is_Bad_Value =  Value -> Null_Or( (Void -> String, Null_Or (Void -> Value) ));		# Given a Value, return NULL if it is valid, else a thunk returning a diagnostic
												# string explaining why it is not, plus optionally thunk computing 'nearby' valid value.
												# usable in place of the invalid value.

	Client_To_State										# Port used by client code to communicate with state imp.
	  =
	  { id:				Id,							# Unique id to facilitate storing ball_state instances in indexed datastructures like red-black trees.
	    #
	    set_value:			Value -> Void,
	    pass_value:	  Replyqueue -> (Value -> Void) -> Void,
	    subscribe_to_changes:	(Value -> Void) -> Void
	  };

	Needs
	  =
	  { value:			Value
	  };

	Option
	  #
	  = MICROTHREAD_NAME		String							# 
	  | ID				Id							# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	  | IS_BAD_VALUE		Is_Bad_Value
	  | CHANGE_CALLBACK		Value -> Void						# We'll call each of these callbacks each time our value changes.
	  | CLIENT_TO_STATE_CALLBACK	Client_To_State -> Void					# Client code registers this callback to get a port to us once we start up.
	  ;

	Make_Arg = (Needs, List(Option));

	value_to_string: Value -> String;
    };
end;
