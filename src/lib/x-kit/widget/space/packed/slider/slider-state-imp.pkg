## slider-state-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package slider_state_imp
    :       Slider_State_Imp												# Slider_State_Imp		is from   src/lib/x-kit/widget/space/packed/slider/slider-state-imp.api
    {
	include slider_state;												# slider_state			is from   src/lib/x-kit/widget/space/packed/slider/slider-state.pkg
	#
	Slider_State_State
	    =
	    { min_value:	Float,
	      max_value:	Float,
	      value:	   Ref( Float )											# Holds all nonephemeral mutable state maintained by state.
	    };

#	Imports =  pwe::Imports;
#	Exports =  pwe::Exports;

	Imports = {													# Ports we use, provided by other imps.
		    int_sink: Int -> Void
		  };

	Me_Slot = Mailslot( { imports:			Imports,
			      me:			Slider_State_State,
			      run_gun':			Run_Gun,
			      end_gun':			End_Gun,
			      changed_value_callbacks:	Ref(List(Float -> Void)),
			      slider_state_callbacks:	List(Slider_State -> Void)
			    }
			  );

	Slider_Plea =  SET_VALUE			Float
		    |  PASS_VALUE			Oneshot_Maildrop( Float )
		    |  SUBSCRIBE_TO_VALUE_CHANGES	(Float -> Void)
		    ;
	Slider_Q    = Mailqueue( Slider_Plea );


	Exports	= {													# Ports we provide for use by other imps.
		    slider_state:	Slider_State
		  };


	Option  = MICROTHREAD_NAME		String									# 
		| MAX_VALUE			Float
		| MIN_VALUE			Float
		| INITIAL_VALUE			Float
		| CHANGED_VALUE_CALLBACK	Float -> Void
		| SLIDER_STATE_CALLBACK		Slider_State -> Void
		;

	State   = { min: Float,
		    max: Float,
		    val: Float
		  };

	Slider_Arg = (State, List(Option));

	Slider_State_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:				Slider_State_State,							# State which is preserved across imp shutdown/restart cycles.
		    imports:			Imports,								# Imps to which we send requests.
		    to:				Replyqueue,								# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':			End_Gun,								# We shut down the microthread when this fires.
		    slider_q:			Slider_Q,								# 
		    changed_value_callbacks:	Ref(List(Float -> Void))						#
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_slider_imp'),
			    (take_from_mailqueue' slider_q   ==>  do_slider_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_slider_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };


			fun do_slider_plea  (SET_VALUE f)
			        =>
				{   oldval = *me.value;
				    #
				    f = if (f < me.min_value)   me.min_value;						# Make sure our new value is not below min end of slider.
					else			f;
					fi;

				    f = if (f > me.max_value)	me.max_value;						# Make sure our new value is not above max end of slider.
					else			f;
					fi;


				    if (f != oldval)
					#
					me.value := f;									# Note new value of slider.

					apply  (fn watcher = watcher(f))  *changed_value_callbacks;			# Tell everyone who cares what our new value is.
				    fi;	
				};

			    do_slider_plea  (PASS_VALUE reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, *me.value);
				};

			    do_slider_plea  (SUBSCRIBE_TO_VALUE_CHANGES sink)
			        =>
				{
				    changed_value_callbacks :=  sink ! *changed_value_callbacks;
				};

			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		slider_state	=  { set_value, pass_value, subscribe_to_value_changes };
		exports		=  { slider_state };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from slider_egg'().

		(take_from_mailslot  me_slot)										# Imports from slider_egg'().
		    ->
		    { me, imports, run_gun', end_gun', changed_value_callbacks, slider_state_callbacks };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, slider_q, imports, to, end_gun', changed_value_callbacks };					# Will not return.
	    }
	    where
		slider_q     =  make_mailqueue (get_current_microthread()):  Slider_Q;

		fun set_value (f: Float)										# PUBLIC.
		    =	
		    put_in_mailqueue  (slider_q, SET_VALUE f);


		fun pass_value  (replyqueue: Replyqueue)  (reply_handler: Float -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Float );
			#
			put_in_mailqueue  (slider_q, PASS_VALUE reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun subscribe_to_value_changes (sink: Float -> Void)							# PUBLIC.
		    =	
		    put_in_mailqueue  (slider_q, SUBSCRIBE_TO_VALUE_CHANGES sink);


	    end;


	fun process_options (options: List(Option), { name, min_value, max_value, initial_value, changed_value_callbacks, slider_state_callbacks })
	    =
	    {   my_name		= REF name;
		#
		my_min_value	= REF min_value;
		my_max_value	= REF max_value;
		my_initial_value= REF initial_value;
		#
		my_changed_value_callbacks	=     changed_value_callbacks;		# Comes with REF pre-installed.
		my_slider_state_callbacks	= REF slider_state_callbacks;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME 	  n)  =>  my_name := n;
		        #
			do_option (MIN_VALUE	    	  f)  =>  my_min_value     := f;
			do_option (MAX_VALUE	    	  f)  =>  my_max_value     := f;
			do_option (INITIAL_VALUE    	  f)  =>  my_initial_value := f;
		        #
			do_option (CHANGED_VALUE_CALLBACK c)  =>  my_changed_value_callbacks :=  c ! *my_changed_value_callbacks;
			do_option ( SLIDER_STATE_CALLBACK c)  =>   my_slider_state_callbacks :=  c !  *my_slider_state_callbacks;
		    end;
		end;

		{ name		=>  *my_name,
		  #
		  min_value	=>  *my_min_value,
		  max_value	=>  *my_max_value,
		  initial_value	=>  *my_initial_value,
		  #
		  changed_value_callbacks  =>   my_changed_value_callbacks,
		   slider_state_callbacks  =>   *my_slider_state_callbacks
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_slider_state_egg											# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	        ( state:	State,
		  options:	List(Option)
		)
		(endstate_oneshot:	 Oneshot_Maildrop(Slider_Arg))							# When end_gun fires we save our state in this and exit.
	    =
	    {   (process_options
		  ( options,
		    { name		=> "slider_state",
		      #	
		      min_value		=> state.min,
		      max_value		=> state.max,
		      initial_value	=> state.val,
		      #	
		      changed_value_callbacks	=> REF([]),
		      slider_state_callbacks	=> []
		    }
		) )
		  ->
		  { name,
		    min_value,
		    max_value,
		    initial_value,
		    changed_value_callbacks,
		    slider_state_callbacks
		  };
# XXX BUGGO FIXME need to pass endstate_oneshot on.
	
		me =  { min_value,
			max_value,
			value => REF initial_value
		      };

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    phase3
				=
				fn  ( imports:	Imports,								# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				      run_gun':	Run_Gun,	
				      end_gun':	End_Gun
				    )
				    =
				    {
					put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun', changed_value_callbacks, slider_state_callbacks });
				    };

			    (exports, phase3);
			};
	    };
    };

end;
