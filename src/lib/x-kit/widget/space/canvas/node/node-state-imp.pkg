## node-state-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    package pwe =  canvas_widget_egg;				# canvas_widget_egg		is from   src/lib/x-kit/widget/space/canvas/canvas-widget-egg.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package node_state_imp
    :       Node_State_Imp												# Node_State_Imp		is from   src/lib/x-kit/widget/space/canvas/node/node-state-imp.api
    {
	include node_state;												# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg
	#
	Imports = {													# Ports we use, provided by other imps.
                    state_sink: { text: String } -> Void
		  };

	Node_State_Needs  = { text: String };

	Node_Plea   =  SUBSCRIBE_TO_CHANGES			  Node_State_Needs -> Void
		    |  PASS_STATE		Oneshot_Maildrop( Node_State_Needs )
		    |  SET_TEXT			String
		    ;
	Node_Q    = Mailqueue( Node_Plea );


	Exports	= {													# Ports we provide for use by other imps.
		    node_state:	Node_State
		  };

	Node_State_Option
	    #
	    =  MICROTHREAD_NAME 	String										# 
	    |  CHANGE_CALLBACK		Node_State_Needs -> Void							# We'll call each of these callbacks each time our value changes.
	    |  NODE_STATE_CALLBACK	Node_State       -> Void							# Client code registers this callback to get a port to us once we start up.
	    ;

	Node_Arg = (Node_State_Needs, List(Node_State_Option));

	Node_State_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Node_State_State = Ref( Node_State_Needs );									# Holds all nonephemeral mutable state maintained by state.

	Me_Slot = Mailslot( { imports:			Imports,
			      me:			Node_State_State,
			      options:			List(Node_State_Option),
			      run_gun':			Run_Gun,
			      end_gun':			End_Gun,
			      endstate_oneshot:		Null_Or(Oneshot_Maildrop(Node_Arg)),					# When end_gun fires we save our state in this and exit.
			      change_callbacks:		Ref(List(Node_State_Needs -> Void)),
			      node_state_callbacks:	List(Node_State -> Void)
			    }
			  );

	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Node_State_State,								# State which is preserved across imp shutdown/restart cycles.
		    options:		List(Node_State_Option),
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    node_q:		Node_Q,										# 
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    endstate_oneshot:	Null_Or(Oneshot_Maildrop(Node_Arg)),						# When end_gun fires we save our state in this and exit.
		    change_callbacks:	Ref(List(Node_State_Needs -> Void))						# We call these each time our state changes.
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                    ==>  shut_down_node_imp'),
			    (take_from_mailqueue' node_q ==>  do_node_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_node_imp' ()
			    =
			    {
				case endstate_oneshot									# Pass our state back to gui-boss to allow later impnet restart without state loss.
				    #
				    NULL	=> ();
				    THE oneshot => put_in_oneshot (oneshot, (*me, options));				# 
				esac;

				thread_exit { success => TRUE };							# Will not return.	
			    };


			fun set_text string
			    =
			    {   me := { text => string };								# Change the text we display.
				#
				apply   {. #callback *me; }   *change_callbacks;					# Update all listeners with our new state.
			    };	


			fun do_node_plea  (SUBSCRIBE_TO_CHANGES callback)
				=>
				change_callbacks :=  callback ! *change_callbacks;

			    do_node_plea  (PASS_STATE reply_oneshot)
				=>
				put_in_oneshot (reply_oneshot, *me);

			    do_node_plea  (SET_TEXT string)
			        =>
				set_text string;

			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;
		#
		node_state	=  { subscribe_to_changes, pass_state, set_text };
		exports		=  { node_state };

		to		=  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, exports));							# Return value from node_egg'().

		(take_from_mailslot  me_slot)										# Imports from node_egg'().
		    ->
		    { me, options, imports, run_gun', end_gun', endstate_oneshot, change_callbacks, node_state_callbacks };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		apply  {. #callback node_state; }   node_state_callbacks;						# Pass our port to everyone who asked for it.
		apply  {. #callback *me;        }   *change_callbacks;							# Pass our initial state to everyone who is change-subscribed.

		run { me, options, node_q, imports, to, end_gun', endstate_oneshot, change_callbacks };			# Will not return.
	    }
	    where
		node_q     =  make_mailqueue (get_current_microthread()):  Node_Q;


		fun subscribe_to_changes  callback									# PUBLIC.
		    =
		    put_in_mailqueue  (node_q, SUBSCRIBE_TO_CHANGES callback);


		fun pass_state  (replyqueue: Replyqueue)  (reply_handler: Node_State_Needs -> Void)			# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Node_State_Needs );
			#
			put_in_mailqueue  (node_q, PASS_STATE reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };


		fun set_text (string: String)										# PUBLIC.
		    =	
		    put_in_mailqueue  (node_q, SET_TEXT string);


	    end;


	fun process_options (options: List(Node_State_Option), { name, change_callbacks, node_state_callbacks })
	    =
	    {   my_name			= REF name;
		my_change_callbacks	=      change_callbacks;		# Comes with REF pre-installed.
		my_node_state_callbacks	=  REF node_state_callbacks;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME    n) =>   my_name                 :=  n;
			do_option (CHANGE_CALLBACK     c) =>   my_change_callbacks     :=  c ! *my_change_callbacks;
			do_option (NODE_STATE_CALLBACK c) =>   my_node_state_callbacks :=  c ! *my_node_state_callbacks;
		    end;
		end;

		{ name 			=>   *my_name,
		  change_callbacks	=>    my_change_callbacks,
		  node_state_callbacks	=>   *my_node_state_callbacks
		};
	    };

        ##########################################################################################
	# PUBLIC.
	#
	fun make_node_state_egg												# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
		( needs:		     Node_State_Needs,
		  options:		List(Node_State_Option)
		)
		(endstate_oneshot:	Null_Or(Oneshot_Maildrop(Node_Arg)))						# When end_gun fires we save our state in this and exit.
	    =
	    {   (process_options
		  ( options,
		    { name			=>  "node_state",
		      change_callbacks		=>  REF([]),
		      node_state_callbacks	=>  []
		    }
		) )
		    ->
		    { name,
		      change_callbacks,
		      node_state_callbacks
		    };
	
		me = REF needs;

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{  change_callbacks :=  imports.state_sink ! *change_callbacks;
				    #
				    put_in_mailslot  (me_slot, { me, options, imports, run_gun', end_gun', endstate_oneshot, change_callbacks, node_state_callbacks });
				};

			    (exports, phase3);
			};
	    };
    };

end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
