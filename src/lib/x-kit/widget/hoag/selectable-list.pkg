# The following is from p45-50 of 
# REVITALIZING EXENE by Matthew Hoag
# http://mythryl.org/pub/exene/matt-thesis.pdf
#
# selectable-list.sml
#   The Selectable list Widget is a slight modification of the button bar
#    that uses the button abstraction to simulate the selection of one or
#    more items (or buttons) from a list of buttons

stipulate
    include package threadkit;
    #
    package wgt = widget;
herein
    api Selectable_List {

	Selectable_List;

	# Creates a selectable_list widget with items labeled by the supplied strings;
	# a boolean value is also required to identify whether or not the selectable
	# list will operate in "single select" mode; if the mode is set to true, then
	# then only one item from the list can be selected at a time; any type of
	# interaction with the list will result in one and only one selection;
	# otherwise if the mode is set to false, the items in the list may be
	# selected by there different methods:
	#
	#   SINGLE_CLICK: An item will be selected and all of the previously
	#                selected items will become unselected;
	#
	#   SINGLE_CLICK WITH SHIFT: A range of items will be selected starting from
	#                the last click to the present click ADDING to the current selection;
	#
	#   SINGLE_CLICK WITH CNTRL: A item will be toggled from the currently selected list; that
	#                is, if an item is currently selected it will become unselected
	#               and if it is unselected int will become selected;
	#               the widget may be customized using the following resource attributes:
	#
	#    Name		Type	Default		Semantics
	#    --------------------------------------------------------------------------
	#    background		color	white		background color of widget’s window
	#    foreground		color	black		foreground color of widget’s window
	#    selectBackground	color	grey		selected background color of widget’s window
	#    selectForeground	color	white		selected foreground color of widget’s window
	#    font		font	9x15		font of widget’s window
	#    borderWidth	int	NoValue		borderWidth surrounding text
	#    hpad		int	5		horizonal justification for text (includes borderWidth)
	#    vpad		int	0		(pixels) inter-button padding

	selectable_list : (wgt::Root, wgt::View, List(wgt::Arg)) -> (List(String), Bool) -> Selectable_List;


	widget_of:  Selectable_List -> wgt::Widget;				# returns the widget of a selectable list

	selection_event_of: Selectable_List ->  threadkit::Event( List(Int, String));

	# get_selected_strings returns a tuple list of the strings and their corresponding index which
	# are currently selected by the widget; the index is constructed based on the initial
	# order of the supplied string list
        #
	get_selected_strings: Void -> List((Int, String));
    };
end;

stipulate
    include package threadkit;
    #
    package wgt = widget;

    # This is a unique Toggle Button that is not
    # constructed in the Toggle structure it uses
    # a view that was previously unavailable

    package special_text_toggle = toggle_ctrl_g (listview);

    package atr = attributes;
    package tt  = toggle_type;
    package qk  = quark;
    package sv  = sync_var;
#   package wgt = widget;
    package itr = interact;
herein

    package selectable_list {
	#
	attr_hpad = qk::quark "hpad";
	attr_vpad = qk::quark "vpad";

	native_attributes =    [([], attr_vpad, atr::AT_INT, atr::AV_INT 0)];    # attributes used specifically for this widget

	# Attributes used for each individual list item:
	#
	passed_attributes =   [ ([], atr::attr_background, atr::AT_COLOR, atr::AV_STRING "white"),
				([], atr::attr_foreground, atr::AT_COLOR, atr::AV_STRING "black"),
				([], atr::attr_font, atr::AT_Font, atr::AV_STRING "9x15"),
				([], attr_hpad, atr::AT_INT, atr::AV_INT 5),
				([], atr::attr_halign, atr::AT_HAlign,atr::AV_HALIGN wgt::HLEFT),
				([], atr::attr_selectBackground, atr::AT_COLOR, atr::AV_STRING "grey"),
				([], atr::attr_selectForeground, atr::AT_COLOR, atr::AV_STRING "blue")
			      ];


	Clicktype = SINGLE_SELECT | SINGLE_TOGGLE | ADD_MULTI;		# Actions that will modify the selected list.

	# identity for the type and operation of a selectable list
	#
	selectable_list = { widget : wgt::Widget,
			    selection_event : Event (List ((Int, String))),
		   	    get_selected : Void -> List((Int,String))
			  };

	# variable constructor for a selectable list
	#
	fun selectable_list
	      (
		root,
		view as (name, style),
		args
	      )
	      ( names,
		mode
	      )
	    =
	    {
		con_view = (styles::extend_view (name, "selectable-list"), style);					# Modified view such that new wgt::find_attribute will works properly
		#
		attributes = wgt::find_attribute (wgt::attributes(con_view, passed_attributes, []));

		bg = atr::get_color (attributes atr::attr_background);
		fg = atr::get_color (attributes atr::attr_foreground);

		font = atr::get_font(attributes atr::attr_font);

		hpad = atr::get_int(attributes attr_hpad);
		#
		sel_bg = atr::get_color (attributes atr::attr_select_background);
		sel_fg = atr::get_color (attributes atr::attr_select_foreground);
		#
		halign = atr::get_halign (attributes atr::attr_halign);

		native_attributes = wgt::find_attribute (wgt::attributes (con_view, native_attributes, []));

		vpad = atr::get_int (native_attributes attr_vpad);

		pad_glue = box::GLUE { nat = vpad, min = vpad, max = THE vpad };

		fun find_clicktype (tt::TOGGLE (_, THE (tt::BUTTON_UP (mbut, modkeys)))) : Null_Or(Clicktype)		# find_clicktype unrolls the toggletype::Toggle datatype and classifies it as a Clicktype
			=>
			if mode		 		  THE SINGLE_SELECT;
			elif (itr::shift_is_set modkeys)  THE ADD_MULTI;
			elif (itr::cntrl_is_set modkeys)  THE SINGLE_TOGGLE;
			else				  THE SINGLE_SELECT;
			fi;

		    find_clicktype _ => NULL;
		end;

		fun is_toggle (tt::TOGGLE (_,THE(tt::BUTTON_UP _))) => TRUE;						# is_toggle unrolls the toggletype::TOGGLE datatype and determines if there is a BUTTON_UP msg
		    is_toggle _ => FALSE;
		end;

															# Item_Data is the internal representation for each of the labeled toggle buttons
															# each item has a label containing its name, a item which is the event itself and
															# a up_evt which recieves the button click information
		Item_Data = { lab : String,
			      item : tt::Toggle,
			      up_evt :  Event(tt::Toggle_Act)
			    };

		make_item : String -> Item_Data										# make_item given a string constructs an instance of an Item_Data
		    =
		    \\ lab =>
			{     item_args = [ ([], atr::attr_label, atr::AV_STRING lab),
					    ([], atr::attr_background, atr::AV_COLOR bg),
					    ([], atr::attr_foreground, atr::AV_COLOR fg),
					    ([], atr::attr_select_background, atr::AV_COLOR sel_bg),
					    ([], atr::attr_select_foreground, atr::AV_COLOR sel_fg),
					    ([], atr::attr_font, atr::AV_FONT font),
					    ([], atr::attr_halign, atr::AV_HALIGN halign),
					    ([], attr_hpad, atr::AV_INT hpad)
					  ];

			    vtem = special_text_toggle::toggle (root, view, item_args);

			    # The flush_event is currently not used by this widget
			    #
			    (filter_event::filter_event is_toggle (tt::event_of item))
				->
			        (val_event, flush_event);

			    item_data = { lab,
			                  item,
			                  up_evt = val_event
                                        };

			    item_data;
			};

															# items_to_boxes : List(Item_Data) -> List(box::Wbox)
															# takes in a list of items and constructs a vertical list of widgets
		fun items_to_boxes NIL       => NIL;
		    items_to_boxes [ b ]     => [ box::WBOX(tt::widget_of b) ];
		    items_to_boxes (b ! bs)  =>   box::WBOX(tt::widget_of b)  !  pad_glue  !  items_to_boxes bs;
		end;

		data_items =  map make_item names;
		items      =  map .item data_items;
		box        =  box::VT_LEFT(items_to_boxes items);

		layout = box::layout (root, view, args) box;
		widget = box::widget_of layout;

		selection_channel   = channel()
                        : Channel (List((Int, String)));

		request_channel = channel()										# Used to make requests to the server thread.
                                : Channel (sv::Ivar (List(Int)));

															# indexed_data constructs List((Int, Item_Data)) effectively
															# indexing the already constructed data_items
		indexed_data
		    =
		    listpair::zip (make_index (0,data_items), data_items)
		    where
		        fun make_index (num, []) => [];
			    make_index (num, item ! tl) => [num] @ make_index (num+1, tl);
			end;
		    end;

															# do_single_toggle: ((selections: List(Int), index: Int) -> List(Int)
															# do_single_toggle adds the index to selList if it is not present
															# and removes it if it is present
		fun do_single_toggle (selections, index)
		    =
		    if (list::exists (\\ x = x==index) selections)   list::filter (\\ x = not(x=index)) selections);
		    else                                             [index] @ selections;
		    fi;

		fun do_single_select  index										# do_single_select: (index: Int)-> List(Int)
		    =
		    [ index ];

		fun make_multilist (NULL, index)									# make_multilist: (last: Null_Or(Int), index : Int) -> List(Int)
			=>
			[ index ]
			;
		    make_multilist (THE(last), index)
			=>
			if (index >= last)	make_index index last;
			else			make_index last index;
			fi
			where
			    fun make_index top bottom
				=
				if (top >= bottom)   (make_index (top-1) bottom) @ [ top ];
				else                 [];
				fi;
			end;
		end;

		fun do_add_multi (last, selections, index)								# do_add_multi: (last: Null_Or(Int), selections: (List(Int), index: Int)) -> List(Int)
		    =
		    selections @ (add_unique_items_to_list (make_multilist (last, index)))
		    where
			fun add_unique_items_to_list []
				=>
				[]
				;
			    add_unique_items_to_list (h ! tl)
				=>
				if (list::exists (\\ x = x==h) selections)   add_unique_items_to_list tl;
				else                                         [ h ] @ (add_unique_items_to_list tl);
				fi;
			end;
		    end;

		stipulate
		    greater_than = \\ (x, y) = x > y;									# greater_than : (Int, Int) -> Bool 
		herein
		    fun do_action (NULL,last, selections, index)							# do_action: (Null_Or(Clicktype), Null_Or(Int), List(Int), Int) -> List(Int)
			    =>
			    selections;

			do_action (THE(SINGLE_TOGGLE), last, selections, index)
			    =>
			    list_mergesort::sort greater_than (do_single_toggle (selections, index))

			do_action (THE(SINGLE_SELECT), last, selections,index)
			    =
			    do_single_select (index);

			do_action (THE(ADD_MULTI), last, selections, index)
			    =
			    list_mergesort::sort greater_than (do_add_multi (last,selections, index));
		    end;
		end;

		fun get_indexed_item num
		    =
		    grab indexed_data
		    where
			fun grab [] => [];
			    #
			    grab ((index, {lab, ... }: Item_Data) ! tl)
				=>
				if (num == index)     [ (num,lab) ];
				else                  grab tl;
				fi;
			end;
		    end;

		fun get_indexed_items [] => [];
		    #
		    get_indexed_items (hd ! tl)
			=
			(get_indexed_item hd) @ (get_indexed_items tl);
		end;

		fun un_cover_click_and_serv (last,selections, serv,(index,{up_evt, ...}: Item_Data))		# un_cover_click_and_serv (Null_Or(Int), List(Int), ( ))
		    =
		    [ up_evt ==>
			      \\ click =
				{
				    selections’ =  do_action( (find_clicktype click), last, selections, index);
				    #
				    evt = send_event (selection_channel, get_indexed_items(selections’));

				    fun loop ()
					=
					select [  evt ==>   \\ () =  serv  (THE index)  selections’
					       ];

				    loop ();     # serv (THE(index)) selections’
				};

		    ];

		fun make_select (last, selections, serv, [])
			=>
			[]
			;
		    make_select (last, selections, serv, indexed_data ! tl)
			=
			(un_cover_click_and_serv (last, selections, serv, indexed_data))
			@
			(make_select (last,selections,serv,tl));
		end;

		fun sync_button_state_with_list selections
		    =
		    sync_list  indexed_data
		    where
			fun sync_list [] =>  ();
			    #
			    sync_list ((index,{item,...}:Item_Data)::tl)
				=>
				if (list::exists (\\ x =  x == index) selections)
				    #
				     tt::set_state(item,TRUE );		sync_list tl;
				else tt::set_state(item,FALSE);		sync_list tl;
				fi;
			end;
		    end;

		fun server last selections
		    =
		    {   sync_button_state_with_list  selections;
			#
			select ( [ recieve_event request_channel
					==>
					\\ ivar => { sv::iput(ivar, selections);
				                     server last selections;
                                                   }
                                 ]
				 @
				 (make_select (last, selections, server, indexed_data));
			      );
		    };

		fun get_selected_strings ()
		    =
		    {	ivar  =  sv::ivar ()
			      :  sv::Ivar (List(Int));

			send (request_channel, ivar);

			get_indexed_items (sv::iget ivar);
		    };

		spawn (\\ () = server NULL []);

		{ widget,
		  selection_event => recieve_event selection_channel,
		  get_selected    => get_selected_strings
		}
	    };											# fun selectable_list

	fun widget_of            (s: Selectable_List) =   s.widget;
	fun selection_event_of   (s: Selectable_List) =   s.selection_event;
	fun get_selected_strings (s: Selectable_List) =   s.get_selected ();
    };												# package selectable_list
end;