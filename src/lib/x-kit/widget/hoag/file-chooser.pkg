# file-chooser.pkg
#
# Matthew Hoag implemented an eXene File Chooser
# widget for his 2007 KSU thesis "Revitalizing eXene"
#     http://mythryl.org/pub/exene/matt-thesis.pdf
# -- see pages 50-61.

stipulate
    package wgt = widget;
herein
    api File_Chooser {

	type filechooser
	# a filechooser widget allows you to browse through the file system and
	# perform operations on that file system. It is always in an active mode.
	# It requires a root, view, and args list as well as a button that will
	# provide the primary operation for the file chooser and a boolean value
	# that specifies the selection mode (true - Single Selection
	# false - Multiple Selection).
	# The widget may be customized using the following resource attributes:
	# Name Type Default Semantics
	#  -----------------------------------------------------------------------
	# background color pink background color of widget’s window
	# foreground color black foreground color of widget’s window
	# hdir string OS.FileSys.getDir() Home Directory of the Widget

	file_chooser: (wgt::Root, wgt::View, List(wgt::Arg)) -> (button::Button, Bool) -> File_Chooser;

	widget_of: File_Chooser -> wgt::Widget;				# returns widget of a filechooser

	get_current_directory:  File_Chooser -> String;			# get_current_directory returns the current Directory of the filechooser

	get_current_text: File_Chooser -> String;			# get_current_text returns the current text (the selected files and anything that  the user has typed in

	get_current_selection:  File_Chooser -> List((String,Bool));	# getCurrentSelection returns a list of the currently selected files and with a corresponding directory identifier. i.e. TRUE -> directory  FALSE -> file

	set_directory:  File_Chooser -> String -> Void;			# set_directory is a function that takes in a string and attempts to  sets the filechooser’s current directory to that string

	set_error:  File_Chooser -> String -> Void;			# set_error is a function that takes in a string and sets the text of the error label to the string
    };
end;

stipulate
    include package threadkit;
    include package widget;
    include package geometry;
    include package interact;
    #
    package wgt = widget;
    package qk  = quark;
    package atr	= attributes;
    package sv  = syncvar;
herein

    package file_chooser {
	#
	attr_hdir = qk::quark "hdir";

	home_dir = os::filesys.getdir();

	attrs = [ ([], atr::attr_background, atr::at_color, atr::av_string "white"),
		  ([], atr::attr_foreground, atr::at_color, atr::av_string "black"),
		  ([], attr_hDir, atr::AT_Str, atr::av_string home_dir)
		];

	Set_Request = SET_DIRECTORY String
	            | SET_ERROR     String
		    ;

														# Internal state consists of a directory list, a file list, the current
														# SelectableList and the current navigational directory
														#
	State =  { dir_list: 		List(String),
		   file_list: 		List(String),
		   selectable_list: 	selectable_list::Selectable_List,
		   current_dir:		String
		 };

														# The filechooser type consist of a widget, and 5 functions that allow for
														# informational retrieval and state modification:
														#
	Filechooser = { widget:			wgt::Widget,
			current_directory:	Void -> String,
			current_text:		Void -> String,
			current_selection:	Void -> List((String,Bool)),
			set_directory:		String -> Void,
			set_error:		String -> Void
		      };

	fun file_chooser (root, (name, style), args) (action_button, selection_mode)
	    =
	    {   view  =  (styles::extend_view (name, "file-chooser"), style);
		attrs =  wgt::find_attribute(wgt::attrs(view,attrs,[]));
		bg    =  atr::get_color(attrs atr::attr_background);
		fg    =  atr::get_color(attrs atr::attr_foreground);
		hdir  =  atr::get_string(attrs attr_hdir);

		focus_manager = focus_manager::make_focus_manager ();

		#########################################################################
		# Widget Construction
		#
		dirpath = text_view::text_view ( root, view, [([], atr::attr_maxlines, atr::av_int 1),
						   ([], atr::attr_rows, atr::av_int 1)]
						)
						("");

		text_view::set_show_scrollbars dirpath FALSE;

		dirpathff = focus_frame::focusframe (root, view, [])
				   ((text_view::widget_of dirpath),(text_view::focusable_of dirpath));

		# focus_manager::add_focusable focus_manager (focus_frame::focusable_of dirpathff);

		update_args =   [ ([], atr::attr_label,atr::av_string "Update"),
				  ([], atr::attr_border_width,atr::av_int 5)
				];

		update_button = button::text_button(root,view, update_args);
		update_event = button::event_of update_button;

		home_args =  [([], atr::attr_label, atr::av_string " Home "),
				([], atr::attr_border_width,atr::av_int 5)];

		home_button = button::text_button(root, view, home_args);
		home_event = button::event_of home_button;

		prev_args =  [([], atr::attr_label, atr::av_string "Parent"),
				 ([], atr::attr_border_width,atr::av_int 5)
				];

		prev_button = button::text_button(root, view, prev_args);
		prev_event = button::event_of prev_button;

															# The "error label" is actually a button with no border width.
															# it was implemented as such to circumvent the problems of rigidity
															# caused by the label widget
															#
		error_args =   [ ([], atr::attr_label, atr::av_string "Error Message Output"),
				  ([], atr::attr_border_width,atr::av_int 0),
				  ([], atr::attr_halign, atr::av_halign wgt::hleft)
				];

		error_label = button::text_button(root, view, error_args);
		list_layout = box::layout (root, view, []) (box::vertical_left[box::glue{nat=100,min=100,max=THE(100)}]);

		scroll_selectable_list = scroll_layout::make_scrollbar_layout root
					    { widget = (box::widget_of list_layout),
					      hsb = NULL,
					      vsb = THE {sb=(scrollbar::widget_of (scrollbar::make_vertical_scrollbar root {color=NULL, sz=16})), pad=0, left=FALSE}
					    };

		scroll_layout = box::layout (root, view, [])  (box::vertical_left[box::wbox(scroll_layout::widget_of scroll_selectable_list)]);

		file_list = text_view::text_view (root, view, [([], atr::attr_maxlines, atr::av_int 1),    ([], atr::attr_rows, atr::av_int 1)])
				("");

		text_view::set_show_scrollbars file_list FALSE;

		file_listff = focus_frame::focusframe (root, view, [])    ((text_view::widget_of file_list),(text_view::focusable_of file_list));

		# val _ = focus_manager::add_focusable focus_manager (focus_frame::focusable_of file_listff)
		#
		divider_args =    [ ([], atr::attr_color, atr::AV_STRING "black"),
				    ([], atr::ATTR_WIDTH, atr::AV_INT 3)
				  ];

															# horizontal_divider: Void -> wgt::widget
															#  used to make all of the horizonal divider in the widget construction
															#
		fun horizontal_divider ()
		    =
		    divider::horizontal_divider (root, view, divider_args);

		padglue = box::glue { nat = 10, min = 10, max = THE(10) };

		top_section = box::layout (root, view, [])
					  ( box::horizontal_center[ box::wbox (focus_frame::widget_of dirpathff),			padglue,
								    box::wbox (shape::make_rigid (button::widget_of update_button)),	padglue,
								    box::wbox (shape::make_rigid (button::widget_of home_button)),	padglue,
								    box::wbox (shape::make_rigid (button::widget_of prev_button))
								  ]
					  );

		middle_section = box::layout (root, view, [])     (box::horizontal_center[box::wbox(box::widget_of(scroll_layout))]);

		bottom_section = box::layout (root, view, [])     ( box::horizontal_center[box::wbox(focus_frame::widget_of file_listff),
								    padglue,
								    box::wbox(shape::make_rigid(button::widget_of action_button))]
								  );

		error_section = box::layout (root, view, [])
				            (box::vertical_left [  box::wbox (button::widget_of error_label)  ] );

		padglue = box::glue { nat = 4,min = 4, max = THE(4) };

		overall = box::layout   (root, view, [])
					( box::vertical_left
						[ padglue,  box::wbox (box::widget_of top_section),
						  padglue,  box::wbox 					(horizontal_divider ()),
						  padglue,  box::wbox (box::widget_of middle_section),
						  padglue,  box::wbox 					(horizontal_divider ()),
						  padglue,  box::wbox (box::widget_of bottom_section),
						  padglue,  box::wbox 					(horizontal_divider ()),
						  padglue,  box::wbox (box::widget_of error_section)
						]
					);

		widget = (box::widget_of(overall));

		### end widget construction ###
		#################################



															# remove_and_create_error_label: string -> Void
															#  remove_and_create_error_label stands for remove and create error label
															#  since it is impossible to change the text of a button remove_and_create_error_label
															#  recreates the button with a new message
		fun remove_and_create_error_label msg
		    =
		    {   error_args =   [([], atr::attr_label, atr::av_string msg),
					([], atr::attr_border_width,atr::av_int 0),
					([], atr::attr_halign, atr::av_halign wgt::hleft)];

			error_label = button::text_button(root, view, error_args);

			( box::delete error_section [0];
			  box::insert error_section (0, [box::wbox(button::widget_of error_label)]);
			  box::mapBox error_section [0]
			);
		    };

															#  remove_and_create_directories_and_files: state -> state
															#  remove_and_create_directories_and_files stands for remove and create Directorys and Files
															#  remove_and_create_directories_and_files takes in the internal state and attempts to open and read
															#  the current_dir. Once that is complete its reconstructs the
															#  selectable list and remounts it on the list layout
		fun remove_and_create_directories_and_files (state: State)
		    =
		    create_selectable_list file_and_directory_list
		    where
		     	os::file_system::chdir  state.current_dir;
			#
			directory_stream = os::file_system::open_directory state.current_dir;

			file_and_directory_list
			    =
			    create_list [] []
			    where
				fun create_list directory_list file_list
				    =
				    case (os::file_system::read_directory(directory_stream))
					#
					NULL => (directory_list, file_list);
					#
					THE file => if (os::file_system::is_directory(file))
							 (create_list (directory_list @ [ file ]) file_list);
						    else (create_list directory_list (file_list @ [ file ] ));
						    fi;
				    esac;
			    end;

																# create_selectable_list: (List(String), List(String)) -> State
			fun create_selectable_list (directory_list, file_list)
			    =
			    {	os::file_system::close_directory directory_stream;
				#
				selectable_list
				    =
				    selectable_list::selectable_list
					(root,view,[])
					(directory_list @ file_list,  selection_mode);

				# scroll_selectable_list
				#        =
				#        scroll_layout::make_scrollbar_layout root
				#	        { widget = (selectable_list::widget_of selectable_list),
				#	          hsb = NULL,
				#	          vsb = THE {  sb=( scrollbar::widget_of
				#	                              ( scrollbar::make_vertical_scrollbar root
				#	                                  { color=NULL,
				#	                                    sz=16}
				#	                           )  ),
				#	                        pad=0,
				#	                        left=FALSE
				#	                    }
				#	        }
				#

				# fun sleep n = cml::sync(cml::timeOutEvt(Time.fromMilliseconds n))

				if (not (list::null( state.dir_list @ state.file_list)))
				    #
				    box::delete list_layout [0];
				    #
				    # sleep 100
				   
				fi;	


				box::insert list_layout (0, [box::wbox(selectable_list::widget_of selectable_list)]);
				box::map_box list_layout [0];

				remove_and_create_error_label "Error Message Output";

				text_view::set_string dirpath (#current_dir state);
				text_view::set_string file_list "";

				{ current_dir     =>  state.current_dir,
				  dir_list        =>  directory_list,
				  file_list       =>  file_list,
				  selectable_list =>  selectable_list
				};

			    };
		    end;

		get_selection_channel	= channel ()
					: Chan(sv::Ivar(List((String,Bool))));						# channel for getting the selection from the selectable list

		get_directory_channel	= channel ()    								# channel for getting the current directory from the state
					: (string sv::ivar) chan;

		get_text_channel	= channel ()									# channel for getting the current text from the text edit widget
					: Chan(vs::Ivar(String));

		set_request_channel	= channel ()									# channel for setting the directory and setting the error message
					: Chan(Set_Request);

															# loop: state -> Void
															# main loop
															#
		fun loop (state:state)
		    =
		    {	os::file_system::chdir  hdir;
			#
			parent_directory =  os::pathget_parent (os::path::to_unix_path state.current_dir);

			update_directory = text_view::get_string dirpath;

			selection_event = selectable_list::selection_event_of  state.selectable_list;

																		# function used to extract the file/directory names and identify their corresponding types
			fun extract ((x,m) ! tl)
				=>
				([(m,os::file_system::is_directory ((state.current_dir ) ^ "/" ^ m))] @ (extract tl))
				;
			    extract [] => [];
			end;

																# Handle the press of the home button
																# change the current directory to the home directory
			fun handle_home (button::BUTTON_UP _)
				=>
				loop (remove_and_create_directories_and_files state’)
				where
				    state’ = { current_dir => hdir,
					       dir_list =>  state.dir_list,
					       file_list =>  state.file_list,
					       selectable_list =>  state.selectable_list
					     };

				end
				;
			    handle_home _ =>  loop state;
			end;

																# Handle the press of the parent button
																# attempts to change the directory to the parent directory
																# failure to do so raises an error message
			fun handle_parent (button::BUTTON_UP _)
				=>
				{	state’ =  { current_dir     =>  parent_directory,
						dir_list        =>  state.dir_list,
						file_list       =>  state.file_list,
						selectable_list =>  state.selectable_list 
					      };

				    loop (remove_and_create_directories_and_files state’);
				}
				except os::SYSTEM_ERROR (msg1, msg2)
					     =
					     { remove_and_create_error_label msg1;
					       loop state;
					     };

			   handle_parent _ =>   loop state;
			end;

																# Handle the press of the update button
																# attempts to change the directory to the text in the dirpath
																# failure to do so raises an error message
			fun handle_update (button::BUTTON_UP _)
			    =
			    {
				state’ = { current_dir     =>  update_directory,
					   dir_list        =>  state.dir_list ,
					   file_list       =>  state.file_list,
					   selectable_list =>  state.selectable_list 
					 };

				loop (remove_and_create_directories_and_files state’);
			    }
			    except os::SYSTEM_ERROR (msg1,msg2)
				      =
				      {  remove_and_create_error_label msg1;
					 loop state;
				      };


			   handle_update _ = loop state;
			end;

																# handle a selection made on the selectable list
			fun handle_select selection
			    =
			    {   # unpack:(int*string) list -> string
				# unpack constructs a string of the list of
				# files selected and set them as the text of
				# the file_list widget

				fun unpack [] => "";
				    unpack ((_,hd)::[]) => hd;
				    unpack ((_,hd)::tl) => hd ^ ", " ^ (unpack tl);
				end;

				sel = unpack selection;

				text_view::set_string file_list sel;

				loop state;
			    };


			fun handle_change_directory name					# Called nowhere?
			    =
			    {	state’ = {  current_dir     =>  name,
					    dir_list        =>  state.dir_list,
					    file_list       =>  state.file_list,
					    selectable_list =>  state.selectable_list
					 };

				loop (remove_and_create_directories_and_files state’);
			    }
			    except os::SYSTEM_ERROR (msg1, msg2)
			        =
				{   remove_and_create_error_label msg1;
				    #
				    loop state;
			        };


			fun handle_get_selection ivar
			    =
			    {   sv::iput(ivar, extract (selectable_list::get_selected_list state.selectable_list));
				#
				loop state;
			    };

			fun handle_get_directory ivar
			    =
			    {   sv::iput (ivar, state.current_dir);
				#
			        loop state;
			    };

			fun handle_get_text ivar
			    =
			    {   sv::iput(ivar,(text_view::get_string file_list));
				#
				loop state;
			    };

			fun handle_set_request req
			    =
			    case req 
				#
				SET_DIRECTORY x
				    =>
				    {	state’ = { current_dir     =>  x,
						   dir_list        =>  state.dir_list ,
						   file_list       =>  state.file_list ,
						   selectable_list =>  state.selectable_list 
						 };

					loop (remove_and_create_directories_and_files state’);
				    }
				    except os::SYSTEM_ERROR (msg1,msg2)
					=
					{   remove_and_create_error_label msg1;
					    #
					    loop state;
					};


				SET_ERROR x
				    =>
				    {   remove_and_create_error_label x;
					#
					loop state;
				    }
			    esac;


			select  [ home_event      ==> handle_home,
				  prev_event      ==> handle_parent,
				  update_event    ==> handle_update,
				  selection_event ==> handle_select,
				   #
				  receive_event get_directory_channel ==> handle_get_directory,
				  receive_event get_text_channel      ==> handle_get_text,
				  receive_event get_selection_channel ==> handle_get_selection,
				  receive_event set_request_channel   ==> handle_set_request
				];
		    };									# fun loop

		fun get_current_directory ()
		    =
		    {	ivar  = sv::ivar ()
                              : sv::Ivar(String);

			send(get_directory_channel, ivar);

			sv::iget ivar;
		    };

		fun get_current_text ()
		    =
		    {	ivar = sv::ivar ();
			     : sv::Ivar(String); 

			send (get_text_channel, ivar);

			sv::iget ivar;
		    };

		fun get_current_selection ()
		    =
		    {
			ivar    = sv::ivar ()
			        : sv::Ivar (List ((String, Bool)));

			send (get_selection_channel, ivar);

			(sv::iget ivar);
		    };

		fun set_directory s
		    =
		    send (set_request_channel, (SET_DIRECTORY s));

		fun set_error s
		    =
		    send (set_request_channel, (SET_ERROR s));
	    
		spawn (
		    \\ () = loop ( remove_and_create_directories_and_files
                                      {
					current_dir     => hdir,
				        dir_list        => [],
				        file_list       => [],
				        selectable_list => selectable_list::selectable_list
							      (root, view, [])
							      ([], FALSE)
				      }
				  )
		);

		{ widget,
		  current_directory => get_current_directory,
		  current_text      => get_current_text,
		  current_selection => get_current_selection,
		  set_directory,
		  set_error
		};
	    };							# fun file_chooser

	fun widget_of             (f: Filechooser) =  f.widget;
	fun get_current_directory (f: Filechooser) =  f.current_directory ();
	fun get_current_text      (f: Filechooser) =  f.current_text ();
	fun get_current_selection (f: Filechooser) =  f.current_selection ();
	fun set_directory         (f: Filechooser) =  f.set_directory;
	fun set_error             (f: Filechooser) =  f.set_error;

    };
end;

# Appendix E
# File Chooser Demo source code
#
# Matt Hoag, Kansas State University.
#
# Based on basicwin.sml, (C) 1990 J.H. Reppy; and goodbye.sml, (C) 1990 AT&T.
#
stipulate
    include threadkit;
    #
    package exb = exene_base;
    package sty = styles;
    package atr = attributes;
herein

    package filechooser_cemo
    : api {
	doit : (Null_Or(String), List(String)) -> os::process::Status;
	main : List((String, String)) -> os::process::Status;
    }
    =
    {

	# Set up the option spec table.
	#
	opt_spec = [ (sty::OPT_NAMED("help"),         "-help",   sty::OPT_NOARG("on"),  atr::AT_BOOL),
		    (sty::OPT_NAMED("help"),         "-nohelp", sty::OPT_NOARG("off"), atr::AT_BOOL),
		    (sty::OPT_NAMED("res"),          "-res",    sty::OPT_RESARG,       atr::AT_STRING),
		    (sty::OPT_NAMED("skip"),         "-skip",   sty::OPT_SKIPARG,      atr::AT_STRING),
		    (sty::OPT_NAMED("ign"),          "-ignore", sty::OPT_SKIPLINE,     atr::AT_STRING),
		    (sty::OPT_RESSPEC("*background"), "-bg",    sty::OPT_SEPARG,       atr::AT_STRING),
		    (sty::OPT_RESSPEC("*foreground"), "-fg",    sty::OPT_SEPARG,       atr::AT_STRING),
		    (sty::OPT_RESSPEC("*borderColor"),"-bc",    sty::OPT_SEPARG,       atr::AT_STRING)
		  ];

	# Set up application resource defaults.
	#
	app_resources =  [ "*background: white",
			   "*foreground: black"
			 ];

	fun init (nullor_display, args)
	    =
	    {
		root = widget::make_root(get_display::get_display nullor_display)
		       except
			   exb::BAD_ADDRESS s
				=
				{  text_io::print s;
				   run_cml::shutdown os::process::FAILURE;
				};

															# Parse the command line arguments using the option spec table.
															#
		(widget::parse_command opt_spec args)
		    ->
		    (nullor_db, unargs);

															# Get the value of a named argument.
															# Note that in this case we let the last argument (the head of the returned list)
															# override any previous arguments.
		help = case (widget::maybe_find_named nullor_db (styles::OPT_NAMED("help")) root)
			       #
			       [] => FALSE # application must supply default here.
			      | attributes::AV_Bool(b)::_ => b # let the last argument override.
			   esac;

															# Create a style from the application default resource table.
		app_style = widget::style_from_strings(root,app_resources)
			    except
				styles::BAD_SPEC (n,s)
				     =
				     { text_io::print "bad resource specification: ";
				       text_io::print(int::to_string n);
				       text_io::print (":" ^ s ^ "\n");
				       widget::delete_root root;
                                       run_cml::shutdown os::process::FAILURE;
				     };

															# Create a style from the properties stored by xrdb.
		xrd_style = widget::style_from_xrdb(root)
			    except
				styles::BAD_SPEC (n,s)
				    =
				    {  text_io::print "bad resource specification: ";
				       text_io::print(int::to_string n);
				       text_io::print (":"^s^"\n");
				       widget::delete_root root;
				       run_cml::shutdown os::process::FAILURE;
				    };

															# Create a style from the resource options in the option db.
		arg_style = widget::style_from_opt_db(root,nullor_db)
			    except
				styles::BAD_SPEC (n,s)
				    =
				    {  text_io::print "bad resource specification: ";
				       text_io::print(int::to_string n);
				       text_io::print (":"^s^"\n");
				       widget::delete_root root;
				       run_cml::shutdown os::process::FAILURE;
				    };

															# Merge: xrdb strings with app style, overwriting any conflicting app styles.
															# Then merge arg style with the result, giving priority to runtime args.
		main_style = widget::merge_styles (arg_style, widget::merge_styles (xrd_style, app_style));

		style_view = styles::make_view { name => styles::styleName["demores"],  aliases => NIL };

		view      =  (style_view, main_style);

		##############333
		# widget setup.

		fun quit ()
		    =
		    {   widget::delete_root root;
			#
                        run_cml::shutdown os::process::SUCCESS;
		    };

		quit_button = button::text_button
                                ( root, view, [([], attributes::attr_label, attributes::av_string "Quit"),
					       ([], attributes::attr_border_width, attributes::av_int 5)
					      ]
				);

		quit_event = button::event_of quit_button;

		open_button = button::text_button
                                ( root, view, [ ([], attributes::attr_label, attributes::av_string "Open"),
						([], attributes::attr_border_width, attributes::av_int 5)
					      ]
				);

		open_event = button::event_of open_button;

		attr_single_select = quark::quark "singleselect";					# Apparently unused.

		file_chooser = file_chooser::file_chooser
				   (root, view, [])
				   (open_button, FALSE);

		layout = box::layout
			       (root, view, [])
			       ( box::vertical_center
					    [
					      box::wbox(button::widget_of quit_button),
					      box::wbox(file_chooser::widget_of file_chooser)
					    ]
			       );

		shell_args = [ ([], attributes::attr_title, attributes::av_string "SelectableText Widget Demo"),
			       ([], attributes::attr_iconName, attributes::av_string "demo-res")
			     ];

		shell = shell::shell (root, view, shell_args)
				     (box::widget_of layout);

		hints = shell::make_hints { size_hints => [], wm_hints => [ iccc::HINT_INPUT(TRUE) ] };

		shell::set_window_manager_hints shell hints;

		cm_event = shell::DELETION_EVENT shell;

		fun print_list []            => { text_io::print "\n"; };
		    print_list ((hd,_) ! []) => { text_io::print hd;          print_list []; };
		    print_list ((hd,_) ! tl) => { text_io::print (hd ^ ", "); print_list tl; };
		end;

		fun find_num_of_fd  selection
		    =
		    aux (selection,(0,0))
		    where
		        fun aux ([],(dir,fil)) => (dir,fil);
			    aux ((_,t)::tl,(dir,fil)) => aux (tl,(if t then (dir+1,fil) else (dir,fil+1)));
			end;
		    end;

		fun open_files selection
		    =
		    {   text_io::print "Opening Files\n";
			#
		        print_list selection;
		    };

		fun open_directories []
			=>
			file_chooser::set_error  file_chooser  "No Directory to Open";

		    open_directories ((selection,_) ! [])
			=>
			file_chooser::set_directory file_chooser
				 ( (file_chooser::get_current_directory file_chooser)
				   ^ "/" ^ selection
				 );

		    open_directories (selection ! tl)
			=>
			file_chooser::set_error file_chooser "Cannot open multiple directories";
		end;

		fun open_directory_or_file  selection
		    =
		    {	(find_num_of_fd  selection)
			    ->
			    (dir,fil);

			fun choose (0,n) =>  open_files  selection;
			    choose (n,0) =>  open_directories  selection;
			    choose _     =>  file_chooser::set_error file_chooser "Cannot select directories AND files";
			end

			choose (dir,fil);
		    };

		fun loop(): Void
		    =
		    {
			 fun handle_open (button::BUTTON_UP _)
				=>
				{   open_directory_or_file (file_chooser::get_current_selection file_chooser);
				    loop ();
				};

			     handle_open (_) => loop();
			 end;

			 fun handle_quit (button::BUTTON_UP _)
			 	=>
				{   text_io::print " [demo-res quitting]\n";
				    quit();
				};

			     handle_quit (_) =>  loop();
			 end;

			select [ open_event ==> handle_open,
				 quit_event ==> handle_quit,
				 cm_event   ==> quit
			       ];
		    };
	    
	       shell::init shell;

	       loop();
	    };						# fun init

	fun doit (nullor_display,args)
	    =
	    run_cml::doit (\\ () = (init (nullor_display,args)), NULL);

	fun main (prog, "-display"::(server::args))
	        =>
	        {   text_io::print ("display=" ^ server);
		    doit (THE server,args);
		};

	     main (prog, args)
	       =>
	       doit (NULL,args);
	end;
    };
end;