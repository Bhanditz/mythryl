## gui-tree.pkg
#
# A gui_plan is an abstract gui specification.  Client
# code constructs a gui_plan to describe a desired gui
# and hands it to gui-boss-imp to run.
#
# When gui_boss::run_gui is called, gui_boss converts
# the gui_plan it is given into a gui_tree tree which
# contains running widget imps and records all runtime-
# relevant information.
#
# When gui_boss::end_gui is called, the runtime gui_tree
# is converted back into a gui_plan which preserves the
# state of the GUI at shutdown time, for possible later
# resumption via gui_boss::run_gui.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


# NB: To avoid circular package dependencies, in this file
#     we avoid referencing any of the *-imp.pkg files,
#     since (some of) them need to refer to us.  To make
#     this work, we moved the *_Arg types -- which we must
#     reference -- out of the *-imp.pkg files.

stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package gp  =  gui_plan;					# gui_plan			is from   src/lib/x-kit/widget/gui/gui-plan.pkg

    # These imps need to be passed Gui_Tree instances,
    # so referring directly to them here would create
    # circular package dependencies:
    #
#   package os  =  bounce_space;				# bounce_space			is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
#   package cs  =  canvas_space;				# canvas_space			is from   src/lib/x-kit/widget/space/canvas/canvas-space.pkg
#   package ps  =  packed_space;				# packed_space			is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    
    package ss  =  slider_state;				# slider_state			is from   src/lib/x-kit/widget/space/packed/slider/slider-state.pkg
    package ls  =  label_state;					# label_state			is from   src/lib/x-kit/widget/space/packed/label/label-state.pkg
    package bs  =  ball_state;					# ball_state			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state.pkg
    package ns  =  node_state;					# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg

    package bl  =  ball_look;					# ball_look			is from   src/lib/x-kit/widget/theme/bounce/look/ball-look.pkg
    package nl  =  node_look;					# node_look			is from   src/lib/x-kit/widget/theme/canvas/look/node-look.pkg
    package kl  =  knob_look;					# knob_look			is from   src/lib/x-kit/widget/theme/packed/look/knob-look.pkg
    package ll  =  label_look;					# label_look			is from   src/lib/x-kit/widget/theme/packed/look/label-look.pkg
    package xl  =  xslider_look;				# xslider_look			is from   src/lib/x-kit/widget/theme/packed/look/xslider-look.pkg
    package yl  =  yslider_look;				# yslider_look			is from   src/lib/x-kit/widget/theme/packed/look/yslider-look.pkg

    package ns  =  node_state;					# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg

    package bwc =  bounce_widget_control;			# bounce_widget_control		is from   src/lib/x-kit/widget/space/bounce/bounce-widget-control.pkg
    package cwc =  canvas_widget_control;			# canvas_widget_control		is from   src/lib/x-kit/widget/space/canvas/canvas-widget-control.pkg
    package pwc =  packed_widget_control;			# packed_widget_control		is from   src/lib/x-kit/widget/space/packed/packed-widget-control.pkg

    package aw  =  appwindow;					# appwindow			is from   src/lib/x-kit/widget/theme/appwindow.pkg

    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg

    package blh =  bounce_space_layout_hint;			# bounce_space_layout_hint	is from   src/lib/x-kit/widget/space/bounce/bounce-space-layout-hint.pkg
    package clh =  canvas_space_layout_hint;			# canvas_space_layout_hint	is from   src/lib/x-kit/widget/space/canvas/canvas-space-layout-hint.pkg
    package plh =  packed_space_layout_hint;			# packed_space_layout_hint	is from   src/lib/x-kit/widget/space/packed/packed-space-layout-hint.pkg

    # Some abbreviations because line length was getting out of hand below:
    #
    Bwc  = bwc::Bounce_Widget_Control;
    Cwc  = cwc::Canvas_Widget_Control;
    Pwc  = pwc::Packed_Widget_Control;
    #
    Site = Ref( xg::Box );					# Pixel-rectangle assigned to the widget, in window coordinates.
    #
    Bs_Layout =  blh::Bounce_Space_Layout_Hint;
    Cs_Layout =  clh::Canvas_Space_Layout_Hint;
    Ps_Layout =  plh::Packed_Space_Layout_Hint; 
    #
    Once(X) = Oneshot_Maildrop(X);

herein

    package gui_tree
    {
	# Storing instances of
	#     os::bounce_space, 
	#     cs::canvas_space, 
	# or  ps::packed_space
	# directly in Gui_Tree leads to package circularity,
	# so instead we store their integer id here, and
	# in gui-boss-imp.pkg look them up as needed in
	# (respectively):	
	#     bounce_spaces
	#     canvas_spaces
	#     packed_spaces
	# 
	Bounce_Space_Id = Int;
	Canvas_Space_Id = Int;
	Packed_Space_Id = Int;

	Iostate = { wants_keystrokes:	Ref(Bool),
		    wants_mouseclicks:	Ref(Bool)
		  };

	# This column contains stuff which we created per the gui_plan specification.					I/O state of widget,
	#                                                                                       			Screen loc of widget
	# ==============================================================================				===================
	#
	Bounce_Widget
	    #
	    = BALL	(Bwc, bs::Ball_State, bl::Ball_Look, Once(bs::Ball_Arg),Once(bl::Ball_Look_Arg),		Iostate, Site )

	also
	Canvas_Widget
	    #
	    = PACKED_SPACE (Packed_Space_Id,  Packed_Widget,									 Site )
	    | NODE         (Cwc, ns::Node_State, nl::Node_Look, Once(ns::Node_Arg),Once(nl::Node_Look_Arg),		Iostate, Site )

	also
	Packed_Widget
	    #
	    = ROW	(List( (Packed_Widget, List(Ps_Layout) )),								 Site )
	    | COL	(List( (Packed_Widget, List(Ps_Layout) )),								 Site )
	    #
	    | LABEL	(Pwc, ls::Label_State,  ll::Label_Look,   Once(ls::Label_Arg ),Once(ll::Label_Look_Arg ),	Iostate, Site )
	    | KNOB	(Pwc, ss::Slider_State, kl::Knob_Look,    Once(ss::Slider_Arg),Once(kl::Knob_Look_Arg),		Iostate, Site )
	    | XSLIDER	(Pwc, ss::Slider_State, xl::Xslider_Look, Once(ss::Slider_Arg),Once(xl::Xslider_Look_Arg),	Iostate, Site )
	    | YSLIDER	(Pwc, ss::Slider_State, yl::Yslider_Look, Once(ss::Slider_Arg),Once(yl::Yslider_Look_Arg),	Iostate, Site )

	    #
	    | CANVAS_SPACE (Canvas_Space_Id,  List ((Canvas_Widget, List(Cs_Layout))),						 Site )
	    | BOUNCE_SPACE (Bounce_Space_Id,  List ((Bounce_Widget, List(Bs_Layout))),						 Site )
	    #
	    | NULL_PACKED_WIDGET
	    ;

	Gui_Tree =  { fire_end_gun:	Void -> Void,
		      packed_space_id:	Packed_Space_Id,
		      packed_widget:	Packed_Widget
		    };
    };

end;
