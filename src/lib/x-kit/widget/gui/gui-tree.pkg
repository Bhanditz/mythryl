## gui-tree.pkg
#
# A gui_plan is an abstract gui specification.  Client
# code constructs a gui_plan to describe a desired gui
# and hands it to gui-boss-imp to run.
#
# When gui_boss::run_gui is called, gui_boss converts
# the gui_plan it is given into a gui_tree tree which
# contains running widget imps and records all runtime-
# relevant information.
#
# When gui_boss::end_gui is called, the runtime gui_tree
# is converted back into a gui_plan which preserves the
# state of the GUI at shutdown time, for possible later
# resumption via gui_boss::run_gui.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


# NB: To avoid circular package dependencies, in this file
#     we avoid referencing any of the *-imp.pkg files,
#     since (some of) them need to refer to us.  To make
#     this work, we moved the *_Arg types -- which we must
#     reference -- out of the *-imp.pkg files.

stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package gp  =  gui_plan;					# gui_plan			is from   src/lib/x-kit/widget/gui/gui-plan.pkg

    # These imps need to be passed Gui_Tree instances,
    # so referring directly to them here would create
    # circular package dependencies:
    #
#   package os  =  bounce_space;				# bounce_space			is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
#   package cs  =  canvas_space;				# canvas_space			is from   src/lib/x-kit/widget/space/canvas/canvas-space.pkg
#   package ps  =  packed_space;				# packed_space			is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    
    package c2f =  client_to_float_state;			# client_to_float_state		is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
    package c2s =  client_to_string_state;			# client_to_string_state	is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package c2t =  client_to_bool_state;			# client_to_bool_state		is from   src/lib/x-kit/widget/space/packed/client-to-bool-state.pkg

    package bs  =  ball_state;					# ball_state			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state.pkg
    package ns  =  node_state;					# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg

    package bl  =  ball_look;					# ball_look			is from   src/lib/x-kit/widget/theme/bounce/look/ball-look.pkg
    package nl  =  node_look;					# node_look			is from   src/lib/x-kit/widget/theme/canvas/look/node-look.pkg
    package pl  =  packed_look;					# packed_look			is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg

    package b2l =  bounce_to_look;				# bounce_to_look		is from   src/lib/x-kit/widget/space/bounce/bounce-to-look.pkg
    package c2l =  canvas_to_look;				# canvas_to_look		is from   src/lib/x-kit/widget/space/canvas/canvas-to-look.pkg
    package p2l =  packed_to_look;				# packed_to_look		is from   src/lib/x-kit/widget/space/packed/packed-widget-control.pkg

    package aw  =  gui_to_appwindow;				# gui_to_appwindow		is from   src/lib/x-kit/widget/theme/gui-to-appwindow.pkg

    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg

    package blh =  bounce_space_layout_hint;			# bounce_space_layout_hint	is from   src/lib/x-kit/widget/space/bounce/bounce-space-layout-hint.pkg
    package clh =  canvas_space_layout_hint;			# canvas_space_layout_hint	is from   src/lib/x-kit/widget/space/canvas/canvas-space-layout-hint.pkg
    package plh =  packed_space_layout_hint;			# packed_space_layout_hint	is from   src/lib/x-kit/widget/space/packed/packed-space-layout-hint.pkg

    # Some abbreviations because line length was getting out of hand below:
    #
    Bs_Layout =  blh::Bounce_Space_Layout_Hint;
    Cs_Layout =  clh::Canvas_Space_Layout_Hint;
    Ps_Layout =  plh::Packed_Space_Layout_Hint; 
    #
    Once(X) = Oneshot_Maildrop(X);

herein

    package gui_tree
    {
	# Storing instances of
	#     os::bounce_space, 
	#     cs::canvas_space, 
	# or  ps::packed_space
	# directly in Gui_Tree leads to package circularity,
	# so instead we store their integer id here, and
	# in gui-boss-imp.pkg look them up as needed in
	# (respectively):	
	#     bounce_spaces
	#     canvas_spaces
	#     packed_spaces
	# 
	Bounce_Space_Id = Id;
	Canvas_Space_Id = Id;
	Packed_Space_Id = Id;

	Packed_Layout_Hints										# Predigested form of   List( plh::Packed_Space_Layout_Hint ); 
	  =
	  {  share:	Float										# Controls this widget's share of available pixels. We force this to be positive. Default is 1.0 if not specified.
	  };

	Bounce_Widget
	    #
	    = BALL 	      { bounce_to_look:		b2l::Bounce_To_Look,
				state:			bs::Ball_State,					# An imp maintaining the core state of the widget.
				look:			bl::Ball_Look,					# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( bs::Ball_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
				endlook_oneshot:	Once( bl::Ball_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
			      }
			
	also
	Canvas_Widget
	    #
	    = PACKED_SPACE    {	packed_space_id:	Packed_Space_Id,				# A packed space embedded in a canvas, to allow all packed-space widgets to be used also on a canvas.
				packed_widget:		Packed_Widget
			      }
	    | NODE	      { canvas_to_look:		c2l::Canvas_To_Look,
				state:			ns::Node_State,					# An imp maintaining the core state of the widget.
				look:			nl::Node_Look,					# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( ns::Node_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
				endlook_oneshot:	Once( nl::Node_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
			      }
	also
	Packed_Widget
	    #												# A horizontal row of packed widgets.
	    = ROW	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packed_Space_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
													# A vertical column of packed widgets.
	    | COL	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packed_Space_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
	    #
	    | BOOL	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2t::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			pl::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2t::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
				endlook_oneshot:	Once( pl::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
			      }
	    | STRING	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2s::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			pl::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2s::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
				endlook_oneshot:	Once( pl::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
			      }
	    | FLOAT	      { packed_to_look:		p2l::Packed_To_Look,				# A knob for controlling and displaying a scalar value.
				state:			c2f::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			pl::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2f::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
				endlook_oneshot:	Once( pl::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by gui-boss-imp.
			      }
	    #
	    | CANVAS_SPACE    {	canvas_space_id:	Canvas_Space_Id,				# gui-boss-imp indexes this value into *canvas_stuff to obtain (e.g.) a Canvas_Space port to the canvas-space-imp.
				widgets:		List ((Canvas_Widget, List(Cs_Layout)))		# The list of widgets to be drawn on the canvas. These can be placed arbitrarily, including possible overlaps.
			      }
	    | BOUNCE_SPACE    { bounce_space_id:	Bounce_Space_Id,				# gui-boss-imp indexes this value into *bounce_stuff to obtain (e.g.) a Bounce_Space port to the bounce-space-imp.
				widgets:		List ((Bounce_Widget, List(Bs_Layout)))		# The list of widgets to be drawn on the bounce-space. These can be placed arbitrarily.
			      }
	    #
	    | NULL_PACKED_WIDGET
	    ;

	Gui_Tree =	      {	fire_end_gun:		Void -> Void,					# Calling this fn will cause all state and look imps in the gui to exit, saving their state to their oneshots.
				packed_space_id:	Packed_Space_Id,				# gui-boss-imp indexes this value into *packed_stuff to obtain (e.g.) a Packed_Space port to the packed-space-imp.
				packed_widget:		Packed_Widget					# The widget (or more commonly, tree of widgets) managed by the gui-tree's toplevel packed-space-imp.
			      };
    };

end;
