## guiboss-to-gadget.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# This port manages
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
# requests to to widget look-imps.
#
# See also:
#     src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;									# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;								# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package g2g =  gadget_to_guiboss;								# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package iul =  issue_unique_look_id;							# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
    package pt  =  packed_theme;								# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg
    package g2p =  gadget_to_pixmap;								# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/object-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/sprite-imp.pkg
    #
    package guiboss_to_gadget {
	#

	Gadget_Border_Crossing									# The intended semantics here is that:
	    #											#  o  While a drag is in process, neither ENTER nor LEAVE events are generated.
	    = ENTER										#  o  A widget should always see an ENTER before   anything else when the mouse cursor enters its space.
	    | LEAVE										#  o  A widget should always see a  LEAVE after  everything else when the mouse cursor exits  its space.
	    ;											#  o  Thus, a widget is not guaranteed to see an ENTER every time the mouse cursor enters it (due to drag exception). But if it sees anything at all, an ENTER will be first, and a LEAVE will be last.

	Drag_Phase										# The intended semantics here is that:
	    #											# 
	    = LAUNCH										#  o  Every drag sequence begins with exactly one LAUNCH.
	    | RESUME										#  o  Every drag sequence has zero or more        RESUME phases.
	    | FINISH										#  o  Every drag sequence ends   with exactly one FINISH.
	    ;											# 

	Guiboss_To_Gadget
	  =
	  { id:			iul::Id,							# Unique id to facilitate storing Guiboss_To_Gadget ports in indexed datastructures like red-black trees.
	    #
	    wants_keystrokes:	Bool,								# TRUE iff guiboss_imp should send keyboard events to this widget.
	    wants_mouseclicks:	Bool,								# TRUE iff guiboss_imp should send mouse    events to this widget.  This is about correctness not efficiency: We might have two nested candidate widgets where this flag decides which one gets the event.

	    #
	    before_first_frame:	{								# Before the first start_of_frame call every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
				  #								# If its appearance has changed it should call note_changed_gadget_foreground() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
				  site:			g2d::Box,				# Window rectangle in which to draw.
				  theme:		pt::Packed_Theme,
				  #
				  get_font:	List(String) ->  evt::Font,			# Accepts a list of font names which are tried in order; returns font 'ascent' and 'descent' in pixels -- sum them to get  font height.
				  pass_font:	List(String) -> Replyqueue			#
							     -> ( evt::Font -> Void )		#
							     -> Void,				# Nonblocking version of previous, for use in imps.

				  make_rw_pixmap:	g2d::Size -> g2p::Gadget_To_Rw_Pixmap
				}
				->
				Void,


	    start_of_frame:	{								# At the start of every frame every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
				  #								# If its appearance has changed it should call update_gadget_appearance() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
				  frame_number:		Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
				  site:			g2d::Box,				# Window rectangle in which to draw.
				  visible:		Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground displaylist.
				  duration_in_seconds:	Float,					# If state has changed look-imp should call update_gadget_appearance() before this time is up. Also useful for motionblur.
				  this_gadget_mode:	g2g::Gadget_Mode,
				  theme:		pt::Packed_Theme
				}
				->
				Void,


	    note_mouse_move_event:	    (							# Note that buttons are always all up in a mouse-move event -- otherwise it is a mouse-drag event.
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      g2d::Point,					# 'point'  is the click point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme

					    )
					    -> Void,

	    note_mouse_crossing_event:	    (							# Note that buttons are always all up in a mouse-move event -- otherwise it is a mouse-drag event.
					      Gadget_Border_Crossing,
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      g2d::Point,					# 'point'  is the click point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme

					    )
					    -> Void,

	    note_mouse_drag_event:	    (							# 
					      Drag_Phase,
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      g2d::Point,					# 'point'  is the click point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme

					    )
					    -> Void,

	    note_key_press_event:	    (							# Note  keyboard keypress at 'point'.
					      evt::Keycode,					# Keyboard key just pressed down.
					      evt::Keysym,					# Keysym  of the depressed key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      String,						# Ascii  for the depressed key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      g2d::Point,					# 'point'  is the click point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme

					    )
					    -> Void,

	    note_key_release_event:	    (							# Note  keyboard key release at 'point'.
					      evt::Keycode,					# Keyboard key just released.
					      evt::Keysym,					# Keysym  of the released key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      String,						# Ascii  for the released key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      g2d::Point,					# 'point'  is the release point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme
					    )
					    -> Void,

	    note_mousebutton_press_event:   (							# Note mousebutton click at 'point'.
					      evt::Mousebutton,					# Mouse button just clicked down.														#
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      g2d::Point,					# 'point'  is the click point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme
					    )
					    -> Void,

	    note_mousebutton_release_event: (							# Note mousebutton release at 'point'.
					      evt::Mousebutton,					# Mouse button just released.
					      evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      g2d::Point,					# 'point'  is the releasek point the window's coordinate system.
					      g2d::Box,						# Widget's assigned area in window coordinates.
				  	      pt::Packed_Theme
					    )
					    -> Void
	  };
    };												# package guiboss;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
