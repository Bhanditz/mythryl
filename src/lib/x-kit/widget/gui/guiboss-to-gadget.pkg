## guiboss-to-gadget.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# This port manages
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
# requests to to widget look-imps.
#
# See also:
#     src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;									# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;								# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package g2g =  gadget_to_guiboss;								# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package iul =  issue_unique_look_id;							# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
    package pt  =  packed_theme;								# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg
    package g2p =  gadget_to_pixmap;								# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/object-imp.pkg
    #     src/lib/x-kit/widget/xkit/theme/packed/default/look/sprite-imp.pkg
    #
    package guiboss_to_gadget {
	#

	Gadget_Transit										# This protocol is intended to support (e.g.) highlighting a gadget while the mouse is over it.
	    #											# The intended semantics here is that:
	    = CAME										#  o  A widget should always see an  CAME before anything else when the mouse cursor enters its space.   CAME events are NOT sent during a drag. A MOVED is always sent immediately after an CAME, with the same mouse coordinate.
 	    | MOVE										#  o  A widget can see any number of MOVE events between a CAME and LEFT; all will be in its space.	 MOVE events are NOT sent during a drag.
	    | LEFT										#  o  A widget should always see a   LEFT after  everything else when the mouse cursor exits  its space. LEFT events are NOT sent during a drag.
	    ;											#  o  Thus, a widget is not guaranteed to see an CAME every time the mouse cursor enters it (due to drag exception). But if it sees anything at all, an CAME will be first, and a LEFT will be last.

	Drag_Phase										# This protocol is intended to support dragging a slider or scrollbar thumb.
	    #											# The intended semantics here is that:
	    = OPEN										#  o  Every drag sequence begins with exactly one OPEN.
	    | DRAG										#  o  Every drag sequence has zero or more        DRAG phases.
	    | DONE										#  o  Every drag sequence ends   with exactly one DONE.
	    ;											# 

	Key_Event										# This protocol is intended to support keyboard text entry.
	    #
	    = KEY_PRESS
	    | KEY_RELEASE
	    ;

	Mousebutton_Event									# This protocol is intended to support mouse button processing.  Double-clicks are not supported here.  I dislike them because they inherently add latency, and half of GUI framework design is about minimizing latency.
	    #
	    = MOUSEBUTTON_PRESS
	    | MOUSEBUTTON_RELEASE
	    ;

	Guiboss_To_Gadget
	  =
	  { id:			iul::Id,							# Unique id to facilitate storing Guiboss_To_Gadget ports in indexed datastructures like red-black trees.
	    #
	    wants_keystrokes:	Bool,								# TRUE iff guiboss_imp should send keyboard events to this widget.  This might need to become a Ref(Bool)...?
	    wants_mouseclicks:	Bool,								# TRUE iff guiboss_imp should send mouse    events to this widget.  This is about correctness not efficiency: We might have two nested candidate widgets where this flag decides which one gets the event.

	    #
	    before_first_frame:	{								# Before the first start_of_frame call every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
				  #								# If its appearance has changed it should call note_changed_gadget_foreground() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
				  site:			g2d::Box,				# Window rectangle in which to draw.
				  theme:		pt::Packed_Theme,
				  #
				  get_font:	List(String) ->  evt::Font,			# Accepts a list of font names which are tried in order; returns font 'ascent' and 'descent' in pixels -- sum them to get  font height.
				  pass_font:	List(String) -> Replyqueue			#
							     -> ( evt::Font -> Void )		#
							     -> Void,				# Nonblocking version of previous, for use in imps.

				  make_rw_pixmap:	g2d::Size -> g2p::Gadget_To_Rw_Pixmap
				}
				->
				Void,


	    start_of_frame:	{								# At the start of every frame every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
				  #								# If its appearance has changed it should call update_gadget_appearance() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
				  frame_number:		Int,					# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
				  site:			g2d::Box,				# Window rectangle in which to draw.
				  visible:		Bool,					# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground displaylist.
				  duration_in_seconds:	Float,					# If state has changed look-imp should call update_gadget_appearance() before this time is up. Also useful for motionblur.
				  this_gadget_mode:	g2g::Gadget_Mode,
				  theme:		pt::Packed_Theme
				}
				->
				Void,


	    note_mouse_drag_event:	    {							# Intended to support dragging sliders and scrollbar thumbs etc.  Not intended for drag-and-drop.
					      phase:		    Drag_Phase,			# We guarantee that the gadget that sees the OPEN (downclick) for a drag also sees all the DRAGs and the DONE for that drag, and that no other gadget sees drag or transit events during that time period.
					      modifier_keys_state:  evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
					      event_point:	    g2d::Point,			# 'event_point' is the current   point the window's coordinate system.
					      start_point:	    g2d::Point,			# 'start_point' is the downclick point the window's coordinate system.
					      last_point:	    g2d::Point,			# 'last_point'  is the event_point from the preceding ntoe_mouse_drag_event call.
					      site:		    g2d::Box,			# Widget's assigned area in window coordinates.
				  	      theme:		    pt::Packed_Theme		#
					    }							# DONE is sent when last mousebutton is released, no matter where that happnes.
					    -> Void,						# Normally OPEN and DRAG are sent if they occur within the gadget's assigned site.
												# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

	    note_mouse_transit:		    {							# Mouse entering or leaving window site assigned to gadget.  Intended to support tooltips, active-widget highlighting etc. Note that buttons are always all up in a mouse transit -- otherwise it is a mouse-drag event.
					      transit:		    Gadget_Transit,
					      modifier_keys_state:  evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
					      event_point:	    g2d::Point,			# 'event_point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,			# Widget's assigned area in window coordinates.
				  	      theme:		    pt::Packed_Theme		#
					    }							# CAME/MOVE/LEFT are never sent during drag operations.
					    -> Void,						# Normally CAME/MOVE  are sent if they occur within the gadget's assigned site.
												# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

	    note_key_event:	    	   {							# Note keyboard KEY_PRESS or KEY_RELEASE at 'point'. Intended for textfield text entry etc.
					      key_event:	    Key_Event,			# KEY_PRESS or KEY_RELEASE.
					      keycode:		    evt::Keycode,		# Keyboard key just pressed/released.
					      keysym:		    evt::Keysym,		# Keysym  of the key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      string:		    String,			# Ascii  for the key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      modifier_keys_state:  evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
					      event_point:	    g2d::Point,			# 'point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,			# Widget's assigned area in window coordinates.
				  	      theme:		    pt::Packed_Theme
					    }
					    -> Void,

												# If note_mouse
	    note_mousebutton_event:	    {							# Note mousebutton click at 'point'.  Intended for pushbuttons etc.
					      mousebutton_event:    Mousebutton_Event,		# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE. These go to the gadget under the mouse pointer, hence a gadget may not see both if the pointer moves between them. Use note_mouse_drag_event if this is a problem.
					      mouse_button:	    evt::Mousebutton,		# Mouse button just clicked down. Range is 1-13 or more.  Typically 1=left, 2=middle, 3=right, 4=mousewheel-forward, 5=mousewheel-back.
					      modifier_keys_state:  evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,	# State of mouse buttons as a bool record, BEFORE THE EVENT -- so a MOUSEBUTTON_RLEASE will always show at least one button down.
					      event_point:	    g2d::Point,			# 'point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,			# Widget's assigned area in window coordinates.
				  	      theme:		    pt::Packed_Theme		#
					    }							# Normally MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE are sent if they occur within the gadget's assigned site.
					    -> Void						# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
	  };
    };												# package guiboss;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
