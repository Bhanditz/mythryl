## running-gui.pkg
#
# A stopped_gui is an abstract gui specification.  Client
# code constructs a stopped_gui to describe a desired gui
# and hands it to guiboss-imp to run.
#
# When guiboss::restart_gui is called, guiboss converts
# the stopped_gui it is given into a running_gui tree which
# contains running widget imps and records all runtime-
# relevant information.
#
# When guiboss::stop_gui is called, the runtime running_gui
# is converted back into a stopped_gui which preserves the
# state of the GUI at shutdown time, for possible later
# resumption via guiboss::restart_gui.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


# NB: To avoid circular package dependencies, in this file
#     we avoid referencing any of the *-imp.pkg files,
#     since (some of) them need to refer to us.  To make
#     this work, we moved the *_Arg types -- which we must
#     reference -- out of the *-imp.pkg files.

stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package sg  =  stopped_gui;					# stopped_gui			is from   src/lib/x-kit/widget/gui/stopped-gui.pkg

    # These imps need to be passed Running_Gui instances,
    # so referring directly to them here would create
    # circular package dependencies:
    #
#   package os  =  guiboss_to_bouncespace;			# guiboss_to_bouncespace	is from   src/lib/x-kit/widget/space/bounce/guiboss-to-bouncespace.pkg
#   package cs  =  guiboss_to_canvasspace;			# guiboss_to_canvasspace	is from   src/lib/x-kit/widget/space/canvas/guiboss-to-canvasspace.pkg
#   package ps  =  guiboss_to_packedspace;			# guiboss_to_packedspace	is from   src/lib/x-kit/widget/space/packed/guiboss-to-packedspace.pkg
    
    package b2s =  bouncespace_to_sprite;			# bouncespace_to_sprite		is from   src/lib/x-kit/widget/space/bounce/bouncespace-to-sprite.pkg
    package c2o =  canvasspace_to_object;			# canvasspace_to_object		is from   src/lib/x-kit/widget/space/canvas/canvasspace-to-object.pkg
    package p2w =  packedspace_to_widget;			# packedspace_to_widget		is from   src/lib/x-kit/widget/space/packed/packedspace-to-widget.pkg
    package g2w =  guiboss_to_widget;				# guiboss_to_widget		is from   src/lib/x-kit/widget/gui/guiboss-to-widget.pkg

    package gws =  guiboss_to_windowsystem;			# guiboss_to_windowsystem	is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg

    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg

    package blh =  bouncespace_layout_hint;			# bouncespace_layout_hint	is from   src/lib/x-kit/widget/space/bounce/bouncespace-layout-hint.pkg
    package clh =  canvasspace_layout_hint;			# canvasspace_layout_hint	is from   src/lib/x-kit/widget/space/canvas/canvasspace-layout-hint.pkg
    package plh =  packedspace_layout_hint;			# packedspace_layout_hint	is from   src/lib/x-kit/widget/space/packed/packedspace-layout-hint.pkg

    # Some abbreviations because line length was getting out of hand below:
    #
    Bs_Layout =  blh::Bouncespace_Layout_Hint;
    Cs_Layout =  clh::Canvasspace_Layout_Hint;
    Ps_Layout =  plh::Packedspace_Layout_Hint; 
    #
    Once(X) = Oneshot_Maildrop(X);

    package gt  = gui_types;					# gui_types			is from   src/lib/x-kit/widget/gui/gui-types.pkg
herein

    package running_gui
    {
	# Storing instances of
	#     os::guiboss_to_bouncespace, 
	#     cs::guiboss_to_canvasspace, 
	# or  ps::guiboss_to_packedspace
	# directly in Running_Gui leads to package circularity,
	# so instead we store their integer id here, and
	# in guiboss-imp.pkg look them up as needed in
	# (respectively):	
	#     bouncespaces
	#     canvasspaces
	#     packedspaces
	# 
	Bouncespace_Id = Id;
	Canvasspace_Id = Id;
	Packedspace_Id = Id;

	Packed_Layout_Hints										# Predigested form of   List( plh::Packedspace_Layout_Hint ); 
	  =
	  {  share:	Float										# Controls this widget's share of available pixels. We force this to be positive. Default is 1.0 if not specified.
	  };

	Bounce_Widget
	    #
	    = SPRITE	      {
# What purpose do these first two serve, actually -- if any?
				bouncespace_to_sprite:	b2s::Bouncespace_To_Sprite,			# 
				guiboss_to_widget:	g2w::Guiboss_To_Widget,				# 

				endstate_oneshot:	Once( gt::Start_Bounce_Sprite_Fn )		# The sprite-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
			
	also
	Canvas_Widget
	    #
	    = PACKEDSPACE    {	packedspace_id:	Packedspace_Id,				# A packed space embedded in a canvas, to allow all packedspace widgets to be used also on a canvas.
				packed_widget:		Packed_Widget
			      }
	    | OBJECT	      {
# What purpose do these first two serve, actually -- if any?
				canvasspace_to_object:	c2o::Canvasspace_To_Object,			# 
				guiboss_to_widget:	g2w::Guiboss_To_Widget,				# 

				endstate_oneshot:	Once( gt::Start_Canvas_Object_Fn )		# The sprite-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	also
	Packed_Widget
	    #												# A horizontal row of packed widgets.
	    = ROW	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packedspace_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
													# A vertical column of packed widgets.
	    | COL	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packedspace_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
	    #
	    | WIDGET	      {
# What purpose do these first two serve, actually -- if any?
				packedspace_to_widget:	p2w::Packedspace_To_Widget,				# A widget that displays some text.
				guiboss_to_widget:	g2w::Guiboss_To_Widget,				# An imp which maps the widget's core state into a visual representation for display.

				endstate_oneshot:	Once( gt::Start_Packed_Widget_Fn )		# The widget-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }

	    #
	    | CANVASSPACE    {	canvasspace_id:	Canvasspace_Id,				# guiboss-imp indexes this value into *canvas_stuff to obtain (e.g.) a Guiboss_To_Canvasspace port to the canvasspace-imp.
				widgets:		List ((Canvas_Widget, List(Cs_Layout)))		# The list of widgets to be drawn on the canvas. These can be placed arbitrarily, including possible overlaps.
			      }
	    | BOUNCESPACE    { bouncespace_id:	Bouncespace_Id,				# guiboss-imp indexes this value into *bounce_stuff to obtain (e.g.) a Guiboss_To_Bouncespace port to the bouncespace-imp.
				widgets:		List ((Bounce_Widget, List(Bs_Layout)))		# The list of widgets to be drawn on the bouncespace. These can be placed arbitrarily.
			      }
	    #
	    | NULL_PACKED_WIDGET
	    ;

	Running_Gui =	      {	fire_end_gun:		Void -> Void,					# Calling this fn will cause all state and look imps in the gui to exit, saving their state to their oneshots.
				packedspace_id:	Packedspace_Id,				# guiboss-imp indexes this value into *packed_stuff to obtain (e.g.) a Guiboss_To_Packedspace port to the packedspace-imp.
				packed_widget:		Packed_Widget,					# The widget (or more commonly, tree of widgets) managed by the gui-tree's toplevel packedspace-imp.
				topwindow:		gws::Guiboss_To_Topwindow			# The topwindow on which to draw our widgets.
			      };
    };

end;






##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
