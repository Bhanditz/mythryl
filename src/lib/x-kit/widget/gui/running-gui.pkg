## running-gui.pkg
#
# A stopped_gui is an abstract gui specification.  Client
# code constructs a stopped_gui to describe a desired gui
# and hands it to guiboss-imp to run.
#
# When guiboss::restart_gui is called, guiboss converts
# the stopped_gui it is given into a running_gui tree which
# contains running widget imps and records all runtime-
# relevant information.
#
# When guiboss::stop_gui is called, the runtime running_gui
# is converted back into a stopped_gui which preserves the
# state of the GUI at shutdown time, for possible later
# resumption via guiboss::restart_gui.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


# NB: To avoid circular package dependencies, in this file
#     we avoid referencing any of the *-imp.pkg files,
#     since (some of) them need to refer to us.  To make
#     this work, we moved the *_Arg types -- which we must
#     reference -- out of the *-imp.pkg files.

stipulate
    include package   threadkit;				# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package sg  =  stopped_gui;					# stopped_gui			is from   src/lib/x-kit/widget/gui/stopped-gui.pkg

    # These imps need to be passed Running_Gui instances,
    # so referring directly to them here would create
    # circular package dependencies:
    #
#   package os  =  guiboss_to_bounce_space;			# guiboss_to_bounce_space	is from   src/lib/x-kit/widget/space/bounce/guiboss-to-bounce-space.pkg
#   package cs  =  guiboss_to_canvas_space;			# guiboss_to_canvas_space	is from   src/lib/x-kit/widget/space/canvas/guiboss-to-canvas-space.pkg
#   package ps  =  guiboss_to_packed_space;			# guiboss_to_packed_space	is from   src/lib/x-kit/widget/space/packed/guiboss-to-packed-space.pkg
    
    package c2f =  client_to_float_state;			# client_to_float_state		is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
    package c2i =  client_to_int_state;				# client_to_int_state		is from   src/lib/x-kit/widget/space/packed/client-to-int-state.pkg
    package c2m =  client_to_image_state;			# client_to_image_state		is from   src/lib/x-kit/widget/space/packed/client-to-image-state.pkg
    package c2s =  client_to_string_state;			# client_to_string_state	is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package c2t =  client_to_bool_state;			# client_to_bool_state		is from   src/lib/x-kit/widget/space/packed/client-to-bool-state.pkg
    package c2x =  client_to_exception_state;			# client_to_exception_state	is from   src/lib/x-kit/widget/space/packed/client-to-exception-state.pkg

    package c2b =  client_to_ball_state;			# client_to_ball_state		is from   src/lib/x-kit/widget/space/bounce/client-to-ball-state.pkg
    package c2n =  client_to_node_state;			# client_to_node_state		is from   src/lib/x-kit/widget/space/canvas/client-to-node-state.pkg

    package bs  =  ball_state;					# ball_state			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state.pkg
    package ns  =  node_state;					# node_state			is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg

    package b2l =  bounce_to_look;				# bounce_to_look		is from   src/lib/x-kit/widget/space/bounce/bounce-to-look.pkg
    package c2l =  canvas_to_look;				# canvas_to_look		is from   src/lib/x-kit/widget/space/canvas/canvas-to-look.pkg
    package p2l =  packed_to_look;				# packed_to_look		is from   src/lib/x-kit/widget/space/packed/packed-widget-control.pkg
    package g2l =  gui_to_look;					# gui_to_look			is from   src/lib/x-kit/widget/gui/gui-to-look.pkg

    package g2w =  guiboss_to_windowsystem;			# guiboss_to_windowsystem	is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg

    package pwe =  packed_widget_egg;				# packed_widget_egg		is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg
    package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg

    package blh =  bounce_space_layout_hint;			# bounce_space_layout_hint	is from   src/lib/x-kit/widget/space/bounce/bounce-space-layout-hint.pkg
    package clh =  canvas_space_layout_hint;			# canvas_space_layout_hint	is from   src/lib/x-kit/widget/space/canvas/canvas-space-layout-hint.pkg
    package plh =  packed_space_layout_hint;			# packed_space_layout_hint	is from   src/lib/x-kit/widget/space/packed/packed-space-layout-hint.pkg

    # Some abbreviations because line length was getting out of hand below:
    #
    Bs_Layout =  blh::Bounce_Space_Layout_Hint;
    Cs_Layout =  clh::Canvas_Space_Layout_Hint;
    Ps_Layout =  plh::Packed_Space_Layout_Hint; 
    #
    Once(X) = Oneshot_Maildrop(X);

    package gt  = gui_types;					# gui_types			is from   src/lib/x-kit/widget/gui/gui-types.pkg

    package bbb =   ball_look_imp;				#  ball_look_imp		is from   src/lib/x-kit/widget/xkit/theme/bounce/default/look/ball-look-imp.pkg
    package nnn =   node_look_imp;				#  node_look_imp		is from   src/lib/x-kit/widget/xkit/theme/canvas/default/look/node-look-imp.pkg

    package fli =   float_look_imp;				#  float_look_imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/float-look-imp.pkg
    package ili =   int_look_imp;				#  int_look_imp			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/int-look-imp.pkg
    package mli =  image_look_imp;				# image_look_imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/image-look-imp.pkg
    package sli =  string_look_imp;				# string_look_imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/string-look-imp.pkg
    package xli =  exception_look_imp;				# exception_look_imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/exception-look-imp.pkg
    package tli =  bool_look_imp;				# bool_look_imp			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/bool-look-imp.pkg

herein

    package running_gui
    {
	# Storing instances of
	#     os::guiboss_to_bounce_space, 
	#     cs::guiboss_to_canvas_space, 
	# or  ps::guiboss_to_packed_space
	# directly in Running_Gui leads to package circularity,
	# so instead we store their integer id here, and
	# in guiboss-imp.pkg look them up as needed in
	# (respectively):	
	#     bounce_spaces
	#     canvas_spaces
	#     packed_spaces
	# 
	Bounce_Space_Id = Id;
	Canvas_Space_Id = Id;
	Packed_Space_Id = Id;

	Packed_Layout_Hints										# Predigested form of   List( plh::Packed_Space_Layout_Hint ); 
	  =
	  {  share:	Float										# Controls this widget's share of available pixels. We force this to be positive. Default is 1.0 if not specified.
	  };

	Bounce_Widget
	    #
	    = BALL 	      { bounce_to_look:		b2l::Bounce_To_Look,
				state:			c2b::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			bbb::Bounce_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2b::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( bbb::Bounce_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
			
	also
	Canvas_Widget
	    #
	    = PACKED_SPACE    {	packed_space_id:	Packed_Space_Id,				# A packed space embedded in a canvas, to allow all packed-space widgets to be used also on a canvas.
				packed_widget:		Packed_Widget
			      }
	    | NODE	      { canvas_to_look:		c2l::Canvas_To_Look,
				state:			c2n::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			nnn::Canvas_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2n::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( nnn::Canvas_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	also
	Packed_Widget
	    #												# A horizontal row of packed widgets.
	    = ROW	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packed_Space_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
													# A vertical column of packed widgets.
	    | COL	      {	widgets:		List( ( Packed_Widget,				#
								Packed_Layout_Hints,			# Digested version of next
								List(plh::Packed_Space_Layout_Hint)	# Layout hints provided by client code.
							    ) )						#
			      }
	    #
# SOON!
	    | WIDGET	      {
# What purpose do these first two serve, actually -- if any?
				packedspace_to_widget:	p2l::Packed_To_Look,				# A widget that displays some text.
				guiboss_to_widget:	g2l::Gui_To_Look,				# An imp which maps the widget's core state into a visual representation for display.

				endstate_oneshot:	Once( gt::Start_Packed_Widget_Fn )		# The widget-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }

	    | BOOL	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2t::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			tli::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2t::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( tli::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    | INT	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2i::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			ili::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2i::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( ili::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    | IMAGE	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2m::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			mli::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2m::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( mli::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    | OTHER	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2x::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			xli::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2x::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( xli::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    | STRING	      {	packed_to_look:		p2l::Packed_To_Look,				# A widget that displays some text.
				state:			c2s::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			sli::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2s::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( sli::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    | FLOAT	      { packed_to_look:		p2l::Packed_To_Look,				# A knob for controlling and displaying a scalar value.
				state:			c2f::Client_To_State,				# An imp maintaining the core state of the widget.
				look:			fli::Packed_Look,				# An imp which maps the widget's core state into a visual representation for display.
				endstate_oneshot:	Once( c2f::Make_Arg ),				# The state-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
				endlook_oneshot:	Once( fli::Packed_Look_Arg )			# The  look-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
			      }
	    #
	    | CANVAS_SPACE    {	canvas_space_id:	Canvas_Space_Id,				# guiboss-imp indexes this value into *canvas_stuff to obtain (e.g.) a Guiboss_To_Canvas_Space port to the canvas-space-imp.
				widgets:		List ((Canvas_Widget, List(Cs_Layout)))		# The list of widgets to be drawn on the canvas. These can be placed arbitrarily, including possible overlaps.
			      }
	    | BOUNCE_SPACE    { bounce_space_id:	Bounce_Space_Id,				# guiboss-imp indexes this value into *bounce_stuff to obtain (e.g.) a Guiboss_To_Bounce_Space port to the bounce-space-imp.
				widgets:		List ((Bounce_Widget, List(Bs_Layout)))		# The list of widgets to be drawn on the bounce-space. These can be placed arbitrarily.
			      }
	    #
	    | NULL_PACKED_WIDGET
	    ;

	Running_Gui =	      {	fire_end_gun:		Void -> Void,					# Calling this fn will cause all state and look imps in the gui to exit, saving their state to their oneshots.
				packed_space_id:	Packed_Space_Id,				# guiboss-imp indexes this value into *packed_stuff to obtain (e.g.) a Guiboss_To_Packed_Space port to the packed-space-imp.
				packed_widget:		Packed_Widget,					# The widget (or more commonly, tree of widgets) managed by the gui-tree's toplevel packed-space-imp.
				topwindow:		g2w::Guiboss_To_Topwindow			# The topwindow on which to draw our widgets.
			      };
    };

end;
