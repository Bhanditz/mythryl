## client-to-gui.pkg
#
# This port defines management calls to a guiboss imp from higher-level logic.
# Widgets managed by guiboss do not use this interface, they use
#     src/lib/x-kit/widget/gui/look-to-gui.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include threadkit;										# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package gp  =  gui_plan;									# gui_plan				is from   src/lib/x-kit/widget/gui/gui-plan.pkg
    package sg  =  stopped_gui;									# stopped_gui				is from   src/lib/x-kit/widget/gui/stopped-gui.pkg
    package bt  =  gui_to_bounce_theme;								# gui_to_bounce_theme			is from   src/lib/x-kit/widget/theme/bounce/gui-to-bounce-theme.pkg
    package ct  =  gui_to_canvas_theme;								# gui_to_canvas_theme			is from   src/lib/x-kit/widget/theme/canvas/gui-to-canvas-theme.pkg
    package pt  =  gui_to_packed_theme;								# gui_to_packed_theme			is from   src/lib/x-kit/widget/theme/packed/gui-to-packed-theme.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/gui/guiboss-imp.pkg
    #
    package client_to_gui {
	#
	Client_To_Gui
	  =
	  { id:			Id,								# Unique id to facilitate storing guiboss instances in indexed datastructures like red-black trees.
	    #
	    exercise_appwindow:	Void -> (Void -> Int),						# Executing returned thunk will wait for completion of window exercise.
	    #
	    get_bounce_theme:	Void -> bt::Gui_To_Bounce_Theme,
	    get_canvas_theme:	Void -> ct::Gui_To_Canvas_Theme,
	    get_packed_theme:	Void -> pt::Gui_To_Packed_Theme,
	    #
	    start_gui:			gp::Gui_Plan -> (Void -> Void),				# Calling return value will block microthread until gui-plan startup is complete.
	    restart_gui:		sg::Stopped_Gui -> (Void -> Void),			# Calling return value will block microthread until stopped-gui restart is complete.
	    stop_gui:		Void -> sg::Stopped_Gui
	  };

	Guiboss_Option
	  #
	  =  MICROTHREAD_NAME	String								# 
	  |  ID			Id								# Stable, unique id for imp.
	  ;	

	Guiboss_Arg =  List(Guiboss_Option);							# Currently no required component.

    };												# package guiboss;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
