## gui-plan.pkg
#
# A gui_plan is the most abstract gui representation;
# it holds widget eggs which preserve widget state
# information when the widgets are not running.
#
# When a gui is run, gui_boss converts the gui_plan
# it is given into a gui_tree tree which contains
# running widget imps in place of the widget eggs.
#
# The gui_tree tree in turn is then converted into
# a gui_tree which assigns each widget a specific
# pixel-rectangle on a specific window in which
# to draw itself.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    package bs  =  bounce_space;				# bounce_space				is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
    package osi =  bounce_space_imp;				# bounce_space_imp			is from   src/lib/x-kit/widget/space/bounce/bounce-space-imp.pkg

    package cs  =  canvas_space;				# canvas_space				is from   src/lib/x-kit/widget/space/canvas/canvas-space.pkg
    package csi =  canvas_space_imp;				# canvas_space_imp			is from   src/lib/x-kit/widget/space/canvas/canvas-space-imp.pkg

    package ps  =  packed_space;				# packed_space				is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    package psi =  packed_space_imp;				# packed_space_imp			is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg

    package pwe =  packed_widget_egg;				# packed_widget_egg			is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg

#   package ks  =  label_look_state;				# label_look_state			is from   src/lib/x-kit/widget/look/label-look-state.pkg
    #
    package ls  =  label_state;					# label_state				is from   src/lib/x-kit/widget/space/packed/label/label-state.pkg
    package lli =  label_look_imp;				# label_look_imp			is from   src/lib/x-kit/widget/theme/packed/look/label-look-imp.pkg
    package lsi =  label_state_imp;				# label_state_imp			is from   src/lib/x-kit/widget/space/packed/label/label-state-imp.pkg

    package bli =  ball_look_imp;				# ball_look_imp				is from   src/lib/x-kit/widget/theme/bounce/look/ball-look-imp.pkg
    package bsi =  ball_state_imp;				# ball_state_imp			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state-imp.pkg

    package nli =  node_look_imp;				# node_look_imp				is from   src/lib/x-kit/widget/theme/canvas/look/node-look-imp.pkg
    package nsi =  node_state_imp;				# node_state_imp			is from   src/lib/x-kit/widget/space/canvas/node/node-state-imp.pkg

    package kli =  knob_look_imp;				# knob_look_imp				is from   src/lib/x-kit/widget/theme/packed/look/knob-look-imp.pkg

    package blx =  default_ball_look_imp_for_x;			# default_ball_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-ball-look-imp-for-x.pkg
    package klx =  default_knob_look_imp_for_x;			# default_knob_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-knob-look-imp-for-x.pkg
    package llx =  default_label_look_imp_for_x;		# default_label_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-label-look-imp-for-x.pkg
    package nlx =  default_node_look_imp_for_x;			# default_node_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-node-look-imp-for-x.pkg
    package xlx =  default_xslider_look_imp_for_x;		# default_xslider_look_imp_for_x	is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-xslider-look-imp-for-x.pkg
    package ylx =  default_yslider_look_imp_for_x;		# default_yslider_look_imp_for_x	is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-yslider-look-imp-for-x.pkg

    package xli =  xslider_look_imp;				# xslider_look_imp;			is from   src/lib/x-kit/widget/theme/packed/look/xslider-look-imp.pkg
    package yli =  yslider_look_imp;				# yslider_look_imp			is from   src/lib/x-kit/widget/theme/packed/look/yslider-look-imp.pkg

    package ssi =  slider_state_imp;				# slider_state_imp			is from   src/lib/x-kit/widget/space/packed/slider/slider-state-imp.pkg

    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill		is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg

    package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package err =  error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    #
herein

    package gui_plan
    {
	#
	Bounce_Widget
	    #
	    = BALL		(bsi::Ball_Arg, bli::Ball_Look_Arg)

	also
	Canvas_Widget
	    #
	    = PACKED_SPACE	(psi::Packed_Space_Arg,  Packed_Widget)
	    #
	    | NODE		(nsi::Node_Arg, nli::Node_Look_Arg)

	also
	Packed_Widget
	    #
	    = ROW		 List( (Packed_Widget, List(ps::Packed_Space_Layout_Hint)) )
	    | COL		 List( (Packed_Widget, List(ps::Packed_Space_Layout_Hint)) )
	    #	
	    | LABEL		(lsi::Label_Arg,  lli::Label_Look_Arg)
	    | KNOB		(ssi::Slider_Arg, kli::Knob_Look_Arg)
	    | XSLIDER		(ssi::Slider_Arg, xli::Xslider_Look_Arg)
	    | YSLIDER		(ssi::Slider_Arg, yli::Yslider_Look_Arg)
	    #
	    | CANVAS_SPACE	(csi::Canvas_Space_Arg,  List((Canvas_Widget, List(cs::Canvas_Space_Layout_Hint))))
	    | BOUNCE_SPACE	(osi::Bounce_Space_Arg,  List((Bounce_Widget, List(bs::Bounce_Space_Layout_Hint))))
	    #
	    | NULL_PACKED_WIDGET
	    ;

	Gui_Plan =  (psi::Packed_Space_Arg,  Packed_Widget);

	fun pprint_gui_plan (gui_plan: Gui_Plan)							# "pprint" == "prettyprint".
	    =
	    pp::with_standard_prettyprint_mill
		#
		(err::default_plaint_sink ())	[]
		#
		(fn pp:   pp::Prettyprint_Mill
		    =
		    do_gui_plan  gui_plan
		    where
			fun do_gui_plan  gui_plan
			    =
			    do_packed_space  gui_plan

			also
			fun do_packed_space
			      ( packed_space_arg:	psi::Packed_Space_Arg,
				packed_widget:		Packed_Widget
			      )
			    =
			    {   pp.box {.
				    do_packed_space_arg  packed_space_arg;
				    do_packed_widget     packed_widget;
				};
				pp.newline();
			    }

			also
			fun do_bounce_space
			      (
				bounce_space_arg:	osi::Bounce_Space_Arg,
				bounce_widgets:		List(  (Bounce_Widget, List(bs::Bounce_Space_Layout_Hint))  )
			      )
			    =
			    {   pp.box {.
				    do_bounce_space_arg  bounce_space_arg;
				    do_bounce_widgets    bounce_widgets;
				};
				pp.newline();
			    }

			also
			fun do_bounce_space_arg  (bounce_space_arg:	osi::Bounce_Space_Arg)
			    =
			    {
				osi::pprint_bounce_space_arg  pp  bounce_space_arg;
				pp.newline();
			    }


			also
			fun do_bounce_space_layout_hints  (layout_hints: List(bs::Bounce_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  bs::Bounce_Space_Layout_Hint)
				    =
				    osi::pprint_bounce_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_bounce_widgets  (bounce_widgets:		List(  (Bounce_Widget, List(bs::Bounce_Space_Layout_Hint))  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";

				    fun do_widget (bounce_widget: Bounce_Widget,  layout_hints: List(bs::Bounce_Space_Layout_Hint))
					=
					pp.box {.
					    do_bounce_widget			bounce_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_bounce_space_layout_hints	layout_hints;
					};

				    pp::seq
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					bounce_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_bounce_widget  (bounce_widget:	Bounce_Widget)
			    =
			    case bounce_widget
				#
			        BALL	( ball_arg:		bsi::Ball_Arg,
					  ball_look_arg:	bli::Ball_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "BALL (";		pp.txt " ";
					    bsi::pprint_ball_arg  pp  ball_arg;
					    pp.txt ", ";
					    blx::pprint_ball_look_arg  pp  ball_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };
			    esac

			also
			fun do_canvas_space
			      (
				canvas_space_arg:	csi::Canvas_Space_Arg,
				canvas_widgets:		List(  (Canvas_Widget, List(cs::Canvas_Space_Layout_Hint))  )
			      )
			    =
			    {   pp.box {.
				    do_canvas_space_arg  canvas_space_arg;
				    do_canvas_widgets    canvas_widgets;
				};
				pp.newline();
			    }

			also
			fun do_canvas_space_arg  (canvas_space_arg:	csi::Canvas_Space_Arg)
			    =
			    {
				csi::pprint_canvas_space_arg  pp  canvas_space_arg;
				pp.newline();
			    }

			also
			fun do_canvas_space_layout_hints  (layout_hints: List(cs::Canvas_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  cs::Canvas_Space_Layout_Hint)
				    =
				    csi::pprint_canvas_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_canvas_widgets  (canvas_widgets:		List(  (Canvas_Widget, List(cs::Canvas_Space_Layout_Hint))  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";


				    fun do_widget (canvas_widget: Canvas_Widget,  layout_hints: List(cs::Canvas_Space_Layout_Hint))
					=
					pp.box {.
					    do_canvas_widget			canvas_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_canvas_space_layout_hints	layout_hints;
					};

				    pp::seq
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					canvas_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_canvas_widget  (canvas_widget:	Canvas_Widget)
			    =
			    case canvas_widget
				#
			        NODE	( node_arg:		nsi::Node_Arg,
					  node_look_arg:	nli::Node_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "NODE (";		pp.txt " ";
					    nsi::pprint_node_arg  pp  node_arg;
					    pp.txt ", ";
					    nlx::pprint_node_look_arg  pp  node_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        PACKED_SPACE  packed_space
				    =>
				    {
					pp.lit  "PACKED_SPACE ";
					pp.newline();
					do_packed_space packed_space;
					pp.newline();
				    };
			    esac

			also
			fun do_packed_space_arg  (packed_space_arg:	psi::Packed_Space_Arg)
			    =
			    {
				psi::pprint_packed_space_arg  pp  packed_space_arg;
				pp.newline();
			    }

			also
			fun do_packed_space_layout_hints  (layout_hints: List(ps::Packed_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  ps::Packed_Space_Layout_Hint)
				    =
				    psi::pprint_packed_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_packed_widget  (packed_widget:	Packed_Widget)
			    =
			    case packed_widget
				#
			        ROW	(widgets:	 List( (Packed_Widget, List(ps::Packed_Space_Layout_Hint)) ))
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "ROW [";
					    pp.ind 2;
					    pp.txt " ";

					    fun do_widget (packed_widget: Packed_Widget,  layout_hints: List(ps::Packed_Space_Layout_Hint))
						=
						pp.box {.
						    do_packed_widget			packed_widget;
						    pp.endlit ",";
						    pp.txt " ";
						    do_packed_space_layout_hints	layout_hints;
						};

					    pp::seq
						{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
						do_widget				# Print one list element.
						widgets;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "]";
					};
				    };

			        COL	(a:	 List( (Packed_Widget, List(ps::Packed_Space_Layout_Hint)) ))
				    =>
				    {
					pp.lit  "COL";
					pp.newline();
				    };

			        LABEL	( label_arg:		lsi::Label_Arg,
					  label_look_arg:	lli::Label_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "LABEL (";		pp.txt " ";
					    lsi::pprint_label_arg  pp  label_arg;
					    pp.txt ", ";
					    llx::pprint_label_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        KNOB	( slider_arg:		ssi::Slider_Arg,
					  knob_look_arg:	kli::Knob_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "KNOB (";		pp.txt " ";
					    ssi::pprint_slider_arg  pp  slider_arg;
					    pp.txt ", ";
					    klx::pprint_knob_look_arg  pp  knob_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        XSLIDER ( slider_arg:		ssi::Slider_Arg,
					  xslider_look_arg:	xli::Xslider_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "XSLIDER (";		pp.txt " ";
					    ssi::pprint_slider_arg  pp  slider_arg;
					    pp.txt ", ";
					    xlx::pprint_xslider_look_arg  pp  xslider_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };
			      
			        YSLIDER ( slider_arg:		ssi::Slider_Arg,
					  yslider_look_arg:	yli::Yslider_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "YSLIDER (";		pp.txt " ";
					    ssi::pprint_slider_arg  pp  slider_arg;
					    pp.txt ", ";
					    ylx::pprint_yslider_look_arg  pp  yslider_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };
			      
			        CANVAS_SPACE (canvas_space:	(csi::Canvas_Space_Arg,  List((Canvas_Widget, List(cs::Canvas_Space_Layout_Hint)))))
				    =>
				    {
					pp.lit  "CANVAS_SPACE";
					do_canvas_space  canvas_space;
					pp.newline();
				    };

			        BOUNCE_SPACE (bounce_space:	(osi::Bounce_Space_Arg,  List((Bounce_Widget, List(bs::Bounce_Space_Layout_Hint)))))
				    =>
				    {
					pp.lit  "BOUNCE_SPACE";
					do_bounce_space  bounce_space;
					pp.newline();
				    };
			      
			        NULL_PACKED_WIDGET
				    =>
				    {
					pp.lit  "NULL_PACKED_WIDGET";
					pp.newline();
				    };
			    esac;
		    end
		);
    };

end;
