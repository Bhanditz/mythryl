## gui-boss-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    package gp  =  gui_plan;					# gui_plan			is from   src/lib/x-kit/widget/gui/gui-plan.pkg
    package gt  =  gui_tree;					# gui_tree			is from   src/lib/x-kit/widget/gui/gui-tree.pkg

    package bt  =  bounce_theme;				# bounce_theme			is from   src/lib/x-kit/widget/theme/bounce/bounce-theme.pkg
    package ct  =  canvas_theme;				# canvas_theme			is from   src/lib/x-kit/widget/theme/canvas/canvas-theme.pkg
    package tp  =  packed_theme;				# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg

    package bs  =  bounce_space;				# bounce_space			is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
    package cs  =  canvas_space;				# canvas_space			is from   src/lib/x-kit/widget/space/canvas/canvas-space.pkg
    package ps  =  packed_space;				# packed_space			is from   src/lib/x-kit/widget/space/packed/packed-space.pkg

    package bai =  bounce_space_imp;				# bounce_space_imp		is from   src/lib/x-kit/widget/space/bounce/bounce-space-imp.pkg
    package cai =  canvas_space_imp;				# canvas_space_imp		is from   src/lib/x-kit/widget/space/canvas/canvas-space-imp.pkg
    package pai =  packed_space_imp;				# packed_space_imp		is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg

    package kli =     knob_look_imp;				#    knob_look_imp		is from   src/lib/x-kit/widget/theme/packed/look/knob-look-imp.pkg
    package lli =    label_look_imp;				#   label_look_imp		is from   src/lib/x-kit/widget/theme/packed/look/label-look-imp.pkg
    package xli =  xslider_look_imp;				# xslider_look_imp		is from   src/lib/x-kit/widget/theme/packed/look/xslider-look-imp.pkg
    package yli =  yslider_look_imp;				# yslider_look_imp		is from   src/lib/x-kit/widget/theme/packed/look/yslider-look-imp.pkg

    package lsi =   label_state_imp;				#  label_state_imp		is from   src/lib/x-kit/widget/space/packed/label/label-state-imp.pkg
    package ssi =  slider_state_imp;				# slider_state_imp		is from   src/lib/x-kit/widget/space/packed/slider/slider-state-imp.pkg

    package kl  =    knob_look;					#   knob_look			is from   src/lib/x-kit/widget/theme/packed/knob/knob-look.pkg
    package ll  =   label_look;					#  label_look			is from   src/lib/x-kit/widget/theme/packed/look/label-look.pkg
    package xl  = xslider_look;					# xslider_look			is from   src/lib/x-kit/widget/theme/packed/look/xslider-look.pkg
    package yl  = yslider_look;					# yslider_look			is from   src/lib/x-kit/widget/theme/packed/look/yslider-look.pkg

    package ls  =   label_state;				#  label_state			is from   src/lib/x-kit/widget/space/packed/label/label-state.pkg
    package ss  =  slider_state;				# slider_state			is from   src/lib/x-kit/widget/space/packed/slider/slider-state.pkg

    tracefile   =  "widget-unit-test.trace.log";
herein

    package gui_boss_imp
    :       Gui_Boss_Imp												# Gui_Boss_Imp			is from   src/lib/x-kit/widget/gui/gui-boss-imp.api
    {
	#
	include gui_boss;												# gui_boss			is from   src/lib/x-kit/widget/gui/gui-boss.pkg
	#
	Gui_Boss_State
	    =
	    Ref( Null_Or( gt::Gui_Tree ) );								# Holds all nonephemeral mutable state maintained by shape.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:			Int -> Void,
		    bounce_theme:		bt::Bounce_Theme,
		    canvas_theme:		ct::Canvas_Theme,
		    packed_theme:		tp::Packed_Theme
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Gui_Boss_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );

	Exports	= {													# Ports we provide for use by other imps.
		    gui_boss:	Gui_Boss
		  };


	Option = MICROTHREAD_NAME String;										# 

	Gui_Boss_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	Runstate =  {													# These values will be statically globally visible throughout the code body for the imp.
		      me:		Gui_Boss_State,									# State which is preserved across imp shutdown/restart cycles.
		      imports:		Imports,									# Imps to which we send requests.
		      to:		Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		      end_gun':		End_Gun										# We shut down the microthread when this fires.
		    };

	Gui_Boss_Q    = Mailqueue( Runstate -> Void );

	fun run ( gui_boss_q:		Gui_Boss_Q,									# 
		  #
		  runstate as
		  {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Gui_Boss_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun										# We shut down the microthread when this fires.
		  }
		)
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                        ==>  shut_down_gui_boss_imp'),
			    (take_from_mailqueue' gui_boss_q ==>  do_gui_boss_plea)
			];

			loop ();
		    }	
		    where
			fun do_gui_boss_plea  thunk
			    =
			    thunk runstate;

			fun shut_down_gui_boss_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };
		    end;
	    end;	

	fun end_gui'
	      (
		{ me:		Gui_Boss_State,										# State which is preserved across imp shutdown/restart cycles.
		  imports:	Imports,										# Imps to which we send requests.
		  to:		Replyqueue,										# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		  end_gun':	End_Gun											# We shut down the microthread when this fires.
		}:		Runstate
	      )
	    =
	    case *me
		THE { fire_end_gun:	Void -> Void,									# Signal which will shut down the GUI impnet.
		      #
		      packed_space:	ps::Packed_Space,								# Runtime GUI state synthesized locally per client spec.
		      packed_widget':	gt::Packed_Widget,								# "                                       ".
		      #
		      packed_space_arg:	pai::Packed_Space_Arg,								# Original GUI spec provided by client code.
		      packed_widget:	gp::Packed_Widget								# "                                       ".
		    }
		    : Null_Or( gt::Gui_Tree )
		    =>
		    {
printf "end_gui' doing fire_end_gun() -- gui-boss-imp.pkg\n";
			fire_end_gun ();										# Shut down Gui impnet.
printf "end_gui' done  fire_end_gun() -- gui-boss-imp.pkg\n";
			#
			(packed_space_arg, packed_widget);								# Return sufficient information to recreate the GUI.
		    };													#

		NULL =>
		    {   msg = "end_gui called before run_gui?!\n";
			print msg;
			raise exception FAIL msg;
		    };
	    esac;

	fun run_gui'
	      (
		{ me:		Gui_Boss_State,										# State which is preserved across imp shutdown/restart cycles.
		  imports:	Imports,										# Imps to which we send requests.
		  to:		Replyqueue,										# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		  end_gun':	End_Gun											# We shut down the microthread when this fires.
		}:		Runstate,
	
		gui_plan:	gp::Gui_Plan
	      )
	    =
	    {
printf "gui-boss/run_gui' constructing gui_tree from gui_plan...\n";
		gui_tree = gui_plan__to__gui_tree  gui_plan;
printf "gui-boss/run_gui' done constructing gui_tree from gui_plan...\n";
		me := THE gui_tree;
printf "gui-boss/run_gui' firing run gun...\n";
		fire_run_gun ();
printf "gui-boss/run_gui' fired  run gun...\n";

		();
	    }
	    where
		(make_run_gun ()) ->   { run_gun', fire_run_gun };
		(make_end_gun ()) ->   { end_gun', fire_end_gun };

		fun gui_plan__to__gui_tree
		    (
		      packed_space_arg:		pai::Packed_Space_Arg,
		      packed_widget:		gp::Packed_Widget
		    )
		    : gt::Gui_Tree
		    =
		    {
			packed_space   = do_packed_space  packed_space_arg;
			packed_widget' = do_packed_widget packed_widget;

			{ fire_end_gun,
			  packed_space,
			  packed_widget',
			  packed_space_arg,
			  packed_widget
			};
#	Gui_Tree =  { fire_end_gun:	Void -> Void,
#		      packed_space:	ps::Packed_Space,
#		      packed_widget':	Packed_Widget:
#		      packed_space_arg:	pai::Packed_Space_Arg,
#		      packed_widget:	gp::Packed_Widget
#		    };
		    }
		    where

			fun do_packed_space  (packed_space_arg: pai::Packed_Space_Arg)
			    =
			    {
				packed_space_egg
				    =
				    pai::make_packed_space_egg  packed_space_arg;

				(packed_space_egg ())
				    ->
				    ({ packed_space }, packed_space_egg');

				packed_space_imports =  { int_sink => fn (i: Int) = () };

				packed_space_egg' (packed_space_imports, run_gun', end_gun');

				packed_space;
			    }

			also
			fun do_packed_widget (packed_widget: gp::Packed_Widget)
			    =
			    case packed_widget
				#
			        gp::ROW	(packed_widgets:	 List( (gp::Packed_Widget, List(ps::Layout_Hint)) ))
				    =>
				    {
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					packed_widgets' =   map  do_packed_widget'  packed_widgets
							    where
								fun do_packed_widget'
								    (
								      packed_widget:	gp::Packed_Widget,
								      layout_hints:	List( ps::Layout_Hint )
								    )
								    =
								    do_packed_widget  packed_widget;
							    end;

					gt::ROW (packed_widgets', widget_site, packed_widgets);
				    };

			        gp::COL	(packed_widgets:	 List( (gp::Packed_Widget, List(ps::Layout_Hint)) ))
				    =>
				    {
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					packed_widgets' =   map  do_packed_widget'  packed_widgets
							    where
								fun do_packed_widget'
								    (
								      packed_widget:	gp::Packed_Widget,
								      layout_hints:	List( ps::Layout_Hint )
								    )
								    =
								    do_packed_widget  packed_widget;
							    end;

					gt::COL (packed_widgets', widget_site, packed_widgets);
				    };

			        gp::LABEL
				    ( label_arg as (label_state_needs, label_state_options):		lsi::Label_Arg,
				      label_look_arg:							lli::Label_Look_Arg
				    )
				    =>
				    {   final_state_oneshot  =  make_oneshot_maildrop():  Oneshot_Maildrop( lsi::Label_Arg  );
					label_state_oneshot  =  make_oneshot_maildrop():  Oneshot_Maildrop( ls::Label_State );
					label_look_oneshot   =  make_oneshot_maildrop():  Oneshot_Maildrop( ll::Label_Look  );

					label_state_thunk    =   (fn label_state = put_in_oneshot (label_state_oneshot, label_state));
					label_look_thunk     =   (fn label_look  = put_in_oneshot (label_look_oneshot,  label_look));

					label_state_options  =   (lsi::LABEL_STATE_CALLBACK label_state_thunk)  !  label_state_options;
					label_look_arg	     =   (lli::LABEL_LOOK_CALLBACK  label_look_thunk )  !  label_look_arg;
					label_arg	     =   (label_state_needs, label_state_options);

					(imports.packed_theme.label (label_arg, label_look_arg) (THE final_state_oneshot))
					    ->
					    packed_widget_egg;

					(packed_widget_egg ()) -> ({ packed_widget_control }, packed_widget_egg');

					imports = { int_sink => (fn (i: Int) = ()) };

					packed_widget_egg' (imports, run_gun', end_gun');

					iostate = { wants_keystrokes  => REF FALSE,
						    wants_mouseclicks => REF FALSE
						  };
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					label_state = get_from_oneshot   label_state_oneshot;
					label_look  = get_from_oneshot   label_look_oneshot;

					gt::LABEL (packed_widget_control, label_state, label_look, iostate, widget_site, label_arg, label_look_arg);

# (lsi::Label_Arg,    lli::Label_Look_Arg) -> Null_Or(Oneshot_Maildrop(lsi::Label_Arg )) -> pwe::Packed_Widget_Egg,

				    };

			        gp::KNOB
				    ( slider_arg as (slider_state_needs, slider_state_options):		ssi::Slider_Arg,
				      knob_look_arg:							kli::Knob_Look_Arg
				    )
				    =>
				    {   final_state_oneshot  =  make_oneshot_maildrop():  Oneshot_Maildrop( ssi::Slider_Arg  );
					slider_state_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( ss::Slider_State );
					knob_look_oneshot    =  make_oneshot_maildrop():  Oneshot_Maildrop( kl::Knob_Look  );

					slider_state_thunk   =   (fn slider_state = put_in_oneshot (slider_state_oneshot, slider_state));
					knob_look_thunk      =   (fn knob_look    = put_in_oneshot (knob_look_oneshot,  knob_look));

					slider_state_options =   (ssi::SLIDER_STATE_CALLBACK slider_state_thunk)  !  slider_state_options;
					knob_look_arg	     =   (kli::KNOB_LOOK_CALLBACK       knob_look_thunk)  !  knob_look_arg;
					slider_arg	     =   (slider_state_needs, slider_state_options);

					(imports.packed_theme.knob (slider_arg, knob_look_arg) (THE final_state_oneshot))
					    ->
					    packed_widget_egg;

					(packed_widget_egg ()) -> ({ packed_widget_control }, packed_widget_egg');

					imports = { int_sink => (fn (i: Int) = ()) };

					packed_widget_egg' (imports, run_gun', end_gun');

					iostate = { wants_keystrokes  => REF FALSE,
						    wants_mouseclicks => REF FALSE
						  };
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					slider_state = get_from_oneshot   slider_state_oneshot;
					knob_look    = get_from_oneshot   knob_look_oneshot;

					gt::KNOB (packed_widget_control, slider_state, knob_look, iostate, widget_site, slider_arg, knob_look_arg);

# (ksi::Knob_Arg,    kli::Knob_Look_Arg) -> Null_Or(Oneshot_Maildrop(ksi::Knob_Arg )) -> pwe::Packed_Widget_Egg,

				    };

			        gp::XSLIDER
				    ( slider_arg as (slider_state_needs, slider_state_options):		ssi::Slider_Arg,
				      xslider_look_arg:							xli::Xslider_Look_Arg
				    )
				    =>
				    {   final_state_oneshot  =  make_oneshot_maildrop():  Oneshot_Maildrop( ssi::Slider_Arg  );
					slider_state_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( ss::Slider_State );
					xslider_look_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( xl::Xslider_Look  );

					slider_state_thunk   =   (fn slider_state = put_in_oneshot (slider_state_oneshot, slider_state));
					xslider_look_thunk   =   (fn xslider_look = put_in_oneshot (xslider_look_oneshot, xslider_look));

					slider_state_options =   (ssi::SLIDER_STATE_CALLBACK slider_state_thunk)  !  slider_state_options;
					xslider_look_arg     =   (xli::XSLIDER_LOOK_CALLBACK xslider_look_thunk)  !  xslider_look_arg;
					slider_arg	     =   (slider_state_needs, slider_state_options);

					(imports.packed_theme.xslider (slider_arg, xslider_look_arg) (THE final_state_oneshot))
					    ->
					    packed_widget_egg;

					(packed_widget_egg ()) -> ({ packed_widget_control }, packed_widget_egg');

					imports = { int_sink => (fn (i: Int) = ()) };

					packed_widget_egg' (imports, run_gun', end_gun');

					iostate = { wants_keystrokes  => REF FALSE,
						    wants_mouseclicks => REF FALSE
						  };
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					slider_state = get_from_oneshot   slider_state_oneshot;
					xslider_look = get_from_oneshot   xslider_look_oneshot;

					gt::XSLIDER (packed_widget_control, slider_state, xslider_look, iostate, widget_site, slider_arg, xslider_look_arg);

# (ksi::Xslider_Arg,    kli::Xslider_Look_Arg) -> Null_Or(Oneshot_Maildrop(ksi::Xslider_Arg )) -> pwe::Packed_Widget_Egg,
				    };

			        gp::YSLIDER
				    ( slider_arg as (slider_state_needs, slider_state_options):		ssi::Slider_Arg,
				      yslider_look_arg:							yli::Yslider_Look_Arg
				    )
				    =>
				    {   final_state_oneshot  =  make_oneshot_maildrop():  Oneshot_Maildrop( ssi::Slider_Arg  );
					slider_state_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( ss::Slider_State );
					yslider_look_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( yl::Yslider_Look  );

					slider_state_thunk   =   (fn slider_state = put_in_oneshot (slider_state_oneshot, slider_state));
					yslider_look_thunk   =   (fn yslider_look = put_in_oneshot (yslider_look_oneshot, yslider_look));

					slider_state_options =   (ssi::SLIDER_STATE_CALLBACK slider_state_thunk)  !  slider_state_options;
					yslider_look_arg     =   (yli::YSLIDER_LOOK_CALLBACK yslider_look_thunk)  !  yslider_look_arg;
					slider_arg	     =   (slider_state_needs, slider_state_options);

					(imports.packed_theme.yslider (slider_arg, yslider_look_arg) (THE final_state_oneshot))
					    ->
					    packed_widget_egg;

					(packed_widget_egg ()) -> ({ packed_widget_control }, packed_widget_egg');

					imports = { int_sink => (fn (i: Int) = ()) };

					packed_widget_egg' (imports, run_gun', end_gun');

					iostate = { wants_keystrokes  => REF FALSE,
						    wants_mouseclicks => REF FALSE
						  };
					widget_site = REF { row => 0, col => 0, rows => 0, cols => 0 };

					slider_state = get_from_oneshot   slider_state_oneshot;
					yslider_look = get_from_oneshot   yslider_look_oneshot;

					gt::YSLIDER (packed_widget_control, slider_state, yslider_look, iostate, widget_site, slider_arg, yslider_look_arg);

# (ksi::Yslider_Arg,    kli::Yslider_Look_Arg) -> Null_Or(Oneshot_Maildrop(ksi::Yslider_Arg )) -> pwe::Packed_Widget_Egg,
				    };

			        gp::CANVAS_SPACE
				    ( canvas_space_arg:	cai::Canvas_Space_Arg,
				      canvas_widgets:	List((gp::Canvas_Widget, List(cs::Layout_Hint)))
				    )
				    =>
gt::NULL_PACKED_WIDGET;	#    raise exception FAIL "unimplemented";

			        gp::BOUNCE_SPACE
				    ( bounce_space_arg:	bai::Bounce_Space_Arg,
				      bounce_widgets:	List((gp::Bounce_Widget, List(bs::Layout_Hint)))
				    )
				    =>
gt::NULL_PACKED_WIDGET;	#    raise exception FAIL "unimplemented";

			        gp::NULL_PACKED_WIDGET
				    =>
				    gt::NULL_PACKED_WIDGET;
			    esac;
		    end;	
	    end;


	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;

		gui_boss =    { do_something,
				pass_something,
				exercise_appwindow,
				run_gui,
				end_gui,
				get_bounce_theme,
				get_canvas_theme,
				get_packed_theme
			      };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { gui_boss }));						# Return value from gui_boss_egg'().

		(take_from_mailslot  me_slot)										# Imports from gui_boss_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run (gui_boss_q, { me, imports, to, end_gun' });							# Will not return.
	    }
	    where
		gui_boss_q     =  make_mailqueue (get_current_microthread()):  Gui_Boss_Q;


		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (gui_boss_q,
			#
			fn ({ imports, ... }: Runstate)
			    =
			    imports.int_sink i										# Demonstrate use of imports.
		    );


		fun exercise_appwindow ()										# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn ({ imports, to, ... }: Runstate)
				=
				imports.packed_theme.pass_appwindow_exercise_results
				    to
				    {.  put_in_oneshot (reply_oneshot, #i);   }
			);

			fn () =  get_from_oneshot reply_oneshot;
		    };


		fun run_gui (gui_plan: gp::Gui_Plan)									# PUBLIC.
		    =	
		    put_in_mailqueue  (gui_boss_q,
			#
			fn (runstate: Runstate)
			    =
			    run_gui' (runstate, gui_plan)
		    );


		fun end_gui ()												# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( gp::Gui_Plan );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn (runstate: Runstate)
				=
				put_in_oneshot  (reply_oneshot,  end_gui' runstate)
				
			);

			get_from_oneshot reply_oneshot;
		    };

		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn (_: Runstate)
				=
				put_in_oneshot (reply_oneshot, 0)
			);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun get_bounce_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( bt::Bounce_Theme );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn ({ imports, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, imports.bounce_theme)
			);

			get_from_oneshot reply_oneshot;
		    };

		fun get_canvas_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( ct::Canvas_Theme );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn ({ imports, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, imports.canvas_theme)
			);

			get_from_oneshot reply_oneshot;
		    };

		fun get_packed_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( tp::Packed_Theme );
			#
			put_in_mailqueue  (gui_boss_q,
			    #
			    fn ({ imports, ... }: Runstate)
				=
				put_in_oneshot (reply_oneshot, imports.packed_theme)
			);

			get_from_oneshot reply_oneshot;
		    };
	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_gui_boss_egg (options: List(Option))									# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "gui_boss" }))
		    ->
		    { name };
	
		me = REF NULL;

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    fun phase3											# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				(
				  imports:	Imports,
				  run_gun':	Run_Gun,	
				  end_gun':	End_Gun
				)
				=
				{
				    put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				};

			    (exports, phase3);
			};
	    };
    };

end;
