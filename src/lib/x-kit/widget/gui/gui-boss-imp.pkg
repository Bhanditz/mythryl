## gui-boss-imp.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ap  =  atom_port;					# atom_port			is from   src/lib/x-kit/xclient/src/iccc/atom-port.pkg
#   package au  =  authentication;				# authentication		is from   src/lib/x-kit/xclient/src/stuff/authentication.pkg
#   package cpm =  cs_pixmap;					# cs_pixmap			is from   src/lib/x-kit/xclient/src/window/cs-pixmap.pkg
#   package cpt =  cs_pixmat;					# cs_pixmat			is from   src/lib/x-kit/xclient/src/window/cs-pixmat.pkg
#   package dy  =  display;					# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
#   package et  =  event_types;					# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
#   package exp =  xserver;					# xserver			is from   src/lib/x-kit/xclient/src/window/xserver.pkg
#   package fil =  file__premicrothread;			# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
#   package fti =  font_index;					# font_index			is from	  src/lib/x-kit/xclient/src/window/font-index.pkg
    package gd  =  gui_definition;				# gui_definition		is from   src/lib/x-kit/widget/gui/gui-definition.pkg
#   package kp  =  keymap;					# keymap			is from   src/lib/x-kit/xclient/src/window/keymap.pkg
#   package mtx =  rw_matrix;					# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
#   package r8  =  rgb8;					# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package rgb =  rgb;						# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
#   package rop =  ro_pixmap;					# ro_pixmap			is from   src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#   package rw  =  root_window;					# root_window			is from   src/lib/x-kit/widget/lib/root-window.pkg
#   package rwv =  rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
#   package s2p =  xevent_to_window;				# xevent_to_window		is from   src/lib/x-kit/xclient/src/window/xevent-to-window.pkg
#   package sep =  selection_port;				# selection_port		is from   src/lib/x-kit/xclient/src/window/selection-port.pkg
#   package shp =  shade;					# shade				is from   src/lib/x-kit/widget/lib/shade.pkg
#   package sj  =  socket_junk;					# socket_junk			is from   src/lib/internet/socket-junk.pkg
#   package sp  =  xsequencer;					# xsequencer			is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
    package bt  =  bounce_theme;				# bounce_theme			is from   src/lib/x-kit/widget/theme/bounce/bounce-theme.pkg
    package ct  =  canvas_theme;				# canvas_theme			is from   src/lib/x-kit/widget/theme/canvas/canvas-theme.pkg
    package tp  =  packed_theme;				# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg
#   package tr  =  logger;					# logger			is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
#   package tsr =  thread_scheduler_is_running;			# thread_scheduler_is_running	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler-is-running.pkg
#   package u1  =  one_byte_unt;				# one_byte_unt			is from   src/lib/std/one-byte-unt.pkg
#   package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
#   package v2w =  value_to_wire;				# value_to_wire			is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
#   package wg  =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
#   package wi  =  window;					# window			is from   src/lib/x-kit/xclient/src/window/window.pkg
#   package wme =  window_map_event_sink;			# window_map_event_sink		is from   src/lib/x-kit/xclient/src/window/window-map-event-sink.pkg
#   package wpp =  window_watcher;				# window_watcher		is from   src/lib/x-kit/xclient/src/window/window-watcher.pkg
#   package wy  =  widget_style;				# widget_style			is from   src/lib/x-kit/widget/lib/widget-style.pkg
#   package x2s =  xevent_to_string;				# xevent_to_string		is from   src/lib/x-kit/xclient/src/to-string/xevent-to-string.pkg
#   package xc  =  xclient;					# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package xg  =  xgeometry;					# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
#   package xj  =  xsession_junk;				# xsession_junk			is from   src/lib/x-kit/xclient/src/window/xsession-junk.pkg
#   package xt  =  xtypes;					# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
#   package xtr =  xlogger;					# xlogger			is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package gui_boss_imp
    :       Gui_Boss_Imp												# Gui_Boss_Imp			is from   src/lib/x-kit/widget/gui/gui-boss-imp.api
    {
	#
	include gui_boss;												# gui_boss			is from   src/lib/x-kit/widget/gui/gui-boss.pkg
	#
	Gui_Boss_State = Ref( Void );											# Opaque wrapper for all nonephemeral mutable state maintained by shape.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink:			Int -> Void,
		    bounce_theme:		bt::Bounce_Theme,
		    canvas_theme:		ct::Canvas_Theme,
		    packed_theme:		tp::Packed_Theme
		  };

	Me_Slot = Mailslot( { imports:	Imports,
			      me:	Gui_Boss_State,
			      run_gun':	Run_Gun,
			      end_gun':	End_Gun
			    }
			  );

	Gui_Boss_Plea =  DO_SOMETHING Int
		       |  EXERCISE_APPWINDOW	Oneshot_Maildrop(Int)
		       |  PASS_SOMETHING	Oneshot_Maildrop( Int )
		       |  RUN_GUI		gd::Gui_Definition
		       |  GET_BOUNCE_THEME	Oneshot_Maildrop(bt::Bounce_Theme)
		       |  GET_CANVAS_THEME	Oneshot_Maildrop(ct::Canvas_Theme)
		       |  GET_PACKED_THEME	Oneshot_Maildrop(tp::Packed_Theme)
		       ;

	Gui_Boss_Q    = Mailqueue( Gui_Boss_Plea );


	Exports	= {													# Ports we provide for use by other imps.
		    gui_boss:	Gui_Boss
		  };


	Option = MICROTHREAD_NAME String;										# 

	Gui_Boss_Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);

	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Gui_Boss_State,									# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Imps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to {. ... }   syntax read well.
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    gui_boss_q:		Gui_Boss_Q									# 
		}
	    =
	    loop ()
	    where
		fun exercise_appwindow  (reply_oneshot:  Oneshot_Maildrop(Int))
		    =
		    imports.packed_theme.pass_appwindow_exercise_results
			to
			{.  put_in_oneshot (reply_oneshot, #i);   };

		fun run_gui  (gui:  gd::Gui_Definition)
		    =
		    ();

		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                         ==>  shut_down_gui_boss_imp'),
			    (take_from_mailqueue' gui_boss_q    ==>  do_gui_boss_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_gui_boss_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_gui_boss_plea  (DO_SOMETHING i)
			        =>
				{   imports.int_sink i;									# Demonstrate use of imports.
				};

			    do_gui_boss_plea  (EXERCISE_APPWINDOW reply_oneshot)
				=>
				exercise_appwindow  reply_oneshot;

			    do_gui_boss_plea  (RUN_GUI gui)
				=>
				run_gui  gui;

			    do_gui_boss_plea  (PASS_SOMETHING reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, 0);
				};

			    do_gui_boss_plea  (GET_BOUNCE_THEME reply_oneshot) =>  {   put_in_oneshot (reply_oneshot, imports.bounce_theme); };
			    do_gui_boss_plea  (GET_CANVAS_THEME reply_oneshot) =>  {   put_in_oneshot (reply_oneshot, imports.canvas_theme); };
			    do_gui_boss_plea  (GET_PACKED_THEME reply_oneshot) =>  {   put_in_oneshot (reply_oneshot, imports.packed_theme); };

			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Me_Slot, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   me_slot  =  make_mailslot  ()	:  Me_Slot;

		gui_boss =   { do_something,
				pass_something,
				exercise_appwindow,
				run_gui,
				get_bounce_theme,
				get_canvas_theme,
				get_packed_theme
			      };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (me_slot, { gui_boss }));						# Return value from gui_boss_egg'().

		(take_from_mailslot  me_slot)										# Imports from gui_boss_egg'().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, gui_boss_q, imports, to, end_gun' };								# Will not return.
	    }
	    where
		gui_boss_q     =  make_mailqueue (get_current_microthread()):  Gui_Boss_Q;


		fun do_something (i: Int)										# PUBLIC.
		    =	
		    put_in_mailqueue  (gui_boss_q, DO_SOMETHING i);


		fun exercise_appwindow ()										# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (gui_boss_q, EXERCISE_APPWINDOW reply_oneshot);

			fn () =  get_from_oneshot reply_oneshot;
		    };


		fun run_gui (gui: gd::Gui_Definition)									# PUBLIC.
		    =	
		    put_in_mailqueue  (gui_boss_q, RUN_GUI gui);


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# PUBLIC.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (gui_boss_q, PASS_SOMETHING reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun get_bounce_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( bt::Bounce_Theme );
			#
			put_in_mailqueue  (gui_boss_q, GET_BOUNCE_THEME reply_oneshot);

			get_from_oneshot reply_oneshot;
		    };

		fun get_canvas_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( ct::Canvas_Theme );
			#
			put_in_mailqueue  (gui_boss_q, GET_CANVAS_THEME reply_oneshot);

			get_from_oneshot reply_oneshot;
		    };

		fun get_packed_theme ()											# PUBLIC.
		    =	
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( tp::Packed_Theme );
			#
			put_in_mailqueue  (gui_boss_q, GET_PACKED_THEME reply_oneshot);

			get_from_oneshot reply_oneshot;
		    };
	    end;


	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };


        ##########################################################################################
	# PUBLIC.
	#
	fun make_gui_boss_egg (options: List(Option))									# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	    =
	    {   (process_options (options, { name => "gui_boss" }))
		    ->
		    { name };
	
		me = REF ();

		fn () = {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Me_Slot, Exports) );		# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    xlogger::make_thread  name  (startup  reply_oneshot);					# Note that startup() is curried.

			    (get_from_oneshot  reply_oneshot) -> (me_slot, exports);

			    phase3
				=
				fn  ( imports:	Imports,								# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				      run_gun':	Run_Gun,	
				      end_gun':	End_Gun
				    )
				    =
				    {
					put_in_mailslot  (me_slot, { me, imports, run_gun', end_gun' });
				    };

			    (exports, phase3);
			};
	    };
    };

end;
