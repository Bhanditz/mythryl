## stopped-gui.pkg
#
# A stopped_gui is an abstract gui specification.  Client
# code constructs a stopped_gui to describe a desired gui
# and hands it to gui-boss-imp to run.
#
# When gui_boss::restart_gui is called, gui_boss converts
# the stopped_gui it is given into a running_gui tree which
# contains running widget imps and records all runtime-
# relevant information.
#
# When gui_boss::stop_gui is called, the runtime running_gui
# is converted back into a stopped_gui which preserves the
# state of the GUI at shutdown time, for possible later
# resumption via gui_boss::restart_gui.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    package os  =  bounce_space;				# bounce_space				is from   src/lib/x-kit/widget/space/bounce/bounce-space.pkg
    package osi =  bounce_space_imp;				# bounce_space_imp			is from   src/lib/x-kit/widget/space/bounce/bounce-space-imp.pkg

    package cs  =  canvas_space;				# canvas_space				is from   src/lib/x-kit/widget/space/canvas/canvas-space.pkg
    package csi =  canvas_space_imp;				# canvas_space_imp			is from   src/lib/x-kit/widget/space/canvas/canvas-space-imp.pkg

    package ps  =  packed_space;				# packed_space				is from   src/lib/x-kit/widget/space/packed/packed-space.pkg
    package psi =  packed_space_imp;				# packed_space_imp			is from   src/lib/x-kit/widget/space/packed/packed-space-imp.pkg

    package pwe =  packed_widget_egg;				# packed_widget_egg			is from   src/lib/x-kit/widget/space/packed/packed-widget-egg.pkg

#   package ks  =  label_look_state;				# label_look_state			is from   src/lib/x-kit/widget/look/label-look-state.pkg
    #
    package c2f =  client_to_float_state;			# client_to_float_state			is from   src/lib/x-kit/widget/space/packed/client-to-float-state.pkg
    package c2i =  client_to_int_state;				# client_to_int_state			is from   src/lib/x-kit/widget/space/packed/client-to-int-state.pkg
    package c2m =  client_to_image_state;			# client_to_image_state			is from   src/lib/x-kit/widget/space/packed/client-to-image-state.pkg
    package c2s =  client_to_string_state;			# client_to_string_state		is from   src/lib/x-kit/widget/space/packed/client-to-string-state.pkg
    package c2t =  client_to_bool_state;	/* t==TRUE */	# client_to_bool_state			is from   src/lib/x-kit/widget/space/packed/client-to-bool-state.pkg
    package c2x =  client_to_exception_state;			# client_to_exception_state		is from   src/lib/x-kit/widget/space/packed/client-to-exception-state.pkg

    package fsi =  float_state_imp;				# float_state_imp			is from   src/lib/x-kit/widget/space/packed/float-state-imp.pkg
    package isi =  int_state_imp;				# int_state_imp				is from   src/lib/x-kit/widget/space/packed/int-state-imp.pkg
    package msi =  image_state_imp;				# image_state_imp			is from   src/lib/x-kit/widget/space/packed/image-state-imp.pkg
    package ssi =  string_state_imp;				# string_state_imp			is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg
    package tsi =  bool_state_imp;				# bool_state_imp			is from   src/lib/x-kit/widget/space/packed/string-state-imp.pkg
    package xsi =  exception_state_imp;				# exception_state_imp			is from   src/lib/x-kit/widget/space/packed/exception-state-imp.pkg

    package flx =  float_look_imp_for_x;			# float_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/float-look-imp-for-x.pkg
    package ilx =  int_look_imp_for_x;				# int_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/int-look-imp-for-x.pkg
    package mlx =  image_look_imp_for_x;			# image_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/image-look-imp-for-x.pkg
    package slx =  string_look_imp_for_x;			# string_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/string-look-imp-for-x.pkg
    package tlx =  bool_look_imp_for_x;				# bool_look_imp_for_x			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/bool-look-imp-for-x.pkg
    package xlx =  exception_look_imp_for_x;			# exception_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/exception-look-imp-for-x.pkg

    package pl  =   packed_look;				# packed_look				is from   src/lib/x-kit/widget/theme/packed/look/packed-look.pkg
    package nl  =    node_look;					#  node_look				is from   src/lib/x-kit/widget/theme/canvas/look/node-look.pkg

    package bl  =  ball_look;					# ball_look				is from   src/lib/x-kit/widget/theme/bounce/look/ball-look.pkg
    package bs  =  ball_state;					# ball_state				is from   src/lib/x-kit/widget/space/bounce/ball/ball-state.pkg
    package bsi =  ball_state_imp;				# ball_state_imp			is from   src/lib/x-kit/widget/space/bounce/ball/ball-state-imp.pkg

    package ns  =  node_state;					# node_state				is from   src/lib/x-kit/widget/space/canvas/node/node-state.pkg
    package nsi =  node_state_imp;				# node_state_imp			is from   src/lib/x-kit/widget/space/canvas/node/node-state-imp.pkg

    package blx =  default_ball_look_imp_for_x;			# default_ball_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-ball-look-imp-for-x.pkg
    package nlx =  default_node_look_imp_for_x;			# default_node_look_imp_for_x		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/default-node-look-imp-for-x.pkg


    package pp  =  standard_prettyprint_mill;			# standard_prettyprint_mill		is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg

    package blh =  bounce_space_layout_hint;			# bounce_space_layout_hint		is from   src/lib/x-kit/widget/space/bounce/bounce-space-layout-hint.pkg
    package clh =  canvas_space_layout_hint;			# canvas_space_layout_hint		is from   src/lib/x-kit/widget/space/canvas/canvas-space-layout-hint.pkg
    package plh =  packed_space_layout_hint;			# packed_space_layout_hint		is from   src/lib/x-kit/widget/space/packed/packed-space-layout-hint.pkg

    package xg  =  xgeometry;					# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;					# xtypes				is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package r8  =  rgb8;					# rgb8					is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
#   package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package err =  error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    #
herein

    package stopped_gui
    {
	#
	Bounce_Widget
	    #
	    = BALL		(bs::Ball_Arg, bl::Ball_Look_Arg)

	also
	Canvas_Widget
	    #
	    = PACKED_SPACE	(ps::Packed_Space_Arg,  Packed_Widget)
	    #
	    | NODE		(ns::Node_Arg, nl::Node_Look_Arg)

	also
	Packed_Widget
	    #
	    = ROW		 List( (Packed_Widget, List(plh::Packed_Space_Layout_Hint)) )
	    | COL		 List( (Packed_Widget, List(plh::Packed_Space_Layout_Hint)) )
	    #	
	    | BOOL		(c2t::Make_Arg,  pl::Packed_Look_Arg)
	    | EXCEPTION		(c2x::Make_Arg,  pl::Packed_Look_Arg)
	    | FLOAT		(c2f::Make_Arg,  pl::Packed_Look_Arg)
	    | IMAGE		(c2m::Make_Arg,  pl::Packed_Look_Arg)
	    | INT		(c2i::Make_Arg,  pl::Packed_Look_Arg)
	    | STRING		(c2s::Make_Arg,  pl::Packed_Look_Arg)
	    #
	    | CANVAS_SPACE	(cs::Canvas_Space_Arg,  List((Canvas_Widget, List(clh::Canvas_Space_Layout_Hint))))
	    | BOUNCE_SPACE	(os::Bounce_Space_Arg,  List((Bounce_Widget, List(blh::Bounce_Space_Layout_Hint))))
	    #
	    | NULL_PACKED_WIDGET									# Note[1]
	    ;

	Stopped_Gui =  (ps::Packed_Space_Arg,  Packed_Widget);

	fun pprint_stopped_gui (stopped_gui: Stopped_Gui)							# "pprint" == "prettyprint".
	    =
	    pp::with_standard_prettyprint_mill
		#
		(err::default_plaint_sink ())	[]
		#
		(fn pp:   pp::Prettyprint_Mill
		    =
		    do_stopped_gui  stopped_gui
		    where
			fun do_stopped_gui  stopped_gui
			    =
			    do_packed_space  stopped_gui

			also
			fun do_packed_space
			      ( packed_space_arg:	ps::Packed_Space_Arg,
				packed_widget:		Packed_Widget
			      )
			    =
			    {   pp.box {.
				    do_packed_space_arg  packed_space_arg;
				    do_packed_widget     packed_widget;
				};
				pp.newline();
			    }

			also
			fun do_bounce_space
			      (
				bounce_space_arg:	os::Bounce_Space_Arg,
				bounce_widgets:		List(  (Bounce_Widget, List(blh::Bounce_Space_Layout_Hint))  )
			      )
			    =
			    {   pp.box {.
				    do_bounce_space_arg  bounce_space_arg;
				    do_bounce_widgets    bounce_widgets;
				};
				pp.newline();
			    }

			also
			fun do_bounce_space_arg  (bounce_space_arg:	os::Bounce_Space_Arg)
			    =
			    {
				osi::pprint_bounce_space_arg  pp  bounce_space_arg;
				pp.newline();
			    }


			also
			fun do_bounce_space_layout_hints  (layout_hints: List(blh::Bounce_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  blh::Bounce_Space_Layout_Hint)
				    =
				    osi::pprint_bounce_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_bounce_widgets  (bounce_widgets:		List(  (Bounce_Widget, List(blh::Bounce_Space_Layout_Hint))  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";

				    fun do_widget (bounce_widget: Bounce_Widget,  layout_hints: List(blh::Bounce_Space_Layout_Hint))
					=
					pp.box {.
					    do_bounce_widget			bounce_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_bounce_space_layout_hints	layout_hints;
					};

				    pp::seq
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					bounce_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_bounce_widget  (bounce_widget:	Bounce_Widget)
			    =
			    case bounce_widget
				#
			        BALL	( ball_arg:		bs::Ball_Arg,
					  ball_look_arg:	bl::Ball_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "BALL (";		pp.txt " ";
					    bsi::pprint_ball_arg  pp  ball_arg;
					    pp.txt ", ";
					    blx::pprint_ball_look_arg  pp  ball_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };
			    esac

			also
			fun do_canvas_space
			      (
				canvas_space_arg:	cs::Canvas_Space_Arg,
				canvas_widgets:		List(  (Canvas_Widget, List(clh::Canvas_Space_Layout_Hint))  )
			      )
			    =
			    {   pp.box {.
				    do_canvas_space_arg  canvas_space_arg;
				    do_canvas_widgets    canvas_widgets;
				};
				pp.newline();
			    }

			also
			fun do_canvas_space_arg  (canvas_space_arg:	cs::Canvas_Space_Arg)
			    =
			    {
				csi::pprint_canvas_space_arg  pp  canvas_space_arg;
				pp.newline();
			    }

			also
			fun do_canvas_space_layout_hints  (layout_hints: List(clh::Canvas_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  clh::Canvas_Space_Layout_Hint)
				    =
				    csi::pprint_canvas_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_canvas_widgets  (canvas_widgets:		List(  (Canvas_Widget, List(clh::Canvas_Space_Layout_Hint))  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";


				    fun do_widget (canvas_widget: Canvas_Widget,  layout_hints: List(clh::Canvas_Space_Layout_Hint))
					=
					pp.box {.
					    do_canvas_widget			canvas_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_canvas_space_layout_hints	layout_hints;
					};

				    pp::seq
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					canvas_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_canvas_widget  (canvas_widget:	Canvas_Widget)
			    =
			    case canvas_widget
				#
			        NODE	( node_arg:		ns::Node_Arg,
					  node_look_arg:	nl::Node_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "NODE (";		pp.txt " ";
					    nsi::pprint_node_arg  pp  node_arg;
					    pp.txt ", ";
					    nlx::pprint_node_look_arg  pp  node_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        PACKED_SPACE  packed_space
				    =>
				    {
					pp.lit  "PACKED_SPACE ";
					pp.newline();
					do_packed_space packed_space;
					pp.newline();
				    };
			    esac

			also
			fun do_packed_space_arg  (packed_space_arg:	ps::Packed_Space_Arg)
			    =
			    {
				psi::pprint_packed_space_arg  pp  packed_space_arg;
				pp.newline();
			    }

			also
			fun do_packed_space_layout_hints  (layout_hints: List(plh::Packed_Space_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  plh::Packed_Space_Layout_Hint)
				    =
				    psi::pprint_packed_space_layout_hint  pp  hint;

				pp::list  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_packed_widget  (packed_widget:	Packed_Widget)
			    =
			    case packed_widget
				#
			        ROW	(widgets:	 List( (Packed_Widget, List(plh::Packed_Space_Layout_Hint)) ))
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "ROW [";
					    pp.ind 2;
					    pp.txt " ";

					    fun do_widget (packed_widget: Packed_Widget,  layout_hints: List(plh::Packed_Space_Layout_Hint))
						=
						pp.box {.
						    do_packed_widget			packed_widget;
						    pp.endlit ",";
						    pp.txt " ";
						    do_packed_space_layout_hints	layout_hints;
						};

					    pp::seq
						{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
						do_widget				# Print one list element.
						widgets;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "]";
					};
				    };

			        COL	(a:	 List( (Packed_Widget, List(plh::Packed_Space_Layout_Hint)) ))
				    =>
				    {
					pp.lit  "COL";
					pp.newline();
				    };

			        BOOL	( label_arg:		c2t::Make_Arg,
					  label_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "BOOL (";		pp.txt " ";
					    tsi::pprint_make_arg  pp  label_arg;
					    pp.txt ", ";
					    tlx::pprint_packed_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        EXCEPTION
					( label_arg:		c2x::Make_Arg,
					  label_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "EXCEPTION (";		pp.txt " ";
					    xsi::pprint_make_arg  pp  label_arg;
					    pp.txt ", ";
					    xlx::pprint_packed_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        STRING	( label_arg:		c2s::Make_Arg,
					  label_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "STRING (";		pp.txt " ";
					    ssi::pprint_make_arg  pp  label_arg;
					    pp.txt ", ";
					    slx::pprint_packed_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        IMAGE	( label_arg:		c2m::Make_Arg,
					  label_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "IMAGE (";		pp.txt " ";
					    msi::pprint_make_arg  pp  label_arg;
					    pp.txt ", ";
					    mlx::pprint_packed_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        INT	( label_arg:		c2i::Make_Arg,
					  label_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "INT (";		pp.txt " ";
					    isi::pprint_make_arg  pp  label_arg;
					    pp.txt ", ";
					    ilx::pprint_packed_look_arg  pp  label_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        FLOAT	( slider_arg:		c2f::Make_Arg,
					  knob_look_arg:	pl::Packed_Look_Arg
					)
				    =>
				    {
					pp.box {.
					    pp.lit  "FLOAT (";	pp.txt " ";
					    fsi::pprint_make_arg  pp  slider_arg;
					    pp.txt ", ";
					    flx::pprint_packed_look_arg  pp  knob_look_arg;
					    pp.lit  ")";
					};
					pp.newline();
				    };

			        CANVAS_SPACE (canvas_space:	(cs::Canvas_Space_Arg,  List((Canvas_Widget, List(clh::Canvas_Space_Layout_Hint)))))
				    =>
				    {
					pp.lit  "CANVAS_SPACE";
					do_canvas_space  canvas_space;
					pp.newline();
				    };

			        BOUNCE_SPACE (bounce_space:	(os::Bounce_Space_Arg,  List((Bounce_Widget, List(blh::Bounce_Space_Layout_Hint)))))
				    =>
				    {
					pp.lit  "BOUNCE_SPACE";
					do_bounce_space  bounce_space;
					pp.newline();
				    };
			      
			        NULL_PACKED_WIDGET
				    =>
				    {
					pp.lit  "NULL_PACKED_WIDGET";
					pp.newline();
				    };
			    esac;
		    end
		);
    };

end;


####################################################################################
# Note[1]
#    We need a NULL_PACKED_WIDGET but not a NULL_CANVAS_WIDGET or NULL_BOUNCE_WIDGET
#    because a Packed_Widget is a mandatory part of Stopped_Gui, but Bounce_Widget and
#    Canvas_Widget are always optional (an empty list is always permissible).