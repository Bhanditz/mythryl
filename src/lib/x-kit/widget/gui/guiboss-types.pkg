## guiboss-types.pkg
#
# Interface types for   src/lib/x-kit/widget/gui/guiboss-imp.pkg
#
# This file contains a great recursive black hole:  					# Originally this was a flock of separate files, but the natural recursive
# No type or function which enters it can ever escape.					# relationships proved just too difficult to avoid, so they all moved into
#											# this file where they can recursively refer to each other to their heart's
# We use three representations for a GUI with transition diagram			# content.  Sometimes it is best to just accept the inevitable...
#
#     Gui_Plan
#         |
#         v
#     Paused_Gui									# Gui_Plan -> Paused_Gui -> Running_Gui -> Paused_Gui -> Running_Gui is actually UNTESTED as yet. ***
#       |   ^										# (In practice we mainly do    Gui_Plan -> Paused_Gui -> Running_Gui and then kill_gui() the Running_Gui.)
#       v   |
#     Running_Gui
#
# The application programmers passes guiboss_imp a Gui_Plan
# to define the GUI, which is then converted to a Paused_Gui
# and at GUI startup time to a Running_Gui.
#     We support pausing and later restarting the GUI by a				# IN THEORY! :-)
# process of converting the Running_Gui back to a Paused_Gui
# and at restart the Paused_Gui again to a Running_Gui.
#
# In addition to defining the three GUI representations, this
# file defines most (but not all) of the major ports between
# guiboss_imp and other imps:								# "gadget" refers to any of "widget", "sprite" or "object".  (Most frequently, "widget".)
#
#	guiboss_to_gadget								# The general guiboss_imp -> gadget interface, used for forwarding user mouseclicks etc.  Most frequently used guiboss_imp -> widget_imp, but also to sprite_imp and object_imp.
#	gadget_to_guiboss								# The general gadget -> guiboss_imp interface, used for forwarding draw operations  etc.
#	guiboss_to_widgetspace								# The guiboss_imp -> widgetspace_imp, used to manage layout of widgets on windows.
#	guiboss-to-objectspace.pkg							# The guiboss_imp -> objectspace_imp, used to manage layout of objects on windows.
#	guiboss-to-spritespace.pkg							# The guiboss_imp -> spritespace_imp, used to manage layout of sprites on windows.
#     

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;							# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;								# geometry2d				is from   src/lib/std/2d/geometry2d.pkg
    package g2j =  geometry2d_junk;							# geometry2d_junk			is from   src/lib/std/2d/geometry2d-junk.pkg

    package pt  =  widget_theme;							# widget_theme				is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package evt =  gui_event_types;							# gui_event_types			is from   src/lib/x-kit/widget/gui/gui-event-types.pkg

    package w2p =  widget_to_widgetspace;						# widget_to_widgetspace			is from   src/lib/x-kit/widget/space/widget/widget-to-widgetspace.pkg   
    package p2w =  widgetspace_to_widget;						# widgetspace_to_widget			is from   src/lib/x-kit/widget/space/widget/widgetspace-to-widget.pkg

    package o2c =  object_to_objectspace;						# object_to_objectspace			is from   src/lib/x-kit/widget/space/object/object-to-objectspace.pkg   
    package c2o =  objectspace_to_object;						# objectspace_to_object			is from   src/lib/x-kit/widget/space/object/objectspace-to-object.pkg

    package s2b =  sprite_to_spritespace;						# sprite_to_spritespace			is from   src/lib/x-kit/widget/space/sprite/sprite-to-spritespace.pkg   
    package b2s =  spritespace_to_sprite;						# spritespace_to_sprite			is from   src/lib/x-kit/widget/space/sprite/spritespace-to-sprite.pkg

    package g2p =  gadget_to_pixmap;							# gadget_to_pixmap			is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
#   package s2g =  space_to_gui;							# space_to_gui				is from   src/lib/x-kit/widget/gui/space-to-gui.pkg

    package im  =  int_red_black_map;							# int_red_black_map			is from   src/lib/src/int-red-black-map.pkg
    package iul =  issue_unique_look_id;						# issue_unique_look_id			is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
    package gws =  guiboss_to_windowsystem;						# guiboss_to_windowsystem		is from   src/lib/x-kit/widget/theme/guiboss-to-windowsystem.pkg

    package pp  =  standard_prettyprint_mill;						# standard_prettyprint_mill		is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg

    package lms =  list_mergesort;							# list_mergesort			is from   src/lib/src/list-mergesort.pkg

    package blh =  spritespace_layout_hint;						# spritespace_layout_hint		is from   src/lib/x-kit/widget/space/sprite/spritespace-layout-hint.pkg
    package clh =  objectspace_layout_hint;						# objectspace_layout_hint		is from   src/lib/x-kit/widget/space/object/objectspace-layout-hint.pkg

    package err =  error_message;							# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg

    package gd  =  gui_displaylist;							# gui_displaylist			is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg


    # Some abbreviations because line length was getting out of hand below:
    #
    Bs_Layout =  blh::Spritespace_Layout_Hint;
    Cs_Layout =  clh::Objectspace_Layout_Hint;
    #
    Once(X) = Oneshot_Maildrop(X);

    nb = log::note_on_stderr;								# log					is from   src/lib/std/src/log.pkg

herein

    package guiboss_types
    {


	#########################################################################################
	### preliminary types

	Viewport_Scroller
	  =
	  { get_viewport_origin: Void -> g2d::Point,
	    set_viewport_origin: g2d::Point -> Void
	  };

	Viewport_Scroller_Callback							# Used in Widget_Widget.VIEWPORT	in   src/lib/x-kit/widget/gui/running-gui.pkg
	  =
	  Null_Or( Viewport_Scroller ) -> Void;


	Tabbed_View_Picker
	  =
	  { get_active_view: Void -> Int,
	    set_active_view: Int -> Void
	  };

	Tabbed_View_Picker_Callback							# Used in Widget_Widget.TABBED_VIEWS	in   src/lib/x-kit/widget/gui/running-gui.pkg
	  =
	  Null_Or( Tabbed_View_Picker ) -> Void;


	#########################################################################################
	### Preliminary running-gui types

	# Storing instances of
	#     guiboss_to_spritespace, 
	#     guiboss_to_objectspace, 
	# or  guiboss_to_widgetspace
	# directly in Running_Gui leads to package circularity,
	# so instead we store their integer id here, and
	# in guiboss-imp.pkg look them up as needed in
	# (respectively):	
	#     spritespaces
	#     objectspaces
	#     widgetspaces
	# 
	Spritespace_Id = Id;
	Objectspace_Id = Id;
	Widgetspace_Id = Id;



	#########################################################################################
	### gadget-to-guiboss types


	Gadget_Mode													# We use this mostly to control how a widget draws itself.
	  =														# To avoid a package cycle this def is duplicated in   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
	  {														# We probably should find/make another home for this def. XXX SUCKO FIXME
	    is_active:				Bool,									# An inactive gadget is passed no user input. Inactive widgets are typically drawn "grayed-out".
	    has_mouse_focus:			Bool,									# A widget which has the mouse cursor on it may want to draw itself brigher or such.
	    has_keyboard_focus:			Bool,									# A widget which has the keyboard focus will often      draw a black outline around its text-entry rectangle.
	    mousebutton_is_down:		Bool									# I'm not sure if this belongs here.
	  };



	#########################################################################################
	### gui-plan datatypes

	Sprite_Widget
	    #
	    = SPRITE		Sprite_Sprite_Start_Fn

	also
	Object_Widget
	    #
	    = WIDGETSPACE	(List(Widgetspace_Option),  Widget_Widget)
	    #
	    | OBJECT		Object_Object_Start_Fn

	also
	Widget_Widget
	    #
	    = ROW		 List( Widget_Widget )
	    | COL		 List( Widget_Widget )
	    | GRID	List(	 List( Widget_Widget )   )			# Grid of widgets; outer list goes by rows, inner lists go by columns.
	    #	
	    | SCROLLABLE_VIEW    (
				   Viewport_Scroller_Callback,								# Callback for registering scroller with client app code.
				   g2d::Size,										# Size of pixmap visible through viewport.
				   Widget_Widget									# There will be one pixmap per List entry. (In general they will be the roots of widget-trees.)
				 )											# 
	    | TABBED_VIEWS	 ( Tabbed_View_Picker_Callback,
				   g2d::Size,										# Size of pixmap visible through viewport.
				   List( Widget_Widget )								# *** WE REQUIRE AT LEAST ONE ENTRY IN THE LIST ***
				 )											# There will be one pixmap per List entry. (In general they will be the roots of widget-trees.)
				 											# Only one will be visible at a given time.

	    | FRAME		 ( List(Frame_Option),									# For frame customization.
				   Widget_Widget									# Widge-tree to draw surrounded by frame.
				 )

	    | WIDGET		Widget_Widget_Start_Fn									# These values are created by   make_widget_widget_start_fn   in   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg 
	    #
	    | OBJECTSPACE	(List(Objectspace_Option),  List((List(clh::Objectspace_Layout_Hint), Object_Widget)))
	    | SPRITESPACE	(List(Spritespace_Option),  List((List(blh::Spritespace_Layout_Hint), Sprite_Widget)))
	    #
	    | NULL_WIDGET_WIDGET											# Note[1]


	also
	Frame_Option
	    #
	    = FRAME_WIDGET	Widget_Widget_Start_Fn



	#########################################################################################
	### paused-gui datatypes
															# Nomenclature: "Pg_" == "Paused_Gui_";  "PG_" == "PAUSED_GUI_".
	also
	Pg_Sprite_Widget												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	    #
	    = PG_SPRITE		( Sprite_Sprite_Start_Fn,
				  Null_Or(Exception)									# saved_sprite_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
				)
	also
	Pg_Object_Widget
	    #
	    = PG_WIDGETSPACE	(List(Widgetspace_Option),  Pg_Widget_Widget)
	    #
	    | PG_OBJECT		( Object_Object_Start_Fn,
				  Null_Or(Exception)									# saved_object_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
				)
	also
	Pg_Widget_Widget
	    #
	    = PG_ROW		 List( Pg_Widget_Widget )
	    | PG_COL		 List( Pg_Widget_Widget )
	    | PG_GRID	List(	 List( Pg_Widget_Widget )  )

	    | PG_SCROLLABLE_VIEW ( Viewport_Scroller_Callback,								# Callback for registering scroller with client app code.
				   g2d::Size,
				   Pg_Widget_Widget									# 
				 )
	    | PG_TABBED_VIEWS	 ( Tabbed_View_Picker_Callback,
				   g2d::Size,
				   List(Pg_Widget_Widget)								# 
				 )
	    | PG_FRAME		 ( Pg_Widget_Widget,									# frame_widget.
				   Pg_Widget_Widget									# widget.
				 )

	    | PG_WIDGET		( Widget_Widget_Start_Fn,
				  Null_Or(Exception)									# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
				)

	    | PG_OBJECTSPACE	(List(Objectspace_Option),  List((List(clh::Objectspace_Layout_Hint), Pg_Object_Widget)))
	    | PG_SPRITESPACE	(List(Spritespace_Option),  List((List(blh::Spritespace_Layout_Hint), Pg_Sprite_Widget)))

	    | PG_NULL_WIDGET_WIDGET											# Note[1]



	#########################################################################################
	### running-gui datatypes
															# Nomenclature: "Rg_" == "Running_Gui_",  "RG_" == "RUNNING_GUI_".  
	also
	Rg_Sprite_Widget												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	    #
	    = RG_SPRITE	      {
				spritespace_to_sprite:	b2s::Spritespace_To_Sprite,					# 
				guiboss_to_gadget:	Guiboss_To_Gadget,						# 

				endstate_oneshot:	Once( ( 							# The sprite-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
								Sprite_Sprite_Start_Fn,					# 
								Null_Or(Exception)					# saved_sprite_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
							    ) )	
			      }
			
	also
	Rg_Object_Widget
	    #
	    = RG_WIDGETSPACE  {	widgetspace_id:		Widgetspace_Id,							# A widget space embedded in a object, to allow all widgetspace widgets to be used also on a object.
				widget_widget:		Rg_Widget_Widget
			      }
	    | RG_OBJECT	      {
				objectspace_to_object:	c2o::Objectspace_To_Object,					# 
				guiboss_to_gadget:	Guiboss_To_Gadget,						# 

				endstate_oneshot:	Once( (								# The sprite-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
								Object_Object_Start_Fn,
								Null_Or(Exception)					# saved_object_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
							    ) )

			      }
	also
	Rg_Widget_Widget
	    #
	    = RG_ROW	     Row											# A horizontal row  of widget widgets.  Note[2].
	    | RG_COL	     Col											# A vertical column of widget widgets.
	    | RG_GRID	     Grid											# A vertical column of widget widgets.

	    | RG_SCROLLABLE_VIEW  Scrollable_View									# Here we provide support for widgets visible through a scrollable viewport.  Actually providing scrollbars happens at a higher level; here we handle pixmap state maintenance and redraw support.

	    | RG_TABBED_VIEWS	  Tabbed_Views										# Here we provide support for selection between alternate views in viewport.  Actually providing tabs happens at a higher level; here we handle pixmap state maintenance and redraw support.
	    #
	    | RG_FRAME		  Framed_Widgets

	    | RG_WIDGET	          Widget										# An actual leaf widget like an arrowbutton or label or text-entry box. These are all customizations of src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg

	    #
	    | RG_OBJECTSPACE	Objectspace
	    | RG_SPRITESPACE	Spritespace
	    #
	    | RG_NULL_WIDGET_WIDGET											# We need this because Running_Gui requires an Rg_Widget_Widget value, and sometimes we may not have anything else.



	#########################################################################################
	### guiboss-to-widgetspace datatypes
	#
	# Communication from	src/lib/x-kit/widget/gui/guiboss-imp.pkg
	# to 			src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg

	also
	Guiboss_To_Widgetspace												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	  =
	  GUIBOSS_TO_WIDGETSPACE
	    { id:			Id,										# Unique id to facilitate storing guiboss_to_widgetspace instances in indexed datastructures like red-black trees.
	      #
	      pass_something:		Replyqueue -> (Int -> Void) -> Void,

	      pass_re_siting_done_flag											# This call updates the pixel-rectangle allocations of the widgets in the given widget-tree and notifies when done.
		  :
		  ( g2d::Box,												# Take this pixel rectangle (in window coordinates)
		    Backing_Pixmap,											# on this pixmap and divide it between the widgets in
		    Rg_Widget_Widget											# this widget-tree.
		  )
		  -> Replyqueue												# When done inform in this imp-replyqueue
		  -> (Void -> Void)											# this handler.
		  -> Void,

	      do_something:		Int -> Void
	    }

	also
	Widgetspace_Option
	    #
	    = PS_MICROTHREAD_NAME	String										# 
	    | PS_ID			Id										# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	    | PS_CALLBACK		Guiboss_To_Widgetspace -> Void



	#########################################################################################
	### guiboss-to-objectpace datatypes
	#
	# Communication from	src/lib/x-kit/widget/gui/guiboss-imp.pkg
	# to 			src/lib/x-kit/widget/space/object/objectspace-imp.pkg

	also
	Guiboss_To_Objectspace												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	    =
	    GUIBOSS_TO_OBJECTSPACE
	      { id:			Id,										# Unique id to facilitate storing guiboss_to_objectspace instances in indexed datastructures like red-black trees.
		#
		pass_something:		Replyqueue -> (Int -> Void) -> Void,
		do_something:		Int -> Void
	      }

	also
	Objectspace_Option
	  #
	  = CS_MICROTHREAD_NAME		String										# 
	  | CS_ID			Id										# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	  | CS_OBJECTSPACE_CALLBACK	Guiboss_To_Objectspace -> Void


	#########################################################################################
	### guiboss-to-spritespace datatypes
	#
	# Communication from	src/lib/x-kit/widget/gui/guiboss-imp.pkg
	# to 			src/lib/x-kit/widget/space/sprite/spritespace-imp.pkg

	also
	Guiboss_To_Spritespace												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	    =
	    GUIBOSS_TO_SPRITESPACE
	      { id:			Id,										# Unique id to facilitate storing guiboss_to_spritespace instances in indexed datastructures like red-black trees.
		#
		pass_something:	Replyqueue -> (Int -> Void) -> Void,
		do_something:	Int -> Void
	      }

	also
	Spritespace_Option
	  #
	  = OS_MICROTHREAD_NAME 	String										# 
	  | OS_ID			Id										# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	  | OS_SPRITESPACE_CALLBACK	Guiboss_To_Spritespace -> Void


	#########################################################################################
	### gadget-to-guiboss datatypes

	also
	Gadget_To_Guiboss												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	    =
	    GADGET_TO_GUIBOSS
	      { id:					Id,								# Unique id to facilitate storing Gadget_To_Guiboss ports in indexed datastructures like red-black trees.
		#
		needs_redraw_gadget_request:		iul::Id	-> Void,						# Inform guiboss_imp that the gadget's appearance needs refreshing. Without this, it may not get a redraw_gadget_request call.
															# This should be called any time the gadget's state changes in a way that would visibly affect its appearance. See Note[3] in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
															# 

		redraw_gadget												# Update gadget appearance in response to a guiboss_to_gadget.redraw_gadget_request {...} call.
		  :													# This can also be called spontaneously in the absence of a redraw_gadget_request call,
		  { id:					iul::Id,							# but if the gadget state gets updated frequently (say, 10,000 times/sec) this may overwhelm the display subsystem.
		    displaylist:			gd::Gui_Displaylist,
		    point_in_gadget:			Null_Or( g2d::Point -> Bool )					# Optional fn to decide if a mouseclick actually hit the gadget itself, or just somewhere near it in the screenspace assigned to it.
		  }
		  ->
		  Void,

		note_changed_gadget_activity:	{ id: iul::Id, is_active:  Bool } -> Void				# FALSE if gadget should be insensitive to input and perhaps drawn grayed-out.  Controlled by application logic.
	      }




	#########################################################################################
	### guiboss-to-gadget datatypes

	also
	Gadget_Transit													# This protocol is intended to support (e.g.) highlighting a gadget while the mouse is over it.
	    #														# The intended semantics here is that:
	    = CAME													#  o  A widget should always see an  CAME before anything else when the mouse cursor enters its space.   CAME events are NOT sent during a drag. A MOVED is always sent immediately after an CAME, with the same mouse coordinate.
 	    | MOVE													#  o  A widget can see any number of MOVE events between a CAME and LEFT; all will be in its space.	 MOVE events are NOT sent during a drag.
	    | LEFT													#  o  A widget should always see a   LEFT after  everything else when the mouse cursor exits  its space. LEFT events are NOT sent during a drag.
	    														#  o  Thus, a widget is not guaranteed to see an CAME every time the mouse cursor enters it (due to drag exception). But if it sees anything at all, an CAME will be first, and a LEFT will be last.

	also
	Drag_Phase													# This protocol is intended to support dragging a slider or scrollbar thumb.
	    #														# The intended semantics here is that:
	    = OPEN													#  o  Every drag sequence begins with exactly one OPEN.
	    | DRAG													#  o  Every drag sequence has zero or more        DRAG phases.
	    | DONE													#  o  Every drag sequence ends   with exactly one DONE.
															# 

	also
	Key_Event													# This protocol is intended to support keyboard text entry.
	    #
	    = KEY_PRESS
	    | KEY_RELEASE

	also
	Mousebutton_Event												# This protocol is intended to support mouse button processing.  Double-clicks are not supported here.  I dislike them because they inherently add latency, and half of GUI framework design is about minimizing latency.
	    #
	    = MOUSEBUTTON_PRESS
	    | MOUSEBUTTON_RELEASE

	also
	Guiboss_To_Gadget												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	  =
	  GUIBOSS_TO_GADGET
	    {   id:			iul::Id,									# Unique id to facilitate storing Guiboss_To_Gadget ports in indexed datastructures like red-black trees.
		#
		wants_keystrokes:	Bool,										# TRUE iff guiboss_imp should send keyboard events to this widget.  This might need to become a Ref(Bool)...?
		wants_mouseclicks:	Bool,										# TRUE iff guiboss_imp should send mouse    events to this widget.  This is about correctness not efficiency: We might have two nested candidate widgets where this flag decides which one gets the event.

		#
		initialize_gadget: {											# Before the first redraw_gadget_request call every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
				      #											# If its appearance has changed it should call note_changed_gadget_foreground() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
				      site:		g2d::Box,							# Window rectangle in which to draw.
				      theme:		pt::Widget_Theme,
				      #
				      get_font:		List(String) ->  evt::Font,					# Accepts a list of font names which are tried in order; returns font 'ascent' and 'descent' in pixels -- sum them to get  font height.
				      pass_font:	List(String) -> Replyqueue					#
								     -> ( evt::Font -> Void )				#
								     -> Void,						# Nonblocking version of previous, for use in imps.

				      make_rw_pixmap:	g2d::Size -> g2p::Gadget_To_Rw_Pixmap,

				      make_popup:	( 								# Create popup pane on given window in given site.  Given site is adjusted to lie entirely within parent (if necessary) and returned.
							  g2d::Box,							# Requested site for popup, in basewindow coordinates.
							  Gui_Plan							# 
							)
						     -> (
							  g2d::Box,							# Actual site for popup, in basewindow coordinates. It differs from requested site only if requested site does not lie entirely within basewindow site.
							  Client_To_Guiwindow
							)
				    }
				    ->
				    Void,


		redraw_gadget_request:	    {										# At the start of every frame every widget-imp gets this call from   src/lib/x-kit/widget/gui/guiboss-imp.pkg
					      #										# If its appearance has changed it should call redraw_gadget() from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
					      frame_number:		Int,						# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
					      site:			g2d::Box,					# Window rectangle in which to draw.
					      visible:		Bool,							# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground displaylist.
					      duration_in_seconds:	Float,						# If state has changed look-imp should call redraw_gadget() before this time is up. Also useful for motionblur.
					      this_gadget_mode:	Gadget_Mode,
					      theme:		pt::Widget_Theme
					    }
					    ->
					    Void,


		note_mouse_drag_event:	    {										# Intended to support dragging sliders and scrollbar thumbs etc.  Not intended for drag-and-drop.
					      phase:		    Drag_Phase,						# We guarantee that the gadget that sees the OPEN (downclick) for a drag also sees all the DRAGs and the DONE for that drag, and that no other gadget sees drag or transit events during that time period.
					      modifier_keys_state:  evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      event_point:	    g2d::Point,						# 'event_point' is the current   point the window's coordinate system.
					      start_point:	    g2d::Point,						# 'start_point' is the downclick point the window's coordinate system.
					      last_point:	    g2d::Point,						# 'last_point'  is the event_point from the preceding ntoe_mouse_drag_event call.
					      site:		    g2d::Box,						# Widget's assigned area in window coordinates.
					      theme:		    pt::Widget_Theme					#
					    }										# DONE is sent when last mousebutton is released, no matter where that happnes.
					    -> Void,									# Normally OPEN and DRAG are sent if they occur within the gadget's assigned site.
															# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

		note_mouse_transit:	    {										# Mouse entering or leaving window site assigned to gadget.  Intended to support tooltips, active-widget highlighting etc. Note that buttons are always all up in a mouse transit -- otherwise it is a mouse-drag event.
					      transit:		    Gadget_Transit,
					      modifier_keys_state:  evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      event_point:	    g2d::Point,						# 'event_point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,						# Widget's assigned area in window coordinates.
					      theme:		    pt::Widget_Theme					#
					    }										# CAME/MOVE/LEFT are never sent during drag operations.
					    -> Void,									# Normally CAME/MOVE  are sent if they occur within the gadget's assigned site.
															# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

		note_key_event:	    	   {										# Note keyboard KEY_PRESS or KEY_RELEASE at 'point'. Intended for textfield text entry etc.
					      key_event:	    Key_Event,						# KEY_PRESS or KEY_RELEASE.
					      keycode:		    evt::Keycode,					# Keyboard key just pressed/released.
					      keysym:		    evt::Keysym,					# Keysym  of the key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      string:		    String,						# Ascii  for the key.  This is not present in the X version of Key_Kevtinfo; added for widget-code convenience.
					      modifier_keys_state:  evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
					      event_point:	    g2d::Point,						# 'point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,						# Widget's assigned area in window coordinates.
					      theme:		    pt::Widget_Theme
					    }
					    -> Void,

		note_mousebutton_event:	    {										# Note mousebutton click at 'point'.  Intended for pushbuttons etc.
					      mousebutton_event:    Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE. These go to the gadget under the mouse pointer, hence a gadget may not see both if the pointer moves between them. Use note_mouse_drag_event if this is a problem.
					      mouse_button:	    evt::Mousebutton,					# Mouse button just clicked down. Range is 1-13 or more.  Typically 1=left, 2=middle, 3=right, 4=mousewheel-forward, 5=mousewheel-back.
					      modifier_keys_state:  evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
					      mousebuttons_state:   evt::Mousebuttons_State,				# State of mouse buttons as a bool record, BEFORE THE EVENT -- so a MOUSEBUTTON_RLEASE will always show at least one button down.
					      event_point:	    g2d::Point,						# 'point'  is the click point the window's coordinate system.
					      site:		    g2d::Box,						# Widget's assigned area in window coordinates.
					      theme:		    pt::Widget_Theme					#
					    }										# Normally MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE are sent if they occur within the gadget's assigned site.
					    -> Void									# This can be restricted to a sub-area of the site using point_in_gadget -- src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
	      }


	#########################################################################################
	### Sprite_Sprite_Start_Fn datatype

	also
	Sprite_Sprite_Start_Fn												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	  =
	  SPRITE_SPRITE_START_FN  (Sprite_Imports -> Sprite_Exports)



	#########################################################################################
	### Object_Object_Start_Fn datatype

	also
	Object_Object_Start_Fn												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	  =
	  OBJECT_OBJECT_START_FN  (Object_Imports -> Object_Exports)



	#########################################################################################
	### Widget_Widget_Start_Fn datatype

	also	
	Widget_Widget_Start_Fn												# Since this datatype has only one alternative, we should sometime try converting it to a simple type.
	  =														# This type is the critical interface between the widget world and src/lib/x-kit/widget/gui/guiboss-imp.pkg
	  WIDGET_WIDGET_START_FN  (Widget_Imports -> Widget_Exports)							# In particular paused_gui__to__running_gui() in guiboss_imp calls the widget_widget_start_fn built in   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
	      


	#########################################################################################
	### Backing_Pixmap datatype											# Probably TOPWINDOW_PIXMAP and VIEWPORT_PIXMAP should be in separate types rather than share Backing_Pixmap.
															# Most of the places we currently use Backing_Pixmap, only TOPWINDOW_PIXMAP is actually allowed, so we do a
	also														# lot of runtime checking for VIEWPORT_PIXMAP and raising a fatal error if present.  It would be cleaner in
	Backing_Pixmap													# those cases to have a type including TOPWINDOW_PIXMAP but not VIEWPORT_PIXMAP, eliminating the runtime checks.
	  #														# Obviously we could have a separate Topwindow_Or_Viewport_Pixmap type combining the two for the few cases where both are allowed.
	  = TOPWINDOW_PIXMAP  Topwindow_Pixmap										# 
	  #	
	  | VIEWPORT_PIXMAP   { pixmap:		g2p::Gadget_To_Rw_Pixmap,						# The pixmap visible in the viewport.
				#
				viewports:	Ref( List( Viewport ) ),						# We make this a Ref(List(...)) to allow for adding additional viewports opening onto the same underlying pixmap.
															# WARNING: We don't currently use multiple viewports onto one pixmap; if we start doing so we'll probably find that *VIEWPORT_PIXMAP.is_visible doesn't work right with them.

				is_visible:	Ref( Bool )								# This will be FALSE only if we are one of several alternate views in a TABBED_VIEWS set.
															# We need this so that   update_offscreen_parent_pixmaps_and_then_topwindow()   in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
															# can know when to stop propagating widget updates up the viewport tree.
			      }			



	#########################################################################################
	### More Backing_Pixmap types

	withtype
	Spritespace_Arg =  List(Spritespace_Option)									# Currently no required component.

	also
	Objectspace_Arg =  List(Objectspace_Option)									# Currently no required component.

	also
	Widgetspace_Arg =  List(Widgetspace_Option)									# Currently no required component.

	also
	Sprite_Imp_Info
	  =
	  { sprite_to_spritespace:	s2b::Sprite_To_Spritespace,							# 
	    guiboss_to_spritespace:	Guiboss_To_Spritespace,
	    endstate_oneshot:		Oneshot_Maildrop( Spritespace_Arg )
	  }

	also
	Object_Imp_Info
	  =
	  { object_to_objectspace:	o2c::Object_To_Objectspace,							# 
	    guiboss_to_objectspace: 	Guiboss_To_Objectspace,
	    endstate_oneshot:		Oneshot_Maildrop( Objectspace_Arg )
	  }

	also
	Widget_Imp_Info
	  =
	  { widget_to_widgetspace:	w2p::Widget_To_Widgetspace,					# 
	    guiboss_to_widgetspace: 	Guiboss_To_Widgetspace,
	    endstate_oneshot:		Oneshot_Maildrop( Widgetspace_Arg )
	  }

	also
	Gadget_Info													# The per-gadget information we track.  (This is private to guiboss-imp.)
	  =														# Here 'gadget' refers indifferently to widget-imps, sprite-imps and object-imps.
	  {
	    site:			Ref( g2d::Box ),								# Where to draw this gadget, in topwindow coordinates.
	    backing_pixmap:		Ref(Backing_Pixmap),
	    #
	    guiboss_to_gadget:		Guiboss_To_Gadget,								# We use this to make requests of visible gadgets.
	    gadget_mode:		Ref( Gadget_Mode ),
	    #
	    needs_redraw_request:	Ref( Bool ),									# 
	    sent__initialize_gadget:	Ref( Bool ),
	    #
	    point_in_gadget:		Ref( Null_Or( g2d::Point -> Bool ))						# Optional fn to decide if a mouseclick actually hit the gadget itself, or just somewhere near it in the screenspace assigned to it.
	  }  

	also	Sprite_Imps = Ref( im::Map( Sprite_Imp_Info ) )
	also	Object_Imps = Ref( im::Map( Object_Imp_Info ) )
	also	Widget_Imps = Ref( im::Map( Widget_Imp_Info ) )
	also	Gadget_Imps = Ref( im::Map( Gadget_Info     ) )								# We use this to make requests of visible gadgets.	Index is  (id_to_int guiboss_to_gadget.id).

	also
	Running_Gui =	      {	fire_end_gun:		Void -> Void,							# Calling this fn will cause all state and look imps in the gui to exit, saving their state to their oneshots.
				widgetspace_id:		Widgetspace_Id,							# guiboss-imp indexes this value into *widget_stuff to obtain (e.g.) a Guiboss_To_Widgetspace port to the widgetspace-imp.
				widget_widget:		Rg_Widget_Widget,						# The widget (or more commonly, tree of widgets) managed by the gui-tree's toplevel widgetspace-imp.
				topwindow:		gws::Guiboss_To_Topwindow,					# The topwindow on which to draw our widgets.
				topwindow_pixmap:	Backing_Pixmap,							# Holds toplevel TOPWINDOW_PIXMAP for gui.
				#
				gadget_imps_for_gui:	Gadget_Imps,							# Holds our gt::Gadget_Info            instances for this running gui.
				sprite_imps_for_gui:	Sprite_Imps,							# Holds our gt::Guiboss_To_Spritespace instances for this running gui.
				object_imps_for_gui:	Object_Imps,							# Holds our gt::Guiboss_To_Objectspace instances for this running gui.
				widget_imps_for_gui:	Widget_Imps							# Holds our gt::Guiboss_To_Widgetspace instances for this running gui.
			      }
	also
	Topwindow_Pixmap												# Used in TOPWINDOW_PIXMAP.
	  =
	  { running_gui:	Ref( Null_Or( Running_Gui ) ),
	    pixmap:		g2p::Gadget_To_Rw_Pixmap,								# Main backing store for this running gui.
	    pixmaps:		Ref( im::Map( g2p::Gadget_To_Rw_Pixmap )),						# This tracks all other X-server pixmaps created by this particular running gui. We need this so that we can reliably recycle them all when killing the gui -- otherwise we're leaking memory in the X server.
	    popups:		Ref(List(Backing_Pixmap)),								# These will all be TOPWINDOW_PIXMAP, but the type system does not let us say that.  	
	    parent:		Null_Or( Backing_Pixmap ),								# For popups this points to the parent; for the original non-popup window it is NULL.
	    stacking_order:	Int,											# Assigned in increasing order starting at 1;  these determine who overlies who visually on the screen in case of overlaps. (Popups must be entirely within parent, but sibling popups can overlap.)
	    origin:		Ref(g2d::Point)										# If we have a parent, this gives our location on it. Note that pixmap.size gives our size.
	  }

	also
	Viewport
	  =
	  {
	    parent_pixmap:	Backing_Pixmap,
	    viewport_site:	Ref(g2d::Box),										# Size and location of subwindow viewport in parent Backing_Pixmap coordinates.
	    #
	    view_origin:	Ref(g2d::Point)										# Location of view relative to viewport. Used to scroll subwindow contents around in parent viewport.
	  }														# So  if origin is (0,0), pixel (0,0) on view draws at upper-left of viewport,
															# and if origin is (5,5), pixel (0,0) on view draws 5 pixels in diagonally at upper-left of viewport.
															# Used in compute_gadget_redraw_transform() in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
 

	#########################################################################################
	### More guiboss-to-widgetspace types



	#########################################################################################
	### More guiboss-to-objectspace types



	#########################################################################################
	### More guiboss-to-spritespace types



	#########################################################################################
	### More gui-plan types

	also
	Gui_Plan =  (Widgetspace_Arg,  Widget_Widget)


	#########################################################################################
	### More stopped-gui types

	also
	Paused_Gui =  (Widgetspace_Arg,  Pg_Widget_Widget)


	#########################################################################################
	### Recursive running-gui types

	also
	Tabview														# Something visible in a Rg_Widget_Widget.TABBED_VIEWS.  It is convenient to have a name for this type.
	  =
	  { widget:		 Rg_Widget_Widget,									#
	    gadget_to_rw_pixmap: g2p::Gadget_To_Rw_Pixmap,
	    backing_pixmap:	 Backing_Pixmap										# 
	  }														#

#	also
#	Rg_Widget													# Used in RG_ROW, RG_COL, RG_GRID + RG_FRAME declarations above.
#	  =														# 
#	  { widget:	 	Rg_Widget_Widget									#
#	  }

	also
	Row														# Used in RG_ROW
	  =
	  {														# A horizontal row of widget widgets.
	    widgets:		List( Rg_Widget_Widget ),								# The list of widgets to be laid out and displayed in this row.
	    #
	    pixels_high_min: 	Ref(Int),										# Minimum            vertical   pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_min: 	Ref(Int),										# Minimum            horizontal pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    pixels_high_cut: 	Ref(Float),										# Share of remaining vertical   pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_cut: 	Ref(Float),										# Share of remaining horizontal pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Col = Row													# Used in RG_COL.  Synonym to allow better code readability.

	also
	Grid														# Used in RG_GRID
	  =
	  {														# A grid widget widgets.
	    widgets:	List(	List( Rg_Widget_Widget )   ),								# The list lists of widgets to be laid out and displayed in this grid.
	    #
	    pixels_high_min: 	Ref(Int),										# Minimum            vertical   pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_min: 	Ref(Int),										# Minimum            horizontal pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    pixels_high_cut: 	Ref(Float),										# Share of remaining vertical   pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_cut: 	Ref(Float),										# Share of remaining horizontal pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }


	also
	Scrollable_View													# Used in RG_SCROLLABLE_VIEW
	  =
	  {														# Here we provide support for widgets visible through a scrollable viewport.  Actually providing scrollbars happens at a higher level; here we handle pixmap state maintenance and redraw support.
	    widget:			Rg_Widget_Widget,								# Tree of widgets partially visible in viewport.
	    gadget_to_rw_pixmap:	g2p::Gadget_To_Rw_Pixmap,							# This is the pixmap visible through the viewport. It holds a full image of above 'widget' tree.
	    view_origin:		Ref(g2d::Point),								# Origin of view's backing_pixmap in viewport coordinates, used for scrolling pixmap in viewport.
	    backing_pixmap:		Backing_Pixmap,									# This is the parent pixmap holding the viewport.
	    scroller:			Viewport_Scroller,
	    callback:			Viewport_Scroller_Callback,							# This is how we pass our Viewport_Scroller to app client code, which basically lets it set 'pixmap_origin' above.
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Tabbed_Views													# Used in RG_TABBED_VIEWS
	  =
	  {														# Here we provide support for selection between alternate views in viewport.  Actually providing tabs happens at a higher level; here we handle pixmap state maintenance and redraw support.
	    pixmap_size:		g2d::Size,									# Size of alternate pixmaps visible in viewport.  We require them to all be the same size; we intend that the viewport be the same size.

	    widgets:			List( Tabview ),								# This record holds one of the alternate views which may be made visible in the viewport.  *** WE REQUIRE AT LEAST ONE ENTRY IN THE LIST! *** 
	    visible_widget:		Ref ( Tabview ),								# Which of 'widgets' is currently visible?  This refcell holds one element from 'widgets';  it supports switching between the tabbed views.

	    callback:			Tabbed_View_Picker_Callback,							# This is how we pass our Tabbed_View_Picker to app client code, which basically lets it set 'visible_widget' above.
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Framed_Widgets
	  =
	  {
	    frame_widget:		Rg_Widget_Widget,								# Widget which will draw the frame surround.
	    widget:			Rg_Widget_Widget,								# Widget-tree to draw surrounded by frame.
	    #
	    pixels_high_min: 		Ref(Int),									# Minimum            vertical   pixels to allocate for this FRAME widget.	 Used in src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_min:	 	Ref(Int),									# Minimum            horizontal pixels to allocate for this FRAME widget.	 Used in src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    pixels_high_cut: 		Ref(Float),									# Share of remaining vertical   pixels to allocate to  this FRAME widget.	 Used in src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    pixels_wide_cut: 		Ref(Float),									# Share of remaining horizontal pixels to allocate to  this FRAME widget.	 Used in src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	    #
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Widget														# Used in RG_WIDGET
	  =
	  {														# An actual leaf widget like an arrowbutton or label or text-entry box. These are all customizations of src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
	    guiboss_to_gadget:		Guiboss_To_Gadget,								# The command end of a port for communication to a widget-imp from a					src/lib/x-kit/widget/gui/guiboss-imp.pkg
	    widgetspace_to_widget:	p2w::Widgetspace_To_Widget,							# The command end of a port for communication to a widget-imp from a					src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg

	    endstate_oneshot:	Once( (											# The widget-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
					Widget_Widget_Start_Fn,								#
					Null_Or(Exception)								# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
				    ) ),
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Objectspace													# Used in RG_OBJECTSPACE
	  =
	  {
	    objectspace_id:		Objectspace_Id,									# guiboss-imp indexes this value into *object_stuff to obtain (e.g.) a Guiboss_To_Objectspace port to the objectspace-imp.
	    widgets:			List ((List(Cs_Layout), Rg_Object_Widget)),					# The list of widgets to be drawn on the object. These can be placed arbitrarily, including possible overlaps.
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }

	also
	Spritespace													# Used in RG_SPRITESPACE
	  =
	  { spritespace_id:		Spritespace_Id,									# guiboss-imp indexes this value into *sprite_stuff to obtain (e.g.) a Guiboss_To_Spritespace port to the spritespace-imp.
	    widgets:			List ((List(Bs_Layout), Rg_Sprite_Widget)),					# The list of widgets to be drawn on the spritespace. These can be placed arbitrarily.
	    site:			Ref(g2d::Box)									# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
	  }



	#########################################################################################
	### Recursive Client_To_Guiwindow type

	also
	Client_To_Guiwindow
	  =
	  { id:				Id,										# Unique id to facilitate storing guiboss instances in indexed datastructures like red-black trees.
	    pause_gui:			Void -> Paused_Gui,								# Stop gui but preserve its state and Xserver-side resources.
	    kill_gui:			Void -> Void									# Stop gui and recycle  its state and Xserver-side resources.
	  }



	#########################################################################################
	### Recursive  Widget_Widget_Start_Fn  types


	also
	Widget_Imports
	  =
	  { gadget_to_guiboss:		Gadget_To_Guiboss,								# 
	    widget_to_widgetspace:	w2p::Widget_To_Widgetspace,							# 
	    run_gun':			Run_Gun,									#
	    end_gun':			End_Gun,									#
	    endstate_oneshot:		Oneshot_Maildrop( ( Widget_Widget_Start_Fn,
							    Null_Or(Exception)						# saved_widget_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),								#
	    saved_widget_state:		Null_Or(Exception)								# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	  }														# arrowbutton				is from   src/lib/x-kit/widget/leaf/arrowbutton.pkg


	also
	Widget_Exports
	  =
	  { guiboss_to_gadget:		Guiboss_To_Gadget,								# 
	    widgetspace_to_widget:	p2w::Widgetspace_To_Widget							# 
	  }



	#########################################################################################
	### Recursive  Object_Object_Start_Fn  types

	also
	Object_Imports
	  =
	  { gadget_to_guiboss:		Gadget_To_Guiboss,								# 
	    object_to_objectspace:	o2c::Object_To_Objectspace,							# 
	    run_gun':			Run_Gun,									#
	    end_gun':			End_Gun,									#
	    endstate_oneshot:		Oneshot_Maildrop( ( Object_Object_Start_Fn,
							    Null_Or(Exception)						# saved_object_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),								#
	    saved_object_state:		Null_Or(Exception)								# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	  }

	also
	Object_Exports
	  =
	  { guiboss_to_gadget:		Guiboss_To_Gadget,								# 
	    objectspace_to_object:	c2o::Objectspace_To_Object							# 
	  }



	#########################################################################################
	### Recursive  Sprite_Sprite_Start_Fn  types

	also
	Sprite_Imports
	  =
	  { gadget_to_guiboss:		Gadget_To_Guiboss,								# 
	    sprite_to_spritespace:	s2b::Sprite_To_Spritespace,							# 
	    run_gun':			Run_Gun,									#
	    end_gun':			End_Gun,									#
	    endstate_oneshot:		Oneshot_Maildrop( ( Sprite_Sprite_Start_Fn, 					#
							    Null_Or(Exception)						# saved_sprite_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),
	    saved_sprite_state:		Null_Or(Exception)								# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	  }

	also
	Sprite_Exports
	  =
	  { guiboss_to_gadget:		Guiboss_To_Gadget,								# 
	    spritespace_to_sprite:	b2s::Spritespace_To_Sprite							# 
	  };
















	#########################################################################################
	### Gadget_Info code

	fun same_gadget_info
	      (
		{ guiboss_to_gadget => GUIBOSS_TO_GADGET guiboss_to_gadget1, ... }:	Gadget_Info,	
		{ guiboss_to_gadget => GUIBOSS_TO_GADGET guiboss_to_gadget2, ... }:	Gadget_Info
	      )
	    =
	    iul::same_id ( guiboss_to_gadget1.id,
			   guiboss_to_gadget2.id
			 );


	#########################################################################################
	### Backing_Pixmap code

	fun backing_pixmap_id_of    (TOPWINDOW_PIXMAP r) =>  r.pixmap.id;
	    backing_pixmap_id_of    (VIEWPORT_PIXMAP  r) =>  r.pixmap.id;
	end; 

	fun gadget_to_rw_pixmap__of (TOPWINDOW_PIXMAP r) =>  r.pixmap;
	    gadget_to_rw_pixmap__of (VIEWPORT_PIXMAP  r) =>  r.pixmap;
	end; 


# As of 2014-10-13 this appears to be nowhere used.
# If we don't find a use for it soon we should probably delete it.
# XXX SUCKO FIXME
	fun backing_pixmap_is_visible (TOPWINDOW_PIXMAP _)								# This fn is used for finding which widget was clicked on by user;  we're just trying to excluse widgets on de-selected views
		=>													# in TABBED_VIEWS sets.  Consequently we don't worry about whether scrolling has made a pixmap actually not visible to user.
		TRUE;													# TOPWINDOW_PIXMAP is by definition visible.

	    backing_pixmap_is_visible (VIEWPORT_PIXMAP r)								# A VIEWPORT_PIXMAP is visible if it has *is_visible==TRUE and some chain of parents leading to a TOPWINDOW_PIXMAP are also visible.
		=>
		if (not *r.is_visible)
		    #
		    FALSE;
		else
		    visible_in_at_least_one_parent  *r.viewports							# This stab at supporting multiple viewports onto a single pixmap probably doesn't work.  But we're not doing that yet anyhow.
		    where
			fun visible_in_at_least_one_parent ([]: List(Viewport))
				=>
				FALSE;

			    visible_in_at_least_one_parent (r ! rest)
				=>
				if (backing_pixmap_is_visible  r.parent_pixmap)
				    #
				    TRUE;
				else
				    visible_in_at_least_one_parent  rest;
				fi;
			end;
		    end;
		fi;
	end; 


	fun backing_pixmap_id (bp: Backing_Pixmap)
	    =
	    case bp
		#
		TOPWINDOW_PIXMAP  {												# 
				    pixmap:		g2p::Gadget_To_Rw_Pixmap,						# 
				    stacking_order:	Int,
				    origin:		Ref(g2d::Point),
				    ...
				  }
		    =>
		    sprintf "TOPWINDOW_PIXMAP with pixmap.id => %d  pixmap.size => %s   origin => %s  stacking_order => %d"  (id_to_int pixmap.id)  (g2j::size_to_string pixmap.size)  (g2j::point_to_string *origin)  stacking_order;

		VIEWPORT_PIXMAP   { pixmap:		g2p::Gadget_To_Rw_Pixmap,						# The pixmap visible in the viewport.
				    ...
				  }
		    =>
		    sprintf "VIEWPORT_PIXMAP with pixmap.id => %d  pixmap.size => %s"  (id_to_int pixmap.id)  (g2j::size_to_string pixmap.size);
	    esac;

	stipulate
	    fun die ()
		=
		{   msg = "arg should never be a VIEWPORT_PIXMAP! -- find_all_topwindow_pixmaps_above_given_topwindow_pixmap_in_stacking_order in guiboss-types.pkg";
		    log::fatal msg;
		    raise exception FAIL msg;
		};

	herein
	    fun root_pixmap (topwindow_pixmap:	Backing_Pixmap)
		=
		case topwindow_pixmap
		    #
		    TOPWINDOW_PIXMAP r
			=>
			case r.parent
			    #
			    THE topwindow_pixmap =>  root_pixmap topwindow_pixmap;
			    NULL		 =>		 topwindow_pixmap;
			esac;			    

		    VIEWPORT_PIXMAP r
			=>
			case *r.viewports
			    #
			    [ r ]   =>  {   /* die(); */   root_pixmap  r.parent_pixmap;	};				# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
			    #
			    _	    =>  {   msg = "Unsupported case in root_pixmap/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;


	    fun topwindow_pixmap_origin_in_base_window_coordinates							# We support popups on popups, and each popup origin is relative to its parent, so we need to sum the origins of given topwindow_pixmap plus all of its parents.
		  (
		    topwindow_pixmap:	Topwindow_Pixmap
		  )
		  :			g2d::Point
		=
		*topwindow_pixmap.origin
		+
		(sum_of_parent_origins  topwindow_pixmap)
		where
		    fun sum_of_parent_origins topwindow_pixmap
			=
			case topwindow_pixmap.parent
			    #
			    NULL => g2d::point::zero;
			    #
			    THE (TOPWINDOW_PIXMAP r)
				=>
				*r.origin + (sum_of_parent_origins r);
			    #
			    THE (VIEWPORT_PIXMAP _) => die();								# Parent of a TOPWINDOW_PIXMAP should always be another TOPWINDOW_PIXMAP.
			esac;
		end;

	    fun topwindow_pixmap_of_backing_pixmap
		  (
		    topwindow_pixmap:	Backing_Pixmap
		  )
		  :			Topwindow_Pixmap
		=
		case topwindow_pixmap
		    #
		    TOPWINDOW_PIXMAP r => r;
		    #
		    VIEWPORT_PIXMAP r
			=>
			case *r.viewports
			    #
			    [ r ]  =>   {   die();  topwindow_pixmap_of_backing_pixmap  r.parent_pixmap; };		# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
			    #
			    _	   =>   {   msg = "Unsupported case in topwindow_pixmap_of_backing_pixmap/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;

	    fun topwindow_pixmap_of_topwindow_pixmap_or_viewport_pixmap							# Used in  make_rw_pixmap()  wrapper in  display_one_frame()  in  src/lib/x-kit/widget/gui/guiboss-imp.pkg
		  (
		    topwindow_pixmap:	Backing_Pixmap
		  )
		  :			Topwindow_Pixmap
		=
		case topwindow_pixmap
		    #
		    TOPWINDOW_PIXMAP r => r;
		    #
		    VIEWPORT_PIXMAP r
			=>
			case *r.viewports
			    #
			    [ r ]  =>   {   topwindow_pixmap_of_topwindow_pixmap_or_viewport_pixmap  r.parent_pixmap; };
			    #
			    _	   =>   {   msg = "Unsupported case in topwindow_pixmap_of_topwindow_pixmap_or_viewport_pixmap/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;

	    fun find_all_backing_pixmaps_above_given_stacking_order							# Called below and also by   redraw_all_popups()   in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
		  (
		    topwindow_pixmap:	Backing_Pixmap,
		    our_stacking_order:	Int
		  )
		  :			List( Backing_Pixmap )								# 
		=
		case topwindow_pixmap
		    #
		    TOPWINDOW_PIXMAP r
			=>
{
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order our_stacking_order d=%d r.stacking_order d=%d r.pixmap.id d=%d r.parent=%s #popups d=%d" our_stacking_order r.stacking_order (id_to_int r.pixmap.id) (case r.parent NULL => "NULL"; _ => "NON-null"; esac) (list::length *r.popups); };
			{    
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order topwindow_pixmap s=%s" (backing_pixmap_id topwindow_pixmap); };
			    topwindow_pixmap =  root_pixmap topwindow_pixmap;
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order (root_pixmap topwindow_pixmap) s=%s" (backing_pixmap_id topwindow_pixmap); };
# result =
			    find' topwindow_pixmap;
# nb {. "find_all_backing_pixmaps_above_given_stacking_order resultlist:"; };
# apply show_backing_pixmap result
# where
#     fun show_backing_pixmap (backing_pixmap: Backing_Pixmap)
# 	=
# 	nb {. sprintf "resultlist element == %s"  (backing_pixmap_id backing_pixmap); };
# end;
# 
# result;
			}
			where
			    fun find' tp
				=
{
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order/find' tp s=%s" (backing_pixmap_id tp); };
				case tp
				    #
				    TOPWINDOW_PIXMAP (pm: Topwindow_Pixmap)
					=>
					{
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order/find' our_stacking_order=%d r.stacking_order=%d pm.stacking_order=%d r.pixmap.id=%d r.parent=%s #popups=%d" our_stacking_order r.stacking_order pm.stacking_order (id_to_int r.pixmap.id) (case r.parent NULL => "NULL"; _ => "NON-null"; esac) (list::length *r.popups); };
					    results =   if (pm.stacking_order > our_stacking_order)   [ tp ];
							else					      [    ];
							fi;	

# result =
					    list::cat  (results  !  (map find' *pm.popups));
# nb {. sprintf "find_all_backing_pixmaps_above_given_stacking_order/find' our_stacking_order=%d r.stacking_order=%d r.pixmap.id=%d r.parent=%s #popups=%d #results=%d" our_stacking_order r.stacking_order (id_to_int r.pixmap.id) (case r.parent NULL => "NULL"; _ => "NON-null"; esac) (list::length *r.popups) (list::length result); };
# result;
					};

				    VIEWPORT_PIXMAP r
					=>
					case *r.viewports
					    #
					    [ r ]   =>  {   die();   find'  r.parent_pixmap; };				# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
					    #
					    _	    =>  {   msg = "Unsupported case in find_all_backing_pixmaps_above_given_stacking_order/find'/VIEWPORT_PIXMAP --guiboss-types.pkg";
							    log::fatal msg;
							    raise exception FAIL msg;
							};
					esac;
				esac;
};
			end;
};

		    VIEWPORT_PIXMAP r
			=>
			case *r.viewports
			    #
			    [ r ]   =>  {   die();									# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
					    find_all_backing_pixmaps_above_given_stacking_order (r.parent_pixmap, our_stacking_order);
				 	};
			    #
			    _	    =>  {   msg = "Unsupported case in find_all_backing_pixmaps_above_given_stacking_order/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;

	    fun find_all_topwindow_pixmaps_above_given_backing_pixmap_in_stacking_order
		  (
		    backing_pixmap:	Backing_Pixmap
		  )
		  :			List( Topwindow_Pixmap )							# By returning  List(Topwindow_Pixmap)  rather than  List(Backing_Pixmap)  we spare our caller the nuisance of dealing with all the impossible VIEWPORT_PIXMAP cases.
		=
		case backing_pixmap
		    #
		    TOPWINDOW_PIXMAP r
			=>
			{   backing_pixmaps
				=
				find_all_backing_pixmaps_above_given_stacking_order
				  (
				    backing_pixmap,
				    r.stacking_order
				  );

			    topwindow_pixmaps
				=
				map  topwindow_pixmap_of_backing_pixmap  backing_pixmaps;


			    topwindow_pixmaps;
			};

		    VIEWPORT_PIXMAP r
			=>
			case *r.viewports
			    #
			    [ r ]   =>  {   die();									# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
					    find_all_topwindow_pixmaps_above_given_backing_pixmap_in_stacking_order  r.parent_pixmap;
					};
			    #
			    _	    =>  {   msg = "Unsupported case in find_all_topwindow_pixmaps_above_given_backing_pixmap_in_stacking_order/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;

	    fun return_all_topwindow_pixmaps_in_descending_stacking_order
		  (
		    null_or_backing_pixmap:	Null_Or (Backing_Pixmap)
		  )
		  :				List( Topwindow_Pixmap )						# By returning  List(Topwindow_Pixmap)  rather than  List(Backing_Pixmap)  we spare our caller the nuisance of dealing with all the impossible VIEWPORT_PIXMAP cases.
		=
		case null_or_backing_pixmap
		    #
		    THE (backing_pixmap as TOPWINDOW_PIXMAP r)
			=>
			{   backing_pixmaps
				=
				find_all_backing_pixmaps_above_given_stacking_order
				  (
				    backing_pixmap,
				    0
				  );

			    topwindow_pixmaps
				=
				map  topwindow_pixmap_of_backing_pixmap  backing_pixmaps;

			    topwindow_pixmaps
				=
				lms::sort_list topwindow_pixmap_gt topwindow_pixmaps
				where
				    fun topwindow_pixmap_gt
					  (
					    p1:	Topwindow_Pixmap,
					    p2:	Topwindow_Pixmap
					  )
					=
					p1.stacking_order < p2.stacking_order;
				end;

# nb {. "topwindow_pixmaps in order:"; };
# apply print_pixmap_order topwindow_pixmaps
# where
#     fun print_pixmap_order (p: Topwindow_Pixmap)
# 	=
# 	nb {. sprintf "topwindow_pixmap.stacking_order d=%d" p.stacking_order; };
# end;


			    topwindow_pixmaps;
			};

		    NULL => [];

		    THE (VIEWPORT_PIXMAP r)
			=>
			case *r.viewports
			    #
			    [ r ]   =>  {   die();									# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
					    find_all_topwindow_pixmaps_above_given_backing_pixmap_in_stacking_order  r.parent_pixmap;
					};
			    #
			    _	    =>  {   msg = "Unsupported case in find_all_topwindow_pixmaps_above_given_backing_pixmap_in_stacking_order/VIEWPORT_PIXMAP --guiboss-types.pkg";
					    log::fatal msg;
					    raise exception FAIL msg;
					};
			esac;
		esac;

	    fun adjust_origin (origin: g2d::Point, parent: Null_Or(Backing_Pixmap))
		=
		case parent
		    #
		    NULL  =>    origin;
		    #
		    THE p =>    case p
				    #
				    TOPWINDOW_PIXMAP (pm: Topwindow_Pixmap)
					=>
					adjust_origin (origin + *pm.origin, pm.parent);

				    VIEWPORT_PIXMAP r
					=>
					case *r.viewports
					    #
					    [ r ]   =>  {   die();				# The 'die()' is because after writing this I decided it was a horrible mistake. But I'm keeping the code in case I change my mind again.
							    adjust_origin (origin, THE r.parent_pixmap);
							};
					    #
					    _	    =>  {   msg = "Unsupported case in topwindow_pixmap_site_in_basewindow_coordinates/adjust_origin/VIEWPORT_PIXMAP --guiboss-types.pkg";
							    log::fatal msg;
							    raise exception FAIL msg;
							};
					esac;
				esac;
		esac;

	    fun topwindow_pixmap_site_in_basewindow_coordinates
		  (
		    topwindow_pixmap:	Topwindow_Pixmap
		  )
		=
		{	 
		    size   =    topwindow_pixmap.pixmap.size;
		    #
		    origin =   *topwindow_pixmap.origin;

		    origin =    adjust_origin (origin, topwindow_pixmap.parent);

		   g2d::box::make (origin, size);
		};

# This is unused and should probably be deleted
	    fun translate_frombox_to_basewindow_coordinates
		  (
		    topwindow_pixmap:	Topwindow_Pixmap,
		    from_box:		g2d::Box
		  )
		=
		{   box_origin = g2d::box::upperleft from_box;
		    #
		    origin =   *topwindow_pixmap.origin + box_origin;

		    origin =    adjust_origin (origin, topwindow_pixmap.parent);

		    g2d::box::clone_box_at (from_box, origin);
		};
	end;





	#########################################################################################
	### widgetspace-imp code

	fun pprint_widgetspace_arg
	      (pp:		pp::Prettyprint_Mill)
	      (widgetspace_arg:	Widgetspace_Arg)
	    =
	    {
		widgetspace_arg
		    ->
		    (
			options:	List(Widgetspace_Option)
		    );

		pp.box {.
		    pp.txt "[ ";
		    pp::seqx {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			PS_MICROTHREAD_NAME name =>  {  pp.lit (sprintf "PS_MICROTHREAD_NAME \"%s\"" name);	};
			PS_ID               id	 =>  {  pp.lit (sprintf "PS_ID %d" (id_to_int id)         );	};
			PS_CALLBACK _		 =>  {  pp.lit          "PS_CALLBACK (callback)";		};
		    esac;
	    end;




	#########################################################################################
	### objectspace-imp code


	fun pprint_objectspace_arg
	      (pp:			pp::Prettyprint_Mill)
	      (objectspace_arg:	Objectspace_Arg)
	    =
	    {
		objectspace_arg
		    ->
		    (
			options:	List(Objectspace_Option)
		    );

		pp.box {.
		    pp.txt "[ ";
		    pp::seqx {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			CS_MICROTHREAD_NAME	name	=>  {  pp.lit (sprintf "CS_MICROTHREAD_NAME \"%s\"" name);	};
			CS_ID			id	=>  {  pp.lit (sprintf "CS_ID %d" (id_to_int id)         );	};
			CS_OBJECTSPACE_CALLBACK _	=>  {  pp.lit          "CS_OBJECTSPACE_CALLBACK (callback)";	};
		    esac;
	    end;

	fun pprint_objectspace_layout_hint
	      #	
	      (pp:		pp::Prettyprint_Mill)
	      (layout_hint:	clh::Objectspace_Layout_Hint)
	    =
	    case layout_hint
		#
		clh::SHARE s =>    pp.lit (sprintf  "SHARE %g"  s);
	    esac;



	#########################################################################################
	### spritespace-imp code

	fun pprint_spritespace_arg
	      (pp:			pp::Prettyprint_Mill)
	      (spritespace_arg:		Spritespace_Arg)
	    =
	    {
		spritespace_arg
		    ->
		    (
			options:	List(Spritespace_Option)
		    );

		pp.box {.
		    pp.txt "[ ";
		    pp::seqx {. pp.txt ", "; }
			    pprint_option
			    options
			    ;	
		    pp.txt " ]";
		    pp.lit ")";
		};
	    }
	    where
		fun pprint_option option
		    =
		    case option
			#
			OS_MICROTHREAD_NAME name	=>  {  pp.lit (sprintf "OS_MICROTHREAD_NAME \"%s\"" name);	};
			OS_ID               id		=>  {  pp.lit (sprintf "OS_ID %d" (id_to_int id)          );	};
			OS_SPRITESPACE_CALLBACK _	=>  {  pp.lit          "OS_SPRITESPACE_CALLBACK (callback)";	};
		    esac;
	    end;


	fun pprint_spritespace_layout_hint
	      #	
	      (pp:		pp::Prettyprint_Mill)
	      (layout_hint:	blh::Spritespace_Layout_Hint)
	    =
	    case layout_hint
		#
		blh::SHARE s =>    pp.lit (sprintf  "SHARE %g"  s);
	    esac;


	#########################################################################################
	### gui-plan code

	fun pprint_gui_plan (gui_plan: Gui_Plan)							# "pprint" == "prettyprint".
	    =
	    pp::with_standard_prettyprint_mill
		#
		(err::default_plaint_sink ())	[]
		#
		(\\ pp:   pp::Prettyprint_Mill
		    =
		    do_gui_plan  gui_plan
		    where
			fun do_gui_plan  gui_plan
			    =
			    do_widgetspace  gui_plan

			also
			fun do_widgetspace
			      ( widgetspace_arg:	Widgetspace_Arg,
				widget_widget:		Widget_Widget
			      )
			    =
			    {   pp.box {.
				    do_widgetspace_arg  widgetspace_arg;
				    do_widget_widget     widget_widget;
				};
				pp.newline();
			    }

			also
			fun do_spritespace
			      (
				spritespace_arg:	Spritespace_Arg,
				sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint), Sprite_Widget)  )
			      )
			    =
			    {   pp.box {.
				    do_spritespace_arg  spritespace_arg;
				    do_sprite_widgets    sprite_widgets;
				};
				pp.newline();
			    }

			also
			fun do_spritespace_arg  (spritespace_arg:	Spritespace_Arg)
			    =
			    {
				pprint_spritespace_arg  pp  spritespace_arg;
				pp.newline();
			    }


			also
			fun do_spritespace_layout_hints  (layout_hints: List(blh::Spritespace_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  blh::Spritespace_Layout_Hint)
				    =
				    pprint_spritespace_layout_hint  pp  hint;

				pp::listx  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_sprite_widgets  (sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint), Sprite_Widget)  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";

				    fun do_widget (layout_hints: List(blh::Spritespace_Layout_Hint),  sprite_widget: Sprite_Widget)
					=
					pp.box {.
					    do_sprite_widget			sprite_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_spritespace_layout_hints	 layout_hints;
					};

				    pp::seqx
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					sprite_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_sprite_widget  (sprite_widget:	Sprite_Widget)
			    =
			    case sprite_widget
				#
				SPRITE _
				    =>
				    {
					pp.box {.
					    pp.lit  "SPRITE _";
					};
					pp.newline();
				    };
			    esac

			also
			fun do_objectspace
			      (
				objectspace_arg:	Objectspace_Arg,
				object_widgets:		List(  (List(clh::Objectspace_Layout_Hint), Object_Widget)  )
			      )
			    =
			    {   pp.box {.
				    do_objectspace_arg  objectspace_arg;
				    do_object_widgets    object_widgets;
				};
				pp.newline();
			    }

			also
			fun do_objectspace_arg  (objectspace_arg:	Objectspace_Arg)
			    =
			    {
				pprint_objectspace_arg  pp  objectspace_arg;
				pp.newline();
			    }

			also
			fun do_objectspace_layout_hints  (layout_hints: List(clh::Objectspace_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  clh::Objectspace_Layout_Hint)
				    =
				    pprint_objectspace_layout_hint  pp  hint;

				pp::listx  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_object_widgets  (object_widgets:		List(  (List(clh::Objectspace_Layout_Hint),  Object_Widget)  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";


				    fun do_widget (layout_hints: List(clh::Objectspace_Layout_Hint),  object_widget: Object_Widget)
					=
					pp.box {.
					    do_object_widget			object_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_objectspace_layout_hints	layout_hints;
					};

				    pp::seqx
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					object_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_object_widget  (object_widget:	Object_Widget)
			    =
			    case object_widget
				#
				OBJECT _
				    =>
				    {
					pp.box {.
					    pp.lit  "OBJECT _";
					};
					pp.newline();
				    };

			        WIDGETSPACE  widgetspace
				    =>
				    {
					pp.lit  "WIDGETSPACE ";
					pp.newline();
					do_widgetspace widgetspace;
					pp.newline();
				    };
			    esac

			also
			fun do_widgetspace_arg  (widgetspace_arg:	Widgetspace_Arg)
			    =
			    {
				pprint_widgetspace_arg  pp  widgetspace_arg;
				pp.newline();
			    }

			also
			fun do_widget_widget  (widget_widget:	Widget_Widget)
			    =
			    case widget_widget
				#
			        ROW	(widgets:	 List( Widget_Widget ))
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "ROW [";
					    pp.ind 2;
					    pp.txt " ";

					    fun do_widget (widget_widget: Widget_Widget)
						=
						pp.box {.
						    do_widget_widget			widget_widget;
						    pp.endlit ",";
						};

					    pp::seqx
						{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
						do_widget				# Print one list element.
						widgets;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "]";
					};
				    };

			        COL	(a:	 List( Widget_Widget ))
				    =>
				    {
					pp.lit  "COL";
					pp.newline();
				    };

			        GRID	(a: List( List( Widget_Widget )))
				    =>
				    {
					pp.lit  "GRID ... ";
					pp.newline();
				    };

				SCROLLABLE_VIEW _
				    =>
				    {
					pp.box {.
					    pp.lit  "SCROLLABLE_VIEW _";
					};
					pp.newline();
				    };

				TABBED_VIEWS _
				    =>
				    {
					pp.box {.
					    pp.lit  "TABBED_VIEWS _";
					};
					pp.newline();
				    };

				FRAME _
				    =>
				    {
					pp.box {.
					    pp.lit  "FRAME _";
					};
					pp.newline();
				    };

				WIDGET _
				    =>
				    {
					pp.box {.
					    pp.lit  "WIDGET _";
					};
					pp.newline();
				    };

			        OBJECTSPACE (objectspace:	(Objectspace_Arg,  List((List(clh::Objectspace_Layout_Hint), Object_Widget))))
				    =>
				    {
					pp.lit  "OBJECTSPACE";
					do_objectspace  objectspace;
					pp.newline();
				    };

			        SPRITESPACE (spritespace:	(Spritespace_Arg,  List((List(blh::Spritespace_Layout_Hint), Sprite_Widget))))
				    =>
				    {
					pp.lit  "SPRITESPACE";
					do_spritespace  spritespace;
					pp.newline();
				    };
			      
			        NULL_WIDGET_WIDGET
				    =>
				    {
					pp.lit  "NULL_WIDGET_WIDGET";
					pp.newline();
				    };
			    esac;
		    end
		);

	#########################################################################################
	### stopped-gui code

	fun pprint_paused_gui (paused_gui: Paused_Gui)								# "pprint" == "prettyprint".
	    =
	    pp::with_standard_prettyprint_mill
		#
		(err::default_plaint_sink ())	[]
		#
		(\\ pp:   pp::Prettyprint_Mill
		    =
		    do_paused_gui  paused_gui
		    where
			fun do_paused_gui  paused_gui
			    =
			    do_widgetspace  paused_gui

			also
			fun do_widgetspace
			      ( widgetspace_arg:	Widgetspace_Arg,
				widget_widget:		Pg_Widget_Widget
			      )
			    =
			    {   pp.box {.
				    do_widgetspace_arg  widgetspace_arg;
				    do_widget_widget     widget_widget;
				};
				pp.newline();
			    }

			also
			fun do_spritespace
			      (
				spritespace_arg:	Spritespace_Arg,
				sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint),  Pg_Sprite_Widget)  )
			      )
			    =
			    {   pp.box {.
				    do_spritespace_arg  spritespace_arg;
				    do_sprite_widgets    sprite_widgets;
				};
				pp.newline();
			    }

			also
			fun do_spritespace_arg  (spritespace_arg:	Spritespace_Arg)
			    =
			    {
				pprint_spritespace_arg  pp  spritespace_arg;
				pp.newline();
			    }


			also
			fun do_spritespace_layout_hints  (layout_hints: List(blh::Spritespace_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  blh::Spritespace_Layout_Hint)
				    =
				    pprint_spritespace_layout_hint  pp  hint;

				pp::listx  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_sprite_widgets  (sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint),  Pg_Sprite_Widget)  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";

				    fun do_widget (layout_hints: List(blh::Spritespace_Layout_Hint),  sprite_widget: Pg_Sprite_Widget)
					=
					pp.box {.
					    do_sprite_widget			sprite_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_spritespace_layout_hints	layout_hints;
					};

				    pp::seqx
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					sprite_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_sprite_widget  (sprite_widget:	Pg_Sprite_Widget)
			    =
			    case sprite_widget
				#
			        PG_SPRITE ( fn:			Sprite_Sprite_Start_Fn,
					    saved_sprite_state:	Null_Or(Exception)
					  )
				    =>
				    {
					pp.box {.
					    pp.lit  "SPRITE _";
					};
					pp.newline();
				    };

# 			        SG_BALL	( ball_arg:		c2b::Make_Arg,
# 					  ball_look_arg:	bli::Sprite_Look_Arg
# 					)
# 				    =>
# 				    {
# 					pp.box {.
# 					    pp.lit  "BALL (";		pp.txt " ";
# 					    bsi::pprint_make_arg  pp  ball_arg;
# 					    pp.txt ", ";
# 					    blx::pprint_sprite_look_arg  pp  ball_look_arg;
# 					    pp.lit  ")";
# 					};
# 					pp.newline();
# 				    };
			    esac

			also
			fun do_objectspace
			      (
				objectspace_arg:	Objectspace_Arg,
				object_widgets:		List(  (List(clh::Objectspace_Layout_Hint),  Pg_Object_Widget)  )
			      )
			    =
			    {   pp.box {.
				    do_objectspace_arg  objectspace_arg;
				    do_object_widgets    object_widgets;
				};
				pp.newline();
			    }

			also
			fun do_objectspace_arg  (objectspace_arg:	Objectspace_Arg)
			    =
			    {
				pprint_objectspace_arg  pp  objectspace_arg;
				pp.newline();
			    }

			also
			fun do_objectspace_layout_hints  (layout_hints: List(clh::Objectspace_Layout_Hint))
			    =
			    {   title = "";
				#
				fun do_hint (hint:  clh::Objectspace_Layout_Hint)
				    =
				    pprint_objectspace_layout_hint  pp  hint;

				pp::listx  pp  do_hint  title  layout_hints;
			    }

			also
			fun do_object_widgets  (object_widgets:		List(  (List(clh::Objectspace_Layout_Hint),  Pg_Object_Widget)  ))
			    =
			    {
				pp.box' 0 -1 {.
				    pp.lit  "[";
				    pp.ind 2;
				    pp.txt " ";


				    fun do_widget (layout_hints: List(clh::Objectspace_Layout_Hint),  object_widget: Pg_Object_Widget)
					=
					pp.box {.
					    do_object_widget			object_widget;
					    pp.endlit ",";
					    pp.txt " ";
					    do_objectspace_layout_hints	layout_hints;
					};

				    pp::seqx
					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
					do_widget				# Print one list element.
					object_widgets;				# List of elements.

				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "]";
				};
			    }

			also
			fun do_object_widget  (object_widget:	Pg_Object_Widget)
			    =
			    case object_widget
				#
				PG_OBJECT ( fn:			Object_Object_Start_Fn,
					    saved_object_state:	Null_Or(Exception)
					  )
				    =>
				    {
					pp.box {.
					    pp.lit  "PG_OBJECT _";
					};
					pp.newline();
				    };

			        PG_WIDGETSPACE  widgetspace
				    =>
				    {
					pp.lit  "PG_WIDGETSPACE ";
					pp.newline();
					do_widgetspace widgetspace;
					pp.newline();
				    };
			    esac

			also
			fun do_widgetspace_arg  (widgetspace_arg:	Widgetspace_Arg)
			    =
			    {
				pprint_widgetspace_arg  pp  widgetspace_arg;
				pp.newline();
			    }

			also
			fun do_widget_widget  (widget_widget:	Pg_Widget_Widget)
			    =
			    case widget_widget
				#
			        PG_ROW	(widgets:	 List( Pg_Widget_Widget ))
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "Sg_ROW [";
					    pp.ind 2;
					    pp.txt " ";

					    fun do_widget (widget_widget: Pg_Widget_Widget)
						=
						pp.box {.
						    do_widget_widget			widget_widget;
						    pp.endlit ",";
						    pp.txt " ";
						};

					    pp::seqx
						{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
						do_widget				# Print one list element.
						widgets;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "]";
					};
				    };

			        PG_COL	(a:	 List( Pg_Widget_Widget ))
				    =>
				    {
					pp.lit  "PG_COL";
					pp.newline();
				    };

			        PG_GRID	(a: List( List( Pg_Widget_Widget )) )
				    =>
				    {
					pp.lit  "PG_GRID";
					pp.newline();
				    };

			        PG_SCROLLABLE_VIEW (a:	(Viewport_Scroller_Callback, g2d::Size, Pg_Widget_Widget) )
				    =>
				    {
					pp.lit  "PG_SCROLLABLE_VIEW";
					pp.newline();
				    };

			        PG_TABBED_VIEWS (a:	(Tabbed_View_Picker_Callback,  g2d::Size,  List( Pg_Widget_Widget)))
				    =>
				    {
					pp.lit  "PG_TABBED_VIEWS";
					pp.newline();
				    };

			        PG_FRAME _
				    =>
				    {
					pp.lit  "PG_FRAME ... ";
					pp.newline();
				    };

			        PG_WIDGET ( fn:			Widget_Widget_Start_Fn,
					    saved_widget_state:	Null_Or(Exception)
					  )
				    =>
				    {
					pp.box {.
					    pp.lit  "PG_WIDGET _";
					};
					pp.newline();
				    };


			        PG_OBJECTSPACE (objectspace:	(Objectspace_Arg,  List((List(clh::Objectspace_Layout_Hint), Pg_Object_Widget))))
				    =>
				    {
					pp.lit  "PG_OBJECTSPACE";
					do_objectspace  objectspace;
					pp.newline();
				    };

			        PG_SPRITESPACE (spritespace:	(Spritespace_Arg,  List((List(blh::Spritespace_Layout_Hint), Pg_Sprite_Widget))))
				    =>
				    {
					pp.lit  "PG_SPRITESPACE";
					do_spritespace  spritespace;
					pp.newline();
				    };
			      
			        PG_NULL_WIDGET_WIDGET
				    =>
				    {
					pp.lit  "PG_NULL_WIDGET_WIDGET";
					pp.newline();
				    };
			    esac;
		    end
		);



	#########################################################################################
	### running-gui code

	fun widget_widget_site (widget_widget: Rg_Widget_Widget)
	    =
	    case widget_widget
		#
		RG_ROW r		=>  *r.site;
		RG_COL r		=>  *r.site;
		RG_GRID r		=>  *r.site;
		RG_SCROLLABLE_VIEW r	=>  *r.site;
		RG_TABBED_VIEWS r	=>  *r.site;
		RG_FRAME r		=>  *r.site;
		RG_WIDGET r		=>  *r.site;
		RG_OBJECTSPACE r	=>  *r.site;
		RG_SPRITESPACE r	=>  *r.site;
		RG_NULL_WIDGET_WIDGET	=>  g2d::box::zero;
	    esac;


	Running_Gui_Postorder_Apply_Option										# The following running_gui_postorder_apply() facility allows clients to iterate over nodes in a Running_Gui tree without having to write out the whole recursion.
	  #
	  = ROW_FN		(Row		 -> Void)								# Call this fn on RG_ROW             nodes in Running_Gui. Defaults to null fn.
	  | COL_FN		(Col		 -> Void)								# Call this fn on RG_COL             nodes in Running_Gui. Defaults to null fn.
	  | GRID_FN		(Grid		 -> Void)								# Call this fn on RG_GRID            nodes in Running_Gui. Defaults to null fn.
	  | SCROLLABLE_VIEW_FN	(Scrollable_View -> Void)								# Call this fn on RG_SCROLLABLE_VIEW nodes in Running_Gui. Defaults to null fn.
	  | TABBED_VIEWS_FN	(Tabbed_Views	 -> Void)								# Call this fn on RG_TABBED_VIEWS    nodes in Running_Gui. Defaults to null fn.
	  | FRAME_FN		(Framed_Widgets	 -> Void)								# Call this fn on RG_FRAME           nodes in Running_Gui. Defaults to null fn.
	  | WIDGET_FN		(Widget		 -> Void)								# Call this fn on RG_WIDGET          nodes in Running_Gui. Defaults to null fn.
	  | DO_INVISIBLE_VIEWS  Bool											# Defaults to TRUE.  If FALSE, recursion will not enter de-selected views in a TABBED_VIEWS node.
	  ;

	fun running_gui_postorder_apply
	      (
		running_gui:	Running_Gui,
		options:	List( Running_Gui_Postorder_Apply_Option )
	      )
	    =
	    do_widget_widget  running_gui.widget_widget
	    where

		fun process_options  (options:  List(Running_Gui_Postorder_Apply_Option))
		    =
		    {   null_fn = (\\ (x: X) = ());
			#
			my_row_fn			=  REF  null_fn;
			my_col_fn			=  REF  null_fn;
			my_grid_fn			=  REF  null_fn;
			my_scrollable_view_fn		=  REF  null_fn;
			my_tabbed_views_fn		=  REF  null_fn;
			my_frame_fn			=  REF  null_fn;
			my_widget_fn			=  REF  null_fn;
			my_do_invisible_views		=  REF  TRUE;

			apply  do_option  options
			where
			    fun do_option (ROW_FN			fn) =>  my_row_fn			:=  fn;
				do_option (COL_FN			fn) =>  my_col_fn			:=  fn;
				do_option (GRID_FN			fn) =>  my_grid_fn			:=  fn;
				do_option (SCROLLABLE_VIEW_FN		fn) =>  my_scrollable_view_fn		:=  fn;
				do_option (TABBED_VIEWS_FN		fn) =>  my_tabbed_views_fn		:=  fn;
				do_option (FRAME_FN			fn) =>  my_frame_fn			:=  fn;
				do_option (WIDGET_FN			fn) =>  my_widget_fn			:=  fn;
				do_option (DO_INVISIBLE_VIEWS		b ) =>  my_do_invisible_views		:=  b ;
			    end;
			end;

			{ row_fn			=>  *my_row_fn,
			  col_fn			=>  *my_col_fn,
			  grid_fn			=>  *my_grid_fn,
			  scrollable_view_fn		=>  *my_scrollable_view_fn,
			  tabbed_views_fn		=>  *my_tabbed_views_fn,
			  frame_fn			=>  *my_frame_fn,
			  widget_fn			=>  *my_widget_fn,
			  do_invisible_views		=>  *my_do_invisible_views
			};
		    };

		options =  process_options  options;

		fun do_widget_widget (widget_widget: Rg_Widget_Widget)
		    =
		    case widget_widget
			#
			RG_ROW row =>	{   apply do_widget row.widgets
						where
						    fun do_widget (row_widget: Rg_Widget_Widget)
							=
							do_widget_widget  row_widget;
						end;

					    options.row_fn row;
					};

			RG_COL col =>	{   apply do_widget col.widgets
						where
						    fun do_widget (col_widget: Rg_Widget_Widget)
							=
							do_widget_widget  col_widget;
						end;

					    options.col_fn  col;
					};

			RG_GRID grid =>	{   apply do_widgets grid.widgets
						where
						    fun do_widgets (grid_widgets: List(Rg_Widget_Widget))
							=
							apply do_widget grid_widgets
							where
							    fun do_widget (grid_widget: Rg_Widget_Widget)
								=
								do_widget_widget grid_widget;
							end;
						end;

					    options.grid_fn  grid;
					};

			RG_SCROLLABLE_VIEW view
			    =>		{   do_widget_widget  view.widget;
					    #
					    options.scrollable_view_fn  view;
					};

			RG_TABBED_VIEWS views
			    =>		{   fun do_tabview (tabview: Tabview)
						=
						do_widget_widget tabview.widget;

					    if options.do_invisible_views
						#
						apply do_tabview views.widgets;
					    else
						do_tabview *views.visible_widget;
					    fi;

					    options.tabbed_views_fn views;
					};

			RG_FRAME f =>	{   fun do_widget (w: Rg_Widget_Widget)
						=
						do_widget_widget  w;

					    do_widget f.widget;
					    do_widget f.frame_widget;
					    #
					    options.frame_fn  f;
					};

			RG_WIDGET widget
			    =>		{   options.widget_fn widget;
					};

			RG_OBJECTSPACE space
			    =>		{   ();											# Eventually we'll have to do the full subrecursion here but for the moment none of that stuff is really operational.
					};
			RG_SPRITESPACE space
			    =>		{   ();											# Eventually we'll have to do the full subrecursion here but for the moment none of that stuff is really operational.
					};
			RG_NULL_WIDGET_WIDGET
			    =>		{   ();
					};
		    esac;
	    end;


	fun pprint_backing_pixmap (backing_pixmap: Backing_Pixmap)
	    =
	    pp::with_standard_prettyprint_mill
		#
		(err::default_plaint_sink ())	[]
		#
		(\\ pp:   pp::Prettyprint_Mill
		    =
		    do_backing_pixmap backing_pixmap
		    where

# 			also
# 			fun do_widgetspace
# 			      ( widgetspace_arg:	Widgetspace_Arg,
# 				widget_widget:		Pg_Widget_Widget
# 			      )
# 			    =
# 			    {   pp.box {.
# 				    do_widgetspace_arg  widgetspace_arg;
# 				    do_widget_widget     widget_widget;
# 				};
# 				pp.newline();
# 			    }
# 
# 			also
# 			fun do_spritespace
# 			      (
# 				spritespace_arg:	Spritespace_Arg,
# 				sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint),  Pg_Sprite_Widget)  )
# 			      )
# 			    =
# 			    {   pp.box {.
# 				    do_spritespace_arg  spritespace_arg;
# 				    do_sprite_widgets    sprite_widgets;
# 				};
# 				pp.newline();
# 			    }
# 
# 			also
# 			fun do_spritespace_arg  (spritespace_arg:	Spritespace_Arg)
# 			    =
# 			    {
# 				pprint_spritespace_arg  pp  spritespace_arg;
# 				pp.newline();
# 			    }
# 
# 
# 			also
# 			fun do_spritespace_layout_hints  (layout_hints: List(blh::Spritespace_Layout_Hint))
# 			    =
# 			    {   title = "";
# 				#
# 				fun do_hint (hint:  blh::Spritespace_Layout_Hint)
# 				    =
# 				    pprint_spritespace_layout_hint  pp  hint;
# 
# 				pp::listx  pp  do_hint  title  layout_hints;
# 			    }
# 
# 			also
# 			fun do_sprite_widgets  (sprite_widgets:		List(  (List(blh::Spritespace_Layout_Hint),  Pg_Sprite_Widget)  ))
# 			    =
# 			    {
# 				pp.box' 0 -1 {.
# 				    pp.lit  "[";
# 				    pp.ind 2;
# 				    pp.txt " ";
# 
# 				    fun do_widget (layout_hints: List(blh::Spritespace_Layout_Hint),  sprite_widget: Pg_Sprite_Widget)
# 					=
# 					pp.box {.
# 					    do_sprite_widget			sprite_widget;
# 					    pp.endlit ",";
# 					    pp.txt " ";
# 					    do_spritespace_layout_hints	layout_hints;
# 					};
# 
# 				    pp::seqx
# 					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
# 					do_widget				# Print one list element.
# 					sprite_widgets;				# List of elements.
# 
# 				    pp.ind 0;
# 				    pp.txt " ";
# 				    pp.lit "]";
# 				};
# 			    }
# 
# 			also
# 			fun do_sprite_widget  (sprite_widget:	Pg_Sprite_Widget)
# 			    =
# 			    case sprite_widget
# 				#
# 			        PG_SPRITE ( fn:			Sprite_Sprite_Start_Fn,
# 					    saved_sprite_state:	Null_Or(Exception)
# 					  )
# 				    =>
# 				    {
# 					pp.box {.
# 					    pp.lit  "SPRITE _";
# 					};
# 					pp.newline();
# 				    };
# 
# # 			        SG_BALL	( ball_arg:		c2b::Make_Arg,
# # 					  ball_look_arg:	bli::Sprite_Look_Arg
# # 					)
# # 				    =>
# # 				    {
# # 					pp.box {.
# # 					    pp.lit  "BALL (";		pp.txt " ";
# # 					    bsi::pprint_make_arg  pp  ball_arg;
# # 					    pp.txt ", ";
# # 					    blx::pprint_sprite_look_arg  pp  ball_look_arg;
# # 					    pp.lit  ")";
# # 					};
# # 					pp.newline();
# # 				    };
# 			    esac
# 
# 			also
# 			fun do_objectspace
# 			      (
# 				objectspace_arg:	Objectspace_Arg,
# 				object_widgets:		List(  (List(clh::Objectspace_Layout_Hint),  Pg_Object_Widget)  )
# 			      )
# 			    =
# 			    {   pp.box {.
# 				    do_objectspace_arg  objectspace_arg;
# 				    do_object_widgets    object_widgets;
# 				};
# 				pp.newline();
# 			    }
# 
# 			also
# 			fun do_objectspace_arg  (objectspace_arg:	Objectspace_Arg)
# 			    =
# 			    {
# 				pprint_objectspace_arg  pp  objectspace_arg;
# 				pp.newline();
# 			    }
# 
# 			also
# 			fun do_objectspace_layout_hints  (layout_hints: List(clh::Objectspace_Layout_Hint))
# 			    =
# 			    {   title = "";
# 				#
# 				fun do_hint (hint:  clh::Objectspace_Layout_Hint)
# 				    =
# 				    pprint_objectspace_layout_hint  pp  hint;
# 
# 				pp::listx  pp  do_hint  title  layout_hints;
# 			    }
# 
# 			also
# 			fun do_object_widgets  (object_widgets:		List(  (List(clh::Objectspace_Layout_Hint),  Pg_Object_Widget)  ))
# 			    =
# 			    {
# 				pp.box' 0 -1 {.
# 				    pp.lit  "[";
# 				    pp.ind 2;
# 				    pp.txt " ";
# 
# 
# 				    fun do_widget (layout_hints: List(clh::Objectspace_Layout_Hint),  object_widget: Pg_Object_Widget)
# 					=
# 					pp.box {.
# 					    do_object_widget			object_widget;
# 					    pp.endlit ",";
# 					    pp.txt " ";
# 					    do_objectspace_layout_hints	layout_hints;
# 					};
# 
# 				    pp::seqx
# 					{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
# 					do_widget				# Print one list element.
# 					object_widgets;				# List of elements.
# 
# 				    pp.ind 0;
# 				    pp.txt " ";
# 				    pp.lit "]";
# 				};
# 			    }
# 
# 			also
# 			fun do_object_widget  (object_widget:	Pg_Object_Widget)
# 			    =
# 			    case object_widget
# 				#
# 				PG_OBJECT ( fn:			Object_Object_Start_Fn,
# 					    saved_object_state:	Null_Or(Exception)
# 					  )
# 				    =>
# 				    {
# 					pp.box {.
# 					    pp.lit  "PG_OBJECT _";
# 					};
# 					pp.newline();
# 				    };
# 
# 			        PG_WIDGETSPACE  widgetspace
# 				    =>
# 				    {
# 					pp.lit  "PG_WIDGETSPACE ";
# 					pp.newline();
# 					do_widgetspace widgetspace;
# 					pp.newline();
# 				    };
# 			    esac
# 

			fun do_running_gui
			      (
				{ fire_end_gun:		Void -> Void,							# Calling this fn will cause all state and look imps in the gui to exit, saving their state to their oneshots.
				  widgetspace_id:	Widgetspace_Id,							# guiboss-imp indexes this value into *widget_stuff to obtain (e.g.) a Guiboss_To_Widgetspace port to the widgetspace-imp.
				  widget_widget:	Rg_Widget_Widget,						# The widget (or more commonly, tree of widgets) managed by the gui-tree's toplevel widgetspace-imp.
				  topwindow:		gws::Guiboss_To_Topwindow,					# The topwindow on which to draw our widgets.
				  topwindow_pixmap:	Backing_Pixmap,							# Holds toplevel TOPWINDOW_PIXMAP for gui.
				  #
				  gadget_imps_for_gui:	Gadget_Imps,							# Holds our gt::Gadget_Info            instances for this running gui.
				  sprite_imps_for_gui:	Sprite_Imps,							# Holds our gt::Guiboss_To_Spritespace instances for this running gui.
				  object_imps_for_gui:	Object_Imps,							# Holds our gt::Guiboss_To_Objectspace instances for this running gui.
				  widget_imps_for_gui:	Widget_Imps							# Holds our gt::Guiboss_To_Widgetspace instances for this running gui.
				}
				:			Running_Gui
			      )
			    =
			    {   pp.box {.
				    pp.lit  "RUNNING_GUI {";
				    pp.ind 2;
				    pp.txt " ";

				    pp.lit  "fire_end_gun => <thunk>";
				    pp.endlit ",";

				    pp.lit  (sprintf "widget_space_id => %d" (id_to_int widgetspace_id));
				    pp.endlit ",";
				    
				    pp.lit  (sprintf "topwindow => { id => %d, backing_pixmap:Gadget_To_Rw_Pixmap => { id => %d, size => %s... }" (id_to_int topwindow.id) (id_to_int topwindow.backing_pixmap.id) (g2j::size_to_string topwindow.backing_pixmap.size));
				    pp.endlit ",";

				    pp.box {.
					pp.lit  "widget_widget => ";
					do_widget_widget widget_widget;
				    };
				    pp.endlit ",";

				    pp.lit  (sprintf "topwindow_pixmap => %s" (backing_pixmap_id topwindow_pixmap));
				    pp.ind 0;
				    pp.txt " ";
				    pp.lit "}";
				};
				pp.newline();
			    }	

			also
			fun do_backing_pixmap (bp: Backing_Pixmap)
			    =
			    case bp
				#
			        TOPWINDOW_PIXMAP  {												# 
						    running_gui:	Ref( Null_Or( Running_Gui ) ),						# 
						    pixmap:		g2p::Gadget_To_Rw_Pixmap,						# Main backing pixmap for this running gui.
						    pixmaps:		Ref( im::Map( g2p::Gadget_To_Rw_Pixmap )),				# All other X-server side pixmaps created by this running gui. (So we can reliably recycle them when we kill the gui -- otherwise we're leaking X-server memory.) 
						    popups:		Ref(List(Backing_Pixmap)),						# These will all be TOPWINDOW_PIXMAP, but the type system does not let us say that.  	
						    parent:		Null_Or( Backing_Pixmap ),						# For popups this points to the parent; for the original non-popup window it is NULL.
						    stacking_order:	Int,									# Assigned in increasing order starting at 1;  these determine who overlies who visually on the screen in case of overlaps. (Popups must be entirely within parent, but sibling popups can overlap.)
						    origin:		Ref(g2d::Point)								# If we have a parent, this gives our location on it. Note that pixmap.size gives our size.
						  }
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "TOPWINDOW_PIXMAP {";
					    pp.ind 2;
					    pp.txt " ";

					    pp.lit  (sprintf "stacking_order => %d" stacking_order);
					    pp.endlit ",";

					    pp.lit  (sprintf "origin => %s" (g2j::point_to_string *origin));
					    pp.endlit ",";

					    pp.lit  (sprintf "pixmap.id => %d" (id_to_int pixmap.id));
					    pp.endlit ",";

					    case *running_gui
						#
						NULL   =>  pp.lit "running_site => NULL";
						THE rg =>  do_running_gui rg;
					    esac;
					    pp.endlit ",";

					    case parent
						NULL  => pp.lit  "parent => NULL";
						THE p => pp.lit  (sprintf "parent => <<< %s >>>" (backing_pixmap_id p));
					    esac;
					    pp.endlit ",";

					    pp.lit  (sprintf "#popups => %d" (list::length *popups));
					    pp.endlit ",";

					    pp::seqx
						{.   pp.endlit ",";   pp.txt " ";   }	# Inter-element separator.
						do_backing_pixmap			# Print one list element.
						*popups;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "}";
					};
					pp.newline();
				    };
			        #	
			        VIEWPORT_PIXMAP   { pixmap:		g2p::Gadget_To_Rw_Pixmap,						# The pixmap visible in the viewport.
						    #
						    viewports:	Ref( List									# We make this a Ref(List(...)) to allow for adding additional viewports opening onto the same underlying pixmap.
																		# WARNING: We don't currently use multiple viewports onto one pixmap; if we start doing so we'll probably find that *VIEWPORT_PIXMAP.is_visible doesn't work right with them.
									  {									# This is type Viewport but record types cannot be recursive...
									    parent_pixmap:	Backing_Pixmap,
									    viewport_site:	Ref(g2d::Box),					# Size and location of subwindow viewport in parent Backing_Pixmap coordinates.
									    #
									    view_origin:	Ref(g2d::Point)					# Location of view relative to viewport. Used to scroll subwindow contents around in parent viewport.
									  }									# So  if origin is (0,0), pixel (0,0) on view draws at upper-left of viewport,
																		# and if origin is (5,5), pixel (0,0) on view draws 5 pixels in diagonally at upper-left of viewport.
																		# Used in compute_gadget_redraw_transform() in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
								    ),

						    is_visible:	Ref( Bool )									# This will be FALSE only if we are one of several alternate views in a TABBED_VIEWS set.
																		# We need this so that   update_offscreen_parent_pixmaps_and_then_topwindow()   in   src/lib/x-kit/widget/gui/guiboss-imp.pkg
																		# can know when to stop propagating widget updates up the viewport tree.
						  }
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "VIEWPORT_PIXMAP {";
					    pp.ind 2;
					    pp.txt " ";

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "}";
					};
				    };
			    esac

 			also
			fun do_widgetspace_arg  (widgetspace_arg:	Widgetspace_Arg)
			    =
			    {
				pprint_widgetspace_arg  pp  widgetspace_arg;
				pp.newline();
			    }

			also
			fun do_widget_widget  (widget_widget:	Rg_Widget_Widget)
			    =
			    case widget_widget
				#
			        RG_ROW	{ widgets:		 List( Rg_Widget_Widget ),
					  pixels_high_min: 	Ref(Int),							# Minimum            vertical   pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_min: 	Ref(Int),							# Minimum            horizontal pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  pixels_high_cut: 	Ref(Float),							# Share of remaining vertical   pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_cut: 	Ref(Float),							# Share of remaining horizontal pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					}
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "RG_ROW {";
					    pp.ind 2;
					    pp.txt " ";
					    pp.lit (sprintf "site => %s" (g2j::box_to_string *site));
					    pp.endlit ",";

					    fun do_widget (widget: Rg_Widget_Widget)
						=
						pp.box {.
						    do_widget_widget		widget;
						    pp.endlit ",";
						    pp.txt " ";
						};

					    pp::listx pp
						do_widget				# Print one list element.
						""					# Title.
						widgets;				# List of elements.


					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "}";
					};
				    };


			        RG_COL	{ widgets:		List( Rg_Widget_Widget ),
					  pixels_high_min: 	Ref(Int),							# Minimum            vertical   pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_min: 	Ref(Int),							# Minimum            horizontal pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  pixels_high_cut: 	Ref(Float),							# Share of remaining vertical   pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_cut: 	Ref(Float),							# Share of remaining horizontal pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					}
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "RG_COL {";
					    pp.ind 2;
					    pp.txt " ";
					    pp.lit (sprintf "site => %s" (g2j::box_to_string *site));
					    pp.endlit ",";

					    fun do_widget ( widget: Rg_Widget_Widget)
						=
						pp.box {.
						    do_widget_widget		widget;
						    pp.endlit ",";
						    pp.txt " ";
						};

					    pp::listx pp
						do_widget				# Print one list element.
						""					# Title.
						widgets;				# List of elements.

					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "}";
					};
				    };


			        RG_GRID	{ widgets:		List( List( Rg_Widget_Widget ) ),
					  pixels_high_min: 	Ref(Int),								# Minimum            vertical   pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_min: 	Ref(Int),								# Minimum            horizontal pixels to allocate for this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  pixels_high_cut: 	Ref(Float),								# Share of remaining vertical   pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  pixels_wide_cut: 	Ref(Float),								# Share of remaining horizontal pixels to allocate to  this ROW widget.	 Used in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					  #
					  site:			Ref(g2d::Box)								# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
					}
				    =>
				    {
					pp.box' 0 -1 {.
					    pp.lit  "RG_GRID {";
					    pp.ind 2;
					    pp.txt " ";
					    pp.lit (sprintf "site => %s" (g2j::box_to_string *site));
					    pp.endlit ",";

					    pp::listx pp
						do_row											# Print one list element.
						""											# Title.
						widgets											# List of elements.
					    where
						fun do_row (widgets:	List(Rg_Widget_Widget))
						    =
						    pp::listx pp
							do_widget									# Print one list element.
							""										# Title.
							widgets										# List of elements.
						    where
							fun do_widget (widget:	Rg_Widget_Widget)
							    =
							    pp.box {.
								do_widget_widget  widget;
								pp.endlit ",";
								pp.txt " ";
							    };
						    end;
					    end;


					    pp.ind 0;
					    pp.txt " ";
					    pp.lit "}";
					};
				    };


			        RG_SCROLLABLE_VIEW {											# Here we provide support for widgets visible through a scrollable viewport.  Actually providing scrollbars happens at a higher level; here we handle pixmap state maintenance and redraw support.
						  widget:		Rg_Widget_Widget,						# Tree of widgets partially visible in viewport.
						  gadget_to_rw_pixmap:	g2p::Gadget_To_Rw_Pixmap,					# This is the pixmap visible through the viewport. It holds a full image of above 'widget' tree.
						  view_origin:		Ref(g2d::Point),						# Origin of view's backing_pixmap in viewport coordinates, used for scrolling pixmap in viewport.
						  backing_pixmap:	Backing_Pixmap,							# This is the parent pixmap holding the viewport.
						  scroller:		Viewport_Scroller,
						  callback:		Viewport_Scroller_Callback,					# This is how we pass our Viewport_Scroller to app client code, which basically lets it set 'pixmap_origin' above.
						  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
						}
				    =>
				    {
					pp.lit  "RG_SCROLLABLE_VIEW { ... }";
					pp.newline();
				    };

				RG_TABBED_VIEWS {											# Here we provide support for selection between alternate views in viewport.  Actually providing tabs happens at a higher level; here we handle pixmap state maintenance and redraw support.
						  pixmap_size:		g2d::Size,							# Size of alternate pixmaps visible in viewport.  We require them to all be the same size; we intend that the viewport be the same size.

						  widgets:		List( Tabview ),						# This record holds one of the alternate views which may be made visible in the viewport.  *** WE REQUIRE AT LEAST ONE ENTRY IN THE LIST! *** 
						  visible_widget:	Ref ( Tabview ),						# Which of 'widgets' is currently visible?  This refcell holds one element from 'widgets';  it supports switching between the tabbed views.

						  callback:		Tabbed_View_Picker_Callback,					# This is how we pass our Tabbed_View_Picker to app client code, which basically lets it set 'visible_widget' above.
						  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
						}
				    =>
				    {
					pp.lit  "RG_TABBED_VIEWS { ... }";
					pp.newline();
				    };

				RG_FRAME  _
				    =>
				    {
					pp.lit  "RG_FRAME { ... }";
					pp.newline();
				    };

			        RG_WIDGET  {												# An actual leaf widget like an arrowbutton or label or text-entry box. These are all customizations of src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
						  guiboss_to_gadget:	Guiboss_To_Gadget,						# The command end of a port for communication to a widget-imp from a					src/lib/x-kit/widget/gui/guiboss-imp.pkg
						  widgetspace_to_widget:	p2w::Widgetspace_To_Widget,				# The command end of a port for communication to a widget-imp from a					src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg

						  endstate_oneshot:	Once( (								# The widget-imp will save its state into this one-shot when shutting down due to end_gun' firing. Used by guiboss-imp.
										  Widget_Widget_Start_Fn,				#
										  Null_Or(Exception)					# saved_widget_state, used by arrowbutton etc to preserve state across gui stop/restart cycles.
									      ) ),
						  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
						}
				    =>
				    {
					pp.box {.
					    pp.lit  "RG_WIDGET {";

					    pp.lit (sprintf "widgetspace_to_widget.id => %d" (iul::id_to_int widgetspace_to_widget.id));
					    pp.endlit ",";

					    guiboss_to_gadget -> GUIBOSS_TO_GADGET { id, ... };
					    pp.lit (sprintf "GUIBOSS_TO_GADGET.id => %d" (iul::id_to_int id));
					    pp.endlit ",";

					    pp.lit (sprintf "site => %s" (g2j::box_to_string *site));
					    pp.lit  " }";
					};
					pp.newline();
				    };


			        RG_OBJECTSPACE  { objectspace_id:	Objectspace_Id,							# guiboss-imp indexes this value into *object_stuff to obtain (e.g.) a Guiboss_To_Objectspace port to the objectspace-imp.
						  widgets:		List ((List(Cs_Layout), Rg_Object_Widget)),			# The list of widgets to be drawn on the object. These can be placed arbitrarily, including possible overlaps.
						  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
						}
				    =>
				    {
					pp.lit  "$RG_OBJECTSPACE";
#					do_objectspace  objectspace;
					pp.newline();
				    };

			       RG_SPRITESPACE  { spritespace_id:		Spritespace_Id,							# guiboss-imp indexes this value into *sprite_stuff to obtain (e.g.) a Guiboss_To_Spritespace port to the spritespace-imp.
						  widgets:		List ((List(Bs_Layout), Rg_Sprite_Widget)),			# The list of widgets to be drawn on the spritespace. These can be placed arbitrarily.
						  site:			Ref(g2d::Box)							# Current assigned site on pixmap.  Set by  assign_sites_to_all_widgets()     in   src/lib/x-kit/widget/space/widget/widgetspace-imp.pkg
						}
				    =>
				    {
					pp.lit  "RG_SPRITESPACE";
#					do_spritespace  spritespace;
					pp.newline();
				    };
			      
			        RG_NULL_WIDGET_WIDGET
				    =>
				    {
					pp.lit  "RG_NULL_WIDGET_WIDGET";
					pp.newline();
				    };
			    esac;
	    end
		);




    };
end;

##########################################################################
# Note[1]
#
# We need a NULL_WIDGET_WIDGET but not a NULL_SPRITE or NULL_OBJECT
# because Gui_Plans are required arguments to guiboss-imp and
# Widget_Widget is a required component of a Gui_Plan, but
# sprite and object spaces are always optional.


##########################################################################
# Note[2]
#
#           "Simple  things should be simple.
#            Complex things should be possible."
#                             -- Alan Kay
#
# The purpose of the Rg_Widget_Widget facilities generally and
# of RG_ROW RG_COL RG_GRID specifically is to make simple GUI
# layout problems simple.
#
# In general, complex widget layout issues should be handled by
# writing custom code which lays out widgets (etc) on a object,
# not by cluttering Rg_Widget_Widget with special cases.
#
# Trying to make complex things simple will always fail;
# the result will be instead to make simple things complex.



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\|### \\)"		 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.

