## guiboss-types.pkg
#
# Interface types for   src/lib/x-kit/widget/gui/guiboss-imp.pkg
#
# We use three representations for a GUI with transition diagram
#
#     Gui_Plan
#         |
#         v
#     Stopped_Gui
#       |   ^
#       v   |
#     Running_Gui
#
# The application programmers passes guiboss_imp a Gui_Plan
# to define the GUI, which is then converted to a Stopped_Gui
# and at GUI startup time to a Running_Gui.
#     We support pausing and later restarting the GUI by a
# process of converting the Running_Gui back to a Stopped_Gui
# and at restart the Stopped_Gui again to a Running_Gui.
#
# In addition to defining the three GUI representations, this
# file defines most (but not all) of the major ports between
# guiboss_imp and other imps:								# "gadget" refers to any of "widget", "sprite" or "object".  (Most frequently, "widget".)
#
#	guiboss_to_gadget								# The general guiboss_imp -> gadget interface, used for forwarding user mouseclicks etc.  Most frequently used guiboss_imp -> widget_imp, but also to sprite_imp and object_imp.
#	gadget_to_guiboss								# The general gadget -> guiboss_imp interface, used for forwarding draw operations  etc.
#	guiboss_to_packedspace								# The guiboss_imp -> packedspace_imp, used to manage layout of widgets on windows.
#	guiboss-to-canvasspace.pkg							# The guiboss_imp -> canvasspace_imp, used to manage layout of objects on windows.
#	guiboss-to-bouncespace.pkg							# The guiboss_imp -> bouncespace_imp, used to manage layout of sprites on windows.
#     

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;							# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;								# geometry2d				is from   src/lib/std/2d/geometry2d.pkg

    package w2g =  gadget_to_guiboss;							# gadget_to_guiboss			is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package b2g =  guiboss_to_gadget;							# guiboss_to_gadget			is from   src/lib/x-kit/widget/gui/guiboss-to-gadget.pkg

    package w2p =  widget_to_packedspace;						# widget_to_packedspace			is from   src/lib/x-kit/widget/space/packed/widget-to-packedspace.pkg   
    package p2w =  packedspace_to_widget;						# packedspace_to_widget			is from   src/lib/x-kit/widget/space/packed/packedspace-to-widget.pkg

    package o2c =  object_to_canvasspace;						# object_to_canvasspace			is from   src/lib/x-kit/widget/space/canvas/object-to-canvasspace.pkg   
    package c2o =  canvasspace_to_object;						# canvasspace_to_object			is from   src/lib/x-kit/widget/space/canvas/canvasspace-to-object.pkg

    package s2b =  sprite_to_bouncespace;						# sprite_to_bouncespace			is from   src/lib/x-kit/widget/space/bounce/sprite-to-bouncespace.pkg   
    package b2s =  bouncespace_to_sprite;						# bouncespace_to_sprite			is from   src/lib/x-kit/widget/space/bounce/bouncespace-to-sprite.pkg
herein

    package guiboss_types
    {
											# Can't define a Widget_Imports here because of the type recursion on endstate_oneshot.
	Widget_Exports
	  =
	  { guiboss_to_gadget:		b2g::Guiboss_To_Gadget,				# 
	    packedspace_to_widget:	p2w::Packedspace_To_Widget			# 
	  };

	Packed_Widget_Start_Fn								# This type is the critical interface between the widget world and src/lib/x-kit/widget/gui/guiboss-imp.pkg
	  =										# In particular stopped_gui__to__running_gui() in guiboss_imp calls the packed_widget_start_fn built in   src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.pkg
	  PACKED_WIDGET_START_FN							# Needs to be a datatype (vs plain type) because of the recursive reference in endstate_oneshot.
	    (
	      { gadget_to_guiboss:	w2g::Gadget_To_Guiboss,				# 
		widget_to_packedspace:	w2p::Widget_To_Packedspace,			# 
		run_gun':		Run_Gun,					#
		end_gun':		End_Gun,					#
		endstate_oneshot:	Oneshot_Maildrop( ( Packed_Widget_Start_Fn,
							    Null_Or(Exception)		# saved_widget_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),				#
		saved_widget_state:	Null_Or(Exception)				# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	      }										# arrowbutton				is from   src/lib/x-kit/widget/leaf/arrowbutton.pkg
	      ->
	      Widget_Exports	
	    );




	Object_Exports
	  =
	  { guiboss_to_gadget:		b2g::Guiboss_To_Gadget,				# 
	    canvasspace_to_object:	c2o::Canvasspace_To_Object			# 
	  };

	Canvas_Object_Start_Fn
	  =
	  CANVAS_OBJECT_START_FN							# Needs to be a datatype (vs plain type) because of the recursive reference in endstate_oneshot.
	    (
	      { gadget_to_guiboss:	w2g::Gadget_To_Guiboss,				# 
		object_to_canvasspace:	o2c::Object_To_Canvasspace,			# 
		run_gun':		Run_Gun,					#
		end_gun':		End_Gun,					#
		endstate_oneshot:	Oneshot_Maildrop( ( Canvas_Object_Start_Fn,
							    Null_Or(Exception)		# saved_object_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),				#
		saved_object_state:	Null_Or(Exception)				# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	      }
	      ->
	      Object_Exports	
	    );





	Sprite_Exports
	  =
	  { guiboss_to_gadget:		b2g::Guiboss_To_Gadget,				# 
	    bouncespace_to_sprite:	b2s::Bouncespace_To_Sprite			# 
	  };

	Bounce_Sprite_Start_Fn
	  =
	  BOUNCE_SPRITE_START_FN							# Needs to be a datatype (vs plain type) because of the recursive reference in endstate_oneshot.
	    (
	      { gadget_to_guiboss:	w2g::Gadget_To_Guiboss,				# 
		sprite_to_bouncespace:	s2b::Sprite_To_Bouncespace,			# 
		run_gun':		Run_Gun,					#
		end_gun':		End_Gun,					#
		endstate_oneshot:	Oneshot_Maildrop( ( Bounce_Sprite_Start_Fn, 	#
							    Null_Or(Exception)		# saved_sprite_state value used by arrowbutton etc to preserve state across gui stop/restart cycles.
							) ),
		saved_sprite_state:	Null_Or(Exception)				# When restarting a stopped gui this preserves the local state for (e.g.) arrowbutton.
	      }
	      ->
	      Sprite_Exports	
	    );


	Viewport_Scroller
	  =
	  { get_viewport_origin: Void -> g2d::Point,
	    set_viewport_origin: g2d::Point -> Void
	  };

	Viewport_Scroller_Callback							# Used in Packed_Widget.VIEWPORT	in   src/lib/x-kit/widget/gui/running-gui.pkg
	  =
	  Null_Or( Viewport_Scroller ) -> Void;


	Tabbed_View_Picker
	  =
	  { get_active_view: Void -> Int,
	    set_active_view: Int -> Void
	  };

	Tabbed_View_Picker_Callback							# Used in Packed_Widget.TABBED_VIEWS	in   src/lib/x-kit/widget/gui/running-gui.pkg
	  =
	  Null_Or( Tabbed_View_Picker ) -> Void;
    };
end;

