## gadget-to-guiboss.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# This port conveys widget-imp, sprite-imp and object-imp
# (collectively, "gadget") requests to
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
# Higher-level code managing guiboss-imp does not
# use this interface, it uses
#     src/lib/x-kit/widget/gui/client-to-guiboss.pkg
#
# See also:
#     src/lib/x-kit/widget/gui/guiboss-to-widget.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;										# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package gd  =  gui_displaylist;										# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg

    package iul =  issue_unique_look_id;									# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/gui/guiboss-imp.pkg
    #
    package gadget_to_guiboss {
	#
	Gadget_Mode												# We use this mostly to control how a widget draws itself.
	  =
	  {
	    is_active:				Bool,								# An inactive gadget is passed no user input. Inactive widgets are typically drawn "grayed-out".
	    has_mouse_focus:			Bool,								# A widget which has the mouse cursor on it may want to draw itself brigher or such.
	    has_keyboard_focus:			Bool								# A widget which has the keyboard focus will often      draw a black outline around its text-entry rectangle.
	  };

	Gadget_To_Guiboss
	  =
	  { id:					Id,								# Unique id to facilitate storing Gadget_To_Guiboss ports in indexed datastructures like red-black trees.
	    #
	    gadget_has_visibly_changed:		{ id: iul::Id				       } -> Void,	# Inform guiboss_imp that the GUI display needs refreshing. Without this, it may shut down the frame-display cycle.
	    #
	    note_changed_gadget_foreground:	{ id: iul::Id, foreground: gd::Gui_Displaylist } -> Void,	# Update foreground appearance in response to a guiboss_to_widget.start_of_frame {...} call.
	    note_changed_gadget_background:	{ id: iul::Id, background: gd::Gui_Displaylist } -> Void,	# As above, but background is presumed to be quite static, allowing guiboss_imp to optimize by pre-rendering.
	    note_changed_gadget_activity:	{ id: iul::Id, is_active:  Bool                } -> Void,	# FALSE if gadget should be insensitive to input and perhaps drawn grayed-out.  Controlled by application logic.
	    #
	    draw_widget:			{ id: iul::Id				       } -> Void	# Ask guiboss_imp to redraw this widget as quickly as practical.  Used to respond to user input, e.g. slider drag.
														# (Is this call solving a problem that doesn't exist?)
	  };
    };														# package guiboss;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
