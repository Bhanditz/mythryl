## gadget-to-guiboss.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# This port conveys widget-imp, sprite-imp and object-imp
# (collectively, "gadget") requests to
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
# Higher-level code managing guiboss-imp does not
# use this interface, it uses
#     src/lib/x-kit/widget/gui/client-to-guiboss.pkg
#
# See also:
#     src/lib/x-kit/widget/gui/guiboss-to-gadget.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;										# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package gd  =  gui_displaylist;										# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    package g2d =  geometry2d;											# geometry2d			is from   src/lib/std/2d/geometry2d.pkg

    package iul =  issue_unique_look_id;									# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/gui/guiboss-imp.pkg
    #
    package gadget_to_guiboss {
	#
	Gadget_Mode												# We use this mostly to control how a widget draws itself.
	  =
	  {
	    is_active:				Bool,								# An inactive gadget is passed no user input. Inactive widgets are typically drawn "grayed-out".
	    has_mouse_focus:			Bool,								# A widget which has the mouse cursor on it may want to draw itself brigher or such.
	    has_keyboard_focus:			Bool,								# A widget which has the keyboard focus will often      draw a black outline around its text-entry rectangle.
	    mousebutton_is_down:		Bool								# I'm not sure if this belongs here.
	  };

	Appearance
	    #
	    = UNCHANGED
	    | CHANGED Null_Or(gd::Gui_Displaylist)								# NULL means no displaylist.
	    ;

	Gadget_To_Guiboss
	  =
	  { id:					Id,								# Unique id to facilitate storing Gadget_To_Guiboss ports in indexed datastructures like red-black trees.
	    #
	    gadget_may_have_visibly_changed:	      iul::Id				         -> Void,	# Inform guiboss_imp that the gadget's appearance may need refreshing. Without this, it may not get a start_of_frame call.
	    													# This call is usually needed only when the app has changed the gadget's appearance; guiboss knows about mouse/keyboard input
														# to gadget and assumes that they may have resulted in appearance changes.
	
	    note_changed_gadget_appearance									# Update gadget appearance in response to a guiboss_to_gadget.start_of_frame {...} call.
	      :
	      { id:			iul::Id,
		foreground:		Appearance,
		background:		Appearance,
		point_in_gadget:	Null_Or( g2d::Point -> Bool )						# Optional fn to decide if a mouseclick actually hit the gadget itself, or just somewhere near it in the screenspace assigned to it.
	      }
	      ->
	      Void,

	    note_changed_gadget_activity:	{ id: iul::Id, is_active:  Bool                } -> Void	# FALSE if gadget should be insensitive to input and perhaps drawn grayed-out.  Controlled by application logic.
	  };
    };														# package guiboss;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
