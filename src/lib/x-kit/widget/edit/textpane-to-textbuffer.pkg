## textpane-to-textbuffer.pkg
#
# Here we define the port which
#
#     src/lib/x-kit/widget/edit/textbuffer-imp.pkg
#
# exports to
#
#     src/lib/x-kit/widget/edit/textpane.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package ebt =  editboss_types;								# editboss_types		is from   src/lib/x-kit/widget/edit/editboss-types.pkg

    package g2d =  geometry2d;									# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package gt  =  guiboss_types;								# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg

    package nl  =  red_black_numbered_list;							# red_black_numbered_list	is from   src/lib/src/red-black-numbered-list.pkg
    package iuw =  issue_unique_widget_id;							# issue_unique_widget_id	is from   src/lib/x-kit/widget/gui/issue-unique-widget-id.pkg

#   package g2b =  gadget_to_editboss;								# gadget_to_editboss		is from   src/lib/x-kit/widget/edit/gadget-to-editboss.pkg

    package e2p =  textedit_to_textpane;							# textedit_to_textpane		is from   src/lib/x-kit/widget/edit/textedit-to-textpane.pkg
    package l2p =  screenline_to_textpane;							# screenline_to_textpane	is from   src/lib/x-kit/widget/edit/screenline-to-textpane.pkg
    package p2e =  textpane_to_textedit;							# textpane_to_textedit		is from   src/lib/x-kit/widget/edit/textpane-to-textedit.pkg
    package p2l =  textpane_to_screenline;							# textpane_to_screenline	is from   src/lib/x-kit/widget/edit/textpane-to-screenline.pkg

    package b2l =  editboss_to_screenline;							# editboss_to_screenline	is from   src/lib/x-kit/widget/edit/editboss-to-screenline.pkg
    package b2e =  editboss_to_textedit;							# editboss_to_textedit		is from   src/lib/x-kit/widget/edit/editboss-to-textedit.pkg
    package b2p =  editboss_to_textpane;							# editboss_to_textpane		is from   src/lib/x-kit/widget/edit/editboss-to-textpane.pkg

    package mj  =  mode_junk;									# mode_junk			is from   src/lib/x-kit/widget/edit/mode-junk.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/edit/textbuffer-imp.pkg
    #
    package textpane_to_textbuffer {
	#
	Textstate
	  =
	  { textlines:		mj::Textlines,							# Complete text contents of textbuffer.
	    editcount:		Int								# Count of edits applied.  Intended to allow clients to quickly detect whether any changes have been made since they last polled us.
	  };

	Undostate = Textstate;									# Synonym for readability.

	Point_And_Mark										# 'Point' is the visible cursor.  'Mark' (if set) marks the other end of the selected region.  (Emacs nomenclature.)
	  =
	  { point:		g2d::Point,							# Note that point and mark are per-textpane, not per-textbuffer. (This matters because there may be multiple textpanes open on one textbuffer).  This is different from emacs, where 'mark' is per-textbuffer.
	    mark:		Null_Or(g2d::Point)						# NULL means the emacs-style 'mark' is not currently set.
	  };

	Editstate
	  =
	  { textlines:		mj::Textlines,
	    point:		g2d::Point,							# As in Point_And_Mark.
	    mark:		Null_Or(g2d::Point)						# 
	  };

	Textbuffer_Statechange									# Used to tell clients (mostly textpane.pkg) about changes in our state.
	  #											# The 'Id' field in each case is t2t::Textpane_To_Textbuffer.id;  it may be used by client to identify and discard stale statechanges which arrive after calling drop_statewatcher().
	  = TEXTSTATE		(Id, { was: Textstate, now: Textstate })
	  | UNDO		(Id, { was: Textstate, now: Undostate })
	  | FILENAME		(Id, { was: String,    now: String    })
	  | BUFFERNAME		(Id, { was: String,    now: String    })
	  ;

	Edit_Arg										# Arg type for pass_edit_result().
	  =
	  { point_and_mark:	Point_And_Mark,
	    lastmark:		Null_Or(g2d::Point),
	    editfn_node:	mj::Editfn_Node,
	    prompted_args:	List( mj::Prompted_Arg ),					# Args read interactively from user.
	    #
	    widget_to_guiboss:	gt::Widget_To_Guiboss,						# Mainly for access to get_cutbuffer_contents/set_cutbuffer_contents in gadget_to_editboss.  NB: Passing gadget_to_editboss here instead results in a package cycle.
	    log_undo_info:	Bool,								# If log_undo_info is FALSE no entry will be made in the undo history.
	    keystring:		String								# User keystroke that invoked this editfn.
	  };

	Textpane_To_Textbuffer
	  =
	  { id:				Id,							# Unique id to facilitate storing textpane_to_textbuffer instances in indexed datastructures like red-black trees.
	    #
	    get_maxline:		Void -> Int,						# Max currently valid line number.
	    pass_maxline:		Replyqueue -> (Int -> Void) -> Void,
	    #
	    get_line:			Int -> Null_Or(String),
	    pass_line:			Replyqueue
					 -> Int
					 -> (Null_Or(String) -> Void)
					 -> Void,
	    #
	    set_lines:			List(String) -> Void,
	    get_lines:			(Int, Int) -> List(String),
	    pass_lines:			Replyqueue
					 -> (Int, Int)
					 -> (List(String) -> Void)
					 -> Void,
	    #
	    get_textstate:		Void -> Textstate,					# 
	    pass_textstate:		Replyqueue -> (Textstate -> Void) -> Void,
	    #
	    pass_edit_result:		Edit_Arg
					 -> Replyqueue
					 -> (mj::Editfn_Out -> Void)
					 -> Void,						# 

	    undo:			Void -> Void,

	    get_dirty:			Void -> Bool,						# TRUE iff textbuffer contents are currently out of sync with diskfile contents.
	    pass_dirty:			Replyqueue -> (Bool -> Void) -> Void,

	    set_filename:		String -> Void,						# Filename controls what file textuffer contents are read/written from/to.
	    get_filename:		Void -> String,						# 
	    pass_filename:		Replyqueue -> (String -> Void) -> Void,

	    set_buffername:		String -> Void,						# Buffername uniquely identifies textbuffer to interactive user.
	    get_buffername:		Void -> String,						# 
	    pass_buffername:		Replyqueue -> (String -> Void) -> Void,
												# The statewatcher protocol allows others imps (including other texteditors and also arbitrary application imps) to monitor changes to a given textbuffer.
	    note_statewatcher:		(Id, (Textbuffer_Statechange -> Void)) -> Void,		# 'Id' may be the id of the calling imp or may be freshly allocated via issue_unique_id. It identifies this particular watcher/connection for drop_statewatcher.
	    drop_statewatcher:		Id -> Void,						# 'Id' must match that given to note_statewatcher (or texteditor_imp::STATEWATCHER).

	    reload_from_file:		Void -> Void,
	    save_to_file:		Void -> Void
	  };



	Textbuffer_Option
	  #
	  =  MICROTHREAD_NAME	String								# 
	  |  ID			Id								# Stable, unique id for imp.
	  |  STATEWATCHER	(Id, (Textbuffer_Statechange -> Void))				# Equivalent to t2t::Textpane_To_Textbuffer.note_statewatcher(). 'Id' may be the id of the calling imp or may be freshly allocated via issue_unique_id. It identifies this particular watcher/connection for drop_statewatcher.
	  |  INITIAL_FILENAME	String								# 
	  |  UTF8		String
	  ;	

	Textbuffer_Arg =  (String, List(Textbuffer_Option));					# Required argument is buffername.
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
