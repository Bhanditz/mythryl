## watchable-strings.pkg
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package mt  =  millboss_types;								# millboss_types		is from   src/lib/x-kit/widget/edit/millboss-types.pkg

#   package im  =  int_red_black_map;								# int_red_black_map		is from   src/lib/src/int-red-black-map.pkg
#   package is  =  int_red_black_set;								# int_red_black_set		is from   src/lib/src/int-red-black-set.pkg
    package sm  =  string_map;									# string_map			is from   src/lib/src/string-map.pkg

    nb = log::note_on_stderr;									# log				is from   src/lib/std/src/log.pkg
herein

    package watchable_strings									# 
    {
	Strings =  sm::Map(String);
	#
	Watchable_Strings
	  =	
	  { note_watcher:	(Id, (Id, Strings) -> Void) -> Void, 				# First 'Id' is watcher's (caller's) -- identifies this particular watcher for drop_watcher.  Second 'Id' is server's, identifiers the particular server for watcher.
	    drop_watcher:	Id -> Void							# 'Id' must match that given to note_watcher (or texteditor_imp::WATCHER).
	  };				 

	exception  WATCHABLE_STRINGS  Watchable_Strings;						# We'll never 'raise' this exception:  It is purely a datastructure to hide the Watchable_String type from millboss-imp.pkg, in the interests of good modularity.
	#
	#
	fun maybe_decrypt__watchable_strings  (crypt:  Crypt):  Fail_Or( Watchable_Strings )
	    =
	    case crypt.data
		#
		WATCHABLE_STRINGS
		watchable_strings
		    =>
		    WORK watchable_strings;

		_   =>  FAIL (sprintf "maybe_decrypt__watchable_strings:  Unknown Crypt value, type='%s' info='%s'  --watchable-strings.pkg"
					crypt.type
					crypt.info
			     );
	    esac;	

	fun decrypt__watchable_strings  (crypt:  Crypt):   Watchable_Strings
	    =
	    case crypt.data
		#
		WATCHABLE_STRINGS
		watchable_strings
		    =>
		    watchable_strings;

		_   =>	{   msg = (sprintf "maybe_decrypt__watchable_strings:  Unknown Crypt value, type='%s' info='%s'  --watchable-strings.pkg"
					crypt.type
					crypt.info
			          );
			    log::fatal msg;							# Won't return.
			    raise exception DIE msg;						# Just to keep compiler happy.
			};
	    esac;	


	fun encrypt__watchable_strings  (watchable_strings:  Watchable_Strings):  Crypt
	    =
	    { id   =>  issue_unique_id (),
	      type =>  "watchable_strings::Watchable_Strings",
	      info =>  "'watchable_strings::Strings'.  Wrapped by watchable_strings::encrypt__watchable_strings.",
	      data =>  WATCHABLE_STRINGS watchable_strings
	    };		 
    };

end;





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
