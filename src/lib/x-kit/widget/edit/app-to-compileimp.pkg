## app-to-compileimp.pkg
#
# Here we define the port which
#
#     src/lib/x-kit/widget/edit/compile-imp.pkg
#
# exports to random clients like gadgets and mills.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;									# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;										# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package cs  =  compiler::compiler_state;								# compiler_state		is from   src/lib/compiler/toplevel/interact/compiler-state.pkg
    package sci =  compiler::sourcecode_info;								# sourcecode_info		is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
#   package cs  =  compiler_state;									# compiler_state		is from   src/lib/compiler/toplevel/interact/compiler-state.pkg
#   package ds  =  deep_syntax;										# deep_syntax			is from   src/lib/compiler/front/typer-stuff/deep-syntax/deep-syntax.pkg
#    package sci =  sourcecode_info;									# sourcecode_info		is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
    package pp  =  standard_prettyprinter;								# standard_prettyprinter	is from   src/lib/prettyprint/big/src/standard-prettyprinter.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/edit/compile-imp.pkg
    #
    package app_to_compileimp {
	#
	App_To_Compileimp
	  =
	  { id:					Id,							# Unique id to facilitate storing guiboss_to_compileimp instances in indexed datastructures like red-black trees.
	    #
	    compile_and_eval_string_in_given_compiler_state						# Created for use in   src/lib/x-kit/widget/edit/eval-mode.pkg
	      :
	      {
		sourcecode_info:		sci::Sourcecode_Info,
		pp:				pp::Prettyprinter,					# Evaluation results will be prettyprinted into this.
		compiler_state_stack:		(cs::Compiler_State, List(cs::Compiler_State)),		# Compiler symbol-tables to use for this compile.
		options:			List( cs::Compile_And_Eval_String_Option )		# This is mainly future-proofing -- it allows us to add parameters in future without (mostly) breaking code using the previous API.
	      }
	      ->
	      (cs::Compiler_State, List(cs::Compiler_State))						# Updated symbol tables containing any new definitions from compile.  Caller can choose to retain or discard.
	  };
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
