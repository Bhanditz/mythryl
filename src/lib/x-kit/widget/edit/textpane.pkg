# textpane.pkg
#
# This package manages one view onto a textbuffer,
# consisting of a number of 
#
#     src/lib/x-kit/widget/edit/screenline.pkg
#
# instances displaying (part of) the contents of
# the textbuffer, plus one displaying the dirtyflag,
# filename etc associated with the textbuffer.
#
# In "Model/View/Controller" terms, textbuffer-imp.pkg
# is the Model and textpane.pkg is the View+Controller.
#
# (textpane.pkg also draws the visible frame around
# the textpane contents, but that is largely incidental
# to its main function.)
#
# Per emacs tradition, we allow multiple textpanes
# to be simultaneously open onto a single textbuffer;
# this heavily influences the design and implementation.
#
# See also:
#     src/lib/x-kit/widget/edit/editboss-imp.pkg
#     src/lib/x-kit/widget/edit/textbuffer-imp.pkg
#     src/lib/x-kit/widget/edit/textedit.pkg
#     src/lib/x-kit/widget/edit/screenline.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib




# This package gets used in:
#
#     

stipulate
    include package   threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    include package   geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
    package evt =  gui_event_types;						# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package g2p =  gadget_to_pixmap;						# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
    package gd  =  gui_displaylist;						# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    package gt  =  guiboss_types;						# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package gtj =  guiboss_types_junk;						# guiboss_types_junk		is from   src/lib/x-kit/widget/gui/guiboss-types-junk.pkg
    package wt  =  widget_theme;						# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package wti =  widget_theme_imp;						# widget_theme_imp		is from   src/lib/x-kit/widget/xkit/theme/widget/default/widget-theme-imp.pkg
    package r8  =  rgb8;							# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package r64 =  rgb;								# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
    package wi  =  widget_imp;							# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package g2j =  geometry2d_junk;						# geometry2d_junk		is from   src/lib/std/2d/geometry2d-junk.pkg
    package mtx =  rw_matrix;							# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
    package pp  =  standard_prettyprint_mill;					# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package gtg =  guiboss_to_guishim;						# guiboss_to_guishim		is from   src/lib/x-kit/widget/theme/guiboss-to-guishim.pkg
    package le  =  screenline;							# screenline			is from   src/lib/x-kit/widget/edit/screenline.pkg
    package tbi =  textbuffer_imp;						# textbuffer_imp		is from   src/lib/x-kit/widget/edit/textbuffer-imp.pkg
    package t2t =  textpane_to_textbuffer;					# textpane_to_textbuffer	is from   src/lib/x-kit/widget/edit/textpane-to-textbuffer.pkg

    package nl  =  red_black_numbered_list;					# red_black_numbered_list	is from   src/lib/src/red-black-numbered-list.pkg
    package im  =  int_red_black_map;						# int_red_black_map		is from   src/lib/src/int-red-black-map.pkg
    package sm  =  string_map;							# string_map			is from   src/lib/src/string-map.pkg

    package iuw =  issue_unique_widget_id;					# issue_unique_widget_id	is from   src/lib/x-kit/widget/gui/issue-unique-widget-id.pkg
    package e2p =  textedit_to_textpane;					# textedit_to_textpane		is from   src/lib/x-kit/widget/edit/textedit-to-textpane.pkg
    package l2p =  screenline_to_textpane;					# screenline_to_textpane	is from   src/lib/x-kit/widget/edit/screenline-to-textpane.pkg
    package p2l =  textpane_to_screenline;					# textpane_to_screenline	is from   src/lib/x-kit/widget/edit/textpane-to-screenline.pkg
    package b2p =  editboss_to_textpane;					# editboss_to_textpane		is from   src/lib/x-kit/widget/edit/editboss-to-textpane.pkg
    package p2e =  textpane_to_textedit;					# textpane_to_textedit		is from   src/lib/x-kit/widget/edit/textpane-to-textedit.pkg
    package p2t =  textpane_to_textbuffer;					# textpane_to_textbuffer	is from   src/lib/x-kit/widget/edit/textpane-to-textbuffer.pkg
    package tpt =  textpane_types;						# textpane_types		is from   src/lib/x-kit/widget/edit/textpane-types.pkg
    package g2b =  gadget_to_editboss;						# gadget_to_editboss		is from   src/lib/x-kit/widget/edit/gadget-to-editboss.pkg
    package mj =  mode_junk;							# mode_junk			is from   src/lib/x-kit/widget/edit/mode-junk.pkg
    package fm  =  fundamental_mode;						# fundamental_mode		is from   src/lib/x-kit/widget/edit/fundamental-mode.pkg

    nb =  log::note_on_stderr;							# log				is from   src/lib/std/src/log.pkg

Dummy1 = e2p::Textedit_To_Textpane; 	# XXX SUCKO DELETEME This is just to force compilation during initial development.
Dummy2 = l2p::Screenline_To_Textpane; 	# XXX SUCKO DELETEME This is just to force compilation during initial development.
Dummy4 = b2p::Editboss_To_Textpane; 	# XXX SUCKO DELETEME. This is a quick hack to make sure the package compiles during early development of it.
Dummy5 =  le::Redraw_Fn_Arg; 		# XXX SUCKO DELETEME. This is a quick hack to make sure the package compiles during early development of it.
dummy6 = fm::make_fundamental_mode;
herein

    package textpane
    :	    Textpane								# Textpane			is from   src/lib/x-kit/widget/edit/textpane.api
    {
	App_To_Textpane
	  =
	  { id:					iuw::Id
	  };


	Redraw_Fn_Arg
	    =
	    REDRAW_FN_ARG
	      {
		id:				iuw::Id,			# Unique id.
		doc:				String,
		frame_number:			Int,				# 1,2,3,... Purely for convenience of widget, guiboss-imp makes no use of this.
		frame_indent_hint:		gt::Frame_Indent_Hint,
		site:				g2d::Box,			# Window rectangle in which to draw.
		popup_nesting_depth:		Int,				# 0 for gadgets on basewindow, 1 for gadgets on popup on basewindow, 2 for gadgets on popup on popup, etc.
		#
		duration_in_seconds:		Float,				# If state has changed look-imp should call note_changed_gadget_foreground() before this time is up. Also useful for motionblur.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		gadget_mode:			gt::Gadget_Mode,
		#
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		to:				Replyqueue,			# Used to call 'pass_*' methods in other imps.
		palette:			wt::Gadget_Palette,
		#
		default_redraw_fn:		Redraw_Fn
	      }
	withtype
	Redraw_Fn
	  =
	  Redraw_Fn_Arg
	  ->
	  { displaylist:		gd::Gui_Displaylist,
	    point_in_gadget:		Null_Or(g2d::Point -> Bool)		# 
	  }
	  ;



	Mouse_Click_Fn_Arg
	    =
	    MOUSE_CLICK_FN_ARG							# Needs to be a sumtype because of recursive reference in default_mouse_click_fn.
	      { id:				iuw::Id,			# Unique id.
		doc:				String,
		event:				gt::Mousebutton_Event,		# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
		button:				evt::Mousebutton,		# Which mousebutton was pressed/released.
		point:				g2d::Point,			# Where the mouse was.
		widget_layout_hint:		gt::Widget_Layout_Hint,
		frame_indent_hint:		gt::Frame_Indent_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:		evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		to:				Replyqueue,			# Used to call 'pass_*' methods in other imps.
		#
		default_mouse_click_fn:		Mouse_Click_Fn,
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Click_Fn = Mouse_Click_Fn_Arg -> Void;



	Mouse_Drag_Fn_Arg
	    =
	    MOUSE_DRAG_FN_ARG
	      {
		id:				iuw::Id,			# Unique id.
		doc:				String,
		event_point:			g2d::Point,
		start_point:			g2d::Point,
		last_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		frame_indent_hint:		gt::Frame_Indent_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		phase:				gt::Drag_Phase,	
		button:				evt::Mousebutton,
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		to:				Replyqueue,			# Used to call 'pass_*' methods in other imps.
		#
		default_mouse_drag_fn:		Mouse_Drag_Fn,
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Drag_Fn =  Mouse_Drag_Fn_Arg -> Void;



	Mouse_Transit_Fn_Arg							# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
	    =
	    MOUSE_TRANSIT_FN_ARG
	      {
		id:				iuw::Id,			# Unique id.
		doc:				String,
		event_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		frame_indent_hint:		gt::Frame_Indent_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		transit:			gt::Gadget_Transit,		# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		to:				Replyqueue,			# Used to call 'pass_*' methods in other imps.
		#
		default_mouse_transit_fn:	Mouse_Transit_Fn,
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Transit_Fn =  Mouse_Transit_Fn_Arg -> Void;



	Key_Event_Fn_Arg
	    =
	    KEY_EVENT_FN_ARG
	      {
		id:				iuw::Id,			# Unique id.
		doc:				String,
		key_event:			gt::Key_Event,			# KEY_PRESS or KEY_RELEASE
		keycode:			evt::Keycode,			# Keycode of the depressed key.
		keysym:				evt::Keysym,			# Keysym  of the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
		keystring:			String,				# Ascii  for the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
		keychar:			Char,				# First char of 'string' ('\0' if string-length != 1).
		event_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		frame_indent_hint:		gt::Frame_Indent_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		to:				Replyqueue,			# Used to call 'pass_*' methods in other imps.
		#
		default_key_event_fn:		Key_Event_Fn,
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Key_Event_Fn =  Key_Event_Fn_Arg -> Void;



	Modeline_Fn_Arg
	    =
	    MODELINE_FN_ARG
	      {
		point:					g2d::Point,		# (0,0)-origin 'point' (==cursor) coordinates.  Remember to display these as (1,1)-origin!
		mark:				Null_Or(g2d::Point),		# (0,0)-origin 'mark' if set, else NULL.
		lastmark:			Null_Or(g2d::Point),		# (0,0)-origin last-valid-value-of-mark if set, else NULL.

		dirty:				Bool,				# TRUE iff textbuffer contents have been modified since being loaded from file.
		buffername:			String,				# 
		buffermode:			String
	      }
	withtype
	Modeline_Fn =  Modeline_Fn_Arg -> String;



	Option	= ID			iuw::Id
		| DOC			String
		#
		| FRAME_INDENT_HINT	gt::Frame_Indent_Hint
		#
		| ASCII			String					# Initial textbuffer contents.
		#
		| REDRAW_FN		Redraw_Fn				# Application-specific handler for widget redraw.
		| MOUSE_CLICK_FN	Mouse_Click_Fn				# Application-specific handler for mousebutton clicks.
		| MOUSE_DRAG_FN		Mouse_Drag_Fn				# Application-specific handler for mouse drags.
		| MOUSE_TRANSIT_FN	Mouse_Transit_Fn			# Application-specific handler for mouse crossings.
		| KEY_EVENT_FN		Key_Event_Fn				# Application-specific handler for keyboard input.
		#
		| MODELINE_FN		Modeline_Fn				# Application-specific fn to format modeline display.
		#
		| PORTWATCHER		(Null_Or(App_To_Textpane) -> Void)	# Widget's app port                   will be sent to these fns at widget startup.
		| SITEWATCHER		(Null_Or((iuw::Id,g2d::Box)) -> Void)	# Widget's site in window coordinates will be sent to these fns each time it changes.
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	fun process_options
	    ( options: List(Option),
	      #
	      {	widget_id,
		widget_doc,
		#
		frame_indent_hint,
		text,
		#
		redraw_fn,
		mouse_click_fn,
		mouse_drag_fn,
		mouse_transit_fn,
		key_event_fn,
		modeline_fn,
		#
		widget_options,
	        #
		portwatchers,
		sitewatchers
	      }
	    )
	    =
	    {   my_widget_id		=  REF  widget_id;
		my_widget_doc		=  REF  widget_doc;
		#
		my_frame_indent_hint	=  REF  frame_indent_hint;
		my_text			=  REF  text;
		#
		my_redraw_fn		=  REF  redraw_fn;
		my_mouse_click_fn	=  REF  mouse_click_fn;
		my_mouse_drag_fn	=  REF  mouse_drag_fn;
		my_mouse_transit_fn	=  REF  mouse_transit_fn;
		my_key_event_fn		=  REF  key_event_fn;
		my_modeline_fn		=  REF  modeline_fn;
		#
		my_widget_options	=  REF  widget_options;
		#
		my_portwatchers		=  REF  portwatchers;
		my_sitewatchers		=  REF  sitewatchers;
		#

		apply  do_option  options
		where
		    fun do_option (ID				i) =>   my_widget_id		:=  THE i;
			do_option (DOC				d) =>   my_widget_doc		:=      d;
			#
			do_option (FRAME_INDENT_HINT		h) =>   my_frame_indent_hint	:=  THE h;
			do_option (ASCII			h) =>   my_text			:=      h;
			#
			do_option (REDRAW_FN			f) =>   my_redraw_fn		:=      f;
			do_option (MOUSE_CLICK_FN		f) =>   my_mouse_click_fn	:=      f;
			do_option (MOUSE_DRAG_FN		f) =>	my_mouse_drag_fn	:=  THE f;
			do_option (MOUSE_TRANSIT_FN		f) =>	my_mouse_transit_fn	:=  THE f;
			do_option (KEY_EVENT_FN			f) =>	my_key_event_fn		:=  THE f;
			do_option (MODELINE_FN			f) =>	my_modeline_fn		:=      f;
			#
			do_option (PORTWATCHER			c) =>	my_portwatchers		:=  c ! *my_portwatchers;
			do_option (SITEWATCHER			c) =>	my_sitewatchers		:=  c ! *my_sitewatchers;
		    end;
		end;

		{ widget_id		=>  *my_widget_id,
		  widget_doc		=>  *my_widget_doc,
		  #
		  frame_indent_hint	=>  *my_frame_indent_hint,
		  text			=>  *my_text,
		  #
		  redraw_fn		=>  *my_redraw_fn,
		  mouse_click_fn	=>  *my_mouse_click_fn,
		  mouse_drag_fn		=>  *my_mouse_drag_fn,
		  mouse_transit_fn	=>  *my_mouse_transit_fn,
		  key_event_fn		=>  *my_key_event_fn,
		  modeline_fn		=>  *my_modeline_fn,
		  #
		  widget_options	=>  *my_widget_options,
		  #
		  portwatchers		=>  *my_portwatchers,
		  sitewatchers		=>  *my_sitewatchers
		};
	    };


	fun make_minibuffer ()
	    =
	    {   buffername = "*minibuffer*";
		#
		options = [];

		textbuffer_arg
		  =
		  ( buffername:	String,
		    options:	List(t2t::Textbuffer_Option)
		  ):		t2t::Textbuffer_Arg;

		egg =  tbi::make_textbuffer_egg  textbuffer_arg;
		#
		(egg ())
		    ->
		    ( textbuffer_exports:	tbi::Exports,
		      egg':		       (tbi::Imports, Run_Gun, End_Gun) -> Void
		    );

		textbuffer_imports
		  =
		  { };

		(make_run_gun ()) ->   { run_gun', fire_run_gun };
		(make_end_gun ()) ->   { end_gun', fire_end_gun };

		egg' (textbuffer_imports, run_gun', end_gun');

		fire_run_gun ();

		textbuffer_exports;

#		textbuffer_exports -> { textpane_to_textbuffer };
	    };



	fun with														# PUBLIC
	      {															# These ids are initially generated and assigned by 'with' in src/lib/x-kit/widget/edit/texteditor.pkg
		textedit_id:		iuw::Id,										# We belong to this instance of src/lib/x-kit/widget/edit/textedit.pkg
		textpane_id:		iuw::Id,										# Our own unique id.
		screenlines_mark:	Id,											# This MARK marks our COL of src/lib/x-kit/widget/edit/screenline.pkg instances in the guipith. This is set up by src/lib/x-kit/widget/edit/texteditor.pkg.

		options:		List(Option)
	      }
	    =
	    {
		fun default_modeline_fn (MODELINE_FN_ARG a)
		    =
		    {
			sprintf "%s   %s   L%d.%d   (%s)"
				(a.dirty ?? "**" :: "  ")
				 a.buffername
				(a.point.row+1)											# '+1's because lines and columns are internally numbered 0->(N-1), but user expects traditional numbering of 1->N.
				(a.point.col+1)
				 a.buffermode
			;
		    };

		#######################################
		# Top of per-imp state variable section
		#

		point__global			=  REF ({ row => 0, col => 0 }:	    g2d::Point);				# Location of visible cursor in textbuffer.  Upperleft origin is { row => 0, col => 0 } (but is displayed to user as L1C1 to conform with standard text-editor practice).  This is in buffer (file) coordinates, not screen coordinates.
		mark__global			=  REF (NULL:		    Null_Or(g2d::Point));				# Location of the emacs-traditional buffer 'mark'.  If this is non-NULL, the 'mark' and 'point' delimit the current text selection in the buffer.
		lastmark__global		=  REF (NULL:		    Null_Or(g2d::Point));				# When we set mark__global to NULL we save its previous value in lastmark__global.  This gets used by exchange_point_and_mark in   src/lib/x-kit/widget/edit/fundamental-mode.pkg

		font_height__global		=  REF (NULL:  Null_Or( Int			    ));
		textpane_to_textedit__global	=  REF (NULL:  Null_Or( p2e::Textpane_To_Textedit   ));

		modeline_fn__global		=  REF default_modeline_fn;

		textpane_to_screenline__by_paneline
		    =
		    REF (im::empty:  im::Map(p2l::Textpane_To_Screenline));

		widget_to_guiboss__global	=  REF (NULL:  Null_Or( { widget_to_guiboss: gt::Widget_To_Guiboss, textpane_id: iuw::Id }));
	
		sitewatchers_global		=  REF ([]:    List(  Null_Or((iuw::Id, g2d::Box )) -> Void  ));

		buffermode__global									# Contains mode name and mode keymap.
		    =
		    REF (fm::make_fundamental_mode ());

		subkeymap__global									# Normally NULL; Used to implement keys with prefixes by saving current subkeymap in it.
		    =
		    REF (NULL:  Null_Or( mj::Keymap ));


		expected_screenlines									# So we can tell when textpane_to_screenline__by_paneline is fully populated (for example).
		    =
		    REF 1;

		bogus_site
		   =
		   { col => -1,  wide => -1,
		     row => -1,  high => -1
		   }:						g2d::Box;

		last_known_site									# This should probably be Ref(Null_Or(g2d::Box)) -- forces client code to consider the NULL case. As it is, we could absentmindedly try using the bogus value somewhere. XXX SUCKO FIXME. (Ditto for the other widgets.)
		    =
		    REF (NULL:	Null_Or( g2d::Box ));

		textpane_to_textbuffer__global
		    =
		    REF (NULL: Null_Or( p2t::Textpane_To_Textbuffer ));

		fun get__textpane_to_textbuffer ()
		    =
		    case *textpane_to_textbuffer__global
			#
			THE textpane_to_textbuffer							# This is what we expect in practice.
			 => textpane_to_textbuffer;

			NULL => {   msg = "textpane_to_textbuffer__global not set?! -- textpane.pkg";	# This should be "impossible" because we set this global very early.
				    log::fatal msg;
				    raise exception FAIL msg;
				}; 
		    esac;

		#
		# End of state variable section
		###############################

		fun make_screenlines_guipith
		      (
			screenline_count:	Int
		      )
		    =
		    {	screenlines =   make_screenlines  (screenline_count - 1,  [])				# NB: panelines run  0..screenline_count-1.
					where
					    fun make_screenlines (-1, result)
						    =>
						    result;

						make_screenlines (paneline, result_so_far)
						    =>
						    {   screenline
							    =
							    screenline::with
							      {
								paneline,
								textpane_id,
								textedit_id,
								options	    =>  [ le::DOC   (sprintf "Screenline %d"  paneline),
										  le::PIXELS_HIGH_MIN 0,
										  #
										  le::STATE   { text      => sprintf "I am screenline %d"  paneline,
												selected  => NULL,
												cursor_at => p2l::NO_CURSOR,
												prompt	  => ""
											      }
										]
							      };

							make_screenlines  (paneline - 1,  screenline ! result_so_far);
						    };
					    end;
					end;

			gt::XI_GUIPLAN  (gt::COL screenlines);
		    };

		fun maybe_change_number_of_screenlines ()
		    =
		    {   # We depend upon the state variables
			#
			#     last_known_site
			#     font_height__global
			#     widget_to_guiboss__global
			#
			# so it is critically important that we
			# be called whenever any of those changes.
			#
			# For now we're ensuring that via ad hoc
			# coding.  Eventually it would be nice to
			# have some methodology like CHR.						# CHR == Constraint Handling Rules, see https://dtai.cs.kuleuven.be/CHR/biblio.shtml  e.g. http://arxiv.org/abs/1406.2121
			#
			case (*font_height__global,  *last_known_site,  *widget_to_guiboss__global)
			    #
			    (THE font_height, THE site, THE { widget_to_guiboss, textpane_id })
				=>
				{   # Decide how many screenlines will fit comfortably.
				    #
				    frame_pixels	 = 10;		# XXX SUCKO FIXME  We must have the actual number somewhere.
				    pixels_between_lines =  2;

				    number_of_modelines = 1;

				    reasonable_line_count
					=
					(site.high - frame_pixels) / (font_height + pixels_between_lines);

				    reasonable_screenline_count
					=
					reasonable_line_count - number_of_modelines;

				    if (reasonable_screenline_count != *expected_screenlines)
					#
					screenlines_guipith_subtree
					    =
					    make_screenlines_guipith  reasonable_screenline_count;

					full_guipith_tree
					    =
					    widget_to_guiboss.g.get_guipiths ();

					revised_full_guipith_tree
					    =
					    gtj::guipith_map  (full_guipith_tree,  [ gtj::XI_MARK_MAP_FN do_mark ])
						where
						    fun do_mark (xi_mark:	gt::Xi_Mark)
							=
							if (same_id (xi_mark.id, screenlines_mark))
							    #
							    xi_mark ->    { id:		Id, 
									    doc:	String,
									    widget:	gt::Xi_Widget_Type
									  };
							    xi_mark =	  { id,
									    doc,
									    widget =>	screenlines_guipith_subtree
									  };
							    xi_mark;
							else
							    xi_mark;
							fi;
						end;

					widget_to_guiboss.g.install_updated_guipiths
					    #
					    revised_full_guipith_tree;

					expected_screenlines := reasonable_screenline_count;
				    fi;

				};

			    _ =>
				{								# Insufficient information to reconfigure screenlines so doing nothing.  (Eventually all required information will arrive.)
				};	
			esac;
		    };


# 		fun point_lt ({ col=>col1, row=>row1 }, { col=>col2, row=>row2 })
# 		    =
# 		   (row1 <  row2)
# 		   or
# 		   ((row1 == row2) and (col1 <  col2));

		fun refresh_screenlines ()
		    =
		    {   t2t = get__textpane_to_textbuffer ();
			#
			ts  = t2t.get_textstate ();

			ts -> { textlines:	mj::Textlines,					# Complete text contents of textbuffer.
				editcount:	Int						# Count of edits applied.  Intended to allow clients to quickly detect whether any changes have been made since they last polled us.
			      };								# By pro-actively fetching the entire textbuffer state we not only save inter-imp round trips, but more importantly guarantee that we do the complete redisplay on a single self-consistent state.

			point  =  *point__global;
			mark   =  *mark__global;

												# Update status line display appropriately.
												#
			case (im::get (*textpane_to_screenline__by_paneline, -1))		# We save the special modeline screenline under key -1.
			    #
			    THE textpane_to_screenline
				=>
				{   textpane_to_textbuffer
					=
					get__textpane_to_textbuffer ();

				    #
				    modeline_fn_arg
				        =
				        MODELINE_FN_ARG
					  {
					    point	=>  *point__global,
					    mark	=>  *mark__global,
					    lastmark	=>  *lastmark__global,
					    #
					    dirty	=>   textpane_to_textbuffer.get_dirty (),
					    buffername	=>   textpane_to_textbuffer.get_buffername (),
					    buffermode	=> (*buffermode__global).name
					  };

				    modeline_fn   =  *modeline_fn__global;

				    modeline_text =  modeline_fn  modeline_fn_arg;

				    modeline_state
				      =
				      { cursor_at =>  p2l::NO_CURSOR,
					selected  =>  NULL,
					text	  =>  modeline_text,
					prompt	  =>  ""
				      };	

				    textpane_to_screenline.set_state_to  modeline_state;
				};

			    NULL => ();
			esac;



			apply do_line (0 .. (*expected_screenlines - 1))
			    where
				fun do_line (line_number: Int)
				    =
				    {
					case (im::get (*textpane_to_screenline__by_paneline, line_number))
					    #
					    THE textpane_to_screenline
						=>
						{   line_key = line_number;			# Internally lines are numbered 0->(N-1) (but we display them to user as 1-N).
						    #
						    line =  case (nl::find (textlines, line_key))
								#
								THE line => line;
								NULL	 => "\n";
							    esac;
# nb {. sprintf "refresh_screenlines/DDD point=%s  line_key=%d line='%s' -- textpane.pkg" (g2j::point_to_string point) line_key line; };
						    my (selected, cursor_at)															# Figure out what part (if any) of line is part of the selected region, and if so which end (if either) the cursor is at.
							=
							case mark
							    #
							    THE mark
								=>
								if   (mark.row <  line_number  and  line_number <  point.row)	(THE (0, NULL),			p2l::NO_CURSOR		);	# Marked region starts before line and ends after it -- select entire line.
								elif (mark.row >  line_number  and  line_number >  point.row)	(THE (0, NULL),			p2l::NO_CURSOR		);	# Marked region starts before line and ends after it -- select entire line.
								#
								elif (mark.row <  line_number  and  line_number >  point.row)	(NULL,				p2l::NO_CURSOR		);	# Marked region is entirely before line -- select nothing.
								elif (mark.row >  line_number  and  line_number <  point.row)	(NULL,				p2l::NO_CURSOR		);	# Marked region is entirely after  line -- select nothing.
								#
								elif (mark.row <  line_number  and  line_number == point.row)   (THE (0, THE point.col),	p2l::CURSOR_AT_END	);	# Marked region starts before line and ends on it -- select leading part of line.
								elif (mark.row == line_number  and  line_number >  point.row)   (THE (0, THE mark.col ),	p2l::NO_CURSOR		);	# Marked region starts before line and ends on it -- select leading part of line.
								#
								elif (mark.row >  line_number  and  line_number == point.row)   (THE (point.col, NULL),		p2l::CURSOR_AT_START	);	# Marked region starts on line and ends after it -- select trailing part of line.
								elif (mark.row == line_number  and  line_number <  point.row)   (THE (mark.col,  NULL),		p2l::NO_CURSOR		);	# Marked region starts on line and ends after it -- select trailing part of line.
								#
								elif (mark.col < point.col)					(THE (mark.col,  THE point.col),p2l::CURSOR_AT_END	);	# Marked region starts and ends on line -- select middle part of line.
								else 								(THE (point.col, THE mark.col ),p2l::CURSOR_AT_START	);	# Marked region starts and ends on line -- select middle part of line.
								fi;

							    NULL =>																# No mark set.
								if (point.row == line_number)					(THE (point.col, THE point.col),p2l::CURSOR_AT_END	);	# Display the cursor by itself.
								else								(NULL,				p2l::NO_CURSOR		);	# Nothing to display in reverse video on this line.
								fi;
							esac;

						    linestate
						      =
						      { cursor_at,
							selected,
							text	  =>  string::chomp line,	# Chomp it because screenline.com doesn't want the terminating newline (if any).
							prompt	  =>  ""
						      };	

						    textpane_to_screenline.set_state_to  linestate;
						};

					    NULL =>
						{
						};
					esac;
				    };
			    end;
		    };

#		    expected_screenlines := reasonable_screenline_count;
#
#		textpane_to_screenline__by_paneline
#		    =
#		    REF (im::empty:  im::Map(p2l::Textpane_To_Screenline));


		fun needs_redraw_gadget_request ()
		    =
		    case (*widget_to_guiboss__global)
			#
			THE { widget_to_guiboss, textpane_id }	=>  widget_to_guiboss.g.needs_redraw_gadget_request(textpane_id);
			NULL					=>  ();
		    esac;

		fun note_site
		      (
			id:		iuw::Id,
			site:		g2d::Box
		      )
		    =
		    if(*last_known_site != THE site)
			last_known_site := THE site;
			#
			maybe_change_number_of_screenlines ();

			apply tell_watcher *sitewatchers_global
			    where
				fun tell_watcher sitewatcher
				    =
				    sitewatcher (THE (id,site));
			    end;
		    fi;

		fun default_redraw_fn (REDRAW_FN_ARG a)
		    =
		    {	font_size		=  NULL;
			font_weight		=  (THE wt::BOLD_FONT: Null_Or(wt::Font_Weight));
			fonts			=  [];

			id			=  a.id;
			palette			=  a.palette;
			frame_indent_hint	=  a.frame_indent_hint;
			site			=  a.site;
			theme			=  a.theme;

			note_site (id, site);

			fun get_fontnames ()
			    =
			    {   font_size_to_use
				    =
				    case font_size	THE i => i;
							NULL  => *theme.default_font_size;
				    esac;

				fontname_to_use
				    =
				    case font_weight  THE wt::ROMAN_FONT  =>  *theme.get_roman_fontname  font_size_to_use;
						      THE wt::ITALIC_FONT =>  *theme.get_italic_fontname font_size_to_use;
						      THE wt::BOLD_FONT   =>  *theme.get_bold_fontname   font_size_to_use;
						      NULL                =>  *theme.get_roman_fontname  font_size_to_use;
				    esac;

				fontnames =  fonts  @  [ fontname_to_use, "9x15" ];

				fontnames;
			    };

			fun get_text_dimensions (text: String)
			    =
			    {   g =  wti::get__guiboss_to_topwindow  theme;
				#
				font = g.get_font (get_fontnames ());

				font_height__global
				    :=
				    THE (font.font_height.ascent + font.font_height.descent);

				maybe_change_number_of_screenlines ();

				{ font_ascent      =>  font.font_height.ascent,
				  font_descent     =>  font.font_height.descent,
				  length_in_pixels =>  font.string_length_in_pixels text
				};
			    };

# Currently just for side-effect:
get_text_dimensions "foo";

			frame_indent_hint
			  ->
			  { pixels_for_top_of_frame:	Int,									# Vertical   pixels to allocate for top    side of frame.
			    pixels_for_bottom_of_frame:	Int,									# Vertical   pixels to allocate for bottom side of frame.
			    #
			    pixels_for_left_of_frame:	Int,									# Horizontal pixels to allocate for left   side of frame.
			    pixels_for_right_of_frame:	Int									# Horizontal pixels to allocate for right  side of frame.
			  };
			  
			if (pixels_for_top_of_frame == pixels_for_bottom_of_frame
			and pixels_for_top_of_frame == pixels_for_left_of_frame
			and pixels_for_top_of_frame == pixels_for_right_of_frame
			and pixels_for_top_of_frame >  8)
			    #
			    # This branch of the 'if' is basically Compatibility Mode:
			    # it is what we used to do when frame.pkg was hardwired to
			    # always draw a frame 9 pixels thick on every side:

			    relief			=  wt::RIDGE;
			    thick			=  5;

			    stipulate												# then carefully work through the code here based on that.  XXX SUCKO FIXME.
				inset = 6;
			    herein
				fun frame_vertices ({ row, col, wide, high }: g2d::Box)						#
					= 												#
					[ { col=> col + inset - 1,        row=> row + inset		   },				# upper-left
					  { col=> col + inset - 1,        row=> row + high - (inset+1) },				# lower-left
					  { col=> col + wide - (inset+1), row=> row + high - (inset+1) },				# lower-right
					  { col=> col + wide - (inset+1), row=> row + inset		   }				# upper-right
					];
			    end;

			    background_box =  site;

			    foreground_indent = 9;

			    foreground_box    =  g2d::box::make_nested_box (background_box, foreground_indent);			# This is the window area reserved for the widgets we're framing.

			    background_displaylist 											# The 'background' for the frame is the part not covered by the 3d polygon.
				=													# In particular, we do NOT want to draw over the inner rectangle reserved
				[ gd::COLOR												# for the widgets within the frame.
				    (
				      palette.surround_color,
				      #
				      [ gd::FILLED_BOXES (g2d::box::subtract_box_b_from_box_a
							   {
							     a => background_box,
							     b => foreground_box
							   }
							 )
				      ]
				    )
				];

			    points =  frame_vertices  background_box;

			    foreground_displaylist
				=
				(*theme.polygon3d  palette
				  {
				    points,
				    thick,
				    relief
				  }
				);


			    stipulate
				frame_outer_limit =  g2d::box::make_nested_box (background_box, 3 );
				frame_inner_limit =  g2d::box::make_nested_box (background_box, 6 );
			    herein
				fun point_in_gadget (point: g2d::Point)								# A fn which will return TRUE iff the point is on the 3d frame itself, not the surround -- much less the inner widgets.
				    =
				    (    (g2d::box::point_in_box (point, frame_outer_limit)))  and
				    (not (g2d::box::point_in_box (point, frame_inner_limit)));
			    end;

			    point_in_gadget =  THE  point_in_gadget;
			    displaylist     =  background_displaylist @ foreground_displaylist;

			    { displaylist, point_in_gadget };

			else
			    # This branch of the 'if' handles all the frame_indent_hint
			    # cases that the original code really wasn't set up to handle:
			    #
			    if (pixels_for_top_of_frame    == 0
			    and pixels_for_bottom_of_frame == 0
			    and pixels_for_left_of_frame   == 0
			    and pixels_for_right_of_frame  == 0)

				fun point_in_gadget (point: g2d::Point)								# A fn which will return TRUE iff the point is on the frame itself -- not on inner widgets.
				    =
				    FALSE;

				point_in_gadget =  THE  point_in_gadget;
				displaylist     =  [ gd::FILLED_BOXES [] ];

				{ displaylist, point_in_gadget };
			    else
				background_box =  site;
				foreground_box =  gtj::make_nested_box (background_box, frame_indent_hint);				# This is the window area reserved for the widgets we're framing.

				background_displaylist 											# The 'background' for the frame is the part not covered by the 3d polygon.
				    =													# In particular, we do NOT want to draw over the inner rectangle reserved
				    [ gd::COLOR												# for the widgets within the frame.
					(
					  palette.surround_color,
					  #
					  [ gd::FILLED_BOXES (g2d::box::subtract_box_b_from_box_a
							       {
								 a => background_box,
								 b => foreground_box
							       }
							     )
					  ]
					)
				    ];

				foreground_displaylist
				  =
				  [ gd::COLOR
				      (
					a.palette.text_color,
					[ gd::BOXES [ foreground_box, background_box ] ]
				      )
				  ];

				fun point_in_gadget (point: g2d::Point)								# A fn which will return TRUE iff the point is on the frame itself -- not on inner widgets.
				    =
				    (    (g2d::box::point_in_box (point, background_box)))  and
				    (not (g2d::box::point_in_box (point, foreground_box)));

				point_in_gadget =  THE  point_in_gadget;
				displaylist     =  background_displaylist @ foreground_displaylist;

				{ displaylist, point_in_gadget };
			    fi;
			fi;


		    };

		fun default_mouse_click_fn (MOUSE_CLICK_FN_ARG a)
		    =
		    {
			();
		    };

	        (process_options
		  (
		    options,
		    #
		    { widget_id		=>  THE textpane_id,
		      widget_doc	=>  "<textpane>",
		      #	
		      frame_indent_hint	=>  NULL,
		      text		=>  "",
		      #	
		      redraw_fn		=>  default_redraw_fn,
		      mouse_click_fn	=>  default_mouse_click_fn,
		      mouse_drag_fn	=>  NULL,
		      mouse_transit_fn	=>  NULL,
		      key_event_fn	=>  NULL,
		      modeline_fn	=> *modeline_fn__global,
		      #
		      widget_options	=>  [],
		      #
		      portwatchers	=>  [],
		      sitewatchers	=>  []
		    }
		) )
		    ->
		    {												# These values are globally visible to the subsequenc fns, which can lock them in as needed.
		      widget_id,
		      widget_doc,
		      #
		      frame_indent_hint,
		      text,
		      #
		      redraw_fn,
		      mouse_click_fn,
		      mouse_drag_fn,
		      mouse_transit_fn,
		      key_event_fn,
		      modeline_fn,
		      #
		      widget_options,
		      #
		      portwatchers,
		      sitewatchers
		    };

		sitewatchers_global	:= sitewatchers;
		modeline_fn__global	:= modeline_fn;



		#####################
		# Top of port section
		#
		# Here we implement our App_To_Textpane port:

		#
		# End of port section
		#####################


		###############################
		# Top of widget hook fn section
		#
		# These fns get called by widget_imp logic, ultimately						# widget_imp		is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		# in response to user mouseclicks and keypresses etc:

		fun startup_fn
		    { 
		      id:				iuw::Id,						# Unique id.
		      doc:				String,
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
		      to:				Replyqueue
		    }
		    =
		    {	widget_to_guiboss__global
			    :=  
			    THE { widget_to_guiboss, textpane_id => id };

			maybe_change_number_of_screenlines ();

			app_to_textpane
			  =
			  { id
			  }
			  : App_To_Textpane
			  ;

			gadget_to_editboss
			    =
			    g2b::find__gadget_to_editboss  (widget_to_guiboss.g,  "textpane::startup_fn");


			textpane_to_textbuffer__global
			    :=
			    THE textpane_to_textbuffer
			    where
				textpane_to_textbuffer
				    =
				    gadget_to_editboss.get_or_make_textbuffer
					#
					("mybuffer", [p2t::ASCII text]);
			    end;	

			gadget_to_editboss.note_textpane
			  (
			    editboss_to_textpane:			b2p::Editboss_To_Textpane,
			    textedit_to_textpane:			e2p::Textedit_To_Textpane,
			    screenline_to_textpane:			l2p::Screenline_To_Textpane
			  )
			    where
				fun note__textpane_to_textedit   (textpane_to_textedit:   p2e::Textpane_To_Textedit  )
				    =
				    do {.									# The 'do' switches us from executing in microthread of screenline caller to our own textpane microthread.
					textpane_to_textedit__global   := THE textpane_to_textedit;
				    };

				fun note__textpane_to_screenline (textpane_to_screenline: p2l::Textpane_To_Screenline)
				    =
				    do {.									# The 'do' switches us from executing in microthread of screenline caller to our own textpane microthread.
					textpane_to_screenline__by_paneline
					    :=
					    im::set   (*textpane_to_screenline__by_paneline,
							textpane_to_screenline.paneline,
							textpane_to_screenline
						      );

					refresh_screenlines ();
				    };


#	 				fun screenline__mouse_click_fn
#	 				      {
#	 					id:				iuw::Id,						# Unique id.
#	 					event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
#	 					button:				evt::Mousebutton,
#	 					point:				g2d::Point,
#	 					widget_layout_hint:		gt::Widget_Layout_Hint,
#	 					frame_indent_hint:		gt::Frame_Indent_Hint,
#	 					site:				g2d::Box,						# Widget's assigned area in window coordinates.
#	 					modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
#	 					mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
#	 					widget_to_guiboss:		gt::Widget_To_Guiboss,
#	 					theme:				wt::Widget_Theme,
#	 					do:				(Void -> Void) -> Void,					# Used by widget subthreads to run code in main widget microthread.
#	 					to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
#	 				      }
#	 				    =
#	 				    {
#	 				    };

fun modifier_keys_state__to__string (s:  evt::Modifier_Keys_State)
    =
    {   shift = s.shift_key_was_down     ?? [ "shift" ]     :: [];
	lock  = s.shiftlock_key_was_down ?? [ "shiftlock" ] :: [];
	ctrl  = s.control_key_was_down   ?? [ "ctrl" ]      :: [];
	mod1  = s.mod1_key_was_down      ?? [ "mod1" ]	    :: [];
	mod2  = s.mod2_key_was_down      ?? [ "mod2" ]	    :: [];
	mod3  = s.mod3_key_was_down      ?? [ "mod3" ]	    :: [];
	mod4  = s.mod4_key_was_down      ?? [ "mod4" ]	    :: [];
	mod5  = s.mod5_key_was_down      ?? [ "mod5" ]	    :: [];
 
	string::join' "<" " " ">" (list::cat [ shift, lock, ctrl, mod1, mod2, mod3, mod4, mod5 ]);
    };

				Editfn_Out							# mj::Editfn_Out in a more convenient form.
				  =
				  { textlines_changed:	Bool,		textlines:	mj::Textlines,
				    point_changed:	Bool,		point:		g2d::Point,
				    mark_changed:	Bool,		mark:		Null_Or(g2d::Point),
				    lastmark_changed:	Bool,		lastmark:		Null_Or(g2d::Point),
				    editfn_failed:	Bool,		reset:		Bool
				  };

				fun parse_editfn_out (editfn_out: mj::Editfn_Out)
				    =
				    {   r = { textlines_changed => FALSE,	textlines =>  nl::empty,
					      point_changed	=> FALSE,	point	  => *point__global,
					      mark_changed	=> FALSE,	mark	  => *mark__global,
					      lastmark_changed	=> FALSE,	lastmark  => *lastmark__global,
					      editfn_failed	=> TRUE,	reset	  => FALSE
					    };

					case editfn_out
					    #
					    NULL        =>  r;
					    THE options =>  process_options (options, r);
					esac;
				    }
				    where
					fun process_options
					      (	
						options:	List(mj::Editfn_Out_Option),
						r:		Editfn_Out
					      )	
					    =
					    {   my_textlines		= REF r.textlines;
						my_textlines_changed	= REF r.textlines_changed;
						#
						my_point		= REF r.point;
						my_point_changed	= REF r.point_changed;
						#
						my_mark			= REF r.mark;
						my_mark_changed		= REF r.mark_changed;
						#
						my_lastmark		= REF r.lastmark;
						my_lastmark_changed	= REF r.lastmark_changed;
						#
						my_reset		= REF r.reset;

						apply do_option options
						where
						    fun do_option (mj::TEXTLINES textlines) =>	{ my_textlines := textlines;	my_textlines_changed := TRUE;	};
							do_option (mj::POINT     point    ) =>	{ my_point     := point;	my_point_changed     := TRUE;	};
							do_option (mj::MARK      mark	  ) =>	{ my_mark      := mark;		my_mark_changed      := TRUE;	};
							do_option (mj::LASTMARK  lastmark ) =>	{ my_lastmark  := lastmark;	my_lastmark_changed  := TRUE;	};
							do_option (mj::RESET		  ) =>  { my_reset     := TRUE;						};
						    end;	
						end;

						{ textlines		=> *my_textlines,
						  textlines_changed	=> *my_textlines_changed,
						  #
						  point			=> *my_point,
						  point_changed		=> *my_point_changed,
						  #
						  mark			=> *my_mark,
						  mark_changed		=> *my_mark_changed,

						  lastmark		=> *my_lastmark,
						  lastmark_changed	=> *my_lastmark_changed,

						  reset			=> *my_reset,

						  editfn_failed		=> FALSE
						};
					    };
				    end;

				fun do_edit
				      (
					editfn:		mj::Editfn_In -> mj::Editfn_Out,
					keystring:	String								# User keystroke that invoked this editfn.
				      )
				    =
				    case *textpane_to_textbuffer__global
					#
					THE textpane_to_textbuffer
					    =>
					    {
						point_and_mark  = { point => *point__global,
								    mark  => *mark__global
								  };
						lastmark	= *lastmark__global;
						log_undo_info   = FALSE;

						editfn_in =   { editfn,
								point_and_mark,
								lastmark,
								widget_to_guiboss,
								log_undo_info,
								keystring
							      };
 
						textpane_to_textbuffer.pass_edit_result  editfn_in		# NB:  Here we do the actual edit in the textbuffer microthread to guarantee proper mutual exclusion of concurrent edits on the textfuffer.
						    to								#      Also, any edits to the textlines in the textbuffer will come back to us via our statewatcher subscription.
						    {.  (parse_editfn_out #editfn_out)
							    ->
							    { textlines_changed, textlines, 
							      point_changed,     point,	 
							      mark_changed,      mark,
							      lastmark_changed,  lastmark,
							      #	
							      editfn_failed,	 reset
							    };

# nb {. sprintf "do_edit/CCC point_changed=%B point=%s editfn_failed=%B reset=%B -- textpane.pkg" point_changed (g2j::point_to_string point) editfn_failed reset; };
							if (editfn_failed)
							    #
							    # Should beep here, but not sure how to do that yet.	XXX SUCKO FIXME.
							    ();
							else

							    if (point_changed)
								#
# nb {. sprintf "do_edit/DDD point__global was %s now %s -- textpane.pkg" (g2j::point_to_string *point__global) (g2j::point_to_string point); };
								point__global	:= point;
							    fi;

							    if (mark_changed)
								#
								if (mark == NULL)
								    lastmark__global := *mark__global;		# Save mark__global contents for possible use by   exchange_point_and_mark()	in   src/lib/x-kit/widget/edit/fundamental-mode.pkg
								fi;

								mark__global := mark;
							    fi;

							    if (lastmark_changed)
								#
								lastmark__global := lastmark;
							    fi;

							    if (reset)						# Implement keyboard_quit (usually bound to C-g) functionality.
								#
								();
							    fi;

							    if (mark_changed					# NB: Changing lastmark will have no visible effect on screenline display.
							    or  point_changed
							    or  textlines_changed)
								#
								refresh_screenlines ();
							    fi;
							fi;
						    };
					    };

					NULL => ();								# We're hoping keystrokes don't arrive until we've done enough setup for this to be set. Should probably log a warning or error.
				    esac;


				fun screenline__key_event_fn							# Process a user keystroke forwarded to us by one of our screenline.pkg instances.
				      (
					a:				tpt::Key_Event_Fn_Arg
				      )
				    =
				    do {.									# The 'do' switches us from executing in microthread of screenline caller to our own textpane microthread.
					a ->  { id:			iuw::Id,				# Unique id.
						doc:			String,
						key_event:		gt::Key_Event,				# KEY_PRESS or KEY_RELEASE
						keycode:		evt::Keycode,				# Keycode of the depressed key.
						keysym:			evt::Keysym,				# Keysym  of the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
						keystring:		String,					# Ascii  for the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
						keychar:		Char,					# First char of 'keystring' ('\0' if string-length != 1).
						event_point:		g2d::Point,
						widget_layout_hint:	gt::Widget_Layout_Hint,
						frame_indent_hint:	gt::Frame_Indent_Hint,
						site:			g2d::Box,				# Widget's assigned area in window coordinates.
						modifier_keys_state:	evt::Modifier_Keys_State,		# State of the modifier keys (shift, ctrl...).
						mousebuttons_state:	evt::Mousebuttons_State,		# State of mouse buttons as a bool record.
						widget_to_guiboss:	gt::Widget_To_Guiboss,
						theme:			wt::Widget_Theme
					      };
# keycode -> evt::KEYCODE kc;
# nb {. sprintf "screenline__key_event_fn: keycode=%d key_event=%s keystring='%s' modkeys=%s  -- textpane.pkg" kc case key_event gt::KEY_PRESS=>"KEY_PRESS"; _ => "KEY_RELEASE"; esac  keystring  (modifier_keys_state__to__string modifier_keys_state); };

					if (key_event == gt::KEY_PRESS
					and not modifier_keys_state.mod1_key_was_down)
					    #
					    keymap =    case *subkeymap__global
							    #
							    THE keymap =>  { subkeymap__global := NULL;  keymap; };
							    NULL       =>  (*buffermode__global).keymap;
							esac;
 
					    case (sm::get  (keymap,  mj::keystring_to_modemap_key keystring))
						#
						THE editfn
						    =>
						    case editfn
							#
							mj::PLAIN_EDITFN  node
							    =>
							    do_edit  (node.editfn, keystring);

							mj::FANCY_EDITFN  /* node */
							    =>
							    nb {. "We don't yet support mj::FANCY_EDITFN  -- textpane.pkg"; };

							mj::SUBKEYMAP subkeymap
							    =>
							    subkeymap__global := THE subkeymap;
						    esac;

						NULL => ();							# Should probably beep here or something. Don't know how to beep yet.
					    esac;
					fi;
				    };

				editboss_to_textpane
				  =
				  { textpane_id => id,								# Unique id to facilitate storing editboss_to_textpane instances in indexed datastructures like red-black trees.
				    textedit_id,								# We belong to this textpane group.,
				    #
				    note__textpane_to_textedit,
				    note__textpane_to_screenline
				  }:					b2p::Editboss_To_Textpane;

				textedit_to_textpane
				  =
				  { textpane_id => id,
				    textedit_id									# We belong to this textpane group.
				  }:					e2p::Textedit_To_Textpane;

				screenline_to_textpane
				  =
				  { textpane_id => id,
				    textedit_id,								# We belong to this Textedit instance.
				    #
#				    mouse_click_fn =>  screenline__mouse_click_fn,
				    key_event_fn   =>  screenline__key_event_fn

				  }:					l2p::Screenline_To_Textpane;
			    end;

			refresh_screenlines ();

			apply   tell_watcher  portwatchers							# We do this here rather than (say) above this fn because we don't want the port in circulation until we're running.
				where
				    fun tell_watcher  portwatcher
					=
					portwatcher  (THE app_to_textpane);
				end;
			();
		    };

		fun shutdown_fn ()										# Return to widget_imp an exception packaging up our state; this will be returned to guiboss_imp, saved in the
		    =												# Paused_Gui tree, and passed to our startup_fn when/if gui is restarted. This exception will never be raised;
		    {	case *widget_to_guiboss__global
			    #
			    THE { widget_to_guiboss, textpane_id }
				=>
				{   gadget_to_editboss
					=
					g2b::find__gadget_to_editboss  (widget_to_guiboss.g,  "textpane::shutdown_fn");

				    gadget_to_editboss.drop_textpane  { textpane_id, textedit_id };
				};

			    NULL => ();
			esac;

			apply   tell_watcher  portwatchers							# 
				where
				    fun tell_watcher  portwatcher
					=
					portwatcher  NULL;
				end;

			apply tell_watcher *sitewatchers_global
			    where
				fun tell_watcher sitewatcher
				    =
				    sitewatcher NULL;
			    end;
		    };

		fun initialize_gadget_fn
		    {
		      id:				iuw::Id,						# Unique id.
		      doc:				String,
		      site:				g2d::Box,						# Window rectangle in which to draw.
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      theme:				wt::Widget_Theme,
		      pass_font:			List(String) -> Replyqueue
								     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
		       get_font:			List(String) ->	 evt::Font,				# Accepts a list of font names which are tried in order.
		      make_rw_pixmap:			g2d::Size -> g2p::Gadget_To_Rw_Pixmap,
		      #
		      do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
		      to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
		    }
		    =
		    {	note_site (id,site);
			#
			();
		    };

		fun redraw_request_fn_wrapper
		    {
		      id:				iuw::Id,						# Unique id.
		      doc:				String,
		      frame_number:			Int,							# 1,2,3,... Purely for convenience of widget-imp, guiboss-imp makes no use of this.
		      frame_indent_hint:		gt::Frame_Indent_Hint,
		      site:				g2d::Box,						# Window rectangle in which to draw.
		      popup_nesting_depth:		Int,							# 0 for gadgets on basewindow, 1 for gadgets on popup on basewindow, 2 for gadgets on popup on popup, etc.
		      #
		      duration_in_seconds:		Float,							# If state has changed widget-imp should call redraw_gadget() before this time is up. Also useful for motionblur.
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      gadget_mode:			gt::Gadget_Mode,
		      #
		      theme:				wt::Widget_Theme,
		      do:				(Void -> Void) -> Void,
		      to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
		    }
		    =
		    {	note_site (id,site);
			#
			(*theme.current_gadget_colors {	gadget_is_on => FALSE,
							gadget_mode,
							popup_nesting_depth,
							#
							body_color			    => NULL,
							body_color_when_on		    => NULL,
							body_color_with_mousefocus	    => NULL,
							body_color_when_on_with_mousefocus  => NULL
						      }
			)
			    ->
			    (palette: wt::Gadget_Palette);

			redraw_fn_arg
			    =
			    REDRAW_FN_ARG
			      { id,
				doc,
				frame_number,
				frame_indent_hint,
				site,
				popup_nesting_depth,
				duration_in_seconds,
				widget_to_guiboss,
				gadget_mode,
				theme,
				do,
				to,
				palette,
				#
				default_redraw_fn
			      };

			(redraw_fn  redraw_fn_arg)
			    ->
			    { displaylist, point_in_gadget };

			widget_to_guiboss.g.redraw_gadget { id, site, displaylist, point_in_gadget };
		    };


		fun mouse_click_fn_wrapper									# This a callback we hand to   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		      {
			id:				iuw::Id,						# Unique id.
			doc:				String,
			event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
			button:				evt::Mousebutton,
			point:				g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			frame_indent_hint:		gt::Frame_Indent_Hint,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
			to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
		      }
		    = 
		    {	note_site  (id,site);
			#
			mouse_click_fn_arg
			    =
			    MOUSE_CLICK_FN_ARG
			      {
				id,
				doc,
				event,
				button,
				point,
				widget_layout_hint,
				frame_indent_hint,
				site,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				to,
				#
				default_mouse_click_fn,
				#
				needs_redraw_gadget_request
			      };

			mouse_click_fn  mouse_click_fn_arg;
		    };

		fun mouse_drag_fn_wrapper									# This a callback we hand to   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		    (
		      {	id:				iuw::Id,						# Unique id.
			doc:				String,
			event_point:			g2d::Point,
			start_point:			g2d::Point,
			last_point:			g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			frame_indent_hint:		gt::Frame_Indent_Hint,
			site:				g2d::Box,						# Widget's assigned area in window coordinates.
			phase:				gt::Drag_Phase,	
			button:				evt::Mousebutton,
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
			to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
		      }
		    )
		    = 
		    {	note_site  (id,site);
			#
			mouse_drag_fn_arg
			    =
			    MOUSE_DRAG_FN_ARG
			      {
				id,
				doc,
				event_point,
				start_point,
				last_point,
				widget_layout_hint,
				frame_indent_hint,
				site,
				phase,
				button,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				to,
				#
				default_mouse_drag_fn =>  \\ _ = (),						# Default drag behavior for buttons is to do absolutely nothing.
				#
				needs_redraw_gadget_request
			      };

			case mouse_drag_fn
			    #
			    THE mouse_drag_fn =>   mouse_drag_fn  mouse_drag_fn_arg;
			    NULL	      =>   ();								# We do not expect this case to happen: If mouse_drag_fn is NULL mouse_drag_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;
		    };

		fun mouse_transit_fn_wrapper
		      #
		      ( arg as
			{
			  id:				iuw::Id,						# Unique id.
			  doc:				String,
			  event_point:			g2d::Point,
			  widget_layout_hint:		gt::Widget_Layout_Hint,
			  frame_indent_hint:		gt::Frame_Indent_Hint,
			  site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			  transit:			gt::Gadget_Transit,					# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
			  modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			  widget_to_guiboss:		gt::Widget_To_Guiboss,
			  theme:			wt::Widget_Theme,
			  do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
			  to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
			}
		      )	
		    = 
		    {	note_site (id,site);
			#
			mouse_transit_fn_arg
			    =
			    MOUSE_TRANSIT_FN_ARG
			      {
				id,
				doc,
				event_point,
				widget_layout_hint,
				frame_indent_hint,
				site,
				transit,
				modifier_keys_state,
				widget_to_guiboss,
				theme,
				do,
				to,
				#
				default_mouse_transit_fn =>  \\ _ = (),						# Default transit behavior for buttons is to do absolutely nothing.
				#
				needs_redraw_gadget_request
			      };

			case mouse_transit_fn
			    #
			    THE mouse_transit_fn =>   mouse_transit_fn  mouse_transit_fn_arg;
			    NULL	         =>   ();							# We do not expect this case to happen: If mouse_transit_fn is NULL mouse_transit_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;

			();
		    };

		fun key_event_fn_wrapper
		      {
			id:				iuw::Id,						# Unique id.
			doc:				String,
			key_event:			gt::Key_Event,						# KEY_PRESS or KEY_RELEASE.
			keycode:			evt::Keycode,						# Keycode of the depressed key.
			keysym:				evt::Keysym,						# Keysym  of the depressed key.
			keystring:			String,							# Ascii  for the depressed key.
			keychar:			Char,							# First char of 'string' ('\0' if string-length != 1).
			event_point:			g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			frame_indent_hint:		gt::Frame_Indent_Hint,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void,					# Used by widget subthreads to execute code in main widget microthread.
			to:				Replyqueue						# Used to call 'pass_*' methods in other imps.
		      }
		    = 
		    {	note_site (id,site);
			#
			key_event_fn_arg
			    =
			    KEY_EVENT_FN_ARG
			      {
				id,
				doc,
				key_event,
				keycode,
				keysym,
				keystring,
				keychar,
				event_point,
				widget_layout_hint,
				frame_indent_hint,
				site,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				to,
				#
				default_key_event_fn =>  \\ _ = (),						# Default key event behavior for frame is to do absolutely nothing.
				#
				needs_redraw_gadget_request
			      };

			case key_event_fn
			    #
			    THE key_event_fn =>   key_event_fn  key_event_fn_arg;
			    NULL	     =>   ();								# We do not expect this case to happen: If key_event_fn is NULL key_event_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;

		       ();
		    };


		#
		# End of widget hook fn section
		###############################

		widget_options
		    =
		    case mouse_drag_fn
			#
			THE _ =>  (wi::MOUSE_DRAG_FN mouse_drag_fn_wrapper)       ! widget_options;		# Register for drag events only if we are going to use them.
			NULL  =>					            widget_options;
		    esac;

		widget_options
		    =
		    case mouse_transit_fn
			#
			THE _ =>  (wi::MOUSE_TRANSIT_FN mouse_transit_fn_wrapper) ! widget_options;		# Register for transit events only if we are going to use them.
			NULL  =>						    widget_options;
		    esac;

		widget_options
		    =
		    case key_event_fn
			#
			THE _ =>  (wi::KEY_EVENT_FN key_event_fn_wrapper)	  ! widget_options;		# Register for key events only if we are going to use them.
			NULL  =>						    widget_options;
		    esac;

		widget_options
		    =
		    case widget_id
			#
			THE id =>  (wi::ID id)					  ! widget_options;		# 
			NULL   =>						    widget_options;
		    esac;

		widget_options
		    =
		    case frame_indent_hint
			#
			THE h  =>  (wi::FRAME_INDENT_HINT h)			  ! widget_options;		# 
			NULL   =>						    widget_options;
		    esac;

		widget_options
		  =
		  [ wi::STARTUP_FN			startup_fn,						# We always register for these five because our base behavior depends on them.
		    wi::SHUTDOWN_FN			shutdown_fn,
		    wi::INITIALIZE_GADGET_FN		initialize_gadget_fn,
		    wi::REDRAW_REQUEST_FN		redraw_request_fn_wrapper,
		    wi::MOUSE_CLICK_FN			mouse_click_fn_wrapper,
		    wi::DOC				widget_doc
		  ]
		  @
		  widget_options
		  ;

		make_widget_fn =  wi::make_widget_start_fn  widget_options;

		gt::WIDGET  make_widget_fn;									# So caller can write   guiplan = gt::ROW [ frame::with [...], frame::with [...], ... ];
	    };													# PUBLIC
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
