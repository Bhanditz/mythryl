## texteditor-to-textbuffer.pkg
#
# Here we define the port which
#
#     src/lib/x-kit/widget/edit/textbuffer-imp.pkg
#
# exports to
#
#     src/lib/x-kit/widget/edit/texteditor.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g2d =  geometry2d;									# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
#   package ebt =  editboss_types;								# editboss_types		is from   src/lib/x-kit/widget/edit/editboss-types.pkg
    package nl  =  red_black_numbered_list;							# red_black_numbered_list	is from   src/lib/src/red-black-numbered-list.pkg
herein

    # This port is implemented in:
    #
    # src/lib/x-kit/widget/edit/textbuffer-imp.pkg
    #
    package texteditor_to_textbuffer {
	#
	Textlines = nl::Numbered_List(String);

	Textstate
	  =
	  { textlines:		Textlines,							# Complete text contents of textbuffer.
	    editcount:		Int
	  };

	Undostate
	  =
	  { textlines:		Textlines,							# Complete text contents of textbuffer.
	    cursor:		g2d::Point,							# Location of visible cursor in textbuffer.  Upperleft origin is { 0, 0 }, although texteditor displays it as { 1, 1 } to conform with standard text-editor practice.
	    mark:	Null_Or(g2d::Point),							# Location of emacs-style 'mark' in textbuffer.
	    editcount:		Int
	  };

	Statechange										# Used to tell clients (mostly texteditor.pkg) about changes in our state.
	  #											# The 'Id' field in each case is t2t::Texteditor_To_Textbuffer.id;  it may be used by client to identify and discard stale statechanges which arrive after calling drop_statewatcher().
	  = TEXTSTATE		(Id, { was: Textstate, now: Textstate })
	  | UNDO		(Id, { was: Textstate, now: Undostate })
	  | FILENAME		(Id, { was: String,    now: String    })
	  | BUFFERNAME		(Id, { was: String,    now: String    })
	  ;

	Changestate_Arg										# Arg type for change_textstate() and pass_change_textstate().
	  =
	  { change_fn:		Textstate -> Textstate,
	    #
	    undo_info:		Null_Or ( { cursor: 		g2d::Point,			# The 'cursor' and 'mark' values are saved for benefit of undo, so texteditor.pkg will know what part of buffer to show in window after an undo.
					    mark:	Null_Or(g2d::Point)			# If unfo_info is NULL no entry will be made in the undo history.
					  }
					)
	  };

	Texteditor_To_Textbuffer
	  =
	  { id:				Id,							# Unique id to facilitate storing texteditor_to_textbuffer instances in indexed datastructures like red-black trees.
	    #
	    get_maxline:		Void -> Int,						# Max currently valid line number.
	    pass_maxline:		Replyqueue -> (Int -> Void) -> Void,
	    #
	    get_line:			Int -> Null_Or(String),
	    pass_line:			Replyqueue
					 -> Int
					 -> (Null_Or(String) -> Void)
					 -> Void,
	    #
	    get_lines:			(Int, Int) -> List(String),
	    pass_lines:			Replyqueue
					 -> (Int, Int)
					 -> (List(String) -> Void)
					 -> Void,
	    #
	    get_textstate:		Void -> Textstate,					# 
	    pass_textstate:		Replyqueue -> (Textstate -> Void) -> Void,
	    #
	    change_textstate:		Changestate_Arg -> Void,				# 

	    undo:			Void -> Void,

	    get_dirty:			Void -> Bool,						# TRUE iff textbuffer contents are currently out of sync with diskfile contents.
	    pass_dirty:			Replyqueue -> (Bool -> Void) -> Void,

	    set_filename:		String -> Void,						# Filename controls what file textuffer contents are read/written from/to.
	    get_filename:		Void -> String,						# 
	    pass_filename:		Replyqueue -> (String -> Void) -> Void,

	    set_buffername:		String -> Void,						# Buffername uniquely identifies textbuffer to interactive user.
	    get_buffername:		Void -> String,						# 
	    pass_buffername:		Replyqueue -> (String -> Void) -> Void,
												# The statewatcher protocol allows others imps (including other texteditors and also arbitrary application imps) to monitor changes to a given textbuffer.
	    note_statewatcher:		(Id, (Statechange -> Void)) -> Void,			# 'Id' may be the id of the calling imp or may be freshly allocated via issue_unique_id. It identifies this particular watcher/connection for drop_statewatcher.
	    drop_statewatcher:		Id -> Void,						# 'Id' must match that given to note_statewatcher (or texteditor_imp::STATEWATCHER).

	    reload_from_file:		Void -> Void,
	    save_to_file:		Void -> Void
	  };

	Textbuffer_Option
	  #
	  =  MICROTHREAD_NAME	String								# 
	  |  ID			Id								# Stable, unique id for imp.
	  |  STATEWATCHER	(Id, (Statechange -> Void))					# Equivalent to t2t::Texteditor_To_Textbuffer.note_statewatcher(). 'Id' may be the id of the calling imp or may be freshly allocated via issue_unique_id. It identifies this particular watcher/connection for drop_statewatcher.
	  |  INITIAL_FILENAME	String								# 
	  ;	

	Textbuffer_Arg =  (String, List(Textbuffer_Option));					# Required argument is buffername.


	Gadget_To_Editboss									# guiboss provides this interface to gadgets via the guiboss_types Gadget_To_Guiboss interface.  This is the toplevel application code access pathway to texteditor functionality.
	  =											# This was in a separate guiboss-to-editboss.pkg file:  Moved it here to resolve a package-cycle problem.
	  { id:				Id,							# Unique id to facilitate storing gadget_to_editboss instances in indexed datastructures like red-black trees.
	    #
	    get_or_make_textbuffer:	Textbuffer_Arg -> Texteditor_To_Textbuffer
	  };

    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
