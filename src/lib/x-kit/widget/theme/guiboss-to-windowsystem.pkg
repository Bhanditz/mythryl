## guiboss-to-windowsystem.pkg
#
# This port passes requests from
#
#     src/lib/x-kit/widget/gui/guiboss-imp.pkg
# to
#     src/lib/x-kit/widget/xkit/app/windowsystem-imp-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;										# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package gd  =  gui_displaylist;										# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    package w2x =  widget_to_xserver;										# widget_to_xserver		is from   src/lib/x-kit/xclient/src/window/widget-to-xserver.pkg
    package r8  =  rgb8;											# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;											# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
    package a2r =  appwindow_to_xevent_router;									# appwindow_to_xevent_router	is from   src/lib/x-kit/xclient/src/window/appwindow-to-xevent-router.pkg
    #
    package evt =  gui_event_types;										# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/app/windowsystem-imp-for-x.pkg
    #
    # It gets passed as an import to
    #
    #     src/lib/x-kit/widget/gui/guiboss-imp.pkg
    #
    package guiboss_to_windowsystem {
	#
	Guiboss_To_Topwindow
	  =
	  { id:					Id,								# Unique id to facilitate storing appwindow instances in indexed datastructures like red-black trees.
	    #
	    draw_displaylist:			gd::Gui_Displaylist -> Void,
	    pass_window_site:			Replyqueue -> (xg::Window_Site -> Void) -> Void,

	    subscribe_to_changes:										# Lets guiboss subscribe to changes in window size/position.
						( {								# This record is windowsystem-imp-for-x.pkg: Windowsystem_Needs, but that name would produce a package cycle.
					          }
						  -> Void
						)
						-> Void,
	    #
	    exercise_appwindow:			Void -> (Void -> Void),						# Executing returned thunk will wait for completion of window exercise.
	    pass_appwindow_exercise_results:	Replyqueue -> (Int -> Void) -> Void				#
	  };

	Topwindow_Hint
	    #	
	    =  SITE		xg::Window_Site									# Requested size-in-pixels + position for topwindow.  (Window managers often ignore position part.)
	    |  BACKGROUND_PIXEL	r8::Rgb8									# Background color for topwindow.
	    |  BORDER_PIXEL	r8::Rgb8
	    ;

	Topwindow_Hints =  List( Topwindow_Hint );

	Guiboss_To_Windowsystem
	  =
	  { id:					Id,								# Unique id to facilitate storing appwindow instances in indexed datastructures like red-black trees.
	    #
	    make_topwindow: 			(Topwindow_Hints, (a2r::Envelope_Route, evt::x::Event) -> Void)
						->
						Guiboss_To_Topwindow
	  };

	
	Windowsystem_Needs
	  =
	  {													# Currently nothing.
	  };


	Windowsystem_Option
	  #
	  = MICROTHREAD_NAME		String									#
	  | ID				Id									# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	  | CHANGE_CALLBACK		Windowsystem_Needs -> Void						# We'll call each of these callbacks each time our value changes.
	  | WINDOWSYSTEM_CALLBACK	Guiboss_To_Windowsystem -> Void						# Client code registers this callback to get a port to us once we start up.
	  ;

	Windowsystem_Arg = (Windowsystem_Needs, List(Windowsystem_Option));
    };														# package appwindow;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
