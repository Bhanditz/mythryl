## packed-theme.pkg
#
# For the big picture see the imp dataflow diagrams in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# At the moment I think this is evolving from being an imp to
# being a simple static datastructure, but we'll see. -- 2014-07-22 CrT

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include package   threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#   package w2p =  widget_to_packedspace;							# widget_to_packedspace		is from   src/lib/x-kit/widget/space/packed/widget-to-packedspace.pkg
    #
#   package ps  =  guiboss_to_packedspace;							# guiboss_to_packedspace	is from   src/lib/x-kit/widget/space/packed/guiboss-to-packedspace.pkg
#   package psi =  packedspace_imp;								# packedspace_imp		is from   src/lib/x-kit/widget/space/packed/packedspace-imp.pkg
    #
#   package gp  =  gui_plan;									# gui_plan			is from   src/lib/x-kit/widget/gui/gui-plan.pkg
#   package sg  =  stopped_gui;									# stopped_gui			is from   src/lib/x-kit/widget/gui/stopped-gui.pkg
    #
    package xg  =  xgeometry;									# xgeometry			is from   src/lib/std/2d/xgeometry.pkg

    package g2g =  gadget_to_guiboss;								# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg

    package c64 =  rgb;				# Colors with Float64 red-green-blue values.	# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
    package c8  =  rgb8;			# Colors with Unt8    red-green-blue values.	# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg

    Once(X) = Oneshot_Maildrop(X);
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/theme/packed/default/packed-theme-imp.pkg
    #
    package packed_theme {
	#
	Gadget_Palette									# This is the palette of colors that will actually be used by the gadget's drawing logic.
	  =										# We'll probably want more colors here by and by, but this seems like a good initial set.
	  { surround_color:		c64::Rgb,					# Surround   color for gadget, e.g. the color outside the outline of a button. This shouldn't change with gadget state because it is shared by all gadgets in the gui; it would look weird for one to have a different surround.
	    body_color:			c64::Rgb,					# Background color for gadget, e.g. the color inside  the outline of a button. This will typically change when the mouse is over the button.
	    text_color:			c64::Rgb,					# Text       color for gadget, e.g. the text  inside  the outline of a button. This will typically be grayed-out when the button is inactive.
	    #
	    upperleft_bevel_color:	c64::Rgb,					# These two are used to give a "3-D" raised/lowered appearance to the button. They will 
	    lowerright_bevel_color:	c64::Rgb					# be reversed when the button is ON vs OFF, to make it visually look pushed vs popped.
	  };										# NB: Standard lighting for scientific illustration etc is from over user's left shoulder.

	Gadget_Palette8									# Same as above, but in 8-bit-per-component color instead of 64-bit-per-component.
	  =										# To avoid loss of color information, we do the conversion as late as possible
	  { surround_color:		c8::Rgb8,					# (see theme.rgb_to_rgb8).
	    body_color:			c8::Rgb8,					# 
	    text_color:			c8::Rgb8,					# 
	    #
	    upperleft_bevel_color:	c8::Rgb8,					# These two are used to give a "3-D" raised/lowered appearance to the button. They will 
	    lowerright_bevel_color:	c8::Rgb8					# be reversed when the button is ON vs OFF, to make it visually look pushed vs popped.
	  };										# NB: Standard lighting for scientific illustration etc is from over user's left shoulder.

	Packed_Theme
	  =
	  { do_something:			Int -> Void,


	    #######################################
	    # Space and widget factory calls:

#	    packedspace:			ps::Packedspace_Arg -> psi::Packedspace_Egg,



	    #######################################
	    # Widget-customization stuff:

	    surround_color:		Ref( c64::Rgb ),				# By default light gray.

	    slight_darkening:		Ref( c64::Rgb -> c64::Rgb ),
	    medium_darkening:		Ref( c64::Rgb -> c64::Rgb ),
	    lavish_darkening:		Ref( c64::Rgb -> c64::Rgb ),

	    slight_graying:		Ref( c64::Rgb -> c64::Rgb ),
	    medium_graying:		Ref( c64::Rgb -> c64::Rgb ),
	    lavish_graying:		Ref( c64::Rgb -> c64::Rgb ),

	    slight_lightening:		Ref( c64::Rgb -> c64::Rgb ),
	    medium_lightening:		Ref( c64::Rgb -> c64::Rgb ),
	    lavish_lightening:		Ref( c64::Rgb -> c64::Rgb ),

	    rgb_to_rgb8:		Ref( Gadget_Palette -> Gadget_Palette8 ),

	    text_color:			Ref( Void -> c64::Rgb ),				# By default complement of surround_color, else black for good contrast.
	    normal_body_color:		Ref( Void -> c64::Rgb ),				# By default same as surround_color.
	    mouse_focus_body_color:	Ref( Void -> c64::Rgb ),				# By default a slightly-lightened shade of surround_color.	Used to make a button visibly react to having the mouse cursor over it.
	    sunny_bevel_color:		Ref( Void -> c64::Rgb ),				# By default a slightly-darkened  shade of surround_color.	Used for drawing "3-D" bevels around things.
	    shady_bevel_color:		Ref( Void -> c64::Rgb ),				# By default a     much-darkened  shade of surround_color.	Used for drawing "3-D" bevels around things.

	    current_gadget_colors:	Ref(  { gadget_is_on:		Bool,			# TRUE iff the pushbutton is in 'ON' state. Not very meaningful for non-button gadgets.
						gadget:			g2g::Gadget_Mode	# Tells us whether the gadget is inactive, if the mouse is over it etc.
					      }
					      ->
					      Gadget_Palette
					   )

#		make_button_displaylist:	Ref ((g2g::Gadget_Mode, Bool) -> Displaylist)	# Bool is on/off state of button,  shown by interchanging roles of light_edge_color and dark_edge_color.


	    #######################################
	    # Misc:


	  };
    };												# package packed_theme;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
