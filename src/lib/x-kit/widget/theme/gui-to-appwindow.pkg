## gui-to-appwindow.pkg
#
# This port passes requests from
#     src/lib/x-kit/widget/gui/gui-boss-imp.pkg
# to
#     src/lib/x-kit/widget/xkit/app/appwindow-for-x.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib



stipulate
    include threadkit;												# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
# XXX SUCKO FIXME For the moment we need 'exp' for the Draw_Op def,
# but the appwindow interface is intended to be renderlib-independent
# (i.e., X-independent).  So if we do wind up using Draw_Op as our
# cross-platform displaylist type, we should move Draw_Op into a
# separate package so that it can be shared without requiring
# xserver.pkg to be mentioned by non-X appwindow implementations.
#                                       -- 2014-04-27 CrT
    package w2x =  widget_to_xserver;										# widget_to_xserver		is from   src/lib/x-kit/xclient/src/window/widget-to-xserver.pkg
    package r8  =  rgb8;											# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package xg  =  xgeometry;											# xgeometry			is from   src/lib/std/2d/xgeometry.pkg
herein

    # This port is implemented in:
    #
    #     src/lib/x-kit/widget/xkit/app/appwindow-for-x.pkg
    #
    package gui_to_appwindow {
	#
	Draw_Op
	  = POLY_POINT     List( xg::Point )
	  | POLY_LINE      List( xg::Point )
	  | FILL_POLY      List( xg::Point )
	  | POLY_SEG       List( xg::Line  )
	  | POLY_BOX       List( xg::Box   )
	  | POLY_FILL_BOX  List( xg::Box   )
	  | POLY_ARC       List( xg::Arc   )
	  | POLY_FILL_ARC  List( xg::Arc   )
	  | CLEAR_AREA           xg::Box
	  ;
	  # Draw_Op is intended to be the cross-platform-portable
	  # subset of widget_to_xserver::x::Op									# widget_to_xserver		is from   src/lib/x-kit/xclient/src/window/widget-to-xserver.pkg
	  #
	  # The intent is that gui_to_appwindow should define a
	  # rendering model which is highly compatible with X
	  # (Mythryl's prime target) but able to be supported
	  # with reasonable effort on other platforms.

	Displaylist
	  =
	  List(Draw_Op);		# Later we'll introduce a hierarchical structure; this is an initial placeholder.

	Gui_To_Appwindow
	  =
	  { id:					Id,								# Unique id to facilitate storing appwindow instances in indexed datastructures like red-black trees.
	    #
	    draw_ops:				List( w2x::Draw_Op ) -> Void,					# This is just a passthrough to the xserver draw_ops fn -- see   src/lib/x-kit/xclient/src/window/xserver.pkg
	    draw_displaylist:			Displaylist -> Void,
	    pass_window_site:			Replyqueue -> (xg::Window_Site -> Void) -> Void,
	    do_something:			Int -> Void,							# Useless example which should be deleted in due course.
	    #
	    subscribe_to_changes:		( {								# This record is appwindow-for-x.pkg: Appwindow_Needs, but that name would produce a package cycle.
						    site:		xg::Window_Site,			# size-in-pixels + position of app window.
						    background_pixel:	r8::Rgb8				# Background color for appwindow.
					          }
						  -> Void
						)
						-> Void,
	    #
	    exercise_appwindow:			Void -> (Void -> Void),						# Executing returned thunk will wait for completion of window exercise.
	    pass_appwindow_exercise_results:	Replyqueue -> (Int -> Void) -> Void				#
	  };

	Appwindow_Needs
	  =
	  {
	    site:		xg::Window_Site,								# Requested size-in-pixels + position of app window.  (Window managers often ignore position part.)
	    background_pixel:	r8::Rgb8									# Background color for appwindow.
	  };


	Appwindow_Option
	  #
	  = MICROTHREAD_NAME		String									#
	  | ID				Id									# Unique ID for imp, issued by issue_unique_id::issue_unique_id().
	  | CHANGE_CALLBACK		Appwindow_Needs -> Void							# We'll call each of these callbacks each time our value changes.
	  | APPWINDOW_CALLBACK		Gui_To_Appwindow -> Void						# Client code registers this callback to get a port to us once we start up.
	  | BORDER_PIXEL		r8::Rgb8								# Window managers appear to ignore this value these days.
	  ;

	Appwindow_Arg = (Appwindow_Needs, List(Appwindow_Option));
    };														# package appwindow;
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Original code by Jeff Prothero Copyright (c) 2014-2015,
## released per terms of SMLNJ-COPYRIGHT.
