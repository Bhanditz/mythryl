## arrowbutton.api
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
#   package xc  =  xclient;							# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
    #
#   package d3  =  three_d;							# three_d			is from   src/lib/x-kit/widget/old/lib/three-d.pkg

    package gd  =  gui_displaylist;						# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
#   package g2g =  gadget_to_guiboss;						# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package w2p =  widget_to_widgetspace;					# widget_to_widgetspace		is from   src/lib/x-kit/widget/space/widget/widget-to-widgetspace.pkg
    package gt  =  guiboss_types;						# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package wt  =  widget_theme;						# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package wi  =  widget_imp;							# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;						# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package iul =  issue_unique_look_id;					# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/x-kit/widget/leaf/arrowbutton.pkg
    #
    api Arrowbutton {
	#
	package d: api {							# "d" for "direction"
	    #
	    Button_Direction    = UP
				| DOWN
				| LEFT
				| RIGHT
				;
	};

	package t: api {							# "d" for "type"
	    #
	    Button_Type		= MOMENTARY_CONTACT
				| PUSH_ON_PUSH_OFF
				;
	};

	App_To_Arrowbutton
	  =
	  { get_active:			Void -> Bool,
	    get_state:			Void -> Bool,
	    #
	    get_button_direction:	Void -> d::Button_Direction,		# 
	    get_button_relief:		Void -> wt::Relief,			# 
	    get_button_type:		Void -> t::Button_Type,			# 
	    #
	    set_active_to:		Bool -> Void,
	    set_state_to:		Bool -> Void,				# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	    set_button_direction_to:	d::Button_Direction -> Void,		# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	    set_button_relief_to:	wt::Relief -> Void			# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	  };

	Mousebutton_Fn
	  =
	  {
	    id:					iul::Id,						# Unique id.
	    event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
	    button:				evt::Mousebutton,
	    point:				g2d::Point,
	    site:				g2d::Box,						# Widget's assigned area in window coordinates.
	    modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
	    mousebuttons_state:		        evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
	    gadget_to_guiboss:			gt::Gadget_To_Guiboss,
	    widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
	    theme:				wt::Widget_Theme,
	    app_to_arrowbutton:			App_To_Arrowbutton
	  }
	  ->
	  Void;

	Button_Appearance_Fn_Arg
	  =
	  { frame_number:		Int,
	    site:			g2d::Box,
	    state:			Bool,
	    direction:			d::Button_Direction,
	    type:			t::Button_Type,
	    relief:			wt::Relief,
	    mode:			gt::Gadget_Mode				# Whether gadget has mouse focus etc.
	  };

	Button_Appearance_Fn
	  =
	  { this:			Button_Appearance_Fn_Arg,
	    theme:			wt::Widget_Theme
	  }
	  ->
	  { displaylist:		gd::Gui_Displaylist,
	    point_in_gadget:		Null_Or(g2d::Point -> Bool)		# 
	  }
	  ;

	Option	= PIXELS_SQUARE		Int					# ==  [ PIXELS_HIGH_MIN i,  PIXELS_WIDE_MIN i,  PIXELS_HIGH_CUT 0.0,  PIXELS_WIDE_CUT 0.0 ]
		#
		| PIXELS_HIGH_MIN	Int					# Give widget at least this many pixels vertically.
		| PIXELS_WIDE_MIN	Int					# Give widget at least this many pixels horizontally.
		#
		| PIXELS_HIGH_CUT	Float					# Give widget this big a share of remaining pixels vertically.    0.0 means to never expand it beyond its minimum size.
		| PIXELS_WIDE_CUT	Float					# Give widget this big a share of remaining pixels horizontally.  0.0 means to never expand it beyond its minimum size.
		#
		| INITIAL_STATE		Bool
		| INITIALLY_ACTIVE	Bool
		#
		| MOMENTARY_CONTACT						# State is non-default (opposite of INITIAL_STATE) only between mouse downclick and upclick.
		| PUSH_ON_PUSH_OFF						# Mouse downclicks toggle state between TRUE and FALSE.
		#
		| UP								# Arrow button will point up.
		| DOWN								# Arrow button will point down.
		| LEFT								# Arrow button will point left.
		| RIGHT								# Arrow button will point right.
		#
		| RELIEF		wt::Relief				# Should button boundary be drawn flat, raised, sunken, ridged or grooved?
		| MARGIN		Int					# How many pixels to inset button relative to its assigned window site.  Default is 4.
		| THICK			Int					# Thickness of lines (well, polygons) forming button.  Default is 5.
		| TEXT			String					# Text label to draw inside button.  Default is "".
		| FONT			List(String)				# Font to use for text label, e.g. "-*-courier-bold-r-*-*-20-*-*-*-*-*-*-*".  We'll use the first font in list which is found on X server, else "9x15" (which X guarantees to have).
		#
		| APPEARANCE		Button_Appearance_Fn
		#
		| STATE_WATCHER		(Bool -> Void)				# Widget's current state              will be sent to these fns each time state changes.
		| PORT_WATCHER		(App_To_Arrowbutton -> Void)  		# Widget's app port                   will be sent to these fns at widget startup.
		| SITE_WATCHER		(g2d::Box -> Void)			# Widget's site in window coordinates will be sent to these fns each time it changes.

		| POPUP_WATCHER		((g2d::Box, gt::Gui_Plan)
							    -> ( g2d::Box,
                                                                 gt::Client_To_Guiwindow
                                                               )
					) -> Void

		| MOUSE_TRANSIT_FN	wi::Mouse_Transit_Fn			# Application-specific handler for mouse enter/leave.
		| MOUSE_DRAG_FN		wi::Mouse_Drag_Fn			# Application-specific handler for mouse drags.
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	with:  List(Option) -> gt::Gp_Widget;
    };
end;


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
