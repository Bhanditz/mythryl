## frame.api
#
# API for widget which draws a frame around a group of widgets.
# This is support for RG_FRAME in   src/lib/x-kit/widget/gui/guiboss-types.pkg
#
# See also:
#     src/lib/x-kit/widget/leaf/arrowbutton.api
#     src/lib/x-kit/widget/leaf/boxbutton.api
#     src/lib/x-kit/widget/leaf/diamondbutton.api
#     src/lib/x-kit/widget/leaf/roundbutton.api

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
#   package xc  =  xclient;								# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
    #
#   package d3  =  three_d;								# three_d			is from   src/lib/x-kit/widget/old/lib/three-d.pkg

    package gd  =  gui_displaylist;							# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
#   package g2g =  gadget_to_guiboss;							# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package gt  =  guiboss_types;							# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package pt  =  widget_theme;							# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package wi  =  widget_imp;								# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;								# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/x-kit/widget/leaf/frame.pkg
    #
    api Frame {
	#
	Frame_Appearance_Fn_Arg
	  =
	  { frame_number:		Int,
	    site:			g2d::Box,
	    relief:			pt::Relief,
	    mode:			gt::Gadget_Mode					# Whether gadget has mouse focus etc.
	  };

	Frame_Appearance_Fn
	  =
	  { last:			Frame_Appearance_Fn_Arg,
	    this:			Frame_Appearance_Fn_Arg,
	    #
	    outer_margin_in_pixels:	Int,
	    inner_margin_in_pixels:	Int,
	    frame_width_in_pixels:		Int,
	    #
	    theme:			pt::Widget_Theme
	  }
	  ->
	  { displaylist:	gd::Gui_Displaylist,
	    point_in_gadget:	Null_Or(g2d::Point -> Bool)			# 
	  }
	  ;

	App_To_Frame
	  =
	  { 
	  };

	Option	= PIXELS_SQUARE			Int					# ==  [ PIXELS_HIGH_MIN i,  PIXELS_WIDE_MIN i,  PIXELS_HIGH_CUT 0.0,  PIXELS_WIDE_CUT 0.0 ]
		#
		| PIXELS_HIGH_MIN		Int					# Give widget at least this many pixels vertically.
		| PIXELS_WIDE_MIN		Int					# Give widget at least this many pixels horizontally.
		#
		| PIXELS_HIGH_CUT		Float					# Give widget this big a share of remaining pixels vertically.    0.0 means to never expand it beyond its minimum size.
		| PIXELS_WIDE_CUT		Float					# Give widget this big a share of remaining pixels horizontally.  0.0 means to never expand it beyond its minimum size.
		#
		| OUTER_MARGIN_IN_PIXELS	Int
		| INNER_MARGIN_IN_PIXELS	Int
		| FRAME_WIDTH_IN_PIXELS		Int
		#
		| APPEARANCE			Frame_Appearance_Fn
		| RELIEF			pt::Relief
		#
		| PORT_WATCHER			(App_To_Frame -> Void)  		# Widget's app port                   will be sent to these fns at widget startup.
		| SITE_WATCHER			(g2d::Box -> Void)			# Widget's site in window coordinates will be sent to these fns each time it changes.
		| POPUP_WATCHER			((g2d::Box, gt::Gui_Plan)
						    -> ( g2d::Box,
							 gt::Client_To_Guiwindow
						       )
						) -> Void

		| MOUSE_TRANSIT_FN		wi::Mouse_Transit_Fn			# Application-specific handler for mouse enter/leave.
		| MOUSE_DRAG_FN			wi::Mouse_Drag_Fn			# Application-specific handler for mouse motions.
		;									# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	with:  List(Option) -> gt::Gp_Widget;
    };
end;


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
