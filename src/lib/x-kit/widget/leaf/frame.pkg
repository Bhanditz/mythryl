# frame.pkg
#
# See also:
#     src/lib/x-kit/widget/leaf/frame.pkg
#     src/lib/x-kit/widget/leaf/diamondbutton.pkg
#     src/lib/x-kit/widget/leaf/roundbutton.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib





###                "The problem is to compress a room full
###                 of digital computation equipment into
###                 the size of a suitcase, then a shoe box,
###                 and finally small enough to hold in the
###                 palm of the hand."
###                                    -- Jack Staller, 1959

# This package gets used in:
#
#     

stipulate
    include package   threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    include package   geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
    package evt =  gui_event_types;						# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package g2p =  gadget_to_pixmap;						# gadget_to_pixmap		is from   src/lib/x-kit/widget/theme/gadget-to-pixmap.pkg
    package gd  =  gui_displaylist;						# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    package gt  =  guiboss_types;						# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package wt  =  widget_theme;						# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package r8  =  rgb8;							# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package r64 =  rgb;								# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
    package wi  =  widget_imp;							# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package g2j =  geometry2d_junk;						# geometry2d_junk		is from   src/lib/std/2d/geometry2d-junk.pkg
    package mtx =  rw_matrix;							# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg
    package pp  =  standard_prettyprint_mill;					# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package gtg =  guiboss_to_guishim;						# guiboss_to_guishim		is from   src/lib/x-kit/widget/theme/guiboss-to-guishim.pkg

    package iul =  issue_unique_look_id;					# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg

    nb =  log::note_on_stderr;							# log				is from   src/lib/std/src/log.pkg
herein

    package frame
    :	    Frame								# Frame			is from   src/lib/x-kit/widget/leaf/frame.api
    {
	App_To_Frame
	  =
	  { get_active:			Void -> Bool,
	    #
	    get_relief:			Void -> wt::Relief,			# 
	    #
	    set_active_to:		Bool -> Void,
	    set_relief_to:		wt::Relief -> Void			# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	  };


	Redraw_Fn_Arg
	    =
	    REDRAW_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		frame_number:			Int,				# 1,2,3,... Purely for convenience of widget, guiboss-imp makes no use of this.
		site:				g2d::Box,			# Window rectangle in which to draw.
		visible:			Bool,				# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
		popup_nesting_depth:		Int,				# 0 for gadgets on basewindow, 1 for gadgets on popup on basewindow, 2 for gadgets on popup on popup, etc.
		#
		duration_in_seconds:		Float,				# If state has changed look-imp should call note_changed_gadget_foreground() before this time is up. Also useful for motionblur.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		gadget_mode:			gt::Gadget_Mode,
		#
		outer_margin_in_pixels:		Int,
		inner_margin_in_pixels:		Int,
		frame_width_in_pixels:		Int,
		#
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		palette:			wt::Gadget_Palette,
		#
		default_redraw_fn:		Redraw_Fn,
		#
		relief:				wt::Relief			# Is the frame outline a slope, a ridge, or a flat band?
	      }
	withtype
	Redraw_Fn
	  =
	  Redraw_Fn_Arg
	  ->
	  { displaylist:		gd::Gui_Displaylist,
	    point_in_gadget:		Null_Or(g2d::Point -> Bool)		# 
	  }
	  ;



	Mouse_Click_Fn_Arg
	    =
	    MOUSE_CLICK_FN_ARG							# Needs to be a sumtype because of recursive reference in default_mouse_click_fn.
	      { id:				iul::Id,			# Unique id.
		event:				gt::Mousebutton_Event,		# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
		button:				evt::Mousebutton,		# Which mousebutton was pressed/released.
		point:				g2d::Point,			# Where the mouse was.
		widget_layout_hint:		gt::Widget_Layout_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:		evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		#
		default_mouse_click_fn:		Mouse_Click_Fn,
		#
		relief:				Ref(wt::Relief),		# Is the frame outline a slope, a ridge, or a flat band?
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Click_Fn = Mouse_Click_Fn_Arg -> Void;



	Mouse_Drag_Fn_Arg
	    =
	    MOUSE_DRAG_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		event_point:			g2d::Point,
		start_point:			g2d::Point,
		last_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		phase:				gt::Drag_Phase,	
		button:				evt::Mousebutton,
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		#
		default_mouse_drag_fn:		Mouse_Drag_Fn,
		#
		relief:				Ref(wt::Relief),		# Is the frame outline a slope, a ridge, or a flat band?
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Drag_Fn =  Mouse_Drag_Fn_Arg -> Void;



	Mouse_Transit_Fn_Arg							# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
	    =
	    MOUSE_TRANSIT_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		event_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		transit:			gt::Gadget_Transit,		# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		#
		default_mouse_transit_fn:	Mouse_Transit_Fn,
		#
		relief:				Ref(wt::Relief),		# Is the frame outline a slope, a ridge, or a flat band?
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Transit_Fn =  Mouse_Transit_Fn_Arg -> Void;



	Key_Event_Fn_Arg
	    =
	    KEY_EVENT_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		key_event:			gt::Key_Event,			# KEY_PRESS or KEY_RELEASE
		keycode:			evt::Keycode,			# Keycode of the depressed key.
		keysym:				evt::Keysym,			# Keysym  of the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
		string:				String,				# Ascii  for the depressed key.  See Note[1] in src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.api
		char:				Char,				# First char of 'string' ('\0' if string-length != 1).
		event_point:			g2d::Point,
		widget_layout_hint:		gt::Widget_Layout_Hint,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		widget_to_guiboss:		gt::Widget_To_Guiboss,
		theme:				wt::Widget_Theme,
		do:				(Void -> Void) -> Void,		# Used by widget subthreads to execute code in main widget microthread.
		#
		default_key_event_fn:		Key_Event_Fn,
		#
		relief:				Ref(wt::Relief),		# Is the frame outline a slope, a ridge, or a flat band?
		#
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Key_Event_Fn =  Key_Event_Fn_Arg -> Void;



	Option	= PIXELS_SQUARE		Int
		#
		| PIXELS_HIGH_MIN	Int
		| PIXELS_WIDE_MIN	Int
		#
		| PIXELS_HIGH_CUT	Float
		| PIXELS_WIDE_CUT	Float
		#
		| INITIALLY_ACTIVE	Bool
		#
		| OUTER_MARGIN_IN_PIXELS	Int
		| INNER_MARGIN_IN_PIXELS	Int
		| FRAME_WIDTH_IN_PIXELS		Int
		#
		| RELIEF		wt::Relief				# Should button boundary be drawn flat, raised, sunken, ridged or grooved?
		| MARGIN		Int					# How many pixels to inset button relative to its assigned window site.  Default is 4.
		| THICK			Int					# Thickness of lines (well, polygons) forming button.  Default is 5.
		| TEXT			String					# Text label to draw inside button.  Default is "".
		| FONT			List(String)				# Font to use for text label, e.g. "-*-courier-bold-r-*-*-20-*-*-*-*-*-*-*".  We'll use the first font in list which is found on X server, else "9x15" (which X guarantees to have).
		#
		| REDRAW_FN		Redraw_Fn				# Application-specific handler for widget redraw.
		| MOUSE_CLICK_FN	Mouse_Click_Fn				# Application-specific handler for mousebutton clicks.
		| MOUSE_DRAG_FN		Mouse_Drag_Fn				# Application-specific handler for mouse drags.
		| MOUSE_TRANSIT_FN	Mouse_Transit_Fn			# Application-specific handler for mouse crossings.
		| KEY_EVENT_FN		Key_Event_Fn				# Application-specific handler for keyboard input.
		#
		| PORTWATCHER		(Null_Or(App_To_Frame) -> Void)		# Widget's app port                   will be sent to these fns at widget startup.
		| SITEWATCHER		(Null_Or(g2d::Box) -> Void)		# Widget's site in window coordinates will be sent to these fns each time it changes.
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	fun process_options
	    ( options: List(Option),
	      #
	      {	relief,
		margin,
		thick,
		text,
		font,
		#
		outer_margin_in_pixels,
		inner_margin_in_pixels,
		frame_width_in_pixels,
		#
		redraw_fn,
		mouse_click_fn,
		mouse_drag_fn,
		mouse_transit_fn,
		key_event_fn,
		#
		initially_active,
		#
		widget_options,
	        #
		portwatchers,
		sitewatchers
	      }
	    )
	    =
	    {   my_relief		=  REF  relief;
		my_margin		=  REF  margin;
		my_thick		=  REF  thick;
		my_text			=  REF  text;
		my_font			=  REF  font;
		#
		my_outer_margin_in_pixels	=  REF  outer_margin_in_pixels;
		my_inner_margin_in_pixels	=  REF  inner_margin_in_pixels;
		my_frame_width_in_pixels	=  REF  frame_width_in_pixels;
		#
		my_redraw_fn		=  REF  redraw_fn;
		my_mouse_click_fn	=  REF  mouse_click_fn;
		my_mouse_drag_fn	=  REF  mouse_drag_fn;
		my_mouse_transit_fn	=  REF  mouse_transit_fn;
		my_key_event_fn		=  REF  key_event_fn;
		#
		my_initially_active	=  REF  initially_active;
		#
		my_widget_options	=  REF  widget_options;
		#
		my_portwatchers		=  REF  portwatchers;
		my_sitewatchers		=  REF  sitewatchers;
		#

		apply  do_option  options
		where
		    fun do_option (INITIALLY_ACTIVE		b) =>   my_initially_active	:=  b;
			#
			do_option (RELIEF			r) =>   my_relief		:=  r;
			do_option (MARGIN			i) =>   my_margin		:=  i;
			do_option (THICK			i) =>   my_thick		:=  i;
			do_option (TEXT				t) =>   my_text			:=  t;
			do_option (FONT				t) =>   my_font			:=  t;
			#
			do_option (OUTER_MARGIN_IN_PIXELS	i) =>   my_outer_margin_in_pixels	:=  i;
			do_option (INNER_MARGIN_IN_PIXELS	i) =>   my_inner_margin_in_pixels	:=  i;
			do_option (FRAME_WIDTH_IN_PIXELS	i) =>   my_frame_width_in_pixels	:=  i;
			#
			do_option (REDRAW_FN			f) =>   my_redraw_fn		:=  f;
			do_option (MOUSE_CLICK_FN		f) =>   my_mouse_click_fn	:=  f;
			do_option (MOUSE_DRAG_FN		f) =>	my_mouse_drag_fn	:=  THE f;
			do_option (MOUSE_TRANSIT_FN		f) =>	my_mouse_transit_fn	:=  THE f;
			do_option (KEY_EVENT_FN			f) =>	my_key_event_fn		:=  THE f;
			#
			do_option (PORTWATCHER			c) =>	my_portwatchers		:=  c ! *my_portwatchers;
			do_option (SITEWATCHER			c) =>	my_sitewatchers		:=  c ! *my_sitewatchers;
			#
			#
			do_option (PIXELS_HIGH_MIN		i) =>   my_widget_options	:=  (wi::PIXELS_HIGH_MIN i) ! *my_widget_options;
			do_option (PIXELS_WIDE_MIN		i) =>   my_widget_options	:=  (wi::PIXELS_WIDE_MIN i) ! *my_widget_options;
			#
			do_option (PIXELS_HIGH_CUT		f) =>   my_widget_options	:=  (wi::PIXELS_HIGH_CUT f) ! *my_widget_options;
			do_option (PIXELS_WIDE_CUT		f) =>   my_widget_options	:=  (wi::PIXELS_WIDE_CUT f) ! *my_widget_options;
			#
			do_option (PIXELS_SQUARE		i) =>   my_widget_options	:=  (wi::PIXELS_HIGH_MIN   i)
												!   (wi::PIXELS_WIDE_MIN   i)
												!   (wi::PIXELS_HIGH_CUT 0.0)
												!   (wi::PIXELS_WIDE_CUT 0.0)
												!   *my_widget_options;
		    end;
		end;

		{ relief		=>  *my_relief,
		  margin		=>  *my_margin,
		  thick			=>  *my_thick,
		  text			=>  *my_text,
		  font			=>  *my_font,
		  #
		  outer_margin_in_pixels	=>  *my_outer_margin_in_pixels,
		  inner_margin_in_pixels	=>  *my_inner_margin_in_pixels,
		  frame_width_in_pixels		=>  *my_frame_width_in_pixels,
		  #
		  redraw_fn		=>  *my_redraw_fn,
		  mouse_click_fn	=>  *my_mouse_click_fn,
		  mouse_drag_fn		=>  *my_mouse_drag_fn,
		  mouse_transit_fn	=>  *my_mouse_transit_fn,
		  key_event_fn		=>  *my_key_event_fn,
		  #
		  initially_active	=>  *my_initially_active,
		  #
		  widget_options	=>  *my_widget_options,
		  #
		  portwatchers		=>  *my_portwatchers,
		  sitewatchers		=>  *my_sitewatchers
		};
	    };


	offset = 1;

	fun with (options: List(Option))								# PUBLIC
	    =
	    {
		thickref  = REF 5;									# Thickness for lines delineating the box.  We need this little REF hack
													# because default_redraw_fn is an input to process_options() but 'thick'
													# is an output from process_options(), so something has to give a bit.

		reliefref = REF wt::RAISED;								# Same story.
		marginref = REF 4;									# Same story.

		textref   = REF "";									# Same story.

		fontref   = REF [ ];									# Same story.

		fun default_redraw_fn (REDRAW_FN_ARG a)
		    =
		    {	frame_width_in_pixels	=  a.frame_width_in_pixels;
			inner_margin_in_pixels	=  a.inner_margin_in_pixels;
			outer_margin_in_pixels	=  a.outer_margin_in_pixels;
			palette			=  a.palette;
			relief			=  a.relief;
			site			=  a.site;
			theme			=  a.theme;
			thick			=  a.frame_width_in_pixels;

			stipulate												# then carefully work through the code here based on that.  XXX SUCKO FIXME.
			    inset = outer_margin_in_pixels + frame_width_in_pixels;
			herein
			    fun frame_vertices ({ row, col, wide, high }: g2d::Box)						#
				    = 												#
				    [ { col=> col + inset - 1,        row=> row + inset		   },				# upper-left
				      { col=> col + inset - 1,        row=> row + high - (inset+1) },				# lower-left
				      { col=> col + wide - (inset+1), row=> row + high - (inset+1) },				# lower-right
				      { col=> col + wide - (inset+1), row=> row + inset		   }				# upper-right
				    ];
			end;

			background_box =  site;

			foreground_indent = outer_margin_in_pixels
					  + inner_margin_in_pixels
					  + frame_width_in_pixels
					  ;	
			foreground_box    =  g2d::box::make_nested_box (background_box, foreground_indent);			# This is the window area reserved for the widgets we're framing.

			background_displaylist 											# The 'background' for the frame is the part not covered by the 3d polygon.
			    =													# In particular, we do NOT want to draw over the inner rectangle reserved
			    [ gd::COLOR												# for the widgets within the frame.
				(
				  palette.surround_color,
				  #
				  [ gd::FILLED_BOXES (g2d::box::subtract_box_b_from_box_a
						       {
							 a => background_box,
							 b => foreground_box
						       }
						     )
				  ]
				)
			    ];

			points =  frame_vertices  background_box;

			foreground_displaylist
			    =
			    (*theme.polygon3d  palette
			      {
				points,
				thick,
				relief
			      }
			    );


			stipulate
			    frame_outer_limit =  g2d::box::make_nested_box (background_box, outer_margin_in_pixels                        );
			    frame_inner_limit =  g2d::box::make_nested_box (background_box, outer_margin_in_pixels + frame_width_in_pixels);
			herein
			    fun point_in_gadget (point: g2d::Point)								# A fn which will return TRUE iff the point is on the 3d frame itself, not the surround -- much less the inner widgets.
				=
				(    (g2d::box::point_in_box (point, frame_outer_limit)))  and
				(not (g2d::box::point_in_box (point, frame_inner_limit)));
			end;

			point_in_gadget =  THE  point_in_gadget;
			displaylist     =  background_displaylist @ foreground_displaylist;

			{ displaylist, point_in_gadget };
		    };

		fun default_mouse_click_fn (MOUSE_CLICK_FN_ARG a)
		    =
		    {
			();
		    };

	        (process_options
		  (
		    options,
		    #
		    { relief		=>  *reliefref,	
		      margin		=>  *marginref,
		      thick		=>  *thickref,
		      text		=>  *textref,
		      font		=>  *fontref,
		      #
		      outer_margin_in_pixels	=>  2,								# where the sum (9) is hardwired as 'indent'.  Yes, this sucks -- feel free to contribute a clean fix.  XXX SUCKO FIXME.
		      frame_width_in_pixels	=>  5,								# polygon3d result will probably look odd if this is not an odd number.
		      inner_margin_in_pixels	=>  2,								#
		      #
		      redraw_fn		=>  default_redraw_fn,
		      mouse_click_fn	=>  default_mouse_click_fn,
		      mouse_drag_fn	=>  NULL,
		      mouse_transit_fn	=>  NULL,
		      key_event_fn	=>  NULL,
		      #
		      initially_active	=>  TRUE,
		      #
		      widget_options	=>  [],
		      #
		      portwatchers	=>  [],
		      sitewatchers	=>  []
		    }
		) )
		    ->
		    {												# These values are globally visible to the subsequenc fns, which can lock them in as needed.
		      relief,
		      margin,
		      thick,
		      text,
		      font,
		      #
		      outer_margin_in_pixels,
		      inner_margin_in_pixels,
		      frame_width_in_pixels,
		      #
		      redraw_fn,
		      mouse_click_fn,
		      mouse_drag_fn,
		      mouse_transit_fn,
		      key_event_fn,
		      #
		      initially_active,
		      #
		      widget_options,
		      #
		      portwatchers,
		      sitewatchers
		    };

		thickref  := thick;
		reliefref := relief;
		marginref := margin;
		textref   := text;
		fontref   := font;


		###############################
		# Top of state variable section
		#

		widget_to_guiboss__global
		    =
		    REF (NULL:  Null_Or((gt::Widget_To_Guiboss, iul::Id)));

		fun note_changed_gadget_activity (is_active: Bool)
		    =
		    case (*widget_to_guiboss__global)
			#
			THE (widget_to_guiboss, id)	=>  widget_to_guiboss.g.note_changed_gadget_activity { id, is_active };
			NULL				=>  ();
		    esac;

		fun needs_redraw_gadget_request ()
		    =
		    case (*widget_to_guiboss__global)
			#
			THE (widget_to_guiboss, id)	=>  widget_to_guiboss.g.needs_redraw_gadget_request(id);
			NULL				=>  ();
		    esac;


		last_known_site
		    =
		    REF ( { col => -1,  wide => -1,
			    row => -1,  high => -1
			  }:				g2d::Box
			);

		button_active
		    =
		    REF initially_active;


		exception SAVED_STATE { last_known_site:	g2d::Box,					# Here we're doing the usual hack of using Exception as an extensible datatype -- nothing to do with actually raising or trapping exceptions.
					button_active:		Bool
				      };	


		fun note_site (site: g2d::Box)
		    =
		    if(*last_known_site != site)
			last_known_site := site;
			#
			apply tell_watcher sitewatchers
			    where
				fun tell_watcher sitewatcher
				    =
				    sitewatcher (THE site);
			    end;
		    fi;

		#
		# End of state variable section
		###############################


		#####################
		# Top of port section
		#
		# Here we implement our App_To_Frame port:

		fun set_active_to (is_active: Bool)
		    =
		    {   button_active :=  is_active;
			#
			note_changed_gadget_activity  is_active;
		    };

		fun set_relief_to (relief: wt::Relief)
		    =
		    {
			reliefref := relief;
			#
			needs_redraw_gadget_request ();
		    };

		fun get_active ()
		    =
		    *button_active;

		fun get_relief ()
		    =
		    *reliefref;

		app_to_frame
		  =
		  { get_active,
		    get_relief,
		    #
		    set_active_to,
		    set_relief_to
		  }
		  : App_To_Frame
		  ;

		#
		# End of port section
		#####################


		###############################
		# Top of widget hook fn section
		#
		# These fns get called by widget_imp logic, ultimately						# widget_imp		is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		# in response to user mouseclicks and keypresses etc:

		fun startup_fn
		    { 
		      id:				iul::Id,						# Unique id.
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      saved_widget_state:		Null_Or(Exception),
		      do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
		    }
		    =
		    {	widget_to_guiboss__global
			    :=  
			    THE (widget_to_guiboss, id);

			case saved_widget_state
			    #
			    THE (SAVED_STATE r)									# Widget is being restarted after an earlier run.
				=>
				{ last_known_site   := r.last_known_site;					# Restore saved state.
				  button_active	    := r.button_active;
				};

			    THE _ =>										# This shouldn't happen; guiboss_imp must have mistakenly given us another widget's saved state. (Type system cannot prevent this.)
				{   msg = "Wrong saved state! -- startup_fn in frame.pkg";
				    log::fatal           msg;							# log			is from   src/lib/std/src/log.pkg
				    raise exception FAIL msg;							# Previous won't return, but type does not (yet?) indicate that properly.
				};

			    NULL => ();										# No saved state: We must be newly created in a fresh session.
			esac;

			apply   tell_watcher  portwatchers							# We do this here rather than (say) above this fn because we don't want the port in circulation until we're running.
				where
				    fun tell_watcher  portwatcher
					=
					portwatcher  (THE app_to_frame);
				end;
			();
		    };

		fun shutdown_fn ()										# Return to widget_imp an exception packaging up our state; this will be returned to guiboss_imp, saved in the
		    =												# Paused_Gui tree, and passed to our startup_fn when/if gui is restarted. This exception will never be raised;
		    {	apply   tell_watcher  portwatchers							# 
				where
				    fun tell_watcher  portwatcher
					=
					portwatcher  NULL;
				end;

			apply tell_watcher sitewatchers
			    where
				fun tell_watcher sitewatcher
				    =
				    sitewatcher NULL;
			    end;

			THE (SAVED_STATE  { last_known_site	=> *last_known_site,				# Exception is being used here purely as an extensible datatype.
					    button_active	=> *button_active
					  }	
			    );
		    };

		fun initialize_gadget_fn
		    {
		      id:				iul::Id,						# Unique id.
		      site:				g2d::Box,						# Window rectangle in which to draw.
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      theme:				wt::Widget_Theme,
		      pass_font:			List(String) -> Replyqueue
								     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
		       get_font:			List(String) ->	 evt::Font,				# Accepts a list of font names which are tried in order.
		      make_rw_pixmap:			g2d::Size -> g2p::Gadget_To_Rw_Pixmap,
		      #
		      do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
		    }
		    =
		    {	note_site site;
			#
			();
		    };

		fun redraw_request_fn_wrapper
		    {
		      id:				iul::Id,			# Unique id.
		      frame_number:			Int,				# 1,2,3,... Purely for convenience of widget-imp, guiboss-imp makes no use of this.
		      site:				g2d::Box,			# Window rectangle in which to draw.
		      visible:				Bool,				# If FALSE, widget is not visible on screen, so widget-imp may be able to avoid updating foreground and background.
		      popup_nesting_depth:		Int,				# 0 for gadgets on basewindow, 1 for gadgets on popup on basewindow, 2 for gadgets on popup on popup, etc.
		      #
		      duration_in_seconds:		Float,				# If state has changed widget-imp should call redraw_gadget() before this time is up. Also useful for motionblur.
		      widget_to_guiboss:		gt::Widget_To_Guiboss,
		      gadget_mode:			gt::Gadget_Mode,
		      #
		      theme:				wt::Widget_Theme,
		      do:				(Void -> Void) -> Void
		    }
		    =
		    {	note_site site;
			#
			(*theme.current_gadget_colors {	gadget_is_on => FALSE,
							gadget_mode,
							popup_nesting_depth,
							#
							body_color			    => NULL,
							body_color_when_on		    => NULL,
							body_color_with_mousefocus	    => NULL,
							body_color_when_on_with_mousefocus  => NULL
						      }
			)
			    ->
			    (palette: wt::Gadget_Palette);

			redraw_fn_arg
			    =
			    REDRAW_FN_ARG
			      { id,
				frame_number,
				site,
				visible,
				popup_nesting_depth,
				duration_in_seconds,
				widget_to_guiboss,
				gadget_mode,
				outer_margin_in_pixels,
				inner_margin_in_pixels,
				frame_width_in_pixels,
				theme,
				do,
				palette,
				#
				default_redraw_fn,	
				#
				relief    => *reliefref
			      };

			(redraw_fn  redraw_fn_arg)
			    ->
			    { displaylist, point_in_gadget };

			widget_to_guiboss.g.redraw_gadget { id, site, displaylist, point_in_gadget };
		    };


		fun mouse_click_fn_wrapper									# This a callback we hand to   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		      {
			id:				iul::Id,						# Unique id.
			event:				gt::Mousebutton_Event,					# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
			button:				evt::Mousebutton,
			point:				g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
		      }
		    = 
		    {	note_site  site;
			#
			mouse_click_fn_arg
			    =
			    MOUSE_CLICK_FN_ARG
			      {
				id,
				event,
				button,
				point,
				widget_layout_hint,
				site,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				#
				default_mouse_click_fn,
				#
				relief	=>  reliefref,
				#
				needs_redraw_gadget_request
			      };

			mouse_click_fn  mouse_click_fn_arg;
		    };

		fun mouse_drag_fn_wrapper									# This a callback we hand to   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
		    (
		      {	id:				iul::Id,						# Unique id.
			event_point:			g2d::Point,
			start_point:			g2d::Point,
			last_point:			g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			site:				g2d::Box,						# Widget's assigned area in window coordinates.
			phase:				gt::Drag_Phase,	
			button:				evt::Mousebutton,
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
		      }
		    )
		    = 
		    {	note_site  site;
			#
			mouse_drag_fn_arg
			    =
			    MOUSE_DRAG_FN_ARG
			      {
				id,
				event_point,
				start_point,
				last_point,
				widget_layout_hint,
				site,
				phase,
				button,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				#
				default_mouse_drag_fn =>  \\ _ = (),						# Default drag behavior for buttons is to do absolutely nothing.
				#
				relief	=>  reliefref,
				#
				needs_redraw_gadget_request
			      };

			case mouse_drag_fn
			    #
			    THE mouse_drag_fn =>   mouse_drag_fn  mouse_drag_fn_arg;
			    NULL	      =>   ();								# We do not expect this case to happen: If mouse_drag_fn is NULL mouse_drag_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;
		    };

		fun mouse_transit_fn_wrapper
		      #
		      ( arg as
			{
			  id:				iul::Id,						# Unique id.
			  event_point:			g2d::Point,
			  widget_layout_hint:		gt::Widget_Layout_Hint,
			  site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			  transit:			gt::Gadget_Transit,					# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
			  modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			  widget_to_guiboss:		gt::Widget_To_Guiboss,
			  theme:			wt::Widget_Theme,
			  do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
			}
		      )	
		    = 
		    {	note_site site;
			#
			mouse_transit_fn_arg
			    =
			    MOUSE_TRANSIT_FN_ARG
			      {
				id,
				event_point,
				widget_layout_hint,
				site,
				transit,
				modifier_keys_state,
				widget_to_guiboss,
				theme,
				do,
				#
				default_mouse_transit_fn =>  \\ _ = (),						# Default transit behavior for buttons is to do absolutely nothing.
				#
				relief	=>  reliefref,
				#
				needs_redraw_gadget_request
			      };

			case mouse_transit_fn
			    #
			    THE mouse_transit_fn =>   mouse_transit_fn  mouse_transit_fn_arg;
			    NULL	         =>   ();							# We do not expect this case to happen: If mouse_transit_fn is NULL mouse_transit_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;

			();
		    };

		fun key_event_fn_wrapper
		      {
			id:				iul::Id,						# Unique id.
			key_event:			gt::Key_Event,						# KEY_PRESS or KEY_RELEASE.
			keycode:			evt::Keycode,						# Keycode of the depressed key.
			keysym:				evt::Keysym,						# Keysym  of the depressed key.
			string:				String,							# Ascii  for the depressed key.
			char:				Char,							# First char of 'string' ('\0' if string-length != 1).
			event_point:			g2d::Point,
			widget_layout_hint:		gt::Widget_Layout_Hint,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:	        evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons as a bool record.
			widget_to_guiboss:		gt::Widget_To_Guiboss,
			theme:				wt::Widget_Theme,
			do:				(Void -> Void) -> Void					# Used by widget subthreads to execute code in main widget microthread.
		      }
		    = 
		    {	note_site site;
			#
			key_event_fn_arg
			    =
			    KEY_EVENT_FN_ARG
			      {
				id,
				key_event,
				keycode,
				keysym,
				string,
				char,
				event_point,
				widget_layout_hint,
				site,
				modifier_keys_state,
				mousebuttons_state,
				widget_to_guiboss,
				theme,
				do,
				#
				default_key_event_fn =>  \\ _ = (),						# Default key event behavior for frame is to do absolutely nothing.
				#
				relief	=>  reliefref,
				#
				needs_redraw_gadget_request
			      };

			case key_event_fn
			    #
			    THE key_event_fn =>   key_event_fn  key_event_fn_arg;
			    NULL	     =>   ();								# We do not expect this case to happen: If key_event_fn is NULL key_event_fn_wrapper should not have been registered with widget-imp so we should never get called.
			esac;

		       ();
		    };


		#
		# End of widget hook fn section
		###############################

		widget_options
		    =
		    case mouse_drag_fn
			#
			THE _ =>  (wi::MOUSE_DRAG_FN mouse_drag_fn_wrapper)       ! widget_options;		# Register for drag events only if we are going to use them.
			NULL  =>					            widget_options;
		    esac;

		widget_options
		    =
		    case mouse_transit_fn
			#
			THE _ =>  (wi::MOUSE_TRANSIT_FN mouse_transit_fn_wrapper) ! widget_options;		# Register for transit events only if we are going to use them.
			NULL  =>						    widget_options;
		    esac;

		widget_options
		    =
		    case key_event_fn
			#
			THE _ =>  (wi::KEY_EVENT_FN key_event_fn_wrapper)	  ! widget_options;		# Register for key events only if we are going to use them.
			NULL  =>						    widget_options;
		    esac;

		widget_options
		  =
		  [ wi::STARTUP_FN			startup_fn,						# We always register for these five because our base behavior depends on them.
		    wi::SHUTDOWN_FN			shutdown_fn,
		    wi::INITIALIZE_GADGET_FN		initialize_gadget_fn,
		    wi::REDRAW_REQUEST_FN		redraw_request_fn_wrapper,
		    wi::MOUSE_CLICK_FN			mouse_click_fn_wrapper
		  ]
		  @
		  widget_options
		  ;

		make_widget_fn =  wi::make_widget_start_fn  widget_options;

		gt::WIDGET   make_widget_fn;									# So caller can write   guiplan = gt::ROW [ frame::with [...], frame::with [...], ... ];
	    };													# PUBLIC
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
