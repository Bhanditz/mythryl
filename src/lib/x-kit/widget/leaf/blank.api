## blank.api
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
#   package xc  =  xclient;							# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
    #
#   package d3  =  three_d;							# three_d			is from   src/lib/x-kit/widget/old/lib/three-d.pkg

    package gd  =  gui_displaylist;						# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
#   package g2g =  gadget_to_guiboss;						# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package gt  =  guiboss_types;						# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package plh =  widgetspace_layout_hint;					# widgetspace_layout_hint	is from   src/lib/x-kit/widget/space/widget/widgetspace-layout-hint.pkg
    package pt  =  widget_theme;						# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package wi  =  widget_imp;							# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/x-kit/widget/leaf/blank.pkg
    #
    api Blank {
	#
	package d: api {							# "d" for "direction"
	    #
	    Button_Direction    = UP
				| DOWN
				| LEFT
				| RIGHT
				;
	};

	package t: api {							# "d" for "type"
	    #
	    Button_Type		= MOMENTARY_CONTACT
				| PUSH_ON_PUSH_OFF
				;
	};

	Button_Appearance_Fn_Arg
	  =
	  { frame_number:		Int,
	    site:			g2d::Box,
	    state:			Bool,
	    direction:			d::Button_Direction,
	    type:			t::Button_Type,
# Strictly for debugging:
relief: pt::Relief,
	    mode:			gt::Gadget_Mode				# Whether gadget has mouse focus etc.
	  };

	Button_Appearance_Fn
	  =
	  { last:			Button_Appearance_Fn_Arg,
	    this:			Button_Appearance_Fn_Arg,
	    theme:			pt::Widget_Theme
	  }
	  ->
	  Null_Or { displaylist:	gd::Gui_Displaylist,
		    point_in_gadget:	Null_Or(g2d::Point -> Bool)		# 
		  }
	  ;

	App_To_Blank
	  =
	  { set_active_to:		Bool -> Void,
	    set_state_to:		Bool -> Void,
	    #
	    get_active:			Void -> Bool,
	    get_state:			Void -> Bool,
	    #
	    get_button_direction:	Void -> d::Button_Direction,		# We deliberately do not provide a 'set' fn for this -- button direction should be selected at configuration time not runtime.
	    get_button_type:		Void -> t::Button_Type			# We deliberately do not provide a 'set' fn for this -- button type      should be selected at configuration time not runtime.
	  };

	Option	= UP
		| DOWN
		| LEFT
		| RIGHT
		#
		| PIXELS_SQUARE		Int
		#
		| PIXELS_HIGH_MIN	Int
		| PIXELS_WIDE_MIN	Int
		#
		| PIXELS_HIGH_CUT	Float
		| PIXELS_WIDE_CUT	Float
		#
		| INITIAL_STATE		Bool
		| INITIALLY_ACTIVE	Bool
		#
		| MOMENTARY_CONTACT						# State is non-default (opposite of INITIAL_STATE) only between mouse downclick and upclick.
		| PUSH_ON_PUSH_OFF						# Mouse downclicks toggle state between TRUE and FALSE.
		#
		| APPEARANCE		Button_Appearance_Fn
		#
		| STATE_WATCHER		(Bool -> Void)				# Widget's current state              will be sent to these fns each time state changes.
		| PORT_WATCHER		(App_To_Blank -> Void)  		# Widget's app port                   will be sent to these fns at widget startup.
		| SITE_WATCHER		(g2d::Box -> Void)			# Widget's site in window coordinates will be sent to these fns each time it changes.
# This is intended as a very temporary checkout hack:
		| MOUSE_WATCHER		(g2d::Point -> Void)  			# 
# Ditto:
		| POPUP_WATCHER		((g2d::Box, gt::Gui_Plan)
							    -> ( g2d::Box,
                                                                 gt::Client_To_Guiwindow
                                                               )
					) -> Void

		| MOUSE_DRAG_FN		wi::Mouse_Drag_Fn			# Application-specific handler for mouse motions.
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	with:  List(Option) -> (List(plh::Widgetspace_Layout_Hint), gt::Widget_Widget);
    };
end;


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
