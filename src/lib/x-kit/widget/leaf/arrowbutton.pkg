## arrowbutton.pkg
#
# See also:
#     src/lib/x-kit/widget/leaf/boxbutton.pkg
#     src/lib/x-kit/widget/leaf/diamondbutton.pkg
#     src/lib/x-kit/widget/leaf/roundbutton.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib





###                "The problem is to compress a room full
###                 of digital computation equipment into
###                 the size of a suitcase, then a shoe box,
###                 and finally small enough to hold in the
###                 palm of the hand."
###                                    -- Jack Staller, 1959

# This package gets used in:
#
#     

stipulate
    include package   threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    include package   geometry2d;					# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
#   package xc  =  xclient;						# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
    #
#   package d3  =  three_d;						# three_d			is from   src/lib/x-kit/widget/old/lib/three-d.pkg

    package evt =  gui_event_types;					# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package g2g =  gadget_to_guiboss;					# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package gd  =  gui_displaylist;					# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
    package gp  =  gui_plan;						# gui_plan			is from   src/lib/x-kit/widget/gui/gui-plan.pkg
    package gt  =  gui_types;						# gui_types			is from   src/lib/x-kit/widget/gui/gui-types.pkg
    package pt  =  packed_theme;					# packed_theme			is from   src/lib/x-kit/widget/theme/packed/packed-theme.pkg
    package r8  =  rgb8;						# rgb8				is from   src/lib/x-kit/xclient/src/color/rgb8.pkg
    package r64 =  rgb;							# rgb				is from   src/lib/x-kit/xclient/src/color/rgb.pkg
    package w2p =  widget_to_packedspace;				# widget_to_packedspace		is from   src/lib/x-kit/widget/space/packed/look-to-packed.pkg
    package wi  =  widget_imp;						# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.pkg
    package g2d =  geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package mtx =  rw_matrix;						# rw_matrix			is from   src/lib/std/src/rw-matrix.pkg

    package iul =  issue_unique_look_id;				# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
    package plh =  packedspace_layout_hint;				# packedspace_layout_hint	is from   src/lib/x-kit/widget/space/packed/packedspace-layout-hint.pkg

    nb =  log::note_on_stderr;						# log				is from   src/lib/std/src/log.pkg
herein

    package arrowbutton
    :	    Arrowbutton							# Arrowbutton			is from   src/lib/x-kit/widget/leaf/arrowbutton.api
    {
	package d {							# "d" for "direction"
	    #
	    Button_Direction    = UP
				| DOWN
				| LEFT
				| RIGHT
				;
	};

	package t {							# "t" for "type"
	    #
	    Button_Type		= MOMENTARY_CONTACT
				| PUSH_ON_PUSH_OFF
				;
	};

	Button_Appearance_Fn_Arg
	  =
	  { frame_number:		Int,
	    site:			g2d::Box,
	    state:			Bool,
	    direction:			d::Button_Direction,
	    type:			t::Button_Type,
# Strictly for debugging:
relief: pt::Relief,
	    mode:			g2g::Gadget_Mode			# Whether gadget has mouse focus etc.
	  };

	Button_Appearance_Fn
	  =
	  { last:			Button_Appearance_Fn_Arg,
	    this:			Button_Appearance_Fn_Arg,
	    theme:			pt::Packed_Theme
	  }
	  ->
	  { foreground:			g2g::Appearance,	
	    background:			g2g::Appearance,
	    point_in_gadget:		Null_Or(g2d::Point -> Bool)		# 
	  }
	  ;

	App_To_Arrowbutton
	  =
	  { set_active_to:		Bool -> Void,
	    set_state_to:		Bool -> Void,
	    #
	    get_active:			Void -> Bool,
	    get_state:			Void -> Bool,
	    #
	    get_button_direction:	Void -> d::Button_Direction,		# We deliberately do not provide a 'set' fn for this -- button direction should be selected at configuration time not runtime.
	    get_button_type:		Void -> t::Button_Type			# We deliberately do not provide a 'set' fn for this -- button type      should be selected at configuration time not runtime.
	  };

	Option	= UP
		| DOWN
		| LEFT
		| RIGHT
		#
		| PIXELS_SQUARE		Int
		#
		| PIXELS_HIGH_MIN	Int
		| PIXELS_WIDE_MIN	Int
		#
		| PIXELS_HIGH_CUT	Float
		| PIXELS_WIDE_CUT	Float
		#
		| INITIAL_STATE		Bool
		| INITIALLY_ACTIVE	Bool
		#
		| MOMENTARY_CONTACT						# State is non-default (opposite of INITIAL_STATE) only between mouse downclick and upclick.
		| PUSH_ON_PUSH_OFF						# Mouse downclicks toggle state between TRUE and FALSE.
		#
		| APPEARANCE		Button_Appearance_Fn
		#
		| STATE_WATCHER		(Bool -> Void)				# Widget's current state              will be sent to these fns each time state changes.
		| PORT_WATCHER		(App_To_Arrowbutton -> Void)  		# Widget's app port                   will be sent to these fns at widget startup.
		| SITE_WATCHER		(g2d::Box -> Void)			# Widget's site in window coordinates will be sent to these fns each time it changes.
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
fun next_relief pt::FLAT   => pt::RAISED;	
    next_relief pt::RAISED => pt::SUNKEN;
    next_relief pt::SUNKEN => pt::GROOVE;
    next_relief pt::GROOVE => pt::RIDGE;
    next_relief pt::RIDGE  => pt::FLAT;
end;
fun next_direction d::UP    => d::RIGHT;	
    next_direction d::RIGHT => d::DOWN;
    next_direction d::DOWN  => d::LEFT;
    next_direction d::LEFT  => d::UP;
end;

	fun default_appearance
	      {
		last:			Button_Appearance_Fn_Arg,
		this:			Button_Appearance_Fn_Arg,		
		theme:			pt::Packed_Theme
	      }
	    =
	    {
		stipulate
		    offset = 1;
		herein
		    fun arrow_vertices ({ row, col, wide, high }: g2d::Box, d::UP)		#   /\		
			    => 									#  ----
			    [ { col=> col + wide / 2,    row=> row + offset - 1  },
			      { col=> col + offset - 1,  row=> row + high-offset },
			      { col=> col + wide-offset, row=> row + high-offset }
			    ];

		       arrow_vertices ({ row, col, wide, high }: g2d::Box, d::DOWN)		#  ----
			   => 									#   \/
			   [ { col=> col + wide / 2,     row=> row + high-offset },
			     { col=> col + wide-offset,  row=> row + offset      },
			     { col=> col + offset,       row=> row + offset      }
			   ];

		       arrow_vertices ({ row, col, wide, high }: g2d::Box, d::LEFT)		#  |\
			   => 	      								#  |/
			   [ { col=> col + offset,      row=> row + high / 2     },
			     { col=> col + wide-offset, row=> row + high-offset  },
			     { col=> col + wide-offset, row=> row + offset - 1   }
			   ];

		       arrow_vertices ({ row, col, wide, high }: g2d::Box, d::RIGHT)		#  /|
			   => 									#  \|
			   [ { col=> col + wide-offset, row=> row + high / 2     },
			     { col=> col + offset,      row=> row + offset - 1   },
			     { col=> col + offset,      row=> row + high-offset  }
			   ];
		    end;
		end;

		point_in_gadget = NULL;

		# To avoid thrashing the gui subsystem
		# we regenerate our appearance only when
		# logically required:
		#
		if (this.frame_number  !=  1					# Every widget will want this test.
		and this.site	   ==  last.site				# And this one.
# Temporary debug:
and this.relief == last.relief
		and this.state         ==  last.state)
		    #
		    { foreground => g2g::UNCHANGED,
		      background => g2g::UNCHANGED,
		      point_in_gadget						# point_in_gadget is ignored by caller when foreground and background are both g2g::UNCHANGED.
		    };
		else
		    (*theme.current_gadget_colors { gadget_is_on => this.state, gadget_mode  => this.mode })
			->
			(p: pt::Gadget_Palette);

		    background_box =  this.site;
		    foreground_box =  g2d::box::make_nested_box (background_box, 4);

		    background = g2g::CHANGED (THE [ gd::COLOR (p.surround_color,  [ gd::FILLED_BOXES [ background_box ]]) ] );


		    stipulate
			inner_box = g2d::box::make_nested_box (background_box, 40);
		    herein

			points =  arrow_vertices (inner_box, this.direction);

#			foreground = g2g::CHANGED (THE (*theme.polygon3d p { points, thick => 20, relief => this.relief } ));

mgreen =  mtx::make_rw_matrix ((10,10), r8::rgb8_green);

midpoint    = g2d::box::midpoint foreground_box;
displaylist = (*theme.polygon3d p { points, thick => 20, relief => this.relief } );
textlist    = [ gd::DRAW_TEXT (gd::CENTERED_ON_POINT, [ gd::TEXT (midpoint, "xyz") ]) ];
# textlist  = [ gd::FONT ([ "-adobe-times-medium-i-normal--*-%d-*-*-p-*-iso8859-1", "9x15" ], textlist) ];
textlist    = [ gd::FONT ([ "-*-courier-bold-r-*-*-20-*-*-*-*-*-*-*", "9x15" ], textlist) ];
greenlist   = [ gd::IMAGE { to_point => midpoint, from_box => NULL, from => mgreen } ];
                            
displaylist = displaylist @ textlist @ greenlist;

			foreground = g2g::CHANGED (THE displaylist);

			convex_hull = g2d::convex_hull (gd::find_all_points_in_gui_displaylist displaylist);

			fun point_in_gadget (point: g2d::Point)
			    =
			    g2d::point_in_polygon (point, convex_hull);

			point_in_gadget = THE point_in_gadget;
		    end;

		    { foreground, background, point_in_gadget };
		fi;
	    };

	fun process_options
	    ( options: List(Option),
	      #
	      {	button_direction,
		button_type,
		#
		appearance,
		#
		initial_state,
		initially_active,
		#
		packed_widget_options,
		      #
		port_watchers,
		state_watchers,
		site_watchers
	      }
	    )
	    =
	    {   my_button_direction		=  REF  button_direction;
		my_button_type			=  REF  button_type;
		#
		my_appearance			=  REF  appearance;
		#
		my_initial_state		=  REF  initial_state;
		my_initially_active		=  REF  initially_active;
		#
		my_packed_widget_options	=  REF  packed_widget_options;
		#
		my_port_watchers		=  REF  port_watchers;
		my_state_watchers		=  REF  state_watchers;
		my_site_watchers		=  REF  site_watchers;

		apply  do_option  options
		where
		    fun do_option (UP				 ) =>   my_button_direction		:=  d::UP;
			do_option (DOWN				 ) =>   my_button_direction		:=  d::DOWN;
			do_option (RIGHT			 ) =>   my_button_direction		:=  d::RIGHT;
			do_option (LEFT				 ) =>   my_button_direction		:=  d::LEFT;
			#
			do_option (INITIAL_STATE		b) =>   my_initial_state		:=  b;
			do_option (INITIALLY_ACTIVE		b) =>   my_initially_active		:=  b;
			#
			do_option (MOMENTARY_CONTACT		 ) =>   my_button_type			:=  t::MOMENTARY_CONTACT;
			do_option (PUSH_ON_PUSH_OFF		 ) =>   my_button_type			:=  t::PUSH_ON_PUSH_OFF;
			#
			do_option (APPEARANCE			c) =>   my_appearance			:=  c;
			#
			do_option (PORT_WATCHER			c) =>	my_port_watchers		:=  c ! *my_port_watchers;
			do_option (STATE_WATCHER		c) =>	my_state_watchers		:=  c ! *my_state_watchers;
			do_option (SITE_WATCHER			c) =>	my_site_watchers		:=  c ! *my_site_watchers;
			#
			do_option (PIXELS_HIGH_MIN		i) =>   my_packed_widget_options	:=  (wi::PIXELS_HIGH_MIN i) ! *my_packed_widget_options;
			do_option (PIXELS_WIDE_MIN		i) =>   my_packed_widget_options	:=  (wi::PIXELS_WIDE_MIN i) ! *my_packed_widget_options;
			#
			do_option (PIXELS_HIGH_CUT		f) =>   my_packed_widget_options	:=  (wi::PIXELS_HIGH_CUT f) ! *my_packed_widget_options;
			do_option (PIXELS_WIDE_CUT		f) =>   my_packed_widget_options	:=  (wi::PIXELS_WIDE_CUT f) ! *my_packed_widget_options;
			#
			do_option (PIXELS_SQUARE		i) =>   my_packed_widget_options	:=  (wi::PIXELS_HIGH_MIN   i)
													!   (wi::PIXELS_WIDE_MIN   i)
													!   (wi::PIXELS_HIGH_CUT 0.0)
													!   (wi::PIXELS_WIDE_CUT 0.0)
													!   *my_packed_widget_options;
		    end;
		end;

		{ button_direction		=>  *my_button_direction,
		  button_type			=>  *my_button_type,
		  #
		  appearance			=>  *my_appearance,
		  #
		  initial_state			=>  *my_initial_state,
		  initially_active		=>  *my_initially_active,
		  #
		  packed_widget_options		=>  *my_packed_widget_options,
		  #
		  port_watchers			=>  *my_port_watchers,
		  state_watchers		=>  *my_state_watchers,
		  site_watchers			=>  *my_site_watchers
		};
	    };


	offset = 1;

	fun get_vertices (wide: Int, high: Int, d::UP)
		=> 
		[ { col=>wide / 2,    row=>offset - 1 },
		  { col=>offset - 1,  row=>high-offset },
		  { col=>wide-offset, row=>high-offset }
		];

	   get_vertices (wide, high, d::DOWN)
	       => 
	       [ { col=>wide / 2,     row=>high-offset },
		 { col=>wide-offset,  row=>offset },
		 { col=>offset,       row=>offset }
	       ];

	   get_vertices (wide, high, d::LEFT)
	       => 
	       [ { col=>offset,      row=>high / 2 },
		 { col=>wide-offset, row=>high-offset },
		 { col=>wide-offset, row=>offset - 1 }
	       ];

	   get_vertices (wide, high, d::RIGHT)
	       => 
	       [ { col=>wide-offset, row=>high / 2 },
		 { col=>offset,      row=>offset - 1 },
		 { col=>offset,      row=>high-offset }
	       ];
	end;

	fun has (options: List(Option))					# PUBLIC
	    =
	    {
	        (process_options
		  (
		    options,
		    #
		    { button_direction		=>  d::DOWN,
		      button_type		=>  t::PUSH_ON_PUSH_OFF,
		      #
		      appearance		=>  default_appearance,
		      #
		      initial_state		=>  FALSE,
		      initially_active		=>  TRUE,
		      #
		      packed_widget_options	=>  [],
		      #
		      port_watchers		=>  [],
		      state_watchers		=>  [],
		      site_watchers		=>  []
		    }
		) )
		    ->
		    {												# These values are globally visible to the subsequenc fns, which can lock them in as needed.
		      button_direction,									
		      button_type,									
		      #
		      appearance,
		      #
		      initial_state,
		      initially_active,
		      #
		      packed_widget_options,
		      #
		      port_watchers,
		      state_watchers,
		      site_watchers
		    };


		###############################
		# Top of state variable section
		#

		gadget_to_guiboss__global
		    =
		    REF (NULL:  Null_Or((g2g::Gadget_To_Guiboss, iul::Id)));

		fun note_changed_gadget_activity (is_active: Bool)
		    =
		    case (*gadget_to_guiboss__global)
			#
			THE (gadget_to_guiboss, id)	=>  gadget_to_guiboss.note_changed_gadget_activity { id, is_active };
			NULL				=>  ();
		    esac;

		fun gadget_may_have_visibly_changed ()
		    =
		    case (*gadget_to_guiboss__global)
			#
			THE (gadget_to_guiboss, id)	=>  gadget_to_guiboss.gadget_may_have_visibly_changed(id);
			NULL				=>  ();
		    esac;


		last_known_site
		    =
		    REF ( { col => -1,  wide => -1,
			    row => -1,  high => -1
			  }:				g2d::Box
			);

		button_relief
		    =
		    REF pt::FLAT;


		button_state
		    =
		    REF initial_state;

		last_appearance_arg										# Here we're initializing to any type-valid value; the values should never get used. 
		    =
		    REF ( { frame_number    =>	0,
			    site	    =>	{ row => 0,  col => 0,  high => 0,  wide => 0 },
			    state	    =>	*button_state,
			    direction	    =>	button_direction,
			    type	    =>	t::PUSH_ON_PUSH_OFF,
relief => *button_relief,
			    mode	    =>  { is_active		=> TRUE,
						  has_mouse_focus	=> FALSE,
						  has_keyboard_focus	=> FALSE,
						  mousebutton_is_down	=> FALSE
						}
			  }
			  :			Button_Appearance_Fn_Arg
			);

		button_active
		    =
		    REF initially_active;


		exception SAVED_STATE { last_known_site:	g2d::Box,					# Here we're doing the usual hack of using Exception as an extensible datatype -- nothing to do with actually raising or trapping exceptions.
					button_state:		Bool,
					button_active:		Bool
				      };	


		fun note_site (site: g2d::Box)
		    =
		    if(*last_known_site != site)
			last_known_site := site;
			#
			apply notify_watcher site_watchers
			    where
				fun notify_watcher site_watcher
				    =
				    site_watcher site;
			    end;
		    fi;

		fun note_state (state: Bool)
		    =
		    if(*button_state != state)
			button_state := state;
			#
			apply notify_watcher state_watchers
			    where
				fun notify_watcher state_watcher
				    =
				    state_watcher state;
			    end;
		    fi;

		#
		# End of state variable section
		###############################


		#####################
		# Top of port section
		#
		# Here we implement our App_To_Arrowbutton port:

		fun set_active_to (is_active: Bool)
		    =
		    {   button_active :=  is_active;
			#
			note_changed_gadget_activity  is_active;
		    };

		fun set_state_to (state: Bool)
		    =
		    {   note_state state;
			#
			gadget_may_have_visibly_changed ();
		    };

		fun get_active ()
		    =
		    *button_active;

		fun get_state ()
		    =
		    *button_state;

		fun get_button_direction ()
		    =
		    button_direction;

		fun get_button_type ()
		    =
		    button_type;

		port =    { set_active_to,
			    set_state_to,
			    get_active,
			    get_state,
			    get_button_direction,
			    get_button_type
			  }
			  : App_To_Arrowbutton
			  ;

		#
		# End of port section
		#####################


		###############################
		# Top of widget hook fn section
		#
		# These fns get called by widget_imp logic, ultimately						# widget_imp		is from   src/lib/x-kit/widget/xkit/theme/packed/default/look/widget-imp.pkg
		# in response to user mouseclicks and keypresses etc:

		fun startup_fn
		    { 
		      id:				iul::Id,						# Unique id.
		      gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
		      widget_to_packedspace:		w2p::Widget_To_Packedspace,
		      saved_widget_state:		Null_Or(Exception)
		    }
		    =
		    {	gadget_to_guiboss__global
			    :=  
			    THE (gadget_to_guiboss, id);

			case saved_widget_state
			    #
			    THE (SAVED_STATE r)									# Widget is being restarted after an earlier run.
				=>
				{ last_known_site   := r.last_known_site;					# Restore saved state.
				  button_state	    := r.button_state;
				  button_active	    := r.button_active;
				};

			    THE _ =>										# This shouldn't happen; guiboss_imp must have mistakenly given us another widget's saved state. (Type system cannot prevent this.)
				{   msg = "Wrong saved state! -- startup_fn in arrowbutton.pkg";
				    log::fatal           msg;							# log			is from   src/lib/std/src/log.pkg
				    raise exception FAIL msg;							# Previous won't return, but type does not (yet?) indicate that properly.
				};

			    NULL => ();										# No saved state: We must be newly created in a fresh session.
			esac;

			apply   notify_watcher  port_watchers							# We do this here rather than (say) above this fn because we don't want the port in circulation until we're running.
				where
				    fun notify_watcher  port_watcher
					=
					port_watcher port;
				end;
			();
		    };

		fun shutdown_fn ()										# Return to widget_imp an exception packaging up our state; this will be returned to guiboss_imp, saved in the
		    =												# Stopped_Gui tree, and passed to our startup_fn when/if gui is restarted. This exception will never be raised;
		    THE (SAVED_STATE  { last_known_site	=> *last_known_site,					# Exception is being used here purely as an extensible datatype.
					button_state	=> *button_state,
					button_active	=> *button_active
				      }	
		        );

		fun before_first_frame_fn
		    {
		      id:				iul::Id,						# Unique id.
		      site:				g2d::Box,						# Window rectangle in which to draw.
		      gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
		      widget_to_packedspace:		w2p::Widget_To_Packedspace,
		      theme:				pt::Packed_Theme,
		      pass_font:			List(String) -> Replyqueue
								     -> (evt::Font -> Void) -> Void,		# Nonblocking version of next, for use in imps.
		       get_font:			List(String) ->	 evt::Font				# Accepts a list of font names which are tried in order.
		    }
		    =
		    {	note_site site;
			();
		    };

		fun start_of_frame_fn
		    {
		      id:				iul::Id,						# Unique id.
		      frame_number:			Int,							# 1,2,3,... Purely for convenience of widget-imp, guiboss-imp makes no use of this.
		      site:				g2d::Box,						# Window rectangle in which to draw.
		      visible:				Bool,							# If FALSE, widget is not visible on screen, so widget-imp may be able to avoid updating foreground and background.
		      duration_in_seconds:		Float,							# If state has changed widget-imp should call note_changed_gadget_appearance() before this time is up. Also useful for motionblur.
		      gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
		      widget_to_packedspace:		w2p::Widget_To_Packedspace,
		      this_gadget_mode:			g2g::Gadget_Mode,
		      theme:				pt::Packed_Theme
		    }
		    =
		    {
			note_site site;
			#
			this =	  { frame_number,
				    site,
				    state	=> *button_state,
				    direction	=>  button_direction,
				    type	=>  button_type,
# Strictly for debugging:
relief => *button_relief,
				    mode	=>  this_gadget_mode
				  };

			last =	  case frame_number   1 =>   this;						# For the first frame we have no 'last', so just re-use 'this'.
						      _ =>  *last_appearance_arg;
				  esac;

			(appearance { this, last, theme })
			    ->
			    { background, foreground, point_in_gadget };

			last_appearance_arg :=  this;

			case (foreground, background)
			    #
			    (g2g::UNCHANGED, g2g::UNCHANGED)    =>  {
									();
								    };
			    _					=>  {
									gadget_to_guiboss.note_changed_gadget_appearance { id, foreground, background, point_in_gadget };
								    };
			esac;
		    };


		fun button_press_fn
		      {
			id:				iul::Id,						# Unique id.
			button:				evt::Mousebutton,
			point:				g2d::Point,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
			gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
			widget_to_packedspace:		w2p::Widget_To_Packedspace,
			theme:				pt::Packed_Theme
		      }
		    = 
		    {
button_relief :=  next_relief *button_relief;
gadget_may_have_visibly_changed ();

			note_site site;
			#
#			note_state (not *button_state);

		       ();
		    };

		fun button_release_fn
		      {
			id:				iul::Id,						# Unique id.
			button:				evt::Mousebutton,
			point:				g2d::Point,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
			gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
			widget_to_packedspace:		w2p::Widget_To_Packedspace,
			theme:				pt::Packed_Theme
		      }
		    = 
		    {
			note_site site;
			#
			if (button_type == t::MOMENTARY_CONTACT)
			    #
			    note_state  initial_state;
			fi;

		       ();
		    };

		fun key_press_fn
		      {
			id:				iul::Id,						# Unique id.
			keycode:			evt::Keycode,						# Keycode of the depressed key.
			keysym:				evt::Keysym,						# Keysym  of the depressed key.
			ascii:				String,							# Ascii  for the depressed key.
			point:				g2d::Point,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
			gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
			widget_to_packedspace:		w2p::Widget_To_Packedspace,
			theme:				pt::Packed_Theme
		      }
		    = 
		    {	note_site site;
			#
		       ();
		    };

		fun key_release_fn
		      {
			id:				iul::Id,						# Unique id.
			keycode:			evt::Keycode,						# Keycode of the released key.
			keysym:				evt::Keysym,						# Keysym  of the released key.
			ascii:				String,							# Ascii  for the released key.
			point:				g2d::Point,
			site:		 		g2d::Box,						# Widget's assigned area in window coordinates.
			modifier_keys_state:		evt::Modifier_Keys_State,				# State of the modifier keys (shift, ctrl...).
			mousebuttons_state:		evt::Mousebuttons_State,				# State of mouse buttons.
			gadget_to_guiboss:		g2g::Gadget_To_Guiboss,
			widget_to_packedspace:		w2p::Widget_To_Packedspace,
			theme:				pt::Packed_Theme
		      }
		    = 
		    {	note_site site;
			#
		       ();
		    };

		#
		# End of widget hook fn section
		###############################

		packed_widget_options
		  =
		  [ wi::STARTUP_FN		startup_fn,
		    wi::SHUTDOWN_FN		shutdown_fn,
		    wi::BEFORE_FIRST_FRAME_FN	before_first_frame_fn,
		    wi::START_OF_FRAME_FN	start_of_frame_fn,
		    wi::BUTTON_PRESS_FN		button_press_fn,
		    wi::BUTTON_RELEASE_FN	button_release_fn,
		    wi::KEY_PRESS_FN		key_press_fn,
		    wi::KEY_RELEASE_FN		key_release_fn
		  ]
		  @
		  packed_widget_options
		  ;

		make_packed_widget_fn =  wi::make_packed_widget_start_fn  packed_widget_options;

		packedspace_layout_hints
		    =
		    []:	 List(plh::Packedspace_Layout_Hint);

		( packedspace_layout_hints,									# Returning this tuple is a convenience to the caller; it represents one complete gui_plan::ROW entry,
		  gp::WIDGET   make_packed_widget_fn								# So caller can write   gui_plan = (packedspace_options, gp::ROW [ arrowbutton::has [...], arrowbutton::has [...], ... ]);
		);
	    };
    };
end;


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
