## textbutton.api
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib


stipulate
    include package   geometry2d;						# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    #
#   package xc  =  xclient;							# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
    #
#   package d3  =  three_d;							# three_d			is from   src/lib/x-kit/widget/old/lib/three-d.pkg

    package gd  =  gui_displaylist;						# gui_displaylist		is from   src/lib/x-kit/widget/theme/gui-displaylist.pkg
#   package g2g =  gadget_to_guiboss;						# gadget_to_guiboss		is from   src/lib/x-kit/widget/gui/gadget-to-guiboss.pkg
    package w2p =  widget_to_widgetspace;					# widget_to_widgetspace		is from   src/lib/x-kit/widget/space/widget/widget-to-widgetspace.pkg
    package gt  =  guiboss_types;						# guiboss_types			is from   src/lib/x-kit/widget/gui/guiboss-types.pkg
    package wt  =  widget_theme;						# widget_theme			is from   src/lib/x-kit/widget/theme/widget/widget-theme.pkg
    package wi  =  widget_imp;							# widget_imp			is from   src/lib/x-kit/widget/xkit/theme/widget/default/look/widget-imp.pkg
    package g2d =  geometry2d;							# geometry2d			is from   src/lib/std/2d/geometry2d.pkg
    package evt =  gui_event_types;						# gui_event_types		is from   src/lib/x-kit/widget/gui/gui-event-types.pkg
    package iul =  issue_unique_look_id;					# issue_unique_look_id		is from   src/lib/x-kit/widget/gui/issue-unique-look-id.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/x-kit/widget/leaf/textbutton.pkg
    #
    api Textbutton {
	#
	package t: api {							# "d" for "type"
	    #
	    Button_Type		= MOMENTARY_CONTACT
				| PUSH_ON_PUSH_OFF
				;
	};

	App_To_Textbutton
	  =
	  { get_active:			Void -> Bool,
	    get_state:			Void -> Bool,
	    #
	    get_button_relief:		Void -> wt::Relief,			# 
	    get_button_type:		Void -> t::Button_Type,			# 
	    #
	    set_active_to:		Bool -> Void,
	    set_state_to:		Bool -> Void,				# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	    set_button_relief_to:	wt::Relief -> Void			# Also calls gadget_to_guiboss.needs_redraw_gadget_request(id);
	  };



	Redraw_Request_Fn_Arg
	    =
	    REDRAW_REQUEST_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		frame_number:			Int,				# 1,2,3,... Purely for convenience of look-imp, guiboss-imp makes no use of this.
		site:				g2d::Box,			# Window rectangle in which to draw.
		visible:			Bool,				# If FALSE, widget is not visible on screen, so look-imp may be able to avoid updating foreground and background.
		duration_in_seconds:		Float,				# If state has changed look-imp should call note_changed_gadget_foreground() before this time is up. Also useful for motionblur.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
		this_gadget_mode:		gt::Gadget_Mode,
		theme:				wt::Widget_Theme,
		#
		default_redraw_request_fn:	Redraw_Request_Fn,
		#
		button_state:			Bool,				# Is the button ON or OFF?
		button_type:			t::Button_Type,			# Is the button push-on-push-off or momentary-contact?
		button_relief:			wt::Relief			# Is the button outline a slope, a ridge, or a flat band?
	      }

	withtype
	Redraw_Request_Fn
	  =
	  Redraw_Request_Fn_Arg
	  ->
	  { displaylist:		gd::Gui_Displaylist,
	    point_in_gadget:		Null_Or(g2d::Point -> Bool)		# 
	  }
	  ;



	Mousebutton_Fn_Arg
	    =
	    MOUSEBUTTON_FN_ARG							# Needs to be a sumtype because of recursive reference in default_mousebutton_fn.
	      {
		id:				iul::Id,			# Unique id.
		event:				gt::Mousebutton_Event,		# MOUSEBUTTON_PRESS or MOUSEBUTTON_RELEASE.
		button:				evt::Mousebutton,		# Which mousebutton was pressed/released.
		point:				g2d::Point,			# Where the mouse was.
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:		evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
		theme:				wt::Widget_Theme,
		#
		default_mousebutton_fn:		Mousebutton_Fn,
		#
		button_state:			Bool,				# Is the button ON or OFF?
		button_type:			    t::Button_Type,		# Is the button push-on-push-off or momentary-contact?
		button_relief:			Ref(wt::Relief),		# Is the button outline a slope, a ridge, or a flat band?
		#
		initial_state:			Bool,				# Original state of button.
		note_state:			Bool -> Void,			# Change state of button. This takes care of notifying our state-watchers.
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mousebutton_Fn =  Mousebutton_Fn_Arg -> Void;



	Mouse_Drag_Fn_Arg
	    =
	    MOUSE_DRAG_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		event_point:			g2d::Point,
		start_point:			g2d::Point,
		last_point:			g2d::Point,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		phase:				gt::Drag_Phase,	
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
		theme:				wt::Widget_Theme,
		#
		default_mouse_drag_fn:		Mouse_Drag_Fn,
		#
		button_state:			Bool,				# Is the button ON or OFF?
		button_type:			    t::Button_Type,		# Is the button push-on-push-off or momentary-contact?
		button_relief:			Ref(wt::Relief),		# Is the button outline a slope, a ridge, or a flat band?
		#
		initial_state:			Bool,				# Original state of button.
		note_state:			Bool -> Void,			# Change state of button. This takes care of notifying our state-watchers.
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Drag_Fn =  Mouse_Drag_Fn_Arg -> Void;



	Mouse_Transit_Fn_Arg							# Note that buttons are always all up in a mouse-transit event -- otherwise it is a mouse-drag event.
	    =
	    MOUSE_TRANSIT_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		event_point:			g2d::Point,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		transit:			gt::Gadget_Transit,		# Mouse is entering (CAME) or leaving (LEFT) widget, or moving (MOVE) across it.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
		theme:				wt::Widget_Theme,
		#
		default_mouse_transit_fn:	Mouse_Transit_Fn,
		#
		button_state:			Bool,				# Is the button ON or OFF?
		button_type:			    t::Button_Type,		# Is the button push-on-push-off or momentary-contact?
		button_relief:			Ref(wt::Relief),		# Is the button outline a slope, a ridge, or a flat band?
		#
		initial_state:			Bool,				# Original state of button.
		note_state:			Bool -> Void,			# Change state of button. This takes care of notifying our state-watchers.
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Mouse_Transit_Fn =  Mouse_Transit_Fn_Arg -> Void;



	Key_Event_Fn_Arg
	    =
	    KEY_EVENT_FN_ARG
	      {
		id:				iul::Id,			# Unique id.
		key_event:			gt::Key_Event,			# KEY_PRESS or KEY_RELEASE
		keycode:			evt::Keycode,			# Keycode of the depressed key.
		keysym:				evt::Keysym,			# Keysym  of the depressed key.
		string:				String,				# Ascii  for the depressed key.
		event_point:			g2d::Point,
		site:				g2d::Box,			# Widget's assigned area in window coordinates.
		modifier_keys_state:	        evt::Modifier_Keys_State,	# State of the modifier keys (shift, ctrl...).
		mousebuttons_state:		evt::Mousebuttons_State,	# State of mouse buttons as a bool record.
		gadget_to_guiboss:		gt::Gadget_To_Guiboss,
		widget_to_widgetspace:		w2p::Widget_To_Widgetspace,
		theme:				wt::Widget_Theme,
		#
		default_key_event_fn:		Key_Event_Fn,
		#
		button_state:			Bool,				# Is the button ON or OFF?
		button_type:			    t::Button_Type,		# Is the button push-on-push-off or momentary-contact?
		button_relief:			Ref(wt::Relief),		# Is the button outline a slope, a ridge, or a flat band?
		#
		initial_state:			Bool,				# Original state of button.
		note_state:			Bool -> Void,			# Change state of button. This takes care of notifying our state-watchers.
		needs_redraw_gadget_request:	Void -> Void			# Notify guiboss-imp that this button needs to be redrawn (i.e., sent a redraw_gadget_request()).
	      }
	withtype
	Key_Event_Fn =  Key_Event_Fn_Arg -> Void;



	Option	= PIXELS_SQUARE		Int					# ==  [ PIXELS_HIGH_MIN i,  PIXELS_WIDE_MIN i,  PIXELS_HIGH_CUT 0.0,  PIXELS_WIDE_CUT 0.0 ]
		#
		| PIXELS_HIGH_MIN	Int					# Give widget at least this many pixels vertically.
		| PIXELS_WIDE_MIN	Int					# Give widget at least this many pixels horizontally.
		#
		| PIXELS_HIGH_CUT	Float					# Give widget this big a share of remaining pixels vertically.    0.0 means to never expand it beyond its minimum size.
		| PIXELS_WIDE_CUT	Float					# Give widget this big a share of remaining pixels horizontally.  0.0 means to never expand it beyond its minimum size.
		#
		| INITIAL_STATE		Bool
		| INITIALLY_ACTIVE	Bool
		#
		| MOMENTARY_CONTACT						# State is non-default (opposite of INITIAL_STATE) only between mouse downclick and upclick.
		| PUSH_ON_PUSH_OFF						# Mouse downclicks toggle state between TRUE and FALSE.
		#
		| RELIEF		wt::Relief				# Should button boundary be drawn flat, raised, sunken, ridged or grooved?
		| MARGIN		Int					# How many pixels to inset button relative to its assigned window site.  Default is 4.
		| THICK			Int					# Thickness of lines (well, polygons) forming button.  Default is 5.
		| TEXT			String					# Text label to draw inside button.  Default is "".
		| FONT			List(String)				# Font to use for text label, e.g. "-*-courier-bold-r-*-*-20-*-*-*-*-*-*-*".  We'll use the first font in list which is found on X server, else "9x15" (which X guarantees to have).
		#
		| REDRAW_REQUEST_FN	Redraw_Request_Fn			# Application-specific handler for widget redraw.
		| MOUSEBUTTON_FN	Mousebutton_Fn				# Application-specific handler for mousebutton clicks.
		| MOUSE_DRAG_FN		Mouse_Drag_Fn				# Application-specific handler for mouse drags.
		| MOUSE_TRANSIT_FN	Mouse_Transit_Fn			# Application-specific handler for mouse crossings.
		| KEY_EVENT_FN		Key_Event_Fn				# Application-specific handler for keyboard input.
		#
		| STATE_WATCHER		(Bool -> Void)				# Widget's current state              will be sent to these fns each time state changes.
		| PORT_WATCHER		(App_To_Textbutton -> Void) 		# Widget's app port                   will be sent to these fns at widget startup.
		| SITE_WATCHER		(g2d::Box -> Void)			# Widget's site in window coordinates will be sent to these fns each time it changes.

		| POPUP_WATCHER		((g2d::Box, gt::Gui_Plan)
							    -> ( g2d::Box,
                                                                 gt::Client_To_Guiwindow
                                                               )
					) -> Void
		;								# To help prevent deadlock, watcher fns should be fast and nonblocking, typically just setting a var or entering something into a mailqueue.
		
	with:  List(Option) -> gt::Gp_Widget;
    };
end;


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
