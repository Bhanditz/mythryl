## ro-pixmap-ximp.pkg
#
# Support for icons, button images
# and so forth:   Track what readonly
# windows we have on the X server and
# transparently load new ones as needed.
#

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.sublib

###            "Opportunity is missed by most people
###              because it is dressed in overalls
###               and looks like work."
###
###                          -- Thomas Edison


stipulate
    include threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package bio =  bitmap_io;							# bitmap_io			is from   src/lib/x-kit/draw/bitmap-io.pkg
    package fil =  file__premicrothread;					# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package qk  =  quark;							# quark				is from   src/lib/x-kit/style/quark.pkg
    package xc  =  xclient;							# xclient			is from   src/lib/x-kit/xclient/xclient.pkg
#   package dt  =  draw_types_old;							# draw_types_old			is from   src/lib/x-kit/xclient/src/window/draw-types-old.pkg
    package rpp =  ro_pixmap_port;						# ro_pixmap_port		is from   src/lib/x-kit/widget/lib/ro-pixmap-port.pkg
herein

    package   ro_pixmap_ximp
    : (weak)  Ro_Pixmap_Ximp							# Ro_Pixmap_Ximp		is from   src/lib/x-kit/widget/lib/ro-pixmap-ximp.api
    {
	Exports	  = {										# Ports we export for use by other imps.
		      ro_pixmap_port:		rpp::Ro_Pixmap_Port				# Requests from widget/application code.
		    };

	Imports   = {										# Ports we use which are exported by other imps.
		    };

	exception BAD_NAME;

	Client_Plea  = GET_RO_PIXMAP  (String, Oneshot_Maildrop( Null_Or(xc::Ro_Pixmap) ) );

	Client_Q    =   Mailqueue( Client_Plea  );

#	Reply_Mail = Null_Or( xc::Ro_Pixmap );

#	Ro_Pixmap_Ximp
#	    =
#	    RO_PIXMAP_XIMP
#	      { plea_slot:   Mailslot( Client_Plea  ),
#		reply_slot:  Mailslot( Reply_Mail )
#	      };

	package qht
	    =
	    typelocked_hashtable_g (
		#
		Hash_Key   = qk::Quark;
		same_key   = qk::same;
		hash_value = qk::hash;
	    );

	Window_Table
	    =
	    qht::Hashtable( xc::Ro_Pixmap );

	Ro_Pixmap_Ximp_State									# Opaque wrapper for all mutable state maintained by ximp.
	    =
	    {
	      window_table: Window_Table
	    };

	Configstate = Mailslot(   { imports:		Imports,
				    me:			Ro_Pixmap_Ximp_State,
				    run_gun':		Run_Gun,
				    end_gun':		End_Gun,
				    screen:		xc::Screen,
				    name_to_cs_pixmap:	qk::Quark -> xc::Cs_Pixmap
				  }
			      );

										    # typelocked_hashtable_g	is from   src/lib/src/typelocked-hashtable-g.pkg


	exception NOT_FOUND;

#	fun make_readonly_pixmap_ximp
#	    ( screen,
#	      name_to_cs_pixmap
#	    )
#	    =
#	    {   exception NOT_FOUND;
#
#		my window_table:  Window_Table
#		   =
#		   qht::make_hashtable  { size_hint => 32,  not_found_exception => NOT_FOUND };
#
#		note_window =  qht::set   window_table;
#		find_window =  qht::find  window_table;
#
#		# Parse file, being careful to close
#		# it properly in an exception is raised:
#		#
#		fun parse_file (fd, parse)
#		    = 
#		    (parse fd
#		     before
#			 fil::close_input  fd
#		    ) 
#		    except
#			e = {   fil::close_input  fd;
#				raise exception e;
#			    };
#
#		fun make_window_from_file (name, quark)
#		    =
#		    {   file_name = substring (name, 1, size name - 1);
#
#			fd = fil::open_for_read  file_name;
#
#			(parse_file (fd, bio::read_bitmap))
#			    ->
#			    { image, ... };
#
#			t = xc::make_readonly_pixmap_from_clientside_pixmap
#				screen
#				image;
#
#			note_window (quark, t);
#			THE t;
#		    };
#
#		fun make_window_from_clientside_pixmap  quark
#		    =
#		    {   window
#			    =
#			    xc::make_readonly_pixmap_from_clientside_pixmap
#				screen
#				(name_to_cs_pixmap  quark);
#
#			note_window (quark, window);
#
#			THE window;
#		    };
#
#		fun make_window (arg as (name, q))
#		    = 
#		    if (string::get (name, 0) == '@')
#			#
#			make_window_from_file  arg;
#		    else
#			make_window_from_clientside_pixmap  q;
#		    fi
#		    except _ = NULL;
#
#								    # quark		is from   src/lib/x-kit/style/quark.pkg
#		fun do_plea (GET_RO_PIXMAP name)
#		    =
#		    {   quark = qk::quark name;
#			#
#			case (find_window quark)
#			    #
#			    NULL => make_window (name, quark);
#			    s    => s;
#			esac;
#		    };
#
#		plea_slot  =  make_mailslot ();
#		reply_slot =  make_mailslot ();
#
#		fun loop ()
#		    =
#		    for (;;) {
#			#
#			put_in_mailslot  (reply_slot,   do_plea (take_from_mailslot  plea_slot));
#		    };
#
#		xlogger::make_thread  "ro_pixmap_ximp"  loop;
#
#		RO_PIXMAP_XIMP { plea_slot, reply_slot };
#	    };
#
#	fun get_ro_pixmap
#		(RO_PIXMAP_XIMP { plea_slot, reply_slot } )
#		name
#	    =
#	    {   put_in_mailslot  (plea_slot,  GET_RO_PIXMAP name);
#		#
#		case (take_from_mailslot  reply_slot)
#		    #
#		    THE s => s;
#		    _     => raise exception BAD_NAME;
#		esac;
#	    };




	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		  me:					Ro_Pixmap_Ximp_State,						# State which is preserved across imp shutdown/restart cycles.
		  imports:				Imports,							# Ximps to which we send requests.
		  to:					Replyqueue,							# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		  end_gun':				End_Gun,							# We shut down the microthread when this fires.
		  client_q:				Client_Q,							# Requests from x-widgets and such via draw_imp, pen_imp or font_imp.
		  screen:				xc::Screen,
		  name_to_cs_pixmap:			qk::Quark -> xc::Cs_Pixmap
		}
	    =
	    loop ()
	    where
		note_window =  qht::set   me.window_table;
		find_window =  qht::find  me.window_table;

		# Parse file, being careful to close
		# it properly if an exception is raised:
		#
		fun parse_file (fd, parse)
		    = 
		    (parse fd
		     before
			 fil::close_input  fd
		    ) 
		    except
			e = {   fil::close_input  fd;
				raise exception e;
			    };

		fun make_window_from_file (name, quark)
		    =
		    {   file_name = substring (name, 1, size name - 1);
			#
			fd = fil::open_for_read  file_name;

			(parse_file (fd, bio::read_bitmap))
			    ->
			    { image, ... };

			t = xc::make_readonly_pixmap_from_clientside_pixmap
				screen
				image;

			note_window (quark, t);

			THE t;
		    };

		fun make_window_from_clientside_pixmap  quark
		    =
		    {   window =    xc::make_readonly_pixmap_from_clientside_pixmap
					screen
					(name_to_cs_pixmap  quark);

			note_window (quark, window);

			THE window;
		    };

		fun make_window (arg as (name, q))
		    = 
		    if (string::get (name, 0) == '@')
			#
			make_window_from_file  arg;
		    else
			make_window_from_clientside_pixmap  q;
		    fi
		    except _ = NULL;

		fun do_client_plea (GET_RO_PIXMAP (name, reply_1shot))
		    =
		    {   quark = qk::quark name;
			#
			result =    case (find_window quark)
					#
					NULL => make_window (name, quark);
					s    => s;
				    esac;

			put_in_oneshot (reply_1shot, result);
		    };

		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    end_gun'                       ==>  shut_down_ro_pixmap_ximp',
			    take_from_mailqueue' client_q  ==>  do_client_plea
			];

			loop ();
		    }
		    where
			fun shut_down_ro_pixmap_ximp' ()
			    =
			    thread_exit { success => TRUE };								# Will not return.	
		    end;												# fun loop
	    end;													# fun run
	
	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Configstate, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   configstate     =  make_mailslot  ()	:  Configstate;
		#
		ro_pixmap_port  = {
				    get_ro_pixmap
				  };

		to =  make_replyqueue ();

		put_in_oneshot (reply_oneshot, (configstate, { ro_pixmap_port }));					# Return value from make_ro_pixmap_ximp().

		(take_from_mailslot  configstate)									# Input args from configure_image_ximp().
		    ->
		    { me, imports, run_gun', end_gun', screen, name_to_cs_pixmap };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, client_q, imports, to, end_gun', screen, name_to_cs_pixmap };					# Will not return.
	    }
	    where
		client_q  =  make_mailqueue (get_current_microthread())	:  Client_Q;

		fun get_ro_pixmap  (name: String)
		    =
		    {   reply_1shot =  make_oneshot_maildrop ();
			#
			put_in_mailqueue (client_q, GET_RO_PIXMAP (name, reply_1shot));

			get_from_oneshot  reply_1shot;
		    };
	    end;


        ##########################################################################################
	# External entrypoints
	#
	fun make_ro_pixmap_ximp_state ()
	    =
	    {
	     window_table =>    qht::make_hashtable  { size_hint => 32,  not_found_exception => NOT_FOUND }
	    };

	fun make_ro_pixmap_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Configstate, Exports) );
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };


	fun configure_ro_pixmap_ximp											# External entrypoint.
	      (
		configstate:		Configstate,
		me:			Ro_Pixmap_Ximp_State,
		imports:		Imports,
		run_gun':		Run_Gun,
		end_gun':		End_Gun,
		screen:			xc::Screen,
	        name_to_cs_pixmap:	qk::Quark -> xc::Cs_Pixmap
	      )
	    =
	    put_in_mailslot  (configstate, { me, imports, run_gun', end_gun', screen, name_to_cs_pixmap });
    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
