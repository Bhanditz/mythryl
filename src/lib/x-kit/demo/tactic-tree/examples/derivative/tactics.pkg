api DERIVATIVE_TACTICS =
api

    exception TacticFailure

    type goal
    type derivative
    type tactic
    type validation

    my sinTac:  tactic
    my cosTac:  tactic
    my addTac:  tactic
    my productTac:  tactic
    my chainTac:  tactic
    my negTac:  tactic
    my eTac:  tactic
    my expTac:  tactic
    my singleVarTac:  tactic
    my constantTac:  tactic

end

package DerivativeTactics = 
pkg

    use Expression DerivativeRules

    exception TacticFailure

    type goal = expression
    type derivative = derivative
    type validation = (List( derivative ) -> derivative)
    type tactic = (goal -> List( goal ) * validation)

    my sinTac:  tactic =
	\\ (expr as (Sin (Term (Var x)))) => ([], \\ l => (sinRule expr))
	 | _  => raise TacticFailure

    my cosTac:  tactic =
	\\ (expr as (Cos (Term (Var x)))) => ([], \\ l => (cosRule expr))
	 | _ => raise TacticFailure

    my singleVarTac:  tactic =
        \\ (expr as (Term (Var x))) => ([], \\ l => (singleVarRule expr))
	 | _  => raise TacticFailure

    my constantTac:  tactic =
        \\ (expr as (Term (Num n))) => ([], \\ l => (constantRule expr))
	 | _ => raise TacticFailure

    my expTac:  tactic =
	\\ (expr as (Exp (Term (Var x), Term (Num n)))) => ([], \\ l => (exponentRule expr))
	 | _  => raise TacticFailure

    my eTac:  tactic =
	\\ (e_of_f as (E f)) => ([f], \\ [f'] => eRule (f', e_of_f) | _ => raise TacticFailure)
	 | _  => raise TacticFailure 

    my addTac:  tactic =
	\\ (Plus (f, g)) => ([f, g], \\ [f', g'] => additionRule (f', g') | _ => raise TacticFailure)
	 | (Minus (f, g)) => ([f, g], \\ [f', g'] => subtractionRule (f', g') | _ => raise TacticFailure)
	 | _ => raise TacticFailure
   
    my productTac:  tactic =
	\\ (Times (f, g)) => ([f, g], \\ [f', g'] => productRule (f', g', f, g) | _ => raise TacticFailure)
	 | _ => raise TacticFailure

    my chainTac:  tactic =
	\\ (Sin g) => 
	   ([Sin (Term (Var "x")), g],
	    \\ [f_of_x', g'] => chainRule (f_of_x', g', "x") | _ => raise TacticFailure)

	 | (Cos g) => 
	    ([Cos (Term (Var "x")), g],
	     \\ [f_of_x', g'] => chainRule (f_of_x', g', "x") | _ => raise TacticFailure)

	 | (Exp (g, Term (Num n))) =>
	    ([Exp (Term (Var "x"), Term (Num n)), g], 
	     \\ [f_of_x', g'] => chainRule (f_of_x', g', "x") | _ => raise TacticFailure)

	 | _ => raise TacticFailure

    my negTac:  tactic =
	\\ (Neg g) =>
	   ([g], \\ [g'] => negRule (g') | _ => raise TacticFailure)

end







