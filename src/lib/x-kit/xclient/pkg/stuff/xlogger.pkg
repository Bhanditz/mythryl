## xlogger.pkg
#
# Control of x-kit tracing.
#
# This package is used extensively internally
# and also exported for client use.
#
# Internal users include:
#
#     src/lib/x-kit/xclient/pkg/stuff/xgripe.pkg
#     src/lib/x-kit/xclient/pkg/window/color-spec.pkg
#     src/lib/x-kit/xclient/pkg/window/draw-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/font-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/pen-to-gcontext-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/keymap-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/window-property-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/selection-imp.pkg
#     src/lib/x-kit/xclient/pkg/window/topwindow-to-widget-router.pkg
#     src/lib/x-kit/xclient/pkg/window/xsocket-to-topwindow-router.pkg
#     src/lib/x-kit/xclient/pkg/wire/display.pkg
#     src/lib/x-kit/xclient/pkg/wire/socket-closer-imp.pkg
#     src/lib/x-kit/xclient/pkg/wire/wire-to-value.pkg
#     src/lib/x-kit/xclient/pkg/wire/xsocket.pkg
#
#     src/lib/x-kit/widget/basic/topwindow.pkg
#     src/lib/x-kit/widget/basic/xevent-mail-router.pkg
#     src/lib/x-kit/widget/leaf/canvas.pkg
#     src/lib/x-kit/widget/lib/image-imp.pkg
#     src/lib/x-kit/widget/lib/ro-pixmap-cache.pkg
#     src/lib/x-kit/widget/lib/shade-imp.pkg
#     src/lib/x-kit/widget/text/one-line-virtual-terminal.pkg
#     src/lib/x-kit/widget/text/text-widget.pkg
#
#
# External users include:
#
#     src/lib/x-kit/tut/arithmetic-game/arithmetic-game-app.pkg
#     src/lib/x-kit/tut/bouncing-heads/bouncing-heads-app.pkg
#     src/lib/x-kit/tut/badbricks-game/badbricks-game-app.pkg 
#     src/lib/x-kit/tut/calculator/calculator-app.pkg
#     src/lib/x-kit/tut/color-mixer/color-mixer-app.pkg
#     src/lib/x-kit/tut/show-graph/show-graph-app.pkg
#     src/lib/x-kit/widget/fancy/graphviz/text/text-canvas.pkg
#     src/lib/x-kit/widget/fancy/graphviz/text/view-buffer.pkg
#     src/lib/x-kit/widget/fancy/graphviz/text/text-display.pkg
#     src/lib/x-kit/widget/fancy/graphviz/text/scroll-viewer.pkg
#     src/lib/x-kit/tut/nbody/animate-sim-g.pkg
#     src/lib/x-kit/tut/plaid/plaid-app.pkg
#     src/lib/x-kit/tut/triangle/triangle-app.pkg
#     src/lib/x-kit/tut/widget/label-slider.pkg
#     src/lib/x-kit/tut/widget/simple-with-menu.pkg
#     src/lib/x-kit/tut/widget/simple.pkg
#     src/lib/x-kit/tut/widget/test-vtty.pkg
#     src/lib/x-kit/tut/widget/test-font.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



###                "Our Earth is degenerate in these later days:
###                 bribery and corruption are rife,
###                 children no longer obey their parents,
###                 and every man wants to write a book -- the
###                 end of the world is clearly near!"
###
###                       -- Assyrian clay tablet circa 2800 B.C.


stipulate
    include threadkit;						# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package dw  =  thread_deathwatch;				# thread_deathwatch	is from   src/lib/src/lib/thread-kit/src/lib/thread-deathwatch.pkg
    package trc =  logger;					# logger		is from   src/lib/src/lib/thread-kit/src/lib/logger.pkg
herein

    package xlogger {
	#

	# The root of all x-kit trace modules:
	#
	xkit_logging = trc::make_logtree_leaf { parent => trc::all_logging, name => "xlogger::xkit_logging" };

	# A trace module for controlling
	# the printing of error messages:
	#
	error_logging  = trc::make_logtree_leaf { parent => xkit_logging, name => "xlogger::error_logging" };

	# A trace module for controlling make_thread output:
	#
	make_thread_logging = trc::make_logtree_leaf { parent => xkit_logging, name => "xlogger::make_thread_logging" };

	# x-kit library-level trace modules 
	#
	lib_logging    = trc::make_logtree_leaf { parent => xkit_logging, name => "xlogger::lib_logging"  };
	#
	io_logging     = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::io_logging"    };
	font_logging   = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::font_logging"  };
	color_logging  = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::color_logging" };
	#
	draw_logging   = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::draw_logging"  };
	dm_logging     = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::dm_logging" };
	#
	xsocket_to_topwindow_router_tracing   = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::xsocket_to_topwindow_router_tracing"  };
	topwindow_to_widget_router_tracing    = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::topwindow_to_widget_router_tracing"   };
	#
	graphics_context_logging = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::graphics_context_logging" };
	selection_logging        = trc::make_logtree_leaf { parent => lib_logging, name => "xlogger::selection_logging"        };

	# The root of the widgets trace modules:
	#
	widgets_logging = trc::make_logtree_leaf { parent => xkit_logging, name => "xlogger::widgets_logging" };

	log_if = trc::log_if;

	fun err_trace f
	    =
	    log_if error_logging f;

	fun reset ()
	    =
	    {   trc::disable  xkit_logging;
		trc::enable   error_logging;
	    };

								    my _ =
	reset ();	# Make sure error reporting is turned on.

	# Initialiize the state of the trace modules
	# according to the argument list.
	# 
	# The format of an argument is:
	# 
	#   [!|-|+]name
	# 
	# where
	# 
	#     "-name" means trc::disenable   "name"
	#     "+name" means trc::enable      "name"
	#     "!name" means trc::enable_only "name"
	#      "name" is an abbreviation for "+name".
	#
	fun init args
	    =
	    {   fun tail s
		    =
		    substring (s, 1, size s - 1);


		fun do_arg ""
			=>
			();

		    do_arg s
			=>
			case (string::get (s, 0))
			    #
			    '+' => trc::enable      (trc::node_by_name (tail s));
			    '-' => trc::disable     (trc::node_by_name (tail s));
			    '!' => trc::enable_node (trc::node_by_name (tail s));
			     _  => trc::enable      (trc::node_by_name s);
			esac;
		end;

		reset ();

		apply  do_arg  args;
	    };
    /***
	listLen = REF 16
	lineLen = REF 20

	fun prBuf lvl s = let
	      pr = pr lvl
	      fun f (i, 1, 0) = (pr "\n  "; pr (makestring (ordof (s, i))))
		| f (i, 1, _) = pr (makestring (ordof (s, i)))
		| f (i, n, 0) = (pr "\n  "; f (i, n, *lineLen))
		| f (i, n, k) = (
		    pr (makestring (ordof (s, i)));
		    pr ", ";
		    f (i+1, n - 1, k - 1))
	      n = string::size s
	      in
		pr "[ ";
		if (n <= *listLen)
		  then (f (0, n, *lineLen); pr " ]\n")
		  else (f (0, *listLen, *lineLen); pr " ...]\n")
	      end
    ***/

	stipulate

	    # NOTE: The "raised_at" function
	    # should  probably be provided by Lib7.		XXX BUGGO FIXME

	    fun raised_at exn
		=
		case (list::reverse (lib7::exception_history exn))
		    #
		    []      => "";
		    (s ! _) => "raised at " + s;
		esac;

	    fun handle_xerror (thread, exn as xgripe::XERROR s)
		    =>
		    {   trc::log_if error_logging .{
			    cat [ "exception (XERROR ", s, ") in ",
				  threadkit::thread_to_string  thread,
				  raised_at exn
				];
			  };

			TRUE;
		    };

		handle_xerror _
		    =>
		    FALSE;
	    end;

	herein
								    my _ = 
	    threadkit_uncaught_exception_reporting::add_uncaught_exception_action
		#
		handle_xerror;

	end;

										# thread_deathwatch	is from   src/lib/src/lib/thread-kit/src/lib/thread-deathwatch.pkg
	fun make_thread
	      (thread_name: String)						# Name of thread for reporting purposes -- not used algorithmically.
	      (thread_body: Void -> Void)					# Code for thread to run.
	    =
	    {   fun thread_body_wrapper ()
		    =
		    {   thread = get_current_thread ();

			dw::start_thread_deathwatch (thread_name, thread);

			log_if make_thread_logging .{ cat [ "make_thread '", thread_name, "' ", thread_to_string thread ]; };

			thread_body ();

			log_if make_thread_logging .{ cat [ "thread '", thread_name, "' ", thread_to_string thread, " exiting." ]; };

			dw::stop_thread_deathwatch  thread;
		    }
		    except
			ex = {   fun f (s, l)
				     =  "  ** "
				     !  s
				     !  "\n"
				     !  l
				     ;

				 trace_back
				    =
				    list::fold_right f [] (lib7::exception_history ex);

				 case ex

				     xgripe::XERROR s
					 =>
					 log_if error_logging .{ cat ([ "exception (XERROR ", s, ") in thread '", thread_name, "'\n" ] @ trace_back); };

				     FAIL s
					 =>
					 log_if error_logging .{ cat ([ "exception FAIL(", s, ") in thread '", thread_name, "'\n" ] @ trace_back); };

				      _  => 
					 log_if error_logging .{ cat ([ "exception ", exception_message ex, " in thread '", thread_name, "'\n" ] @ trace_back); };
				 esac;

				 dw::stop_thread_deathwatch
				    (get_current_thread ());
			  };

		threadkit::make_thread  thread_name  thread_body_wrapper;
	    };

	# Wrapper to report uncaught exceptions:
	# 
	fun diag (f, s) x
	    =
	    (f x)
	    except
		ex = {   log_if error_logging .{ cat [ "exception ", exception_name ex, " in ", s ]; };
			 raise exception ex;
		     };

    };		#  Xlogger.Pkg 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
