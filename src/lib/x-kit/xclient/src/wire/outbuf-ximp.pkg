## outbuf-ximp.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib




								# event_types				is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
								# xerrors				is from   src/lib/x-kit/xclient/src/wire/xerrors.pkg

stipulate
    include threadkit;						# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package op  =  outbuf_port;					# outbuf_port				is from   src/lib/x-kit/xclient/src/wire/outbuf-port.pkg
    package skj =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
    package sok =  socket__premicrothread;			# socket__premicrothread		is from   src/lib/std/socket--premicrothread.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    #
    package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    trace =  xtr::log_if  xtr::io_logging  0;			# Conditionally write strings to tracing.log or whatever.
herein


    package   outbuf_ximp
    : (weak)  Outbuf_Ximp					# Outbuf_Ximp				is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.api
    {
	Starting_Gun = Mailop(Void);				# Purely for readability.

	Outbuf_Ximp_State					# Opaque wrapper for all nonephemeral mutable state maintained by ximp.
	    =
	    Ref( Void );

	Links = {  };

	Configport(X)
	    =
	    Mailslot(  {   links:		Links,
			    me:			Outbuf_Ximp_State,
			    starting_gun':	Starting_Gun,
			    socket:		sok::Socket (X, sok::Stream(sok::Active))				# Socket to read.
			}
		    );

	Patronplea =   STOP
		   ;
	Patronport = Mailslot( Patronplea );



	Outbuf_Plea =   v1u::Vector
		   ;
	Outbuf_Q    = Mailqueue( Outbuf_Plea );


	Ports(X)= { configport:	    Configport(X),
		    patronport:	    Patronport,
		    outbuf_port:    op::Outbuf_Port
		  };




	fun run { me:			Outbuf_Ximp_State,								# These four values will be statically globally visible
		  patronport:		Patronport,									# throughout the code body for the imp.
		  outbuf_q:		Outbuf_Q,
		  links:		Links,
		  to:			Replyqueue(Void),								# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		  socket:		sok::Socket (X, sok::Stream(sok::Active))					# Socket to read.
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (take_from_mailslot'      patronport  ==>  do_patronplea),
			    (take_all_from_mailqueue' outbuf_q    ==>  do_outbuf_pleas)
			];

			loop ();
		    }	
		    where
			fun shut_down_outbuf_imp' ()
			    =
			    {	sok::close socket;
				#
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_patronplea  STOP
			    =
			    shut_down_outbuf_imp' ();									# Will not return.	

			fun do_outbuf_pleas  []
				=>
				{   log::fatal       .{   "take_all_from_mailqueue' returned an empty list! -- outbuf-ximp.pkg"; };
				    raise exception FAIL  "take_all_from_mailqueue' returned an empty list! -- outbuf-ximp.pkg";
				};

			    do_outbuf_pleas  [ vector: v1u::Vector ]
				=>
				skj::send_vector  (socket, vector);

			    do_outbuf_pleas  vectors
				=>
				skj::send_vector  (socket,  (v1u::cat  vectors));
			end;
		    end;												# fun loop
	    end;													# fun run
	
	fun startup   (reply_oneshot:  Oneshot_Maildrop( Ports(X) ))   ()						# Root fn of imp microthread.  Note currying.
	    =
	    {   configport  =  make_mailslot  ()	:  Configport(X);
		patronport  =  make_mailslot  ()	:  Patronport;

		outbuf_port =  { send_bytes };

		to          =  make_replyqueue();

		put_in_oneshot (reply_oneshot, { configport, patronport, outbuf_port });				# Return value from make_sample_ximp().

		(take_from_mailslot  configport)									# Input args from configure_sample_imp().
		    ->
		    { me, links, starting_gun', socket };

		block_until_mailop_fires  starting_gun';								# Wait for the starting gun.

		run { me, patronport, outbuf_q, links, socket, to };							# Will not return.
	    }
	    where
		outbuf_q =  make_mailqueue (get_current_microthread())	:  Outbuf_Q;

		fun send_bytes (vector: v1u::Vector)									# External entrypoint.
		    =	
		    put_in_mailqueue  (outbuf_q, vector);
	    end;

        ##########################################################################################
	# External entrypoints
	#
	fun make_outbuf_ximp_state ()											# External entrypoint.
	    =
	    REF ();

	fun make_outbuf_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( Ports(X) );
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };

	fun configure_outbuf_ximp											# External entrypoint.
	      (
		configport:	Configport(X),
		me:		Outbuf_Ximp_State,
		links:		Links,
		starting_gun':	Starting_Gun,
		socket:		sok::Socket (X, sok::Stream(sok::Active))						# Socket to read.
	      )
	    =
	    put_in_mailslot  (configport, { me, links, starting_gun', socket });

	fun shut_down_outbuf_ximp  (patronport: Patronport)								# External entrypoint.
	    =
	    put_in_mailslot  (patronport,  STOP);

    };															# package outbuf_ximp
end;

#	fun out_msg_to_string FLUSH_OUTBUF
#		=>
#		"OutFlush";
#
#	    out_msg_to_string SHUT_DOWN_OUTBUF
#		=>
#		"OutQuit";
#
#	    out_msg_to_string (ADD_TO_OUTBUF v)
#		=>
#		{   prefix_to_show
#			=
#			byte::unpack_string_vector
#			    (vector_slice_of_one_byte_unts::make_slice
#				(v, 0, max_chars_to_trace_per_send)
#			    );
#
#		    case max_chars_to_trace_per_send
#			#
#			THE n =>    cat [ "Sent to X server: ",   string_to_hex    prefix_to_show,
#					  "... == \"",            string_to_ascii  prefix_to_show,
#					  "\"... (", int::to_string (v1u::length v), " bytes)"
#					];
#
#			NULL =>    cat [ "Sent to X server: ",   string_to_hex prefix_to_show,
#					  " == \"",               string_to_ascii  prefix_to_show,
#					  "\"  (", int::to_string (v1u::length v), " bytes)"
#					];
#		    esac;
#		};	
#	end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
