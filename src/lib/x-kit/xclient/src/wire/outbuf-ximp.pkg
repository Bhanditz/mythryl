## outbuf-ximp.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession-old.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib




								# event_types				is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
								# xerrors				is from   src/lib/x-kit/xclient/src/wire/xerrors.pkg

stipulate
    include threadkit;						# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package op  =  outbuf_port;					# outbuf_port				is from   src/lib/x-kit/xclient/src/wire/outbuf-port.pkg
    package skj =  socket_junk;					# socket_junk				is from   src/lib/internet/socket-junk.pkg
    package sok =  socket__premicrothread;			# socket__premicrothread		is from   src/lib/std/socket--premicrothread.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package iox =  io_exceptions;			# io_exceptions		is from   src/lib/std/src/io/io-exceptions.pkg
    #
    package xtr =  xlogger;					# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    trace =  xtr::log_if  xtr::io_logging  0;			# Conditionally write strings to tracing.log or whatever.


    #
    fun exception_message (iox::IO { cause, op, name } )
	    =>
	    {   cause_message
		    =
		    case cause
			#
			iox::BLOCKING_IO_NOT_SUPPORTED      => [", blocking I/O not supported"];
			iox::RANDOM_ACCESS_IO_NOT_SUPPORTED => [", random access not supported"];
			iox::TERMINATED_INPUT_STREAM        => [", terminated input stream"];
			iox::CLOSED_IO_STREAM               => [", closed stream"];
			_					=> [" with exception ", exception_message cause];
		   esac;

		cat ("Io: " ! op ! " failed on \"" ! name ! "\"" ! cause_message);
	    };

	exception_message (FAIL s)            => "FAIL: " + s;
	exception_message BIND                => "nonexhaustive naming failure";     # NOTE: we should probably include line/file info for MATCH and BIND  XXX BUGGO FIXME
	exception_message MATCH               => "nonexhaustive match failure";
	exception_message INDEX_OUT_OF_BOUNDS => "index out of bounds";
	exception_message SIZE                => "size";
	exception_message OVERFLOW            => "overflow";
	exception_message DIVIDE_BY_ZERO      => "divide by zero";
	exception_message DOMAIN              => "domain error";
	exception_message e                   => "unknown";
    end;

    # Convert "abc" -> "61.62.63." etc:
    #
    fun string_to_hex s
	=
	string::translate
	    (fn c =  number_string::pad_left '0' 2 (int::format number_string::HEX (char::to_int c)) + ".")
	     s;

    # As above, starting with byte-vector:
    #
    fun bytes_to_hex  bytes
	=
	string_to_hex (byte::unpack_string_vector(vector_slice_of_one_byte_unts::make_slice (bytes, 0, NULL)));

    # Show printing chars verbatim, everything
    # else as '.', per hexdump tradition:
    #
    fun string_to_ascii s
	=
	string::translate
	    (fn c =  char::is_print c  ??  string::from_char c  ::  ".")
	    s;

    # As above, starting with byte-vector:
    #
    fun bytes_to_ascii  bytes
	=
	string_to_ascii (byte::unpack_string_vector (vector_slice_of_one_byte_unts::make_slice (bytes, 0, NULL)));


    max_chars_to_trace_per_send = THE 10000;

    fun out_vector_to_string  v
	=
	{
foo = vector_slice_of_one_byte_unts::make_full_slice v
      except
          x = {
log::note_on_stderr .{ "out_vector_to_string/AAA000 -- outbuf-ximp.pkg\n"; };
exception_msg = exception_message x;
log::note_on_stderr .{ "out_vector_to_string/AAA111 " + exception_msg + " -- outbuf-ximp.pkg\n"; };
		raise exception x;
	      };

	    prefix_to_show
		=
		byte::unpack_string_vector
		    (
			foo
		    );


	    case max_chars_to_trace_per_send
		#
		THE n =>    {
				as_hex   = string_to_hex    prefix_to_show;
				as_ascii = string_to_ascii  prefix_to_show;
				len      =  (v1u::length v);
				len      = int::to_string len;
				cat [ "Sent to X server: ",   as_hex,
				      "... == \"",            as_ascii,
				      "\"... (", len, " bytes -- outbuf-ximp.pkg)\n"
				    ];
			    };
		NULL =>     {
				cat [ "Sent to X server: ",    string_to_hex    prefix_to_show,
				      " == \"",               string_to_ascii  prefix_to_show,
				      "\"  (", int::to_string (v1u::length v), " bytes -- outbuf-ximp.pkg)\n"
				    ];
			    };
	    esac;
	};	

herein

    # This imp is typically instantiated by:
    #
    #     src/lib/x-kit/xclient/src/wire/xsocket-ximps.pkg

    package   outbuf_ximp
    : (weak)  Outbuf_Ximp					# Outbuf_Ximp				is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.api
    {
	Outbuf_Ximp_State					# Opaque wrapper for all nonephemeral mutable state maintained by ximp.
	    =
	    Ref( Void );

	Imports = {  };

	Configstate(X)
	    =
	    Mailslot(  {   imports:	Imports,
			    me:		Outbuf_Ximp_State,
			    run_gun':	Run_Gun,
			    end_gun':	End_Gun,
			    socket:	sok::Socket (X, sok::Stream(sok::Active))					# Socket to read.
			}
		    );



	Outbuf_Plea = SEND_BYTEVECTOR        v1u::Vector
		    | SEND_BYTEVECTORS List( v1u::Vector )
		    | FLUSH (Void -> Void)
		    ;
	Outbuf_Q    = Mailqueue( Outbuf_Plea );


	Exports   = {
		      outbuf_port:	op::Outbuf_Port
		    };




	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		  me:			Outbuf_Ximp_State,								# State which is preserved across imp shutdown/restart cycles.
		  imports:		Imports,									# Ximps to which we send requests.
		  to:			Replyqueue,									# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		  end_gun':		End_Gun,									# We shut down the microthread when this fires.
		  outbuf_q:		Outbuf_Q,									# 
		  socket:		sok::Socket (X, sok::Stream(sok::Active))					# Socket to read.
		}
	    =
	    {
log::note_on_stderr .{ "run entering loop () -- outbuf-ximp.pkg\n"; };
		loop ();
	    }
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {
log::note_on_stderr .{ "loop/AAA  -- outbuf-ximp.pkg\n"; };
			do_one_mailop' to [
			    #
			    (end_gun'                             ==>  shut_down_outbuf_imp'),
			    (take_all_from_mailqueue' outbuf_q    ==>  do_outbuf_pleas)
			];

			loop ();
		    }	
		    where
			fun shut_down_outbuf_imp' ()
			    =
			    {
log::note_on_stderr .{ "shut_down_outbuf_imp'/AAA  -- outbuf-ximp.pkg\n"; };
#				sok::close socket;
				    #
				    # Reppy closed the socket here.
				    #
				    # I do NOT close the socket here because I want
				    # to be able to kill off and recreate impgraphs
				    # freely without affecting the xserver session.
				    #
				    # I think of outbuf as USING the socket but not
				    # OWNING it.  We get handed the socket already
				    # opened by some external agent, and it is up to
				    # that external agent to close the socket when/if
				    # it wants the socket closed.

				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_outbuf_pleas  []
				=>
{
log::note_on_stderr .{ "do_outbuf_pleas []   -- outbuf-ximp.pkg\n"; };
				();
};

			    do_outbuf_pleas  [ SEND_BYTEVECTOR bytevector ]
				=>
{
log::note_on_stderr .{ "do_outbuf_pleas/SEND_BYTEVECTOR   -- outbuf-ximp.pkg\n"; };
log::note_on_stderr .{ (out_vector_to_string bytevector); };
log::note_on_stderr .{ "do_outbuf_pleas/SEND_BYTEVECTOR calling  skj::send_vector...   -- outbuf-ximp.pkg\n"; };
				skj::send_vector  (socket, bytevector);
log::note_on_stderr .{ "do_outbuf_pleas/SEND_BYTEVECTOR backfrom skj::send_vector...   -- outbuf-ximp.pkg\n"; };
};

			    do_outbuf_pleas  [ SEND_BYTEVECTORS bytevectors ]
				=>
{
log::note_on_stderr .{ "do_outbuf_pleas/SEND_BYTEVECTORS   -- outbuf-ximp.pkg\n"; };
log::note_on_stderr .{ (out_vector_to_string (v1u::cat bytevectors)); };
				skj::send_vector (socket, (v1u::cat bytevectors));
};

			    do_outbuf_pleas  (FLUSH signal_fn ! rest)
				=>
				{
log::note_on_stderr .{ "do_outbuf_pleas/FLUSH   -- outbuf-ximp.pkg\n"; };
				    signal_fn ();									# An upstream caller can use this to verify that all output to given point has been flushed beyond outbuf.
				    do_outbuf_pleas  rest;
				};

			    do_outbuf_pleas  pleas
				=>
				{
log::note_on_stderr .{ "do_outbuf_pleas/pleas   -- outbuf-ximp.pkg\n"; };
				    (scan_pleas (pleas, [])) ->  (rest, vectors);
log::note_on_stderr .{ (out_vector_to_string (v1u::cat vectors)); };
				    skj::send_vector  (socket,  (v1u::cat  vectors));					# Not actually a blocking call, provided that I/O redirection is in effect. (Which it will be, except briefly early in bootstrap.)
				    do_outbuf_pleas rest;
				}
				where
				    # Find longest prefix consisting of SEND_BYTEVECTOR[S]
				    # and return all the vectors from it, plus the
				    # 'rest' of the pleas-list:
				    #	
				    fun scan_pleas ([], vectors)
					    =>
					    ([], reverse vectors);

					scan_pleas (SEND_BYTEVECTOR vector ! rest, vectors)
					    =>
					    scan_pleas (rest, vector ! vectors);

					scan_pleas (SEND_BYTEVECTORS vectors' ! rest, vectors)
					    =>
					    scan_pleas (rest, (reverse vectors') @ vectors);

					scan_pleas (rest as (FLUSH _ ! _), vectors)
					    =>
					    (rest, reverse vectors);
				    end;
				end;
			end;
		    end;												# fun loop
	    end;													# fun run
	
	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Configstate(X), Exports) ))   ()				# Root fn of imp microthread.  Note currying.
	    =
	    {   configstate  =  make_mailslot  ()	:  Configstate(X);
		#
		outbuf_port =  { put_value, put_values, flush_outbuf };

		to          =  make_replyqueue();

		put_in_oneshot (reply_oneshot, (configstate, { outbuf_port }));						# Return value from make_sample_ximp().

		(take_from_mailslot  configstate)									# Input args from configure_sample_imp().
		    ->
		    { me, imports, run_gun', end_gun', socket };

log::note_on_stderr .{ "startup() blocking waiting for run_gun'...   -- outbuf-ximp.pkg\n"; };
		block_until_mailop_fires  run_gun';									# Wait for the starting gun.
log::note_on_stderr .{ "startup() done     waiting for run_gun'...   -- outbuf-ximp.pkg\n"; };

		run { me, outbuf_q, imports, to, end_gun', socket };							# Will not return.
	    }
	    where
		outbuf_q =  make_mailqueue (get_current_microthread())	:  Outbuf_Q;

		fun put_value (vector: v1u::Vector)									# External entrypoint.
		    =	
{
log::note_on_stderr .{ "put_value/AAA...   -- outbuf-ximp.pkg\n"; };
		    put_in_mailqueue  (outbuf_q, SEND_BYTEVECTOR vector);
};

		fun put_values (vectors: List(v1u::Vector))									# External entrypoint.
		    =	
{
log::note_on_stderr .{ "put_values/AAA...   -- outbuf-ximp.pkg\n"; };
		    put_in_mailqueue  (outbuf_q, SEND_BYTEVECTORS vectors);
};

		fun flush_outbuf (signal_fn: Void -> Void)								# External entrypoint.
		    =	
{
log::note_on_stderr .{ "flush_outbuf/AAA...   -- outbuf-ximp.pkg\n"; };
		    put_in_mailqueue  (outbuf_q, FLUSH signal_fn);
};
	    end;

        ##########################################################################################
	# External entrypoints
	#
	fun make_outbuf_ximp_state ()											# External entrypoint.
	    =
	    REF ();

	fun make_outbuf_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Configstate(X), Exports) );
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };

	fun configure_outbuf_ximp											# External entrypoint.
	      (
		configstate:	Configstate(X),
		me:		Outbuf_Ximp_State,
		imports:	Imports,
		run_gun':	Run_Gun,
		end_gun':	End_Gun,
		socket:		sok::Socket (X, sok::Stream(sok::Active))						# Socket to read.
	      )
	    =
	    put_in_mailslot  (configstate, { me, imports, run_gun', end_gun', socket });

    };															# package outbuf_ximp
end;

#	fun out_msg_to_string FLUSH_OUTBUF
#		=>
#		"OutFlush";
#
#	    out_msg_to_string SHUT_DOWN_OUTBUF
#		=>
#		"OutQuit";
#
#	    out_msg_to_string (ADD_TO_OUTBUF v)
#		=>
#		{   prefix_to_show
#			=
#			byte::unpack_string_vector
#			    (vector_slice_of_one_byte_unts::make_slice
#				(v, 0, max_chars_to_trace_per_send)
#			    );
#
#		    case max_chars_to_trace_per_send
#			#
#			THE n =>    cat [ "Sent to X server: ",   string_to_hex    prefix_to_show,
#					  "... == \"",            string_to_ascii  prefix_to_show,
#					  "\"... (", int::to_string (v1u::length v), " bytes)"
#					];
#
#			NULL =>    cat [ "Sent to X server: ",    string_to_hex    prefix_to_show,
#					  " == \"",               string_to_ascii  prefix_to_show,
#					  "\"  (", int::to_string (v1u::length v), " bytes)"
#					];
#		    esac;
#		};	
#	end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
