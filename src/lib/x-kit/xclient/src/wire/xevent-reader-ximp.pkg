## xevent-reader-ximp.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# X event buffer imp.
#
# Here we decode and buffer X events
# from the X-server -- keystrokes,
# mouseclicks, mouse-motions etc.
#
# We also pack expose events.
# 
# We communicate via two mailslots as follows:
# 
#   from_sequencer_mailslot      --  raw messages from the sequencer_imp
#   to_widget_mailslot           --  decoded events headed for the appropriate widget.
#
# X events that we send to 'to_widget_mailslot' get routed by
#     xsocket_to_topwindow
# from
#     src/lib/x-kit/xclient/src/window/xsocket-to-topwindow-router.pkg
#
# to the correct topwindow, where they get routed on down that window's widget-tree by
#     topwindow_to_widget_router
# from
#     src/lib/x-kit/xclient/src/window/topwindow-to-widget-router.pkg
#
# This machinery mostly gets wired up in display and xsession from (respectively)
#
#     src/lib/x-kit/xclient/src/wire/display.pkg
#     src/lib/x-kit/xclient/src/window/xsession.pkg
# 
# -- see the dataflow diagram in top-of-file comments there.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;					# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package et  =  event_types;				# event_types				is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package un  =  unt;					# unt					is from   src/lib/std/unt.pkg
    package v1u =  vector_of_one_byte_unts;		# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package w2v =  wire_to_value;			# wire_to_value				is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xg  =  xgeometry;				# xgeometry				is from   src/lib/std/2d/xgeometry.pkg
    package xms =  xmsg_sink;				# xmsg_sink				is from   src/lib/x-kit/xclient/src/wire/xmsg-sink.pkg
    package xtr =  xlogger;				# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    trace =  xtr::log_if  xtr::io_logging  0;		# Conditionally write strings to tracing.log or whatever.
herein


    package   xevent_reader_ximp
    : (weak)  Xevent_Reader_Ximp			# Xevent_Reader_Ximp			is from   src/lib/x-kit/xclient/src/wire/xevent-reader-ximp.api
    {

	Run_Gun =  Mailop(Void);			# Purely for readability.
	End_Gun =  Mailop(Void);			# Purely for readability.

	# Xmsg pleas to xevent_reader:
	#
	Xmsgplea					# 'Plea_Mail' in xsocket.pkg
	  = PLEA_NOTE_XMSG xms::Xmsg
	  ;


	Xevent_Reader_Ximp_State			# Opaque wrapper for all nonephemeral mutable state maintained by ximp.
	    =
	    Ref { front:    List( et::x::Event ),
		  rear:	    List( et::x::Event )
		};

	Imports = { xmsg_sink:	xms::Xmsg_Sink };	# To forward Xmsgs toward the widget tree.

	Configstate = Mailslot(   { imports:	Imports,
				    me:		Xevent_Reader_Ximp_State,
				    run_gun':	Run_Gun,
				    end_gun':	End_Gun
				  }
			       );

	Xmsgq     = Mailqueue( Xmsgplea );


	Exports	= { xmsg_sink:		xms::Xmsg_Sink									# From xserver via inbuf and sequencer.
		  };





	
	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		  me:			Xevent_Reader_Ximp_State,							# State which is preserved across imp shutdown/restart cycles.
		  imports:		Imports,									# Ximps to which we send requests.
		  to:			Replyqueue(Void),								# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		  end_gun':		End_Gun,									# We shut down the microthread when this fires.
		  xmsgq:		Xmsgq										# 
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                         ==>  shut_down_xevent_reader_imp'),
			    (take_from_mailqueue' xmsgq       ==>  do_xmsgplea)
			];

			loop ();
		    }	
		    where
			fun shut_down_xevent_reader_imp' ()
			    =
			    thread_exit { success => TRUE };								# Will not return.	
			#

			fun do_xmsgplea (PLEA_NOTE_XMSG xmsg)
			        =
			        ();											# Will not return.	
#			end;
		    end;												# fun loop
	    end;													# fun run
	
	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Configstate, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   configstate =  make_mailslot  ()	:  Configstate;

		xmsg_sink  = { put_value };

		to         =  make_replyqueue();

		put_in_oneshot (reply_oneshot, (configstate, { xmsg_sink }));						# Return value from make_xevent_reader_ximp().

		(take_from_mailslot  configstate)									# Input args from configure_xevent_reader_imp().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, xmsgq, imports, to, end_gun' };								# Will not return.
	    }
	    where
		xmsgq =  make_mailqueue (get_current_microthread())	:  Xmsgq;

		#
		fun put_value (xmsg: xms::Xmsg)										# External entrypoint.
		    =	
		    put_in_mailqueue  (xmsgq, PLEA_NOTE_XMSG xmsg);
	    end;

        ##########################################################################################
	# External entrypoints
	#
	fun make_xevent_reader_ximp_state ()										# External entrypoint.
	    =
	    REF { front =>  []:   List( et::x::Event ),
		  rear  =>  []:   List( et::x::Event )
	        };
	#
	fun make_xevent_reader_ximp  (name: String)									# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( (Configstate, Exports) );
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };
	#
	fun configure_xevent_reader_ximp										# External entrypoint.
	      (
		configstate:	Configstate,
		me:		Xevent_Reader_Ximp_State,
		imports:	Imports,
		run_gun':	Run_Gun,
		end_gun':	End_Gun
	      )
	    =
	    put_in_mailslot  (configstate, { me, imports, run_gun', end_gun' });
    };						# package xevent_reader_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
