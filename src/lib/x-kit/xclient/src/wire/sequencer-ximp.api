## sequencer-ximp.api
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# Use protocol is:
#
# Next up is parameter support for:
#    error_sink
#    to_x_sink
#    from_x_mailqueue
#
#   {   (make_run_gun  ())   ->   { run_gun',  fire_run_gun  };
#	(make_end_gun ())   ->   { end_gun', fire_end_gun };
#
#	sx_state = sx::make_sequencer_ximp_state ();
#	sx_ports = sx::make_sequencer_ximp "Some name";
#       sx       = sx_ports.clientport;								# The clientport represents the imp for most purposes.
#
#       ...											# Create other app imps.
#
#	sx::configure_sequencer_imp
#         (sxports.configport, sx_state, { ... }, run_gun', end_gun' );		# Wire imp to other imps.
#												# All imps will start when run_gun' fires.
#
#       ...											# Wire up other app imps similarly.
#
#	fire_run_gun ();									# Start all app imps running.
#
#	sx::do_something           (sx, 12);							# Many calls like this over lifetime of imp.
#       ...											# Similar calls to other app imps.
#
#	fire_end_gun ();									# Shut the imp down cleanly.
#   };

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package op  =  outbuf_port;									# outbuf_port					is from   src/lib/x-kit/xclient/src/wire/outbuf-port.api
    package sp  =  sequencer_port;								# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.api
    package xms =  xmsg_sink;									# xmsg_sink					is from   src/lib/x-kit/xclient/src/wire/xmsg-sink.pkg
herein


    # This api is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    #
    api Sequencer_Ximp
    {
	Run_Gun  = Mailop(Void);								# Purely for readability.
	End_Gun = Mailop(Void);								# Purely for readability.

	Sequencer_Ximp_State;									# Opaque wrapper for all mutable state maintained by ximp.

	Configport;										# Used only for start_up() call.
	Patronport;										# Used to shut down the imp.

	Inports	  = { configport:		Configport,
		      patronport:		Patronport,
		      xmsg_sink:		xms::Xmsg_Sink,					# For xmsgs from xserver via inbuf.
		      sequencer_port:		sp::Sequencer_Port				# Requests from widget/application code.
		    };

	Outports  = { outbuf_port:		op::Outbuf_Port,
		      xerror_sink:		xms::Xmsg_Sink					# Sends errors to err_handler() in  src/lib/x-kit/xclient/src/wire/display.pkg  via  read_xerror() in  src/lib/x-kit/xclient/src/wire/xsocket.pkg
		    };

	make_sequencer_ximp_state: Void -> Sequencer_Ximp_State;

	make_sequencer_ximp:  String -> Inports;						# String gives name for imp microthread.  Inports gives access to it.

	configure_sequencer_ximp								# Supply all information required for startup.
	    :
	    (Configport, Sequencer_Ximp_State, Outports, Run_Gun, End_Gun)
	    ->
	    Void;
												# Imp will start reading from clientport+patronport after run_gun' fires.

	shut_down_sequencer_ximp:	Patronport -> Void;					# Shut down the ximp.
    };												# api Sequencer_Ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
