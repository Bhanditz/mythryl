## sequencer-ximp.api
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# Use protocol is:
#
# Next up is parameter support for:
#    error_sink
#    to_x_sink
#    from_x_mailqueue
#
#   {	startflag = make_maildrop ():  Maildrop(Void);
#       startflag' = get_from_maildrop' startflag;
#
#	sx_ports = sx::make_sequencer_ximp "Some name";
#       p        = sxports.initialport; 
#       ...										# Create other app imps.
#
#	p = sx::initial::note_links (p, { send_error, send_to_x_server, from_x_mailqueue } );
#	sx::initial::start_on (p, startflag');						# All imps will start when the startflag is set.
#
#       ...										# Wire up other app imps similarly.
#
#	put_in_maildrop (startflag, ());						# Start all app imps running.
#
#	sx::do_something           (sxports.runtimeport, 12);				# Many calls like this over lifetime of imp.
#       ...										# Similar calls to other app imps.
#
#	sx::control::stop	   (sxports.controlport);				# Shut the imp down cleanly.
#   };

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;									# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein


    # This api is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    #
    api Sequencer_Ximp
    {
	Initialport;
	Initialport2;
	Runtimeport;
	Controlport;

	Ports	= { initialport: Initialport,
		    runtimeport: Runtimeport,
		    controlport: Controlport
		  };

	Links = (Int -> Void);

	make_sequencer_ximp
	    :
	    String									# Name for imp microthread
	    ->
	    Ports;

	package initial: api {
	    #	
	    note_links: (Initialport, Links) -> Initialport2;				# Abstracted link to another imp.
	    #	
	    start_on:  (Initialport2, Mailop(Void)) -> Void;				# Start reading from runtimeport after starting_gun' fires.
											# This lets all the imps in app be started up "simultaneously".
	};

	package control: api {
	    #	
	    stop:	Controlport -> Void;						# Shut down the ximp.
	};

	do_something:    (Runtimeport, Int) -> Void;
    };											# api Sequencer_Ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
