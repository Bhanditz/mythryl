## sequencer-port.pkg
#
# Requests from app/widget code to the sequencer.
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;														# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package et  =  event_types;													# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package v1u =  vector_of_one_byte_unts;											# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package xg  =  xgeometry;													# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    #
    package sequencer_port {
	#
	Xerror    = { seqn: Unt,  msg: v1u::Vector };										# Sequence number, message-bytes.

	Sequencer_Port
	  =
	  {
	    send_xrequest:				v1u::Vector -> Void,

	    send_xrequest_and_read_reply:		v1u::Vector -> Mailop( v1u::Vector ),
	    send_xrequest_and_pass_reply:		v1u::Vector -> Replyqueue(Void) -> (v1u::Vector -> Void) -> Void,

	    send_xrequest_and_return_completion_mailop:	v1u::Vector -> Mailop( Void ),
	    send_xrequest_and_pass_completion_flag:	v1u::Vector -> Replyqueue(Void) -> (Void -> Void) -> Void,		# Signal fn will be called when request is confirmed executed on X server.

	    send_xrequest_and_handle_exposures:		(v1u::Vector,  Oneshot_Maildrop( Void -> List( xg::Box ))) -> Void,



	    flush_xsocket:				(Void -> Void) -> Void							# Given signal_fn will be called when all preceding requests have been written to socket.

	    # We provide no call to close the socket;
	    # We regard that as not our responsibility.

	    # Unused so not implemented: 
	    #
#	    sent_xrequest_and_read_replies:	(v1u::Vector, (v1u::Vector -> Int)) ->  Mailop( v1u::Vector ),
	  };
    };																# package sequencer_ximp_from_app_clientport
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
