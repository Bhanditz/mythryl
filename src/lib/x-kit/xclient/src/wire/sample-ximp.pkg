## sample-ximp.pkg
#
# This file is intended purely for clone-and-mutate
# construction of new X imps ("ximps").
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;					# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package xtr =  xlogger;				# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    trace =  xtr::log_if  xtr::io_logging  0;		# Conditionally write strings to tracing.log or whatever.
herein


    package   sample_ximp
    : (weak)  Sample_Ximp				# Sample_Ximp				is from   src/lib/x-kit/xclient/src/wire/sample-ximp.api
    {
	Starting_Gun = Mailop(Void);			# Purely for readability.
	#
	Sample_Ximp_State				# Opaque wrapper for all nonephemeral mutable state maintained by ximp.
	    =
	    Ref( Void );

	Links = { int_sink: Int -> Void };

	Configport = Mailslot( {  links: Links,  me: Sample_Ximp_State,  starting_gun': Starting_Gun  } );

	Patronplea  =  STOP
		    ;
	Patronport = Mailslot( Patronplea );


	Clientplea  =  DO_SOMETHING Int
		    |  PASS_SOMETHING Oneshot_Maildrop( Int )
		    ;
	Clientport = Mailqueue( Clientplea );


	Ports	= { configport:		Configport,
		    clientport:		Clientport,
		    patronport:		Patronport
		  };


	fun run {   me:			Sample_Ximp_State,								# These four values will be statically globally visible
		    patronport:		Patronport,									# throughout the code body for the imp.
		    clientport:		Clientport,
		    links:		Links,
		    to:			Replyqueue									# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (take_from_mailslot'  patronport  ==>  do_patronplea),
			    (take_from_mailqueue' clientport  ==>  do_clientplea)
			];

			loop ();
		    }	
		    where
			fun shut_down_sample_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_patronplea  STOP
			    =
			    shut_down_sample_imp' ();									# Will not return.	

			fun do_clientplea  (DO_SOMETHING i)
			        =>
				{   links.int_sink i;									# Demonstrate use of links.
				};

			    do_clientplea  (PASS_SOMETHING reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, 0);
				};
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( Ports ))   ()							# Root fn of imp microthread.  Note currying.
	    =
	    {   configport =  make_mailslot  ():  Configport;
		patronport =  make_mailslot  ():  Patronport;
		clientport =  make_mailqueue ():  Clientport;

		to         =  make_replyqueue();

		put_in_oneshot (reply_oneshot, { configport, patronport, clientport });					# Return value from make_sample_ximp().

		(take_from_mailslot  configport)									# Input args from configure_sample_ximp().
		    ->
		    { me, links, starting_gun' };

		block_until_mailop_fires  starting_gun';								# Wait for the starting gun.

		run { me, patronport, clientport, links, to };								# Will not return.
	    };

        ##########################################################################################
	# External entrypoints
	#
	fun make_sample_ximp_state ()											# External entrypoint.
	    =
	    REF ();

	fun make_sample_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( Ports );
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };

	fun do_something (args as (mailqueue: Clientport,  i: Int))							# External entrypoint.
	    =	
	    put_in_mailqueue  (mailqueue, DO_SOMETHING i);


	fun pass_something  (mailqueue: Clientport)  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)
	    =
	    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
		#
		put_in_mailqueue  (mailqueue, PASS_SOMETHING reply_oneshot);

		put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
	    };

	fun configure_sample_ximp											# External entrypoint.
	      (
		configport:	Configport,
		me:		Sample_Ximp_State,
		links:		Links,
		starting_gun':	Starting_Gun
	      )
	    =
	    put_in_mailslot  (configport, { me, links, starting_gun' });

	fun shut_down_sample_ximp  (patronport: Patronport)								# External entrypoint.
	    =
	    put_in_mailslot  (patronport,  STOP);
    };															# package sample_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
