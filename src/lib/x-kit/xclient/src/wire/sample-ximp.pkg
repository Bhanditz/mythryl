## sample-ximp.pkg
#
# This file is intended purely for clone-and-mutate
# construction of new X imps ("ximps").
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession-old.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;													# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein


    package   sample_ximp
    : (weak)  Sample_Ximp												# Sample_Ximp				is from   src/lib/x-kit/xclient/src/wire/sample-ximp.api
    {
	include sample_port;												# sample_port				is from   src/lib/x-kit/xclient/src/wire/sample-port.pkg
	#
	Sample_Ximp_State = Ref( Void );										# Opaque wrapper for all nonephemeral mutable state maintained by ximp.

	Imports = {													# Ports we use, provided by other imps.
		    int_sink: Int -> Void
		  };

	Configstate = Mailslot( { imports:	Imports,
				  me:		Sample_Ximp_State,
				  run_gun':	Run_Gun,
				  end_gun':	End_Gun
                                }
                              );

	Sample_Plea =  DO_SOMETHING Int
		    |  PASS_SOMETHING Oneshot_Maildrop( Int )
		    ;
	Sample_Q    = Mailqueue( Sample_Plea );


	Exports	= {													# Ports we provide for use by other imps.
		    sample_port:	Sample_Port
		  };


	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		    me:			Sample_Ximp_State,								# State which is preserved across imp shutdown/restart cycles.
		    imports:		Imports,									# Ximps to which we send requests.
		    to:			Replyqueue,									# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		    end_gun':		End_Gun,									# We shut down the microthread when this fires.
		    sample_q:		Sample_Q									# 
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                         ==>  shut_down_sample_imp'),
			    (take_from_mailqueue' sample_q    ==>  do_sample_plea)
			];

			loop ();
		    }	
		    where
			fun shut_down_sample_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_sample_plea  (DO_SOMETHING i)
			        =>
				{   imports.int_sink i;									# Demonstrate use of imports.
				};

			    do_sample_plea  (PASS_SOMETHING reply_oneshot)
				=>
				{   put_in_oneshot (reply_oneshot, 0);
				};
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Configstate, Exports) ))   ()					# Root fn of imp microthread.  Note currying.
	    =
	    {   configstate  =  make_mailslot  ()	:  Configstate;

		sample_port = { do_something, pass_something };

		to          =  make_replyqueue();
		#
		put_in_oneshot (reply_oneshot, (configstate, { sample_port }));						# Return value from make_sample_ximp().

		(take_from_mailslot  configstate)									# Input args from configure_sample_ximp().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, sample_q, imports, to, end_gun' };								# Will not return.
	    }
	    where
		sample_q     =  make_mailqueue (get_current_microthread()):  Sample_Q;

		fun do_something (i: Int)										# External entrypoint.
		    =	
		    put_in_mailqueue  (sample_q, DO_SOMETHING i);


		fun pass_something  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (sample_q, PASS_SOMETHING reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };
	    end;


        ##########################################################################################
	# External entrypoints
	#
	fun make_sample_ximp_state ()											# External entrypoint.
	    =
	    REF ();

	fun make_sample_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop();
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried.

		get_from_oneshot  reply_oneshot;
	    };

	fun configure_sample_ximp											# External entrypoint.
	      (
		configstate:	Configstate,
		me:		Sample_Ximp_State,
		imports:	Imports,
		run_gun':	Run_Gun,
		end_gun':	End_Gun
	      )
	    =
	    put_in_mailslot  (configstate, { me, imports, run_gun', end_gun' });

    };															# package sample_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
