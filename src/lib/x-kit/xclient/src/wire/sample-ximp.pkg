## sample-ximp.pkg
#
# This file is intended purely for clone-and-mutate
# construction of new X imps ("ximps").
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;					# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package xtr =  xlogger;				# xlogger				is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg
    #
    trace =  xtr::log_if  xtr::io_logging  0;		# Conditionally write strings to tracing.log or whatever.
herein


    package   sample_ximp
    : (weak)  Sample_Ximp				# Sample_Ximp				is from   src/lib/x-kit/xclient/src/wire/sample-ximp.api
    {

	Initialplea  =   START_ON  Maildrop(Void)
		     |   NOTE_INT_SINK (Int -> Void)
		     ;
	Initialport  = Mailslot( Initialplea );
	Initialport2 = Initialport;

	Controlplea =   STOP
		    ;
	Controlport = Mailslot( Controlplea );


	Runtimeplea =   DO_SOMETHING Int
		    ;
	Runtimeport = Mailqueue( Runtimeplea );


	Ports	= { initialport:  Initialport,
		    runtimeport:  Runtimeport,
		    controlport:  Controlport
		  };





        ##########################################################################################
	# External entrypoints
	#
	fun make_sample_ximp  (name: String)										# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop():  Oneshot_Maildrop( Ports );
		#
		xlogger::make_thread  name  (start_initial_loop  reply_oneshot);

		get_from_oneshot  reply_oneshot;
	    }
	    where
		fun start_initial_loop (result_oneshot: Oneshot_Maildrop( Ports )) ()
		    =
		    {   parameters =  (fn _ = ());
			#
			initial_loop  parameters;									# Will not return.
		    }
		    where
			initialport =  make_mailslot  ():  Mailslot(  Initialplea );
			controlport =  make_mailslot  ():  Mailslot(  Controlplea );
			runtimeport =  make_mailqueue ():  Mailqueue( Runtimeplea );

			put_in_oneshot (result_oneshot, { initialport, controlport, runtimeport });

			fun initial_loop  parameters
			    =
			    {   do_initialplea  (get_from_mailslot  initialport)
				where
				    fun do_initialplea  (START_ON  maildrop)
					    =>
					    {   take_from_maildrop  maildrop;							# Wait for the starting gun.
						#
						initial_state = ();

						runtime_loop  initial_state;							# Will not return.
					    };

					 do_initialplea  (NOTE_INT_SINK  int_sink)
					    =>
					    initial_loop  int_sink;
				    end;
				end;
			    }
			    where
				fun runtime_loop  state
				    =
				    do_one_mailop [
					#
					(get_from_mailslot'  controlport ==> do_controlplea),

					(take_from_mailqueue' runtimeport ==> do_runtimeplea)
				    ]
				    where
					fun shut_down_sample_imp ()
					    =
					    {
						thread_exit { success => TRUE };					# Will not return.	
					    };

					fun do_controlplea  STOP
					    =
					    shut_down_sample_imp ();							# Will not return.	

					fun do_runtimeplea  (DO_SOMETHING i)
					    =
					    {   # Insert code to do something here ...
						#
						runtime_loop state;
					    };
				    end;
			    end;
		    end;
	    end;

	
	fun do_something (args as (mailqueue: Runtimeport,  i: Int))							# External entrypoint.
	    =	
	    put_in_mailqueue  (mailqueue, DO_SOMETHING i);

	package initial {
	    #
	    fun note_int_sink (mailslot: Initialport,   int_sink: Int -> Void)						# External entrypoint.
		=
		{   put_in_mailslot  (mailslot,  NOTE_INT_SINK int_sink);
		    mailslot;
		};

	    fun start_on  (mailslot: Initialport2,   maildrop: Maildrop(Void))						# External entrypoint.
		=
		put_in_mailslot  (mailslot,  START_ON maildrop);
	};

	package control {
	    #
	    fun stop  (mailslot: Controlport)										# External entrypoint.
		=
		put_in_mailslot  (mailslot,  STOP);
	};


    };						# package sample_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
