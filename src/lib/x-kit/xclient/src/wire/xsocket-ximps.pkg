## xsocket-ximps.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#
# xsocket-ximps wraps up the ximps
#
#    inbuf_ximp;						# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
#    outbuf_ximp;						# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
#    xsequencer_ximp;						# xsequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/xsequencer-ximp.pkg
#    decode_xpackets_ximp;					# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg
#
# to look like a single logical ximp to the rest of
# the system.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;						# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package un  =  unt;						# unt						is from   src/lib/std/unt.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package w2v =  wire_to_value;				# wire_to_value					is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xg  =  xgeometry;					# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xtr =  xlogger;					# xlogger					is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package sok =  socket__premicrothread;			# socket__premicrothread			is from   src/lib/std/socket--premicrothread.pkg

    package op  =  outbuf;					# outbuf					is from   src/lib/x-kit/xclient/src/wire/outbuf.pkg
    package sp  =  xsequencer;					# xsequencer					is from   src/lib/x-kit/xclient/src/wire/xsequencer.pkg
    package xes =  xevent_sink;					# xevent_sink					is from   src/lib/x-kit/xclient/src/wire/xevent-sink.pkg
    package xew =  xerror_well;					# xerror_well					is from   src/lib/x-kit/xclient/src/wire/xerror-well.pkg
    package xt  =  xtypes;					# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package et  =  event_types;					# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg

    package ix  =  inbuf_ximp;					# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
    package ox  =  outbuf_ximp;					# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
    package xx  =  xsequencer_ximp;				# xsequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/xsequencer-ximp.pkg
    package dxx =  decode_xpackets_ximp;			# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg

herein

    # This impset is typically instantiated by:
    #
    #     src/lib/x-kit/xclient/src/wire/xsocket-ximps.pkg

    package   xsocket_ximps
    :         Xsocket_Ximps									# Xsocket_Ximps					is from   src/lib/x-kit/xclient/src/wire/xsocket-ximps.api
    {

	Imports  =  {										# Ports we use, provided by other imps.
		      xevent_sink:		xes::Xevent_Sink				# Carries xevents from decode_xpackets_ximp to "xbuf to widgettree root xevent router imp".
		    };


	# We export two ports for use by external ximps,
	# who will send requests to them:
	#
	#  o Configstate for initial configuration.
	#  o xsequencer for widget requests.
	#
	Exports  =  {										# Ports we provide for use by other imps.
		      xsequencer:		sp::Xsequencer,					# Requests from widget/application code.
		      xerror_well:		xew::Xerror_Well				# Errors from the X server.
		    };

	Option = MICROTHREAD_NAME String;							# 

	Egg =  Void -> (Exports,   (Imports, Run_Gun, End_Gun) -> Void);



	fun process_options (options: List(Option), { name })
	    =
	    {   my_name   = REF name;
		#
		apply  do_option  options
		where
		    fun do_option (MICROTHREAD_NAME n)  =   my_name := n;
		end;

		{ name => *my_name };
	    };

        ##########################################################################################
	# External entrypoints
	#
	fun make_xsocket_ximps_egg												# PUBLIC. PHASE 1: Construct our state and initialize from 'options'.
	      (
		socket:		sok::Socket (X, sok::Stream(sok::Active)),							# Socket to use.
		options:	List(Option)
	      )
	    =
	    {   (process_options (options, { name => "tmp" }))
		    ->
		    { name };

		me =	{ inbuf_egg		=>   ix::make_inbuf_egg  (socket, []),
			  outbuf_egg		=>   ox::make_outbuf_egg (socket, []),
			  xsequencer_egg	=>   xx::make_xsequencer_egg      [],
			  decode_xpackets_egg	=>  dxx::make_decode_xpackets_egg []
			};

		fn () = {												# PUBLIC. PHASE 2: Start our microthread and return our Exports to caller.
			    #
			    (me.inbuf_egg		()) ->  (inbuf_exports,			      inbuf_egg');
			    (me.outbuf_egg		()) ->  (outbuf_exports,		     outbuf_egg');
			    (me.xsequencer_egg		()) ->  (xsequencer_exports,		 xsequencer_egg');
			    (me.decode_xpackets_egg	()) ->  (decode_xpackets_exports, decode_xpackets_egg');

			    xsequencer  =  xsequencer_exports.xsequencer;
			    xerror_well =  xsequencer_exports.xerror_well;


			    phase3
				=
				fn  ( imports:	Imports,								# PUBLIC. PHASE 3: Accept our Imports, then wait for Run_Gun to fire.
				      run_gun':	Run_Gun,	
				      end_gun':	End_Gun
				    )
				    =
				    {
					imports -> { xevent_sink };							# xevent_sink carries xevents from decode_xpackets_ximp to xevent_router_ximp.


					inbuf_egg'		( { xpacket_sink =>  xsequencer_exports.xpacket_sink },					# Imports
								  run_gun', end_gun'
								);
					#
					outbuf_egg'		( { },											# Imports 
								  run_gun', end_gun'
								);

					xsequencer_egg'		( { outbuf	 =>  outbuf_exports.outbuf,						# Imports
								    xpacket_sink =>  decode_xpackets_exports.xpacket_sink
								  },
								  run_gun', end_gun'
								);

					decode_xpackets_egg'	( { xevent_sink },									# Imports
								  run_gun', end_gun'
								);

					();
				    };

			    ({ xsequencer, xerror_well }, phase3);
			};
	    };


    };																# package xsocket_ximps
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
