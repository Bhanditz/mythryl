## xsocket-ximps.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# xsocket-ximps wraps up the ximps
#
#    inbuf_ximp;						# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
#    outbuf_ximp;						# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
#    sequencer_ximp;						# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
#    decode_xpackets_ximp;					# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg
#
# to look like a single logical ximp to the rest of
# the system.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;						# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package un  =  unt;						# unt						is from   src/lib/std/unt.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package w2v =  wire_to_value;				# wire_to_value					is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xg  =  xgeometry;					# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xtr =  xlogger;					# xlogger					is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package sok =  socket__premicrothread;			# socket__premicrothread			is from   src/lib/std/socket--premicrothread.pkg

    package op  =  outbuf_port;					# outbuf_port					is from   src/lib/x-kit/xclient/src/wire/outbuf-port.api
    package sp  =  sequencer_port;				# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.api
    package xes =  xevent_sink;					# xevent_sink					is from   src/lib/x-kit/xclient/src/wire/xevent-sink.pkg
    package xew =  xerror_well;					# xerror_well					is from   src/lib/x-kit/xclient/src/wire/xerror-well.pkg
    package xt  =  xtypes;					# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package et  =  event_types;					# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg

    package ix  =  inbuf_ximp;					# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
    package ox  =  outbuf_ximp;					# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
    package sx  =  sequencer_ximp;				# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    package dxx =  decode_xpackets_ximp;			# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg

herein


    package   xsocket_ximps
    :         Xsocket_Ximps					# Xsocket_Ximps					is from   src/lib/x-kit/xclient/src/wire/xsocket-ximps.api
    {
	Run_Gun =  Mailop(Void);				# Purely for readability.
	End_Gun =  Mailop(Void);				# Purely for readability.


	# Our state is just the collected
	# states of our sub-ximps:
	#
	Xsocket_Ximps_State					# Opaque wrapper for all nonephemeral mutable state maintained by ximps.
	    =
	    { inbuf_ximp_state: 		ix::Inbuf_Ximp_State,
	      outbuf_ximp_state:		ox::Outbuf_Ximp_State,
	      sequencer_ximp_state:		sx::Sequencer_Ximp_State,
	      decode_xpackets_ximp_state:	dxx::Decode_Xpackets_Ximp_State
	    };

	Configstate(X)
	    =
	    { inbuf_ximp_configstate: 		ix::Configstate(X),
	      outbuf_ximp_configstate:		ox::Configstate(X),
	      sequencer_ximp_configstate:	sx::Configstate,
	      decode_xpackets_ximp_configstate:	dxx::Configstate,
	      #
	      inbuf_ximp_exports: 		ix::Exports,
	      outbuf_ximp_exports:		ox::Exports,
	      sequencer_ximp_exports:		sx::Exports,
	      decode_xpackets_ximp_exports:	dxx::Exports
	    };

	# We need to know about two external ports:
	#
	#  o Where to send xevents from the X server.
	#  o Where to send xerror messages from the X server.
	#
	Imports  =  {										# Ports we use, provided by other imps.
		      xevent_sink:		xes::Xevent_Sink				# Carries xevents from decode_xpackets_ximp to "xbuf to widgettree root xevent router imp".
		    };


	# We export two ports for use by external ximps,
	# who will send requests to them:
	#
	#  o Configstate for initial configuration.
	#  o sequencer_port for widget requests.
	#
	Exports  =  {										# Ports we provide for use by other imps.
		      sequencer_port:		sp::Sequencer_Port,				# Requests from widget/application code.
		      xerror_well:		xew::Xerror_Well				# Errors from the X server.
		    };




        ##########################################################################################
	# External entrypoints
	#
	fun make_xsocket_ximps_state ()												# External entrypoint.
	    =
	    { inbuf_ximp_state		 =>   ix::make_inbuf_ximp_state (),
	      outbuf_ximp_state		 =>   ox::make_outbuf_ximp_state (),
	      sequencer_ximp_state	 =>   sx::make_sequencer_ximp_state (),
	      decode_xpackets_ximp_state =>  dxx::make_decode_xpackets_ximp_state ()
	    };

	#
	fun make_xsocket_ximps  (name: String)											# External entrypoint.
	    =
	    {   ( ix::make_inbuf_ximp		name) ->  (          inbuf_ximp_configstate,             inbuf_ximp_exports);
		( ox::make_outbuf_ximp		name) ->  (         outbuf_ximp_configstate,            outbuf_ximp_exports);
		( sx::make_sequencer_ximp	name) ->  (      sequencer_ximp_configstate,         sequencer_ximp_exports);
		(dxx::make_decode_xpackets_ximp	name) ->  (decode_xpackets_ximp_configstate,   decode_xpackets_ximp_exports);

		configstate = { inbuf_ximp_configstate, outbuf_ximp_configstate, sequencer_ximp_configstate, decode_xpackets_ximp_configstate,
				inbuf_ximp_exports,     outbuf_ximp_exports,     sequencer_ximp_exports,     decode_xpackets_ximp_exports
			      }; 

		sequencer_port =  sequencer_ximp_exports.sequencer_port;
		xerror_well    =  sequencer_ximp_exports.xerror_well;

		(configstate, { sequencer_port, xerror_well });
	    };
	#
	#
	fun configure_xsocket_ximps												# External entrypoint.
	      (
		cs:				Configstate(X),
		me:				Xsocket_Ximps_State,
		{ xevent_sink }:		Imports,									# Carries xevents from decode_xpackets_ximp to xevent_router_ximp.
		run_gun':			Run_Gun,
		end_gun':			End_Gun,
	        sok:				sok::Socket (X, sok::Stream(sok::Active))					# Socket to use.
	      )
	    =
	    {    ix::configure_inbuf_ximp		(cs.inbuf_ximp_configstate,	   me.inbuf_ximp_state,			{ xpacket_sink =>  cs.sequencer_ximp_exports.xpacket_sink },	run_gun', end_gun', sok);

		 ox::configure_outbuf_ximp		(cs.outbuf_ximp_configstate,	   me.outbuf_ximp_state,		{ },								run_gun', end_gun', sok);

		 sx::configure_sequencer_ximp		(cs.sequencer_ximp_configstate,	   me.sequencer_ximp_state,		{ outbuf_port  =>  cs.outbuf_ximp_exports.outbuf_port,
																  xpacket_sink =>  cs.decode_xpackets_ximp_exports.xpacket_sink
																},							 	run_gun', end_gun');

		dxx::configure_decode_xpackets_ximp	(cs.decode_xpackets_ximp_configstate, me.decode_xpackets_ximp_state,	{ xevent_sink },						run_gun', end_gun');
	    };
    };																# package xsocket_ximps
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
