## xsocket-ximps.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# xsocket-ximps wraps up the ximps
#
#    inbuf_ximp;					# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
#    outbuf_ximp;					# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
#    sequencer_ximp;					# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
#    xevent_reader_ximp;				# xevent_reader_ximp				is from   src/lib/x-kit/xclient/src/wire/xevent-reader-ximp.pkg
#
# to look like a single logical ximp to the rest of
# the system.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;						# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package un  =  unt;						# unt						is from   src/lib/std/unt.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package w2v =  wire_to_value;				# wire_to_value					is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xg  =  xgeometry;					# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xtr =  xlogger;					# xlogger					is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package sok =  socket__premicrothread;			# socket__premicrothread			is from   src/lib/std/socket--premicrothread.pkg

    package op  =  outbuf_port;					# outbuf_port					is from   src/lib/x-kit/xclient/src/wire/outbuf-port.api
    package sp  =  sequencer_port;				# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.api
    package xes =  xerror_sink;					# xerror_sink					is from   src/lib/x-kit/xclient/src/wire/xmsg-error.pkg
    package xms =  xmsg_sink;					# xmsg_sink					is from   src/lib/x-kit/xclient/src/wire/xmsg-sink.pkg
    package xt  =  xtypes;					# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package et  =  event_types;					# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg

    package ix  =  inbuf_ximp;					# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
    package ox  =  outbuf_ximp;					# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
    package sx  =  sequencer_ximp;				# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    package xrx =  xevent_reader_ximp;				# xevent_reader_ximp			is from   src/lib/x-kit/xclient/src/wire/xevent-reader-ximp.pkg

herein


    package   xsocket_ximps
    :         Xsocket_Ximps					# Xsocket_Ximps					is from   src/lib/x-kit/xclient/src/wire/xsocket-ximps.api
    {
	Run_Gun =  Mailop(Void);				# Purely for readability.
	End_Gun =  Mailop(Void);				# Purely for readability.


	# Our state is just the collected
	# states of our sub-ximps:
	#
	Xsocket_Ximps_State					# Opaque wrapper for all nonephemeral mutable state maintained by ximps.
	    =
	    { inbuf_ximp_state: 		ix::Inbuf_Ximp_State,
	      outbuf_ximp_state:		ox::Outbuf_Ximp_State,
	      sequencer_ximp_state:		sx::Sequencer_Ximp_State,
	      xevent_reader_ximp_state:		xrx::Xevent_Reader_Ximp_State
	    };

	Configport(X)
	    =
	    { inbuf_ximp_inports: 		ix::Inports(X),
	      outbuf_ximp_inports:		ox::Inports(X),
	      sequencer_ximp_inports:		sx::Inports,
	      xevent_reader_ximp_inports:	xrx::Inports
	    };

	# We need to know about two external ports:
	#
	#  o Where to send xevents from the X server.
	#  o Where to send xerror messages from the X server.
	#
	Outports  = { xmsg_sink:		xms::Xmsg_Sink,					# Forwards xmsgs from xevent_reader_ximp to "xbuf to widgettree root xevent router imp".
		      xerror_sink:		xes::Xerror_Sink				# Sends errors to err_handler() in  src/lib/x-kit/xclient/src/wire/display.pkg  via  read_xerror() in  src/lib/x-kit/xclient/src/wire/xsocket.pkg
		    };


	# We export two ports for use by external ximps,
	# who will send requests to them:
	#
	#  o Configport for initial configuration.
	#  o sequencer_port for widget requests.
	#
	Inports(X) =  { configport:	Configport(X),
		        sequencer_port:	sp::Sequencer_Port					# Requests from widget/application code.
		      };




        ##########################################################################################
	# External entrypoints
	#
	fun make_xsocket_ximps_state ()												# External entrypoint.
	    =
	    { inbuf_ximp_state		=>   ix::make_inbuf_ximp_state (),
	      outbuf_ximp_state		=>   ox::make_outbuf_ximp_state (),
	      sequencer_ximp_state	=>   sx::make_sequencer_ximp_state (),
	      xevent_reader_ximp_state	=>  xrx::make_xevent_reader_ximp_state ()
	    };

	#
	fun make_xsocket_ximps  (name: String)											# External entrypoint.
	    =
	    {   inbuf_ximp_inports	    =  ix::make_inbuf_ximp		name;
		outbuf_ximp_inports	    =  ox::make_outbuf_ximp		name;
		sequencer_ximp_inports	    =  sx::make_sequencer_ximp		name;
		xevent_reader_ximp_inports  = xrx::make_xevent_reader_ximp	name;

		configport = { inbuf_ximp_inports, outbuf_ximp_inports, sequencer_ximp_inports, xevent_reader_ximp_inports }; 

		sequencer_port =  sequencer_ximp_inports.sequencer_port;

		{ configport, sequencer_port };
	    };
	#
	#
	fun configure_xsocket_ximps												# External entrypoint.
	      (
		cp:				Configport(X),
		me:				Xsocket_Ximps_State,
		{ xmsg_sink, xerror_sink }:	Outports,
		run_gun':			Run_Gun,
		end_gun':			End_Gun,
	        sok:				sok::Socket (X, sok::Stream(sok::Active))					# Socket to use.
	      )
	    =
	    {    ix::configure_inbuf_ximp		(cp.inbuf_ximp_inports.configport,	   me.inbuf_ximp_state,		{ xmsg_sink   =>  cp.sequencer_ximp_inports.xmsg_sink },	run_gun', end_gun', sok);

		 ox::configure_outbuf_ximp		(cp.outbuf_ximp_inports.configport,	   me.outbuf_ximp_state,	{ },								run_gun', end_gun', sok);

		 sx::configure_sequencer_ximp		(cp.sequencer_ximp_inports.configport,	   me.sequencer_ximp_state,	{ outbuf_port =>  cp.outbuf_ximp_inports.outbuf_port,
																  xmsg_sink   =>  cp.xevent_reader_ximp_inports.xmsg_sink,
																  xerror_sink
																},							 	run_gun', end_gun');

		xrx::configure_xevent_reader_ximp	(cp.xevent_reader_ximp_inports.configport, me.xevent_reader_ximp_state, { xmsg_sink },							run_gun', end_gun');
	    };
    };																# package xsocket_ximps
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
