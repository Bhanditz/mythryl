## pen-cache.api
#
# Track graphics-contexts in the X server.
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib


stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package sp  =  sequencer_port;								# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.pkg
    package pg  =  pen_guts;									# pen_guts					is from   src/lib/x-kit/xclient/src/window/pen-guts.pkg
    package v1u =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package xt  =  xtypes;									# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein


    # This api is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/pen-cache.pkg
    #
    api Pen_Cache
    {
	Pen_Cache;										# All non-ephemeral state for pen_cache.

	make_pen_cache
	    :
	    { drawable:		xt::Drawable_Id,
	      next_xid:		Void -> xt::Xid,						# resource id allocator. Implemented by spawn_xid_factory_thread()    from   src/lib/x-kit/xclient/src/wire/display.pkg
	      note_xrequest:	v1u::Vector -> Void
	    }
	    ->
            Pen_Cache;

	allocate_graphics_context
	    :
	    Pen_Cache
	    ->
	    { pen:		pg::Pen,
	      used_mask:	Unt,
	      note_xrequest:	v1u::Vector -> Void
	    }
	    ->
	    xt::Graphics_Context_Id;								# gc_id


	allocate_graphics_context_with_font
	    :
	    Pen_Cache
	    ->
	    { pen:		pg::Pen,
	      used_mask:	Unt,
	      note_xrequest:	v1u::Vector -> Void,
	      font_id:		xt::Font_Id
	    }
	    ->
	    { gc_id:		xt::Graphics_Context_Id,
	      font_id:		xt::Font_Id
	    };

	allocate_graphics_context_and_set_font
	    :
	    Pen_Cache
	    ->
	    { pen:		pg::Pen,
	      used_mask:	Unt,
	      note_xrequest:	v1u::Vector -> Void,
	      font_id:		xt::Font_Id
	    }
	    ->
	    xt::Graphics_Context_Id;								# gc_id		

	free_graphics_context
	    :
	    Pen_Cache
	    ->
	    xt::Graphics_Context_Id
	    ->
	    Void;

	free_graphics_context_and_font
	    :
	    Pen_Cache
	    ->
	    xt::Graphics_Context_Id
	    ->
	    Void;


    };												# api Pen_Cache
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
