## keymap-port.pkg
#
# Requests from app/widget code to keymap_ximp.
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession-old.pkg
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package et  =  event_types;									# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package v1u =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package xg  =  xgeometry;									# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xt  = xtypes;									# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/keymap-ximp.pkg
    #
    package keymap_port {
	#
	Keymap_Port
	  =
	  {
	    refresh_keymap:	Void -> Void,

	    keycode_to_keysym:	et::Key_Xevtinfo -> (xt::Keysym, xt::Modifier_Keys_State),

	    given_keycode_pass_keysym								# Imp-to-imp version of previous.
		:
		et::Key_Xevtinfo -> Replyqueue
				 -> (xt::Keysym -> Void)
				 -> Void,

	    keysym_to_keycode:	xt::Keysym -> Null_Or(xt::Keycode),				# Useful for selfcheck code generating keystrokes.
		#
		# Translate a keysym to a keycode.  This is intended
		# only for occasional selfcheck use, so we just do
		# a brute-force search down every list in every slot
		# of the KEYCODE_MAP.
		#
		# Currently we ignore modifier key issues, so this
		# logic won't work very well for SHIFT-ed chars or
		# control chars.   XXX BUGGO FIXME
	
	    given_keysym_pass_keycode								# Imp-to-imp version of previous.
		:
		xt::Keysym -> Replyqueue
			   -> (Null_Or(xt::Keycode) -> Void)
			   -> Void
	  };
    };												# package keymap_ximp_from_app_clientport
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
