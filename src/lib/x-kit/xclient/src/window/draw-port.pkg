## draw-port.pkg
#
# Requests from app/widget code to the font.
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package et  =  event_types;									# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package pg  =  pen_guts;									# pen_guts					is from   src/lib/x-kit/xclient/src/window/pen-guts.pkg
    package v1u =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package xg  =  xgeometry;									# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;									# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package vu8 =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/draw-ximp.pkg
    #
    package draw_port {
	#
	package t {
	    #
	    Poly_Text
	     = TEXT  (Int, String)
	     | FONT  xt::Font_Id
	     ;
	};

	package o {
	    Draw_Opcode
	     = POLY_POINT     (Bool, List( xg::Point ))
	     | POLY_LINE      (Bool, List( xg::Point ))
	     | FILL_POLY      (xt::Shape, Bool, List( xg::Point ))
	     | POLY_SEG       List( xg::Line )
	     | POLY_BOX       List( xg::Box )
	     | POLY_FILL_BOX  List( xg::Box )
	     | POLY_ARC       List( xg::Arc )
	     | POLY_FILL_ARC  List( xg::Arc )
	     | COPY_AREA
		   ( xg::Point,
		     xt::Xid,
		     xg::Box,
		     Oneshot_Maildrop (Void -> List( xg::Box ) )
		   )
	     | COPY_PLANE
		   ( xg::Point,
		     xt::Xid,
		     xg::Box,
		     Int,
		     Oneshot_Maildrop (Void -> List( xg::Box ) )
		   )
	     | COPY_PMAREA   (xg::Point, xt::Xid, xg::Box)
	     | COPY_PMPLANE  (xg::Point, xt::Xid, xg::Box, Int)
	     | CLEAR_AREA     xg::Box
	     | PUT_IMAGE
		 {
		   to_point:  xg::Point,
		   size:      xg::Size,
		   depth:     Int,
		   lpad:      Int,
		   format:    xt::Image_Format,
		   data:      vu8::Vector
		 }
	     | POLY_TEXT8   (xt::Font_Id, xg::Point, List(t::Poly_Text))
	     | IMAGE_TEXT8  (xt::Font_Id, xg::Point, String)
	     ;
	};

	package i {
	    #
	    Destroy_Item
	     = WINDOW  xt::Window_Id
	     | PIXMAP  xt::Pixmap_Id
	     ;
	};


	Draw_Port
	  =
	  {
#	    draw_polypoint:		xt::Xid -> pg::Pen ->  (Bool, List( xg::Point ))		-> Void,
#	    draw_polyline:		xt::Xid -> pg::Pen ->  (Bool, List( xg::Point ))		-> Void,
#	    draw_filled_polygon:	xt::Xid -> pg::Pen ->  (xt::Shape, Bool, List( xg::Point ))	-> Void,
#	    draw_poly_seg:		xt::Xid -> pg::Pen ->  List( xg::Line )				-> Void,
#	    draw_poly_box:		xt::Xid -> pg::Pen ->  List( xg::Box  )				-> Void,
#	    draw_poly_filled_box:	xt::Xid -> pg::Pen ->  List( xg::Box  )				-> Void,
#	    draw_poly_arc:		xt::Xid -> pg::Pen ->  List( xg::Arc  )				-> Void,
#	    draw_poly_filled_arc:	xt::Xid -> pg::Pen ->  List( xg::Arc  )				-> Void,
#	    #
#	    draw_image_text8:		xt::Xid -> pg::Pen -> ( xt::Font_Id, xg::Point, String)		-> Void,
#	    draw_poly_text8:		xt::Xid -> pg::Pen -> ( xt::Font_Id,
#								xg::Point,
#								List( t::Poly_Text )
#							      )						-> Void,
#	    #
#	    copy_pmarea:		xt::Xid -> pg::Pen ->  (xg::Point, xt::Xid, xg::Box)		-> Void,
#	    copy_pmplane:		xt::Xid -> pg::Pen ->  (xg::Point, xt::Xid, xg::Box, Int)	-> Void,
#	    #
#	    clear_area:			xt::Xid -> pg::Pen ->  xg::Box					-> Void,
#	    #
#	    put_image:			xt::Xid -> pg::Pen ->  { to_point:  xg::Point,
#								 size:      xg::Size,
#								 depth:     Int,
#								 lpad:      Int,
#								 format:    xt::Image_Format,
#								 data:      vu8::Vector
#							       }
#							   -> Void,
#	    #
#	    copy_area_and_pass:		xt::Xid -> pg::Pen -> (xg::Point, xt::Xid, xg::Box) 
#							   -> Replyqueue
#							   -> (Void -> List( xg::Box ))
#							   -> Void,
#
#	    copy_plane_and_pass:	xt::Xid -> pg::Pen -> (xg::Point, xt::Xid, xg::Box, Int)
#							   -> Replyqueue
#							   -> (Void -> List( xg::Box ))
#							   -> Void,
#	    #
#	    destroy_window:  xt::Window_Id -> Void,
#	    destroy_pixmap:  xt::Pixmap_Id -> Void
	    #	
	#   flush ?
	#   thread_id ?
	  };
    };												# package draw_ximp_from_app_clientport
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
