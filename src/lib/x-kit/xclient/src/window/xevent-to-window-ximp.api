## xevent-to-window-ximp.api
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# Use protocol is:
#
# Next up is parameter support for:
#    error_sink
#    to_x_sink
#    from_x_mailqueue
#
#   {   (make_run_gun ())   ->   { run_gun', fire_run_gun };
#	(make_end_gun ())   ->   { end_gun', fire_end_gun };
#
#	sx_state = sx::make_xevent_to_window_ximp_state ();
#	sx_ports = sx::make_xevent_to_window_ximp "Some name";
#       sx       = sx_ports.clientport;								# The clientport represents the imp for most purposes.
#
#       ...											# Create other app imps.
#
#	sx::configure_xevent_to_window_imp
#         (sxports.configstate, sx_state, { ... }, run_gun', end_gun', display);		# Wire imp to other imps.
#												# All imps will start when run_gun' fires.
#
#       ...											# Wire up other app imps similarly.
#
#	fire_run_gun ();									# Start all app imps running.
#
#	sx.send_xrequest(...);									# Many calls like this over lifetime of imp.
#       ...											# Similar calls to other app imps.
#
#	fire_end_gun ();									# Shut the imp down cleanly.
#   };

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib


stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package dy  =  display;									# display					is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package kp  =  keymap_port;									# keymap_port					is from   src/lib/x-kit/xclient/src/window/keymap-port.pkg
    package xwp =  xevent_to_window_port;							# xevent_to_window_port				is from   src/lib/x-kit/xclient/src/window/xevent-to-window-port.pkg
    package xes =  xevent_sink;									# xevent_sink					is from   src/lib/x-kit/xclient/src/wire/xevent-sink.pkg
herein


    # This api is implemented in:
    #
    #     src/lib/x-kit/xclient/src/wire/xevent-to-window-ximp.pkg
    #
    api Xevent_To_Window_Ximp
    {
	Run_Gun =  Mailop(Void);								# Purely for readability.
	End_Gun =  Mailop(Void);								# Purely for readability.

	Xevent_To_Window_Ximp_State;								# Opaque wrapper for all mutable state maintained by ximp.

	Configstate;										# Used only for start_up() call.

	Imports   = {										# Ports we use which are exported by other imps.
		      keymap_port:				kp::Keymap_Port,
		      window_property_ximp_xevent_sink:		xes::Xevent_Sink,		# 
		      selection_ximp_xevent_sink:		xes::Xevent_Sink		# 
		    };

	Exports	  = {										# Ports we export for use by other imps.
		      xevent_sink:		xes::Xevent_Sink,				# For xpackets from xserver via inbuf.
		      xevent_to_window_port:	xwp::Xevent_To_Window_Port			# Requests from widget/application code.
		    };

	make_xevent_to_window_ximp_state:  Void -> Xevent_To_Window_Ximp_State;

	make_xevent_to_window_ximp:  String -> (Configstate, Exports);				# String gives name for imp microthread.  Exports gives access to it.

	configure_xevent_to_window_ximp								# Supply all information required for startup.
	    :
	    ( Configstate,
              Xevent_To_Window_Ximp_State,
              Imports,
              Run_Gun,
              End_Gun,
	      dy::Xdisplay
            )
	    ->
	    Void;
    };												# api Xevent_To_Window_Ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
