## widget-to-xserver.pkg
#
# Requests from app/widget code to xserver-ximp and
# ultimately the X server.
# 
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include package threadkit;									# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package et  =  event_types;									# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package pg  =  pen_guts;									# pen_guts					is from   src/lib/x-kit/xclient/src/window/pen-guts.pkg
    package v1u =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package xg  =  xgeometry;									# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xt  =  xtypes;									# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package vu8 =  vector_of_one_byte_unts;							# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package fb  =  font_base;									# font_base					is from   src/lib/x-kit/xclient/src/window/font-base.pkg
    package x2s =  xclient_to_sequencer;							# xclient_to_sequencer				is from   src/lib/x-kit/xclient/src/wire/xclient-to-sequencer.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/window/xserver-ximp.pkg
    #
    package widget_to_xserver {
	#
	package s {
	    #
	    Mapped_State
	      = TOPWINDOW_IS_NOW_UNMAPPED
	      | TOPWINDOW_IS_NOW_MAPPED
	      | FIRST_EXPOSE
	      ;
	};

	package t {
	    #
	    Poly_Text
	     = TEXT  (Int, String)
	     | FONT  xt::Font_Id
	     ;
	};

	package x {
	    Op
	     = POLY_POINT     (Bool, List( xg::Point ))
	     | POLY_LINE      (Bool, List( xg::Point ))
	     | FILL_POLY      (xt::Shape, Bool, List( xg::Point ))
	     #
	     | POLY_SEG       List( xg::Line )
	     #
	     | POLY_BOX       List( xg::Box )
	     | POLY_FILL_BOX  List( xg::Box )
	     #
	     | POLY_ARC       List( xg::Arc )
	     | POLY_FILL_ARC  List( xg::Arc )
	     #
	     | COPY_PMAREA   (xg::Point, xt::Xid, xg::Box)
	     | COPY_PMPLANE  (xg::Point, xt::Xid, xg::Box, Int)
	     | CLEAR_AREA     xg::Box
	     | COPY_AREA     (xg::Point, xt::Xid, xg::Box)					# In Reppy's version COPY_AREA/COPY_PLANE had List(xg::Box) oneshots to handle GraphicsExpose events.
	     | COPY_PLANE    (xg::Point, xt::Xid, xg::Box, Int)					# That's complex and ugly, so I'm eliminating them and crossing my fingers that we can live without them.
	     | PUT_IMAGE
		 {
		   to_point:  xg::Point,
		   size:      xg::Size,
		   depth:     Int,
		   lpad:      Int,
		   format:    xt::Image_Format,
		   data:      vu8::Vector
		 }
	     | POLY_TEXT8   (xt::Font_Id, xg::Point, List(t::Poly_Text))
	     | IMAGE_TEXT8  (xt::Font_Id, xg::Point, String)
	     ;
	};

	package i {
	    #
	    Destroy_Item
	     = WINDOW	    xt::Window_Id
	     | PIXMAP	    xt::Pixmap_Id
	     ;
	};

	Draw_Op = { to:    xt::Xid,
		    pen:   pg::Pen,
		    op:    x::Op
		  };

	Widget_To_Xserver
	  =
	  {
	    widget_to_sequencer:	x2s::Xclient_To_Sequencer,				# Xsequencer-forwarding port.  The point of including this facility
				  								# is that clients can avoid race conditions by always talking to us;
				  								# if they talk both to us and directly to the xsequencer subtle
				  								# race conditions may arise in which behavior is non-deterministic,
				  								# depending on whether we or the xsequencer run next.
												#    The point of renaming the port (widget_to_sequencer instead of
												# xclient_to_sequencer) is to make it easy to grep for clients who
												# are (incorrectly) directly bypassing our tunnel by directly using
												# the xclient_to_sequencer port exported by src/lib/x-kit/xclient/src/wire/xsequencer-ximp.pkg
	    draw_ops:		List( Draw_Op ) -> Void,
	    #
	    destroy_window:	xt::Window_Id   -> Void,
	    destroy_pixmap:	xt::Pixmap_Id   -> Void,
	    #	
	    open_font: 		String -> Null_Or( fb::Font )					# 
		#
		# Returns THE opened font.
		# Returns NULL if the font cannot be
		# found on the X server's font path.

#	    flush ?
#	    thread_id ?
	  };
    };												# package xserver_ximp
end;





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
