## xclient-ximps.pkg
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xclient.pkg
#
# xclient-ximps wraps up the ximps
#
#    inbuf_ximp;						# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
#    outbuf_ximp;						# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
#    sequencer_ximp;						# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
#    decode_xpackets_ximp;					# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg
#
# to look like a single logical ximp to the rest of
# the system.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib





stipulate
    include threadkit;						# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    #
    package un  =  unt;						# unt						is from   src/lib/std/unt.pkg
    package v1u =  vector_of_one_byte_unts;			# vector_of_one_byte_unts			is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package w2v =  wire_to_value;				# wire_to_value					is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xg  =  xgeometry;					# xgeometry					is from   src/lib/std/2d/xgeometry.pkg
    package xtr =  xlogger;					# xlogger					is from   src/lib/x-kit/xclient/src/stuff/xlogger.pkg

    package sok =  socket__premicrothread;			# socket__premicrothread			is from   src/lib/std/socket--premicrothread.pkg

    package dp  =  draw_port;					# draw_port					is from   src/lib/x-kit/xclient/src/window/draw-port.pkg
    package dx  =  draw_ximp;					# draw_ximp					is from   src/lib/x-kit/xclient/src/window/draw-ximp.pkg

    package kp  =  keymap_port;					# keymap_port					is from   src/lib/x-kit/xclient/src/window/keymap-port.pkg
    package fp  =  font_port;					# font_port					is from   src/lib/x-kit/xclient/src/window/font-port.pkg
    package px  =  pen_ximp;					# pen_ximp					is from   src/lib/x-kit/xclient/src/window/pen-ximp.pkg

    package sex =  xsession_ximps;				# xsession_ximps				is from   src/lib/x-kit/xclient/src/window/xsession-ximps.pkg

    package op  =  outbuf_port;					# outbuf_port					is from   src/lib/x-kit/xclient/src/wire/outbuf-port.api
    package sp  =  sequencer_port;				# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.api
    package xes =  xevent_sink;					# xevent_sink					is from   src/lib/x-kit/xclient/src/wire/xevent-sink.pkg
    package xew =  xerror_well;					# xerror_well					is from   src/lib/x-kit/xclient/src/wire/xerror-well.pkg
    package xps =  xpacket_sink;				# xpacket_sink					is from   src/lib/x-kit/xclient/src/wire/xpacket-sink.pkg
    package xt  =  xtypes;					# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package et  =  event_types;					# event_types					is from   src/lib/x-kit/xclient/src/wire/event-types.pkg

    package ix  =  inbuf_ximp;					# inbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/inbuf-ximp.pkg
    package ox  =  outbuf_ximp;					# outbuf_ximp					is from   src/lib/x-kit/xclient/src/wire/outbuf-ximp.pkg
    package sx  =  sequencer_ximp;				# sequencer_ximp				is from   src/lib/x-kit/xclient/src/wire/sequencer-ximp.pkg
    package dxx =  decode_xpackets_ximp;			# decode_xpackets_ximp				is from   src/lib/x-kit/xclient/src/wire/decode-xpackets-ximp.pkg
    package dy  =  display;					# display					is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package xok =  xsocket;			 		# xsocket					is from   src/lib/x-kit/xclient/src/wire/xsocket.pkg


    # These are purely temporary debug kludges to force these to compile:
    #
    Pen_Ximp_Exports  =   pen_ximp::Exports;			# pen_ximp					is from   src/lib/x-kit/xclient/src/window/pen-ximp.pkg
    Draw_Ximp_Exports =  draw_ximp::Exports;			# draw_ximp					is from   src/lib/x-kit/xclient/src/window/draw-ximp.pkg
herein


    package   xclient_ximps
    :         Xclient_Ximps					# Xclient_Ximps				is from   src/lib/x-kit/xclient/src/wire/xclient-ximps.api
    {
	# Our state is just the collected
	# states of our sub-ximps:
	#
	Xclient_Ximps_State					# Opaque wrapper for all nonephemeral mutable state maintained by ximps.
	    =
	    { draw_ximp_state: 			dx::Draw_Ximp_State,
	      pen_ximp_state:			px::Pen_Ximp_State,
	      xsession_ximps_state:		sex::Xsession_Ximps_State
	    };

	Configstate(X)
	    =
	    { draw_ximp_configstate: 		dx::Configstate,
	      pen_ximp_configstate:		px::Configstate,
	      xsession_ximps_configstate:	sex::Configstate(X),
	      #
	      draw_ximp_exports: 		dx::Exports,
	      pen_ximp_exports:			px::Exports,
	      xsession_ximps_exports:		sex::Exports
	    };

	Imports  =  {										# Ports we use, provided by other imps.
		      outbuf_port:		op::Outbuf_Port,
		      xevent_sink:		xes::Xevent_Sink,				# 
		      xpacket_sink:		xps::Xpacket_Sink				# 
		    };


	Exports =  {										# Ports we provide for use by other imps.
		     draw_port:		 dp::Draw_Port,
		     font_port:		 fp::Font_Port,
		     keymap_port:	 kp::Keymap_Port,
		     xerror_well:	xew::Xerror_Well
		   };




        ##########################################################################################
	# External entrypoints
	#
	fun make_xclient_ximps_state ()												# External entrypoint.
	    =
	    { draw_ximp_state		 =>   dx::make_draw_ximp_state (),
	      pen_ximp_state		 =>   px::make_pen_ximp_state (),
	      xsession_ximps_state	 =>   sex::make_xsession_ximps_state ()
	    };

	#
	fun make_xclient_ximps  (name: String)											# External entrypoint.
	    =
	    {   ( dx::make_draw_ximp	  name) ->  (           draw_ximp_configstate,              draw_ximp_exports);
		( px::make_pen_ximp	  name) ->  (            pen_ximp_configstate,               pen_ximp_exports);
		(sex::make_xsession_ximps name) ->  (      xsession_ximps_configstate,         xsession_ximps_exports);

		configstate = { draw_ximp_configstate, pen_ximp_configstate, xsession_ximps_configstate,
				draw_ximp_exports,     pen_ximp_exports,     xsession_ximps_exports
			      }; 

		draw_port   =       draw_ximp_exports.draw_port;
		font_port   =  xsession_ximps_exports.font_port;
		keymap_port =  xsession_ximps_exports.keymap_port;
		xerror_well =  xsession_ximps_exports.xerror_well;

		(configstate, { draw_port, font_port, keymap_port, xerror_well });
	    };
	#
	#
	fun configure_xclient_ximps											# External entrypoint.
	      (
		cs:				Configstate(X),
		me:				Xclient_Ximps_State,
		{ outbuf_port,
		  xpacket_sink,
		  xevent_sink
		}:				Imports,								# Carries xevents from decode_xpackets_ximp to xevent_router_ximp.
		run_gun':			Run_Gun,
		end_gun':			End_Gun,
	        display:			dy::Xdisplay,	
		drawable:			xt::Drawable_Id,
	        socket:				sok::Socket (X, sok::Stream(sok::Active)),				# Socket to use.
		xocket:				xok::Xsocket
	      )
	    =
	    {   sequencer_port        =  cs.xsession_ximps_exports.sequencer_port;
		pen_port              =  cs.pen_ximp_exports.pen_port;
		xevent_to_window_port =  cs.xsession_ximps_exports.xevent_to_window_port;
		#

		dx::configure_draw_ximp		(cs.draw_ximp_configstate,	   me.draw_ximp_state,			{ pen_port, xevent_to_window_port	 },	run_gun', end_gun', xocket);
		#
		px::configure_pen_ximp		(cs.pen_ximp_configstate,	   me.pen_ximp_state,			{ sequencer_port			 },	run_gun', end_gun', display, drawable);
		#
		sex::configure_xsession_ximps	(cs.xsession_ximps_configstate,	   me.xsession_ximps_state,		{ outbuf_port, xpacket_sink, xevent_sink },	run_gun', end_gun', display, socket);
	    };
    };															# package xclient_ximps
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
