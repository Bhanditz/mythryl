## xclient-ximps.api
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xclient.pkg
#
# Use protocol is:
#
# Next up is parameter support for:
#    error_sink
#    to_x_sink
#    from_x_mailqueue
#
#   {   (make_run_gun  ())   ->   { run_gun',  fire_run_gun  };
#	(make_end_gun ())   ->   { end_gun', fire_end_gun };
#
#	sx_state = sx::make_sequencer_ximp_state ();
#	sx_ports = sx::make_sequencer_ximp "Some name";
#       sx       = sx_ports.clientport;								# The clientport represents the imp for most purposes.
#
#       ...											# Create other app imps.
#
#	sx::configure_sequencer_imp
#         (sxports.configstate, sx_state, { ... }, run_gun', end_gun' );				# Wire imp to other imps.
#												# All imps will start when run_gun' fires.
#
#       ...											# Wire up other app imps similarly.
#
#	fire_run_gun ();									# Start all app imps running.
#
#	sx.send_xrequest(...);									# Many calls like this over lifetime of imp.
#       ...											# Similar calls to other app imps.
#
#	fire_end_gun ();									# Shut the imp down cleanly.
#   };

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;										# threadkit					is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package exp =  encode_xpackets_port;							# encode_xpackets_port				is from   src/lib/x-kit/xclient/src/window/encode-xpackets-port.pkg
    package kp  =  keymap_port;									# keymap_port					is from   src/lib/x-kit/xclient/src/window/keymap-port.pkg
    package sp  =  sequencer_port;								# sequencer_port				is from   src/lib/x-kit/xclient/src/wire/sequencer-port.pkg
    package xes =  xevent_sink;									# xevent_sink					is from   src/lib/x-kit/xclient/src/wire/xevent-sink.pkg
    package xwp =  xevent_to_window_port;							# xevent_to_window_port				is from   src/lib/x-kit/xclient/src/window/xevent-to-window-port.pkg
    package xew =  xerror_well;									# xerror_well					is from   src/lib/x-kit/xclient/src/wire/xerror-well.pkg
    package sok =  socket__premicrothread;							# socket__premicrothread			is from   src/lib/std/socket--premicrothread.pkg

#   oldworld -- do not use:
#   package dy  =  display_old;									# display_old					is from   src/lib/x-kit/xclient/src/wire/display-old.pkg
    package dy  =  display;									# display					is from   src/lib/x-kit/xclient/src/wire/display.pkg

    package xt  =  xtypes;									# xtypes					is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein


    # This api is implemented in:
    #
    #     src/lib/x-kit/xclient/src/window/xclient-ximps.pkg
    #
    api Xclient_Ximps
    {
	Xclient_Ximps_State;									# Opaque wrapper for all mutable state maintained by ximps.

	Configstate(X);										# Used only for start_up() call.

	Exports = {										# Ports we provide for use by other imps.
		    sequencer_port:		sp::Sequencer_Port,				# Requests from widget/application code.
		    encode_xpackets_port:	exp::Encode_Xpackets_Port,			# Used to encode and send (almost) all requests to X server. (A few requests sent during set-up bypass it.)
		    keymap_port:		kp::Keymap_Port,				# Used to translate X keycodes to ascii keysyms.
		    xevent_to_window_port:	xwp::Xevent_To_Window_Port,			# Provides  note_new_topwindow()  and  get_window_site().
		    xerror_well:		xew::Xerror_Well				# Used to report X-server errors to outside world.
		  };

	Imports = {										# Ports we use, provided by other imps.
		    window_property_xevent_sink:	xes::Xevent_Sink,			# We'll forward X server PropertyNotify events to this sink.
		    selection_xevent_sink:		xes::Xevent_Sink			# We'll forward X server SelectionNotify, SelectionRequest and SelectionClear events to this sink.
		  };

	make_xclient_ximps_state: Void -> Xclient_Ximps_State;

	make_xclient_ximps:  String -> (Configstate(X), Exports);				# String gives name for imp microthread.  Exports gives access to it.

	configure_xclient_ximps									# Supply all information required for startup.
	  :
	  ( Configstate(X),
	    Xclient_Ximps_State,
	    Imports,
	    Run_Gun,
	    End_Gun,
	    dy::Xdisplay,	
	    xt::Drawable_Id,
	    sok::Socket (X, sok::Stream(sok::Active))						# Socket to read.
	  )
	  ->
	  Void;
    };												# api Xclient_Ximps
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
