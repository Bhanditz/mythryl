## selection-port.pkg
#
# Requests from app/widget code to the atom-ximp.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include threadkit;										# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xt  = xtypes;									# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package ts  =  xserver_timestamp;								# xserver_timestamp	is from   src/lib/x-kit/xclient/src/wire/xserver-timestamp.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/window/selection-ximp.pkg
    #
    package selection_port {
	#
	Selection_Handle = Void;

	Selection_Port
	  =
	  {
	    # Selection owner operations:
	    #
	    acquire_selection
		:
		(xt::Window_Id, xt::Atom, ts::Xserver_Timestamp)
		->
		Null_Or( Selection_Handle ),

	    selection_of:  Selection_Handle -> xt::Atom,
	    timestamp_of:  Selection_Handle -> ts::Xserver_Timestamp,

	    plea_mailop
		:
		Selection_Handle
		->
		Mailop
		  {
		    target:      xt::Atom,
		    timestamp:   Null_Or( ts::Xserver_Timestamp ),
		    reply:       Null_Or( xt::Property_Value ) -> Void
		  },
		#
		# This mailop is enabled once for each request for the selection.
		#  The target field is the requested target type;
		#  The time field is the server-time of the gesture that caused the request;
		#  The reply field is a function for sending the reply.
		# Strictly speaking this violates the ICCC specification,
		# but applications may choose to accept it.


	    release_mailop
		:
		Selection_Handle
		->
		Mailop( Void ),
		#
		# This mailop becomes enabled when the selection is lost; either by
		# the owner releasing it, or by some other client acquiring ownership.

	    release_selection:  Selection_Handle -> Void,
		#
		# Release ownership of the selection. 


	    # Selection requestor operations:
	    #
	    request_selection
		:
		{ window:     xt::Window_Id,		# Requesting window.
		  selection:  xt::Atom,			# Requested selection.
		  target:     xt::Atom,			# Requested target type.
		  property:   xt::Atom,
		  timestamp:  ts::Xserver_Timestamp	# Server-timestamp of the gesture causing the request.
		}
		->
		Mailop( Null_Or( xt::Property_Value ) )

		# Request the value of the selection.
		#
		# This returns a mailop that will become
		# enabled when the reply is received.
	  };
    };												# package selection_port
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
