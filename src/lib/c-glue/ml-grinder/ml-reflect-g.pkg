
# This module can be used to generate reflection code
# from ML enum definitions

generic package lib7_reflect_gen_g (ml_grinder:  Ml_Grinder) : Lib7_Reflect_Gen {

   package g = ml_grinder
   use G
   package raw = raw
   package a = raw
   package u = raw_util
   package t = raw_trans

   argpat    = raw::IDPAT "arg"
   argexp    = u::ID "arg"
   tv_prefix = "f_" #  higher order function arguments 

   fun reflect { prefix, makeArg, makeCons, makeConsPat } 
               { idty, appty, funty, tuplety, recordty } 
               datatypeDecls
       =
       {   fun fnName id
               =
               prefix + id;

	   #  Generate pretty printer for a enum 

	   fun gen_db (raw::DATATYPE { id, cbs, tyvars, ... } )
                   =
		   [raw::FUN (fnName id, map (gen_clause tyvars) cbs)];

	     | gen_db _ = [];

	  also arity_raise [] = []
	     | arity_raise tvs
                   = 
		   [raw::TUPLEPAT (map (fn raw::VARTV x => raw::IDPAT (tv_prefix + x)
				  | _ => bug("lib7_reflect_gen_g", "arity_raise")
				) tvs)]

	   #  Generate pretty printer for a clause 
	  also gen_clause tyvars (cons as raw::CONSTRUCTOR_DEF { id=name, ty, ... } )
               = 
	       {   args =   arity_raise tyvars;
		   pats =   makeArg (makeConsPat (name, null_or::map (fn _ => argpat) ty));
		   body = makeCons (name,
				 case ty of
				   NULL => NULL
				 | THE ty => THE (raw::APPLY_EXPRESSION (gen_ty ty, argexp)));
	           raw::CLAUSE (args@pats, NULL, body);
	       }

	   #  Generate pretty printer for a type synonym 
	  also gen_tb (raw::TYPEBIND (id, tyvars, ty))
               = 
	       raw::FUN (fnName id,
			 [raw::CLAUSE (arity_raise tyvars@makeArg argpat, NULL,
				   raw::APPLY_EXPRESSION (gen_ty ty, argexp))])

	  also gen_ty (raw::IDTY x) = idty x
	     | gen_ty (raw::APPTY (f, tys)) = appty (f, map gen_ty tys)
	     | gen_ty (raw::FUNTY (x, y)) = funty (gen_ty x, gen_ty y)
	     | gen_ty (raw::TUPLETY tys) = tuplety (map gen_ty tys)
	     | gen_ty (raw::RECORDTY ltys) = recordty (map gen_lty ltys)
	     | gen_ty (raw::TYVARTY (raw::VARTV tv)) = u::ID (tv_prefix + tv)
	     | gen_ty _ = bug("lib7_reflect_gen_g", "gen_ty")

	  also gen_lty (x, ty)
               =
               (x, gen_ty ty);

	   prog = decl::fold 
		      [Fold::D (fn (raw::DATATYPE_DECL (dbs, tbs), decls) => 
				 raw::FUN_DECL (map gen_tb tbs@
					   list::cat (map gen_db dbs)) . decls
			      | (_, decls) => decls)
		      ] [] datatypeDecls;

           raw::SEQ_DECL (reverse prog);
       }
}
