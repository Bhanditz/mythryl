package c_ext :> Cext {

   package i = inline_t

   type vec T = unsafe::Object::object

   #  Allocate a record 
   c_alloc   = raw_mem_inline_t::rawrecord
   c_alloc64 = raw_mem_inline_t::rawrecord64

    #  Extract the underlying representation 
   c_string = i::vector_of_chars::getData 
   c_char_array    = i::rw_vector_of_chars::getData
   c_vector_of_chars   = i::vector_of_chars::getData
   c_double_array  = i::rw_vector_of_eight_byte_floats::getData
   c_double_vector = i::vector_of_eight_byte_floats::getData
   c_word8_array   = i::rw_vector_of_one_byte_unts::getData
   c_word8_vector  = i::vector_of_one_byte_unts::getData

   fun cast x = x
  
   package get {

      schar  = raw_mem_inline_t::subi8 
      uchar  = raw_mem_inline_t::subw8
      sshort = raw_mem_inline_t::subi16 
      ushort = raw_mem_inline_t::subw16
      sint   = raw_mem_inline_t::subi32
      uint   = raw_mem_inline_t::subw32
      slong  = raw_mem_inline_t::subi32
      ulong  = raw_mem_inline_t::subw32
      float  = raw_mem_inline_t::subf32
      double = raw_mem_inline_t::subf64
      fun ptr (p, i) = C_Int::pcast (c_memory::i2p (raw_mem_inline_t::subw32 (p, i)))
   };

   package set {

      schar  = raw_mem_inline_t::updi8 
      uchar  = raw_mem_inline_t::updw8
      sshort = raw_mem_inline_t::updi16 
      ushort = raw_mem_inline_t::updw16
      sint   = raw_mem_inline_t::updi32
      uint   = raw_mem_inline_t::updw32
      slong  = raw_mem_inline_t::updi32
      ulong  = raw_mem_inline_t::updw32
      float  = raw_mem_inline_t::updf32
      double = raw_mem_inline_t::updf64

      fun ptr (p, i, x)
          =
          raw_mem_inline_t::updw32
                        (p, i, c_memory::p2i (C_Int::reveal (C_Int::Ptr::inject' x)))
   }
}
