#
# Primitives for "raw" memory access.
#   Normally, this module would be machine-dependent.
#   The code you are looking at is just a placeholder, a fake.
#
#   (C) 2000, Lucent Technologies, Bell Laboratories
#
# author: Matthias Blume (blume@research.bell-labs.com)

package c_memory:  Cmemory {

    exception OUT_OF_MEMORY;

    Addr = unt1::Unt;
    null = 0w0:  Addr;

    fun isNull a = a == null;
    infix ++ --;

    #  rely on 2's-complement for the following... 
    fun (a: address) ++ i = a + unt1::from_int i;
    fun compare (a1, a2) = unt1::compare (a1, a2);
    fun a1 -- a2 = unt1::toIntX (a1 - a2);
    fun bcopy { from: address, to: address, bytes: word } = ();
    fun alloc (bytes: word) : address = raise OUT_OF_MEMORY;
    fun free (a: address) = ();

    # most of these types are represented using a bigger size
    # (for lack of the "right" size
    type uchar = unt1::word
    type schar = int1::Int
    type ushort = unt1::word
    type sshort = int1::Int
    type uint = unt1::word
    type sint = int1::Int
    type ulong = unt1::word
    type slong = int1::Int
    type float = float::real
    type double = float::real

    addr_size = 0w4
    char_size = 0w1
    short_size = 0w2
    int_size = 0w4
    long_size = 0w4
    float_size = 0w4
    double_size = 0w8

    type load_instr(X) = address -> X
    type store_instr(X) = address * X -> Void

    fun load_addr (a: address) = 0w0:  address
    fun load_uchar (a: address) = 0w0:  uchar
    fun load_ushort (a: address) = 0w0:  ushort
    fun load_uint (a: address) = 0w0:  uint
    fun load_ulong (a: address) = 0w0:  ulong
    fun load_float (a: address) = 0.0:  float
    fun load_double (a: address) = 0.0:  double

    fun store_addr (a: address, x: address) = ()
    fun store_uchar (a: address, c: uchar) = ()
    fun store_ushort (a: address, s: ushort) = ()
    fun store_uint (a: address, i: uint) = ()
    fun store_ulong (a: address, l: ulong) = ()
    fun store_float (a: address, f: float) = ()
    fun store_double (a: address, d: double) = ()

    local
	fun u2s (mid, u) = let
	    i = unt1::toLargeIntX u
	in
	    if i >= mid then i - 2 * mid else i
	end
    in
        fun char_u2s (c: uchar) = u2s (128, c)
	fun short_u2s (s: ushort) = u2s (32768, s)
	fun int_u2s (i: uint) = unt1::toLargeIntX i
	fun long_u2s (l: ulong) = unt1::toLargeIntX l
    end

    fun char_s2u (c: schar) = unt1::bitwise_and (unt1::from_large_int c, 0w255)
    fun short_s2u (s: sshort) = unt1::bitwise_and (unt1::from_large_int s, 0w65535)
    fun int_s2u (i: sint) = unt1::from_large_int i
    fun long_s2u (l: slong) = unt1::from_large_int l

    my >> = (unt1::(>>))
    my << = (unt1::(<<))
    bitwise_and = unt1::bitwise_and
    bitwise_or = unt1::bitwise_or
    bitwise_not = unt1::bitwise_not

    fun sext (value, mask) =
	int_u2s (if bitwise_and (value, mask) == 0w0 then value else bitwise_or (value, mask))

    fun p2i x = x
    fun i2p x = x
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
