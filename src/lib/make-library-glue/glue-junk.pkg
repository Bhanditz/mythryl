## glue-junk.pkg
#
# Random utility code for use by (e.g.):
#     sh/addglue
#     sh/rmglue
#
# This junk doesn't really belong in standard.lib,
# but that's the path of least resistance at the moment.

# Compiled by:
#     src/lib/std/standard.lib

stipulate
    package sm  =  string_map;						# string_map		is from   src/lib/src/string-map.pkg
herein
    api  Glue_Junk
    {
	print_strings:  List(String) -> Void;				# Just what you think.

	find_available_glue_modules:  Void -> sm::Map(String);		
	    #
	    # Result maps
	    #
	    #     "gtk"    -> "src/glu/gtk"
	    #     "opengl" -> "src/glu/opengl"
	    #
	    # and so on for the subdirectories of src/glu.

	validate_mythryl_directory: Void -> Void;
	    #
	    # Create   $HOME/.mythryl/   if it doesn't exist -- or die trying.	


	validate__selected_glue_modules__file: Void -> String;
	    #
	    # Create   $HOME/.mythryl/glue-selections   if it doesn't exist -- or die trying.	

	validate_glue_selections:  List(String) -> sm::Map(String)      -> (Void -> Void) -> List(String);
	    #                      ============    ===============         ==============    =========================
	    #		           glue selections available_glue_modules  usage	     sorted, uniq'd selections.
	    #
	    # Given list of glue module selections and available_glue_modules map,
	    # verify that all name available modules and return sorted duplicate-free
	    # list of glue modules.  Treat ["all"] as being equivalent to list of all
	    # available glue modules.
    };
end;

stipulate
    package lms =  list_mergesort;				# list_mergesort	is from   src/lib/src/list-mergesort.pkg
    package psx =  posixlib;					# posixlib		is from   src/lib/std/src/psx/posixlib.pkg
    package sm  =  string_map;					# string_map		is from   src/lib/src/string-map.pkg
    package wnx =  winix;					# winix			is from   src/lib/std/winix.pkg
    #
    getenv      =  wnx::process::get_env;
    mkdir	=  (fn path = psx::mkdir (path, psx::s::flags [ psx::s::irwxu, psx::s::irgrp, psx::s::iwgrp, psx::s::iroth, psx::s::iwoth ]));		# XXX BUGGO FIXME somehow this is producing 744 instead of 755.
    #
    fun die   message =	{   print message;	wnx::process::exit 1;   };
herein

    # This package is invoked in:
    #
    #     sh/addglue
    #     sh/rmglue

    package  glue_junk:
	     Glue_Junk
    {

	fun print_strings  strings
	    =
	    {   print "[";
		print_strings' strings;
		print " ]";
	    }
	    where
		fun print_strings' []		=>  {   ();						};
		    print_strings' [ string ]       =>  {   printf " %s"  string;				};
		    print_strings' ( string ! rest) =>  {   printf " %s," string;  print_strings' rest;	};
		end;
	    end;

	fun find_available_glue_modules ()
	    =
	    {   if (not (dir::is_directory "src"))       die "I see no src/ dir here -- addglue must be run from root install directory.\n";   fi;
		if (not (dir::is_directory "src/glu"))   die "I see no src/glu/ dir here -- addglue must be run from root install directory.\n";   fi;
		#

		# This will construct and return a map from keys
		# like "opengl" to paths like "src/glu/opengl":
		#
		list::fold_right
		    (fn (glue, tree) = sm::set (tree, glue, "src/glu" + "/" + glue))
		    sm::empty
		    (dir::directory_names "src/glu");
	    };

	fun validate_mythryl_directory ()
	    =
	    case (getenv "HOME")
		#
		NULL	=>  die "Giving up because no HOME dir defined(?!)\n";
		#
		THE homedir =>  {   mythdir = homedir + "/" + ".mythryl";
				    #
				    if (not (dir::is_directory mythdir))
					mkdir mythdir	except _ = die (sprintf "Unable to create %s\n" mythdir);
				    fi;
				};
	    esac;

	fun validate__selected_glue_modules__file ()
	    =
	    {   validate_mythryl_directory ();

		selected_glue_modules__filename = (the (getenv "HOME")) + "/" + ".mythryl" + "/" + "selected-glue-modules";

		if (not (dir::is_file selected_glue_modules__filename))
		    printf "Creating empty %s file\n" selected_glue_modules__filename;

		    file::from_lines selected_glue_modules__filename
		      [
			"# This file contains the set of currently selected Mythryl library glue modules.\n",
			"# This file is automatically created and maintained by sh/addglue and sh/rmglue;\n",
			"# manual modification is inadvisable.\n",
			"# Do not edit this or following lines -- they are autobuilt.\n",
			"# Do not edit this or preceding lines -- they are autobuilt.\n"
		      ];

		    if (not (dir::is_file selected_glue_modules__filename))
			die (sprintf "Failed to create empty %s file\n" selected_glue_modules__filename);
		    else
			printf "Created empty %s file\n"  selected_glue_modules__filename;
		    fi;
		fi;

		selected_glue_modules__filename;
	    };



	fun validate_glue_selections  selections  available_glue_modules  usage
	    =
	    {   selections = (selections == ["all"])  ??  sm::keys_list  available_glue_modules		# Expand ["all"] into list of all available glue modules.
						      ::  selections;

		selections =  lms::sort_list_and_drop_duplicates  string::compare  selections;		# Sort and drop duplicates.

		apply  validate_selection  selections;							# Verify that every selection corresponds to an available module.

		selections;										# Return sorted uniq'd selection list.
	    }
	    where
		fun validate_selection  selection
		    =
		    if (not (sm::contains_key (available_glue_modules, selection)))
			printf "Invalid selection: %s is not a subdirectory of src/glu\n" selection;
			usage();
		    fi;
	    end;
    };
end;


## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
