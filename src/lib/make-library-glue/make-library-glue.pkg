## make-library-glue.pkg
#
# Functions mentioning 'widget' in the code:
#
#		fun xxx_client_driver_api_type (libcall, result_type)
#		fun write_do_command (do_command, fn_name, libcall, result_prefix, result_expression)#
#		fun build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg' (fn_name, libcall, result_type)
#		fun figure_function_result_type  (state: State,  fn_name,  fn_type)
#
# Autobuild much of the code required
# to make a C library like Gtk or OpenGL
# available at the Mythryl level, driven
# by a library-glue.plan file.
#
# The format of library-glue.plan files
# is documented in Note[1] at bottom of file.
#
# make-library-glue.pkg really shouldn't be in
# standard.lib because it is not of general interest,
# but at the moment that is the path of least
# resistance.    -- 2013-01-12 CrT

# Compiled by:
#     src/lib/std/standard.lib



api      Make_Library_Binding
{
    State;
    #
    Paths = {   library_binding_specification				:  String,		# E.g. "src/glu/gtk/etc/library-glue.plan"
		lib_name						:  String,		# E.g. "opengl" -- Must match the   #define CLIB_NAME "opengl"   line in   src/glu/xxx/c/in-main/libmythryl-xxx.c
												# Files which will be patched:
		xxx_client_api						:  String,		# E.g. "src/glu/gtk/src/gtk-client.api"
		xxx_client_g_pkg					:  String,		# E.g. "src/glu/gtk/src/gtk-client-g.pkg"
		xxx_client_driver_api					:  String,		# E.g. "src/glu/gtk/src/gtk-client-driver.api"
		xxx_client_driver_for_library_in_c_subprocess_pkg	:  String,		# E.g. "src/glu/gtk/src/gtk-client-driver-for-library-in-c-subprocess.pkg"
		xxx_client_driver_for_library_in_main_process_pkg	:  String,		# E.g, "src/glu/gtk/src/gtk-client-driver-for-library-in-main-process.pkg"
		mythryl_xxx_library_in_c_subprocess_c			:  String,		# E.g. "src/glu/gtk/c/in-sub/mythryl-gtk-library-in-c-subprocess.c"
		libmythryl_xxx_c					:  String,		# E.g. "src/glu/gtk/c/in-main/libmythryl-gtk.c"
		section_libref_xxx_tex					:  String		# E.g., "doc/tex/section-libref-gtk.tex";
	    };

    Builder_Stuff
      =
      { state:										State,
	path:										Paths,
	#
	maybe_get_field:								(State, String) -> Null_Or(String),
	      get_field:								(State, String) ->         String,
	      get_field_location:							(State, String) -> String,
	#
	build_table_entry_for_'libmythryl_xxx_c':					(String, String) -> Void,
	build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c':			 String		 -> Void,
	#	
	build_fun_declaration_for_'xxx_client_api':					(String, String) -> Void,				# (fn_name, fn_type);
	build_fun_declaration_for_'xxx_client_driver_api':				(String, String, String) -> Void,			# (c_fn_name, libcall, result_type)
	build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg':	(String, String, String) -> Void,			# (c_fn_name, libcall, result_type);
	build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg':	(String, String, String, String, String) -> Void,	# (fn_name, c_fn_name, fn_type, libcall, result_type);

	build_callback_fun_for_'xxx_client_g_pkg': 					(State, String, String) -> Void,			# (state, fn_name, callback_type);

	to_xxx_client_driver_api:							String -> Void,
	to_xxx_client_driver_for_library_in_c_subprocess_pkg:				String -> Void,
	to_xxx_client_driver_for_library_in_main_process_pkg:				String -> Void,
	to_xxx_client_g_pkg_funs:							String -> Void,
	to_xxx_client_g_pkg_types:							String -> Void,
	to_xxx_client_api_funs:								String -> Void,
	to_xxx_client_api_types:							String -> Void,
	to_mythryl_xxx_library_in_c_subprocess_c_funs:					String -> Void,
	to_mythryl_xxx_library_in_c_subprocess_c_trie:					String -> Void,
	to_libmythryl_xxx_c_table:							String -> Void,
	to_libmythryl_xxx_c_funs:							String -> Void,
	to_section_libref_xxx_tex_table1:						String -> Void,
	to_section_libref_xxx_tex_table2:						String -> Void,

	custom_fns_autobuilt_for_'libmythryl_xxx_c':					Ref(Int),
	custom_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c':		Ref(Int),

	note__section_libref_xxx_tex__entry
	  :
	  { state:	State,
	    fn_name:	String,		# E.g. "make_window"
	    fn_type:	String,		# E.g. "Session -> String"
	    url:	String,		# E.g. "http://library.gnome.org/devel/gtk/stable/GtkTable.html#gtk-table-set-col-spacing"
	    libcall:	String		# E.g. "gtk_table_set_col_spacing( GTK_TABLE(/*table*/w0), /*col*/i1, /*spacing*/i2)"
	  }
	  -> Void
      };

    Custom_Body_Stuff  =  { fn_name: String,  libcall: String,  to_mythryl_xxx_library_in_c_subprocess_c_funs: String -> Void, path: Paths };
    Custom_Body_Stuff2 =  { fn_name: String,  libcall: String,  to_libmythryl_xxx_c_funs:                      String -> Void, path: Paths };

    Plugin  = LIBCALL_TO_ARGS_FN  (String -> List(String))
	    | BUILD_A        (String, Builder_Stuff -> Void)							# ("callback-fn", build_callback_function)
	    | BUILD_ARG_LOAD_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS' (String, (String, Int, String) -> String)
	    | BUILD_ARG_LOAD_FOR_'LIBMYTHRYL_XXX_C'                    (String, (String, Int, String) -> String)
	    | BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS_C' (String, Custom_Body_Stuff  -> Void)
	    | BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'LIBMYTHRYL_XXX_C'                      (String, Custom_Body_Stuff2 -> Void)
	    | FIGURE_FUNCTION_RESULT_TYPE (String, String -> String)
	    | DO_COMMAND_FOR_'XXX_CLIENT_DRIVER_FOR_LIBRARY_IN_C_SUBPROCESS_PKG' (String, String)
	    | DO_COMMAND_TO_STRING_FN (String, String)
	    | CLIENT_DRIVER_ARG_TYPE (String, String)
	    | CLIENT_DRIVER_RESULT_TYPE (String, String)
	    ;

    make_library_binding: Paths -> List(Plugin) -> Void;
};

stipulate
    package fil =  file__premicrothread;							# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package lms =  list_mergesort;								# list_mergesort		is from   src/lib/src/list-mergesort.pkg
    package iow =  io_wait_hostthread;								# io_wait_hostthread		is from   src/lib/std/src/hostthread/io-wait-hostthread.pkg
    package psx =  posixlib;									# posixlib			is from   src/lib/std/src/psx/posixlib.pkg
    #
    exit_x = winix__premicrothread::process::exit_x;
    =~          =  regex::(=~);
    sort	=  lms::sort_list;
    chomp	=  string::chomp;
    tolower     =  string::to_lower;
    uniquesort  =  lms::sort_list_and_drop_duplicates;

    fun isfile     filename
	=
	psx::stat::is_file      (psx::stat  filename)  except _ = FALSE;

    #
    fun die_x message
	=
	{   print message;
	    exit_x 1;
	};



    # The following are all duplicates of definitions in
    #     src/app/makelib/main/makelib-g.pkg
    # -- possibly a better place should be found
    # for them:

    # Convert    src/glu/xxx/c/in-sub/mythryl-xxx-library-in-c-subprocess.c
    # to                              mythryl-xxx-library-in-c-subprocess.c
    # and such:
    #
    fun basename filename
	=
	(regex::find_first_group 1 .|/([^/]+)$| filename)
	except
	    NOT_FOUND = filename;

    # Convert    src/glu/xxx/c/in-sub/mythryl-xxx-library-in-c-subprocess.c
    # to         src/glu/xxx/c/in-sub
    # and such:
    #
    fun dirname filename
	=
	(regex::find_first_group 1 .|^(.*)/[^/]+$| filename)
	except
	    NOT_FOUND = ".";								# This follows linux dirname(1), and also produces sensible results.

    # Drop leading and trailing
    # whitespace from a string.
    #
    fun trim string
	=
	{   if (string =~ ./^\s*$/)

		"";

	    else
		# Drop trailing whitespace:
		#
		string
		    =
		    (regex::find_first_group 1 ./^(.*\S)\s*$/ string)
		    except
			NOT_FOUND = string;

		# Drop leading whitespace:
		#
		string
		    =
		    (regex::find_first_group 1 ./^\s*(\S.*)$/ string)
		    except
			NOT_FOUND = string;

		string;
	    fi;
	};
herein

    # This package is invoked in:
    #
    #     src/glu/gtk/sh/make-gtk-glue
    #     src/glu/opengl/sh/make-opengl-glue

    package  make_library_binding:
	     Make_Library_Binding
    {
	# Field is a contiguous sequence of lines
	# all with the same linetype field:
	#
	#    foo:  this
	#    foo:  that
	#
	# Most fields will be single-line, but this format
	# supports conveniently including blocks of code,
	# such as complete function definitions.
	#
	# We treat a field as a single string containing
	# embedded newlines, stripped of the linetype field
	# and the colon.  
	#
	Field = { string:  Ref(String),							# Not exported.
		  line_1:  Ref(Int),
		  line_n:  Ref(Int),
		  used:    Ref(Bool)
		};

	State = { line_number:  Ref(Int),							# Exported as an opaque type.

		  fd:           fil::Input_Stream,

		  fields:       Ref( string_map::Map( Field ))
		};



	Paths =   { library_binding_specification			:  String,
		    lib_name						:  String,		#  E.g. "xxx".  Must match the   #define CLIB_NAME "xxx"   line in   src/glu/xxx/c/in-main/libmythryl-xxx.c
		    #
		    xxx_client_api					:  String,
		    xxx_client_g_pkg					:  String,
		    xxx_client_driver_api				:  String,
		    xxx_client_driver_for_library_in_c_subprocess_pkg	:  String,
		    xxx_client_driver_for_library_in_main_process_pkg	:  String,
		    mythryl_xxx_library_in_c_subprocess_c		:  String,
		    libmythryl_xxx_c					:  String,
		    section_libref_xxx_tex				:  String
		  };

	Builder_Stuff
	  =
	  { state:										 State,
	    path:										 Paths,
	    #
	      get_field_location:								(State, String) -> String,
		  get_field:    								(State, String) -> String,
	    maybe_get_field:    								(State, String) -> Null_Or(String),
	    #
	    build_table_entry_for_'libmythryl_xxx_c':						(String, String) -> Void,
	    build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c':			String		 -> Void,
	    #	
	    build_fun_declaration_for_'xxx_client_driver_api':					(String, String, String) -> Void,			# (c_fn_name, libcall, result_type)
	    build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg':	(String, String, String) -> Void,			# (c_fn_name, libcall, result_type);
	    #
	    build_fun_declaration_for_'xxx_client_api':						(String, String) -> Void,				# (fn_name, fn_type);
	    build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg':	(String, String, String, String, String) -> Void,	# (fn_name, c_fn_name, fn_type, libcall, result_type);

	    build_callback_fun_for_'xxx_client_g_pkg': 						(State, String, String) -> Void,			# (state, fn_name, callback_type);

	    to_xxx_client_driver_api:								String -> Void,
	    to_xxx_client_driver_for_library_in_c_subprocess_pkg:				String -> Void,
	    to_xxx_client_driver_for_library_in_main_process_pkg:				String -> Void,
	    to_xxx_client_g_pkg_funs:								String -> Void,
	    to_xxx_client_g_pkg_types:								String -> Void,
	    to_xxx_client_api_funs:								String -> Void,
	    to_xxx_client_api_types:								String -> Void,
	    to_mythryl_xxx_library_in_c_subprocess_c_funs:					String -> Void,
	    to_mythryl_xxx_library_in_c_subprocess_c_trie:					String -> Void,
	    to_libmythryl_xxx_c_table:								String -> Void,
	    to_libmythryl_xxx_c_funs:								String -> Void,
	    to_section_libref_xxx_tex_table1:							String -> Void,
	    to_section_libref_xxx_tex_table2:							String -> Void,

	    custom_fns_autobuilt_for_'libmythryl_xxx_c':					Ref(Int),
	    custom_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c':			Ref(Int),


	    note__section_libref_xxx_tex__entry
	      :
	      { state:		State,
		fn_name:	String,		# E.g. "make_window"
		fn_type:	String,		# E.g. "Session -> String"
		url:		String,		# E.g. "http://library.gnome.org/devel/gtk/stable/GtkTable.html#gtk-table-set-col-spacing"
		libcall:	String		# E.g. "gtk_table_set_col_spacing( GTK_TABLE(/*table*/w0), /*col*/i1, /*spacing*/i2)"
	      }
	      -> Void

	  };

	Custom_Body_Stuff  =  { fn_name: String,  libcall: String,  to_mythryl_xxx_library_in_c_subprocess_c_funs: String -> Void, path: Paths };
        Custom_Body_Stuff2 =  { fn_name: String,  libcall: String,  to_libmythryl_xxx_c_funs:                      String -> Void, path: Paths };

	Plugin  = LIBCALL_TO_ARGS_FN  (String -> List(String))
		| BUILD_A (String, Builder_Stuff -> Void)
		| BUILD_ARG_LOAD_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS' (String, (String, Int, String) -> String)
		| BUILD_ARG_LOAD_FOR_'LIBMYTHRYL_XXX_C' (String, (String, Int, String) -> String)
	        | BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS_C' (String, Custom_Body_Stuff -> Void)
		| BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'LIBMYTHRYL_XXX_C'                      (String, Custom_Body_Stuff2 -> Void)
		| FIGURE_FUNCTION_RESULT_TYPE (String, String -> String)
		| DO_COMMAND_FOR_'XXX_CLIENT_DRIVER_FOR_LIBRARY_IN_C_SUBPROCESS_PKG' (String, String)
		| DO_COMMAND_TO_STRING_FN (String, String)
		| CLIENT_DRIVER_ARG_TYPE (String, String)
		| CLIENT_DRIVER_RESULT_TYPE (String, String)
		;

	fun make_library_binding  (path: Paths)  (plugins: List(Plugin))
	    =
	    {
		note_plugins  plugins;

		xxx_client_driver_api					=  read_patchable_file   path.xxx_client_driver_api;
		xxx_client_driver_for_library_in_c_subprocess_pkg	=  read_patchable_file   path.xxx_client_driver_for_library_in_c_subprocess_pkg;
		xxx_client_driver_for_library_in_main_process_pkg	=  read_patchable_file   path.xxx_client_driver_for_library_in_main_process_pkg;
		xxx_client_g_pkg					=  read_patchable_file   path.xxx_client_g_pkg;
		xxx_client_api						=  read_patchable_file   path.xxx_client_api;
		mythryl_xxx_library_in_c_subprocess_c			=  read_patchable_file   path.mythryl_xxx_library_in_c_subprocess_c;
		libmythryl_xxx_c					=  read_patchable_file   path.libmythryl_xxx_c;



		process_library_binding_specification_file    ();



		printf "%4d   plain     functions autobuilt for %s\n"		*plain_fns_autobuilt_for_'libmythryl_xxx_c'				(basename  path.libmythryl_xxx_c);
		printf "%4d   custom    functions autobuilt for %s\n"		*custom_fns_autobuilt_for_'libmythryl_xxx_c'				(basename  path.libmythryl_xxx_c);

		printf "%4d   plain     functions autobuilt for %s\n"		*plain_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'	(basename  path.mythryl_xxx_library_in_c_subprocess_c);
		printf "%4d   custom    functions autobuilt for %s\n"		*custom_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'	(basename  path.mythryl_xxx_library_in_c_subprocess_c);

		printf "%4d   plain     functions autobuilt for %s\n"		*plain_fns_autobuilt_for_'xxx_client_g_pkg'				(basename  path.xxx_client_g_pkg);
		printf "%4d   plain     functions handbuilt for %s\n"		*plain_fns_handbuilt_for_'xxx_client_g_pkg'				(basename  path.xxx_client_g_pkg);

		printf "%4d   callback  functions autobuilt for %s\n"		*callback_fns_handbuilt_for_'xxx_client_g_pkg'				(basename  path.xxx_client_g_pkg);
		printf "%4d   callback  functions handbuilt for %s\n"		*callback_fns_handbuilt_for_'xxx_client_g_pkg'				(basename  path.xxx_client_g_pkg);



		write_patchable_file  xxx_client_driver_api				  [ INTRON (reverse *intron_for_'xxx_client_driver_api')				];
		write_patchable_file  xxx_client_driver_for_library_in_c_subprocess_pkg   [ INTRON (reverse *intron_for_'xxx_client_driver_for_library_in_c_subprocess_pkg')	];
		write_patchable_file  xxx_client_driver_for_library_in_main_process_pkg   [ INTRON (reverse *intron_for_'xxx_client_driver_for_library_in_main_process_pkg')	];

		write_patchable_file  xxx_client_api					  [ INTRON (reverse *types_intron_for_'xxx_client_api'),
											    INTRON (reverse *funs_intron_for_'xxx_client_api')
											  ];

		write_patchable_file  xxx_client_g_pkg					  [ INTRON (reverse *types_intron_for_'xxx_client_g_pkg'),
											    INTRON (reverse *funs_intron_for_'xxx_client_g_pkg')
											  ];

		write_patchable_file  mythryl_xxx_library_in_c_subprocess_c		  [ INTRON (reverse *funs_intron_for_'mythryl_xxx_library_in_c_subprocess_c'),
											    INTRON (reverse *trie_intron_for_'mythryl_xxx_library_in_c_subprocess_c')
											  ];

		write_patchable_file  libmythryl_xxx_c					  [ INTRON (reverse *funs_intron_for_'libmythryl_xxx_c'),
											    INTRON (reverse *table_intron_for_'libmythryl_xxx_c')
											  ];



		if (isfile  path.section_libref_xxx_tex)
		    #
		    section_libref_xxx_tex =  read_patchable_file   path.section_libref_xxx_tex;

		    write_section_libref_xxx_tex_table  (.fn_name, .libcall, to_section_libref_xxx_tex_table1);
		    write_section_libref_xxx_tex_table  (.libcall, .fn_name, to_section_libref_xxx_tex_table2);

		    write_patchable_file  section_libref_xxx_tex			  [ INTRON (reverse *table1_intron_for_'section_libref_xxx_tex'),
											    INTRON (reverse *table2_intron_for_'section_libref_xxx_tex')
											  ];
		fi;
	    }
	    where
		plain_fns_autobuilt_for_'libmythryl_xxx_c'  =  REF 0;
		custom_fns_autobuilt_for_'libmythryl_xxx_c' =  REF 0;

		plain_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'   =  REF 0;
		custom_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'  =  REF 0;

		plain_fns_handbuilt_for_'xxx_client_g_pkg'     =  REF 0;
		plain_fns_autobuilt_for_'xxx_client_g_pkg'     =  REF 0;

		callback_fns_handbuilt_for_'xxx_client_g_pkg'  =  REF 0;
		callback_fns_handbuilt_for_'xxx_client_g_pkg'  =  REF 0;


		build_fns                          =  REF (string_map::empty: string_map::Map( Builder_Stuff       -> Void ));
		subprocess_custom_plain_fun_bodies =  REF (string_map::empty: string_map::Map( Custom_Body_Stuff   -> Void ));
		mainprocess_custom_plain_fun_bodies=  REF (string_map::empty: string_map::Map( Custom_Body_Stuff2  -> Void ));
		#
		arg_load_fns_for_'mythryl_xxx_library_in_c_subprocess_c'	=  REF (string_map::empty: string_map::Map( (String,Int,String) -> String ));
		arg_load_fns_for_'libmythryl_xxx_c'      			=  REF (string_map::empty: string_map::Map( (String,Int,String) -> String ));
		#
		figure_function_result_type_fns    =  REF (string_map::empty: string_map::Map( String -> String ));
		#
		do_command_for			   =  REF (string_map::empty: string_map::Map( String ));
		do_command_to_string_fn		   =  REF (string_map::empty: string_map::Map( String ));
		#
		client_driver_arg_type		   =  REF (string_map::empty: string_map::Map( String ));
		client_driver_result_type	   =  REF (string_map::empty: string_map::Map( String ));

		fun libcall_to_args_fn  libcall
		    =
		    # 'libcall' is from a line in (say)		src/glu/gtk/etc/library-glue.plan
		    # looking something like                    libcall: gtk_table_set_row_spacing( GTK_TABLE(/*table*/w0), /*row*/i1, /*spacing*/i2)
		    #
		    # 'libcall' contains embedded arguments like 'w0', 'i1', 'f2', 'b3', 's4'.
		    # They are what we are interested in here;
		    # our job is to return a sorted, duplicate-free list of them.
		    #
		    # The implementation here is generic;  glue for a particular library
		    # may override it to support additional argument types (like 'w').
		    # See for example libcall_to_args_fn() in   src/glu/gtk/sh/make-gtk-glue
		    #
		    # The argument letter gives us the argument type:
		    #
		    #    i == int
		    #    f == double  (Mythryl "Float")
		    #    b == bool
		    #    s == string
		    #
		    # The argument digit gives us the argument order:
		    #
		    #    0 == first arg
		    #    1 == second arg
		    #    ...
		    #
		    # Get list of above args, sorting by trailing digit
		    # and dropping duplicates:
		    #
		    {	raw_list    =  regex::find_all  ./\b[bfis][0-9]\b/  libcall;
			#
			cooked_list =  uniquesort  compare_fn  raw_list;

			cooked_list;
		    }
		    where	
			fun compare_fn (xn, yn)					# Compare "s0" and "b1" as "0" and "1":
			    =
			    {   xn' = string::extract (xn, 1, NULL);
				yn' = string::extract (yn, 1, NULL);

				string::compare (xn', yn');
			    };
		    end;        


		ref_libcall_to_args_fn =  REF libcall_to_args_fn;

		fun libcall_to_args  libcall
		    =
		    *ref_libcall_to_args_fn  libcall;


		# Lists of synthesized code strings to
		# be inserted in the above files.  Most
		# files have just one such insertion point
		# ("intron") but some have two, for example
		# one for synthesized type declarations
		# and one for synthesized functions.
		#
		# These will all be in reverse
		# order while being contructed:
		#
		intron_for_'xxx_client_driver_api'				=  REF ([]: List(String));
		intron_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'	=  REF ([]: List(String));
		intron_for_'xxx_client_driver_for_library_in_main_process_pkg'	=  REF ([]: List(String));
		funs_intron_for_'xxx_client_api'              			=  REF ([]: List(String));
		types_intron_for_'xxx_client_api'             			=  REF ([]: List(String));
		funs_intron_for_'xxx_client_g_pkg'            			=  REF ([]: List(String));
		types_intron_for_'xxx_client_g_pkg'				=  REF ([]: List(String));
		funs_intron_for_'mythryl_xxx_library_in_c_subprocess_c'		=  REF ([]: List(String));
		trie_intron_for_'mythryl_xxx_library_in_c_subprocess_c'		=  REF ([]: List(String));
		table_intron_for_'libmythryl_xxx_c'				=  REF ([]: List(String));
		funs_intron_for_'libmythryl_xxx_c'				=  REF ([]: List(String));
		table1_intron_for_'section_libref_xxx_tex'			=  REF ([]: List(String));
		table2_intron_for_'section_libref_xxx_tex'			=  REF ([]: List(String));


		# Little functions to prepend
		# strings to the above lists:
		#
		fun to_xxx_client_driver_api					string =   intron_for_'xxx_client_driver_api'					:=  string !  *intron_for_'xxx_client_driver_api';
		fun to_xxx_client_driver_for_library_in_c_subprocess_pkg	string =   intron_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'	:=  string !  *intron_for_'xxx_client_driver_for_library_in_c_subprocess_pkg';
		fun to_xxx_client_driver_for_library_in_main_process_pkg	string =   intron_for_'xxx_client_driver_for_library_in_main_process_pkg'	:=  string !  *intron_for_'xxx_client_driver_for_library_in_main_process_pkg';
		fun to_xxx_client_g_pkg_funs					string =   funs_intron_for_'xxx_client_g_pkg'					:=  string !  *funs_intron_for_'xxx_client_g_pkg';
		fun to_xxx_client_g_pkg_types					string =   types_intron_for_'xxx_client_g_pkg'					:=  string !  *types_intron_for_'xxx_client_g_pkg';
		fun to_xxx_client_api_funs					string =   funs_intron_for_'xxx_client_api'					:=  string !  *funs_intron_for_'xxx_client_api';
		fun to_xxx_client_api_types					string =   types_intron_for_'xxx_client_api'					:=  string !  *types_intron_for_'xxx_client_api';
		fun to_mythryl_xxx_library_in_c_subprocess_c_funs		string =   funs_intron_for_'mythryl_xxx_library_in_c_subprocess_c'		:=  string !  *funs_intron_for_'mythryl_xxx_library_in_c_subprocess_c';
		fun to_mythryl_xxx_library_in_c_subprocess_c_trie		string =   trie_intron_for_'mythryl_xxx_library_in_c_subprocess_c'		:=  string !  *trie_intron_for_'mythryl_xxx_library_in_c_subprocess_c';
		fun to_libmythryl_xxx_c_table					string =   table_intron_for_'libmythryl_xxx_c'					:=  string !  *table_intron_for_'libmythryl_xxx_c';
		fun to_libmythryl_xxx_c_funs					string =   funs_intron_for_'libmythryl_xxx_c'					:=  string !  *funs_intron_for_'libmythryl_xxx_c';
		fun to_section_libref_xxx_tex_table1				string =   table1_intron_for_'section_libref_xxx_tex'				:=  string !  *table1_intron_for_'section_libref_xxx_tex';
		fun to_section_libref_xxx_tex_table2				string =   table2_intron_for_'section_libref_xxx_tex'				:=  string !  *table2_intron_for_'section_libref_xxx_tex';


		fun note_plugins plugins
		    =
		    apply  note_plugin  plugins
		    where
			fun note_plugin (LIBCALL_TO_ARGS_FN  libcall_to_args_fn)
				=>
				ref_libcall_to_args_fn :=  libcall_to_args_fn;

			    note_plugin (BUILD_A (build_a, function_builder))		# E.g. ("callback-fn", build_callback_function)
				=>
				build_fns :=  string_map::set  (*build_fns,  build_a,  function_builder);

			    note_plugin (BUILD_ARG_LOAD_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS' (arg_type, arg_load_builder))
				=>
				arg_load_fns_for_'mythryl_xxx_library_in_c_subprocess_c' :=  string_map::set  (*arg_load_fns_for_'mythryl_xxx_library_in_c_subprocess_c',  arg_type,  arg_load_builder);

			    note_plugin (BUILD_ARG_LOAD_FOR_'LIBMYTHRYL_XXX_C' (arg_type, arg_load_builder))
				=>
				arg_load_fns_for_'libmythryl_xxx_c' :=  string_map::set  (*arg_load_fns_for_'libmythryl_xxx_c',  arg_type,  arg_load_builder);

			    note_plugin (BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS_C'  (result_type, function))
				=>
				subprocess_custom_plain_fun_bodies :=  string_map::set  (*subprocess_custom_plain_fun_bodies,  result_type,  function);

			    note_plugin (BUILD_CUSTOM_BODY_PLAIN_FUN_FOR_'LIBMYTHRYL_XXX_C'  (result_type, function))
				=>
				mainprocess_custom_plain_fun_bodies :=  string_map::set  (*mainprocess_custom_plain_fun_bodies,  result_type,  function);

			    note_plugin (FIGURE_FUNCTION_RESULT_TYPE (type, function))
				=>
				figure_function_result_type_fns     :=  string_map::set  (*figure_function_result_type_fns, type, function);

			    note_plugin (DO_COMMAND_FOR_'XXX_CLIENT_DRIVER_FOR_LIBRARY_IN_C_SUBPROCESS_PKG' (type, function))
				=>
				do_command_for     :=  string_map::set  (*do_command_for, type, function);

			    note_plugin (DO_COMMAND_TO_STRING_FN (type, function))
				=>
				do_command_to_string_fn     :=  string_map::set  (*do_command_to_string_fn, type, function);

			    note_plugin (CLIENT_DRIVER_ARG_TYPE (type, type2))
				=>
				client_driver_arg_type     :=  string_map::set  (*client_driver_arg_type, type, type2);

			    note_plugin (CLIENT_DRIVER_RESULT_TYPE (type, type2))
				=>
				client_driver_result_type     :=  string_map::set  (*client_driver_result_type, type, type2);
			end;
		    end;

		# We divide the files we patch into exons and introns
		# according to the scheme
		#
		#        exon
		#        # Do not edit this or following lines -- they are autobuilt by make-library-glue./)
		#        intron
		#        # Do not edit this or preceding lines -- they are autobuilt by make-library-glue./)
		#        exon
		#        
		# where the exons are literal program text provided by the
		# programmer whereas the introns are literal program text
		# which we synthesize.  (The shown 'do not edit' lines are
		# considered part of the exons.)
		#
		# We represent such a file in memory as a list of file
		# segments (that is, exons and introns) where each segment
		# is in turn a list of lines represented as strings:
		#
		File_Segment = EXON   List(String)
			     | INTRON List(String)
			     ;

		Patchable_File
		    =
		    PATCHABLE_FILE {
			filename:  String,
			contents:  List(File_Segment)
		    };


		# Read and return a Patchable_File:
		#
		fun read_patchable_file  filename
		    =
		    {   fd = fil::open_for_read filename
			     except
				io_exceptions::IO _
				    =
				    {   fprintf fil::stderr "Fatal: Unable to open input file '%s'" filename;
					exit_x(1);
				    };
			contents
			    =
			    read_exon ([], [])
			    where
				fun read_exon (segments, lines)
				    =
				    case (fil::read_line  fd)
					#
					NULL => reverse ((EXON (reverse lines)) ! segments);

					THE line
					    =>
					    if (line =~ ./ Do not edit this or following lines -- they are autobuilt by make-library-glue./)

						read_intron ((EXON (reverse (line ! lines))) ! segments, []);
					    else
						read_exon (segments, line ! lines);
					    fi;	
				    esac

				also
				fun read_intron (segments, lines)
				    =
				    case (fil::read_line  fd)
					#
					NULL =>
					    {   fprintf fil::stderr "Fatal: Missing 'Do not edit this or preceding lines' line in %s" filename;
						exit_x(1);
					    };

					THE line
					    =>
					    if (line =~ ./ Do not edit this or preceding lines -- they are autobuilt by make-library-glue./)
						#
						read_exon ((INTRON (reverse lines)) ! segments, [ line ]);
					    else
						read_intron (segments, line ! lines);
					    fi;	
				    esac;
			    end;

			fil::close_input  fd;

			PATCHABLE_FILE { filename, contents };
		    };

		# Write a patchable file back into the filesystem.
		#
		fun write_patchable_file
		    (PATCHABLE_FILE { filename, contents })
		    introns
		    =
		    {   intron_lines_written = REF 0;

			tmp_filename = filename + "~";

			fd = fil::open_for_write  tmp_filename
			     except
				io_exceptions::IO _
				    =
				    {   fprintf fil::stderr "Fatal: Unable to open output file '%s'" tmp_filename;
					exit_x(1);
				    };


			fun write_exon_lines  (line ! rest)
				=>
				{   fil::write (fd, line);
				    #
				    write_exon_lines  rest;
				};

			    write_exon_lines [] =>  ();
			end;


			fun write_intron_lines  (line ! rest)					# Actually 'line' may be just a string (i.e., line fragment).
				=>
				{   fil::write (fd, line);
				    intron_lines_written := *intron_lines_written + 1;		# This is the only difference between us and write_exon_lines.
				    write_intron_lines rest;
				};

			    write_intron_lines  [] =>  ();
			end;


			write_exon (contents, introns)
			where
			    fun write_exon (((EXON lines) ! rest), introns)
				    =>
				    {
					write_exon_lines lines;
					write_intron (rest, introns);
				    };

				write_exon _
				    =>
				    raise exception FAIL "Internal bug";
			    end

			    also
			    fun write_intron ((INTRON _) ! exons, (INTRON lines) ! introns)
				    =>
				    {
					write_intron_lines lines;
					write_exon (exons, introns);
				    };

				write_intron ([], [])
				    =>
				    ();

				write_intron _
				    =>
				    raise exception FAIL "Internal bug";
			    end;
			end;	

			fil::close_output fd;   

			winix__premicrothread::file::remove_file  filename;

			winix__premicrothread::file::rename_file { from => tmp_filename, to => filename };

			printf "Successfully patched %4d lines in %s\n"  *intron_lines_written  filename;
		    };





		#
		fun field_location (field: Field)
		    =
		    *field.line_1 == *field.line_n  ??  sprintf "line %d" *field.line_1
						    ::  sprintf "lines %d-%d" *field.line_1 *field.line_n;

		#
		fun maybe_get_field (state: State, field_name)
		    =
		    case (string_map::get (*state.fields, field_name))
			#
			THE field => { field.used := TRUE;  THE *field.string; };
			NULL      => NULL;
		    esac;

		#
		fun get_field (state: State, field_name)
		    =
		    case (string_map::get (*state.fields, field_name))
			#
			THE field => { field.used := TRUE; 
				      *field.string;
				     };

			NULL      => die_x (sprintf "Required field %s missing at line %d\n"  field_name  *state.line_number);
		    esac;

		#
		fun get_field_location (state: State, field_name)
		    =
		    case (string_map::get (*state.fields, field_name))
			#
			THE field => { field.used := TRUE;  field_location field; };
			#
			NULL      => die_x (sprintf "Required field %s missing at line %d\n"  field_name  *state.line_number);
		    esac;

		#
		fun clear_state (state: State)
		    =
		    {   foreach (string_map::keyvals_list *state.fields) .{
			    #
			    #pair -> (field_name, field);

			    if (not *field.used)
				#
				die_x(sprintf "Field %s at %s unsupported.\n"
					     field_name
					     (field_location field)
				    );
			    fi;
			}; 

			state.fields :=  (string_map::empty: string_map::Map( Field ));
		    };





		# Count number of arguments.
		# We need this for check_argc():
		#
		fun count_args  libcall
		    =
		    list::length (libcall_to_args  libcall);

		#
		fun get_nth_arg_type (n, libcall)
		    =
		    {   arg_list =  libcall_to_args  libcall;

			if (n <   0
			or  n >=  list::length  arg_list
			)
			    raise exception FAIL (sprintf "get_nth_arg_type: No %d-th arg in '%s'!" n libcall);
			fi;

			arg = list::nth (arg_list, n);		# Fetch "w0" or "i0" or such.

			string::extract (arg, 0, THE 1);	# Convert "w0" to "w" or "i0" to "i" etc.
		    };

		#
		fun arg_types_are_all_unique  libcall
		    =
		    {   # Get the list of parameters,
			# something like [ "w0", "i1", "i2" ]:
			#
			args  =  libcall_to_args  libcall;

			# Turn parameter list into type list,
			# something like [ 'w', 'i', 'i' ]:
			#
			types =  map   .{ string::get (#string,0); }   args;

			# Eliminate duplicate types from above:
			#
			types =   uniquesort  char::compare  types;

			# If 'args' is same length as 'types' then
			# all types are unique:
			#
			list::length args  ==  list::length types;
		    };

		#
		fun xxx_client_driver_api_type (libcall, result_type)
		    =
		    {   input_type =  REF "(Session";
			#
			arg_count  =  count_args  libcall;

			for (a = 0;  a < arg_count;  ++a) {
			    #
			    t = get_nth_arg_type( a, libcall );

			    case t
				"b" =>     input_type :=  *input_type  +  ", Bool";
				"i" =>     input_type :=  *input_type  +  ", Int";
				"f" =>     input_type :=  *input_type  +  ", Float";
				"s" =>     input_type :=  *input_type  +  ", String";
				#
				x	     => case (string_map::get (*client_driver_arg_type, x))
						    #
						    THE type2 =>  input_type :=  *input_type  +  ", " + type2;				# Handle "w" etc
						    NULL      =>  raise exception FAIL (sprintf "Unsupported arg type '%s'" t);
						esac;
			    esac;
			};

			input_type :=  *input_type  +  ")";


			output_type
			    =
			    case result_type
				#
				"Bool"       =>  "Bool";
				"Float"      =>  "Float";
				"Int"        =>  "Int";
				"Void"       =>  "Void";
				#
				x	     => case (string_map::get (*client_driver_result_type, x))	
						    #
						    THE type2 =>  type2;	# "Widget", "new Widget"
						    NULL      =>  raise exception FAIL ("xxx_client_driver_api_type: Unsupported result type: " + result_type);
						esac;
			    esac;

			(*input_type, output_type);
		    };
		#        
		stipulate
		    #
		    line_count = REF 2;

		herein

		    fun build_fun_declaration_for_'xxx_client_driver_api'  (fn_name, libcall, result_type)
			=
			{
			    # Add a blank line every three declarations:
			    #
			    line_count :=  *line_count + 1;
			    #	
			    if ((*line_count % 3) == 0)
				#
				to_xxx_client_driver_api  "\n";
			    fi;

			    to_xxx_client_driver_api  (sprintf  "    %-40s"  (fn_name + ":"));


			    (xxx_client_driver_api_type  (libcall,  result_type))
				->
				(input_type,  output_type);


			    to_xxx_client_driver_api  (sprintf "%-40s -> %s;\n"  input_type  output_type);
			};
		end;






		#
		fun write_do_command (do_command, fn_name, libcall, result_prefix, result_expression)
		    =
		    {
			if (result_expression != "")
			     to_xxx_client_driver_for_library_in_c_subprocess_pkg ("        {   result = " + do_command + " (session");
			else to_xxx_client_driver_for_library_in_c_subprocess_pkg ("        " + do_command + " (session");
			fi;

			if (result_prefix != "") 
			    to_xxx_client_driver_for_library_in_c_subprocess_pkg  (.', "' + result_prefix + .'"');
			fi;

			to_xxx_client_driver_for_library_in_c_subprocess_pkg  (.', "' + fn_name + .'"');

			prefix = .' + " " +';

			arg_count = count_args libcall;

			for (a = 0;  a < arg_count;  ++a) {
			    #
			    t = get_nth_arg_type( a, libcall );

			    case t
				"b" =>  to_xxx_client_driver_for_library_in_c_subprocess_pkg   (sprintf  "%s bool_to_string %s%d"		prefix t a);
				"f" =>  to_xxx_client_driver_for_library_in_c_subprocess_pkg   (sprintf  "%s eight_byte_float::to_string %s%d"	prefix t a);
				"i" =>  to_xxx_client_driver_for_library_in_c_subprocess_pkg   (sprintf  "%s int::to_string %s%d"		prefix t a);
				"s" =>  to_xxx_client_driver_for_library_in_c_subprocess_pkg   (sprintf  "%s string_to_string %s%d"		prefix t a);
				#
				 x  =>  case (string_map::get (*do_command_to_string_fn, x))
					    #
					    THE to_string => to_xxx_client_driver_for_library_in_c_subprocess_pkg   (sprintf  "%s %s %s%d"	prefix  to_string  t  a);
					    #
					    NULL	  => raise exception FAIL ("Unsupported arg type '" + x + "'");
					esac;
			    esac;
			};

			to_xxx_client_driver_for_library_in_c_subprocess_pkg ");\n";


			if (result_expression != "")
			    #
			    to_xxx_client_driver_for_library_in_c_subprocess_pkg "\n";
			    to_xxx_client_driver_for_library_in_c_subprocess_pkg ("            " + result_expression + "\n");
			    to_xxx_client_driver_for_library_in_c_subprocess_pkg "        };\n\n\n";
			else
			    to_xxx_client_driver_for_library_in_c_subprocess_pkg "\n\n";
			fi;
		    };

		# Build a function for   src/glu/xxx/src/xxx-client-driver-for-library-in-c-subprocess.pkg
		# looking like
		#
		#    fun make_status_bar_context_id (session, w0, s1)	# Int
		#        =
		#        do_int_command (session, "make_status_bar_context_id", "make_status_bar_context_id" + " " + widget_to_string w0 + " " + string_to_string s1);
		#
		fun build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg' (fn_name, libcall, result_type)
		    =
		    {   to_xxx_client_driver_for_library_in_c_subprocess_pkg ("    fun " + fn_name + " (session");
			#
			arg_count = count_args( libcall );

			for (a = 0;  a < arg_count;  ++a) {
			    #
			    arg_type = get_nth_arg_type( a, libcall );

			    to_xxx_client_driver_for_library_in_c_subprocess_pkg  (sprintf ", %s%d" arg_type a);
			};

			to_xxx_client_driver_for_library_in_c_subprocess_pkg (")\t# " + result_type + "\n");
			to_xxx_client_driver_for_library_in_c_subprocess_pkg ("        =\n");

			if   (result_type == "Int")          write_do_command ("do_int_command",    fn_name, libcall, fn_name, "");
			elif (result_type == "Bool")         write_do_command ("do_string_command", fn_name, libcall, fn_name, "the (int::from_string result) != 0;");
			elif (result_type == "Float")        write_do_command ("do_string_command", fn_name, libcall, fn_name, "the (eight_byte_float::from_string result);");
			elif (result_type == "Void")         write_do_command ("do_void_command",   fn_name, libcall, "", "");
			else
			    case (string_map::get (*do_command_for, result_type))
				#
				THE do_command  =>           write_do_command (do_command,          fn_name, libcall, fn_name, "");
				#
				NULL		=>	     raise exception FAIL ("Unsupported result type: " + result_type);
			    esac;
			fi;
		    };

		#
		fun n_blanks n
		    =
		    n_blanks' (n, "")
		    where
			fun n_blanks' (0, string) => string;
			    n_blanks' (i, string) => n_blanks' (i - 1, " " + string);
			end;
		    end;

		# Build a function for   src/glu/xxx/src/xxx-client-driver-for-library-in-main-process.pkg
		# looking like
		#
		# NEED TO WORK OUT APPROPRIATE VARIATION FOR THIS
		#
		#    fun make_status_bar_context_id (session, w0, s1)	# Int
		#        =
		#        do_int_command (session, "make_status_bar_context_id", "make_status_bar_context_id" + " " + widget_to_string w0 + " " + string_to_string s1);
		#
		fun build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg' (fn_name, c_fn_name, fn_type, libcall, result_type)
		    =
		    {
			# Construct xxx-client-driver-for-library-in-main-process.pkg level type for this function.
			# The xxx-client-g.pkg level type may involve records or tuples,
			# but at this level we always have tuples:
			#
			(xxx_client_driver_api_type (libcall, result_type))
			    ->
			    (input_type, output_type);

			to_xxx_client_driver_for_library_in_main_process_pkg "\n";
			to_xxx_client_driver_for_library_in_main_process_pkg
			    (sprintf "    #      %-80s   # %s type\n"
				     ( (n_blanks (string::length fn_name))
				     + (fn_type =~ ./^\(/ ?? "" :: " ")			   # If type starts with a paren exdent it one space.
				     +  fn_type
				     )
				     (basename path.xxx_client_api)
			    );

			to_xxx_client_driver_for_library_in_main_process_pkg
			    (sprintf "    my %s:   %s%s -> %s\n"
				      c_fn_name
				     (input_type =~ ./^\(/ ?? "" :: " ")		   # If type starts with a paren exdent it one space.
				      input_type
				      output_type
			    );

			to_xxx_client_driver_for_library_in_main_process_pkg "        =\n";

			to_xxx_client_driver_for_library_in_main_process_pkg
			    (sprintf "        ci::find_c_function { lib_name => \"%s\", fun_name => \"%s\" };\n"
				path.lib_name	
				c_fn_name
			    );

			to_xxx_client_driver_for_library_in_main_process_pkg "\n";


		#	to_xxx_client_driver_for_library_in_main_process_pkg ("#    fun " + fn_name + " (session");
		#
		#	arg_count = count_args( libcall );
		#
		#	for (a = 0;  a < arg_count;  ++a) {
		#
		#	    arg_type = get_nth_arg_type( a, libcall );
		#
		#	    to_xxx_client_driver_for_library_in_main_process_pkg  (sprintf ", %s%d" arg_type a);
		#	};
		#
		#	to_xxx_client_driver_for_library_in_main_process_pkg (")\t# " + result_type + "\n");
		#	to_xxx_client_driver_for_library_in_main_process_pkg ("#        =\n");


		#	if   (result_type == "new Widget")   write_do_command ("do_int_command",    fn_name, libcall, fn_name, "");
		#	elif (result_type == "Widget")       write_do_command ("do_int_command",    fn_name, libcall, fn_name, "");
		#	elif (result_type == "Int")          write_do_command ("do_int_command",    fn_name, libcall, fn_name, "");
		#	elif (result_type == "Bool")         write_do_command ("do_string_command", fn_name, libcall, fn_name, "the (int::from_string result) != 0;");
		#	elif (result_type == "Float")        write_do_command ("do_string_command", fn_name, libcall, fn_name, "the (eight_byte_float::from_string result);");
		#	elif (result_type == "Void")         write_do_command ("do_void_command",   fn_name, libcall, "", "");
		#	else
		#	    raise exception FAIL ("Unsupported result type: " + result_type);
		#	fi;
		    };


		# Convert .|xxx_foo| to .|xxx\_foo|
		# to protect it from TeX's ire:
		#
		fun slash_underlines  string
		    =
		    {
			regex::replace_all ./_/ .|\_| string;
		    };


		# Write a trie line into file  src/glu/xxx/c/in-sub/mythryl-xxx-library-in-c-subprocess.c
		#
		fun build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c'  name
		    =
		    {
			to_mythryl_xxx_library_in_c_subprocess_c_trie
			   (sprintf
				"    set_trie( trie, %-46s%-46s);\n"
				(.'"'  + name + .'",')
				("do__" + name));
		    };	

		# Write a line like
		#
		#     CFUNC("init","init",	do__gtk_init,		"Void -> Void")
		#
		# into file   src/glu/xxx/c/in-main/libmythryl-xxx.c
		#
		fun build_table_entry_for_'libmythryl_xxx_c' (fn_name, fn_type)
		    =
		    {   to_libmythryl_xxx_c_table
                            (sprintf "CFUNC(%-44s%-44s%-54s%s%s)\n"
				("\""   + fn_name + "\",")
				("\""   + fn_name + "\",")
				("do__" + fn_name + ",")
				(fn_type =~ ./^\(/ ?? "" :: " ")			   # If type starts with a paren exdent it one space.
				("\""         + fn_type + "\"")
			    );
		    };

		Doc_Entry
		    =
		    { fn_name:  String,
		      libcall:  String,
		      url:      String,
		      fn_type:  String
		    };

		doc_entries =  REF ([]: List( Doc_Entry ));

		# Note a tex documentation table
		# line for file  section-libref-xxx.tex.
		#
		fun note__section_libref_xxx_tex__entry
		    { state,
		      fn_name,		# E.g. "make_window"
		      libcall,		# E.g. "gtk_table_set_col_spacing( GTK_TABLE(/*table*/w0), /*col*/i1, /*spacing*/i2)"
		      url,		# E.g. "http://library.gnome.org/devel/gtk/stable/GtkTable.html#gtk-table-set-col-spacing"
		      fn_type		# E.g. "Session -> Widget"
		    }
		    =
		    {
			# Get name of the C Gtk function/var
			# wrapped by this Mythryl function:
			#
			libcall
			    =
			    case (maybe_get_field(state,"doc-fn"))
				#
				THE field => field;	# doc-fn is a manual override used when libcall is unusable for documentation.

				NULL =>
				    {   # libcall is something like   gtk_widget_set_size_request( GTK_WIDGET(/*widget*/w0), /*wide*/i1, /*high*/i2)
					# but all we want here is the
					# initial function name:
					#
					libcall =  regex::find_first ./[A-Za-z0-9_']+/ libcall
						   except
						       NOT_FOUND = "";

					# If libcall does not begin with [Gg], it
					# is probably not useful in this context:
					#
					libcall =  (libcall =~ ./^[Gg]/)  ??  libcall
									  ::  "";

					libcall;
				    };	
			    esac;


			fn_name =  slash_underlines  fn_name;
			libcall =  slash_underlines  libcall;
			url     =  slash_underlines  url;		# Probably not needed.
			fn_type =  slash_underlines  fn_type;

			doc_entries :=   { fn_name, libcall, url, fn_type }  !  *doc_entries;
		    };

		# Write tex documentation table into file  section-libref-xxx.tex:
		#
		fun write_section_libref_xxx_tex_table
		    ( field1: Doc_Entry -> String,
		      field2: Doc_Entry -> String,
		      to_section: String -> Void
		    )
		    =
		    {
			# Define the sort order for the table:
			#
			fun compare_fn
			    ( a: Doc_Entry,
			      b: Doc_Entry
			    )
			    =
			    {   a1 = field1 a;    a2 = field2 a;
				b1 = field1 b;    b2 = field2 b;

				# If primary keys are equal,
				# sort on the secondary keys:
				#
				if (a1 != b1)   a1 > b1;
				else            a2 > b2;
				fi;
			    };

			entries =  sort  compare_fn  *doc_entries;

			foreach entries .{

			    #entry -> { fn_name, libcall, url, fn_type };

			    entry1 = field1 #entry;
			    entry2 = field2 #entry;

			    if (entry1 != "")
				to_section
				    (sprintf "%s & %s & %s & %s \\\\ \\hline\n"
					entry1
					entry2
					(url == "" ?? ""
						   :: (.|\ahref{\url{| + url + "}}{doc}"))
					fn_type
				    );
			    fi;
			};
		    };

		#
		fun build_fun_header_for_'mythryl_xxx_library_in_c_subprocess_c' (fn_name, args)
		    =
		    {   to_mythryl_xxx_library_in_c_subprocess_c_funs   "\n";
			to_mythryl_xxx_library_in_c_subprocess_c_funs  "static void\n";
			to_mythryl_xxx_library_in_c_subprocess_c_funs ("do__" + fn_name + "( int argc, unsigned char** argv )\n");
			to_mythryl_xxx_library_in_c_subprocess_c_funs  "{\n";
			to_mythryl_xxx_library_in_c_subprocess_c_funs (sprintf "    check_argc( \"do__%s\", %d, argc );\n" fn_name args);
			to_mythryl_xxx_library_in_c_subprocess_c_funs  "\n";
			to_mythryl_xxx_library_in_c_subprocess_c_funs  "    {\n";
		    };


		# Build C code
		# to fetch all the arguments
		# out of argc/argv:
		#
		fun build_fun_arg_loads_for_'mythryl_xxx_library_in_c_subprocess_c' (fn_name, args, libcall)
		    =
		    {   for (a = 0;   a < args;  ++a) {

			    # Remember type of this arg,
			    # which will be one of:
			    #   w (widget),
			    #   i (int),
			    #   b (bool)
			    #   s (string)
			    #   f (double):
			    #
			    arg_type = get_nth_arg_type( a, libcall );

			    if   (arg_type == "b")    to_mythryl_xxx_library_in_c_subprocess_c_funs (sprintf  "        int               b%d =                        bool_arg( argc, argv, %d );\n"  a a);
			    elif (arg_type == "f")    to_mythryl_xxx_library_in_c_subprocess_c_funs (sprintf  "        double            f%d =                      double_arg( argc, argv, %d );\n"  a a);
			    elif (arg_type == "i")    to_mythryl_xxx_library_in_c_subprocess_c_funs (sprintf  "        int               i%d =                         int_arg( argc, argv, %d );\n"  a a);
			    elif (arg_type == "s")    to_mythryl_xxx_library_in_c_subprocess_c_funs (sprintf  "        char*             s%d =                      string_arg( argc, argv, %d );\n"  a a);

			    else
				case (string_map::get  (*arg_load_fns_for_'mythryl_xxx_library_in_c_subprocess_c', arg_type))	# Custom library-specific arg type handling for "w" etc.
				    #
				    THE build_arg_load_fn =>  to_mythryl_xxx_library_in_c_subprocess_c_funs  (build_arg_load_fn (arg_type, a, libcall));
				    NULL                  =>  raise exception FAIL ("Bug: unsupported arg type '" + arg_type + "' #" + int::to_string a + " from libcall '" + libcall + "\n");
				esac;
			    fi;
			};
		    };

		# Synthesize a function for   mythryl-xxx-library-in-c-subprocess.c  like
		# 
		#    static void
		#    do__set_adjustment_value( int argc, unsigned char** argv )
		#    {
		#        check_argc( "do__make_label", 2, argc );
		#    
		#        {   GtkAdjustment* w0 =  (GtkAdjustment*) widget_arg( argc, argv, 0 );
		#            double         f1 =                   double_arg( argc, argv, 1 );
		#
		#    	     gtk_adjustment_set_value( GTK_ADJUSTMENT(w0), /*value*/f1);
		#        }
		#    }
		#    
		fun build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'
		    ( state: State,
		      fn_name,			# E.g., "make_window2"
		      fn_type,			# E.g., "Session -> Widget".
		      libcall,			# E.g., "gtk_window_new( GTK_WINDOW_TOPLEVEL )".
		      result			# E.g., "Float"
		    )
		    =
		    {   arg_count =  count_args  libcall;
			#
			build_fun_header_for_'mythryl_xxx_library_in_c_subprocess_c'    (fn_name, arg_count);
			build_fun_arg_loads_for_'mythryl_xxx_library_in_c_subprocess_c' (fn_name, arg_count, libcall);

			case result
			    #
			    "Void"
				=>
				{   # Now we just print
				    # the supplied gtk call
				    # and wrap up:
				    #
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs ("        " + libcall + ";\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "    }\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "}\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.library_binding_specification + ". */\n");
				};

			    "Bool"
				=>
				{   to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        int result = " + libcall + ";\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("         printf(              \"" + fn_name + "%d\\n\", result);      fflush( stdout );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        fprintf(log_fd, \"SENT: " + fn_name + "%d\\n\", result);      fflush( log_fd );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "    }\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "}\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.library_binding_specification + ". */\n");
				};

			    "Float"
				=>
				{   to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        double result = " + libcall + ";\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("         printf(              \"" + fn_name + "%f\\n\", result);      fflush( stdout );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        fprintf(log_fd, \"SENT: " + fn_name + "%f\\n\", result);      fflush( log_fd );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "    }\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "}\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.library_binding_specification + ". */\n");

				};

			    "Int"
				=>
				{   to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        int result = " + libcall + ";\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("         printf(              \"" + fn_name + "%d\\n\", result);      fflush( stdout );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("        fprintf(log_fd, \"SENT: " + fn_name + "%d\\n\", result);      fflush( log_fd );\n");
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "    }\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs "}\n";
				    to_mythryl_xxx_library_in_c_subprocess_c_funs("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.library_binding_specification + ". */\n");
				};


			    _   =>  case (string_map::get  (*subprocess_custom_plain_fun_bodies, result))							# Custom library-specific arg type handling for "Widget", "new Widget" etc.
					#
					THE build_fn =>  build_fn { fn_name, libcall, to_mythryl_xxx_library_in_c_subprocess_c_funs, path };
					NULL         =>  raise exception FAIL (sprintf "Unsupported result type '%s' at line %d" result *state.line_number);
				    esac;
			esac;

			plain_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
			    :=
			    *plain_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
			    + 1;
		    };

		#
		fun build_fun_header_for_'libmythryl_xxx_c' (fn_name, fn_type, args, libcall, result_type)
		    =
		    {
			(xxx_client_driver_api_type  (libcall,  result_type))
			    ->
			    (input_type, output_type);
			    

			# C comments don't nest, so we must change
			# any C comments in input_type or output_type:
			#
			input_type  = regex::replace_all   .|/\*|   "(*"    input_type;
			input_type  = regex::replace_all   .|\*/|   "*)"    input_type;
			#
			output_type = regex::replace_all   .|/\*|   "(*"   output_type;
			output_type = regex::replace_all   .|\*/|   "*)"   output_type;


			to_libmythryl_xxx_c_funs ("/* do__" + fn_name + "\n");
			to_libmythryl_xxx_c_funs  " *\n";
			to_libmythryl_xxx_c_funs (" * " + (basename path.xxx_client_api) + "        type:   " + (   fn_type =~ ./^\(/ ?? "" :: " ") + fn_type + "\n");
			to_libmythryl_xxx_c_funs (" * " + (basename path.xxx_client_driver_api) + " type:   " + (input_type =~ ./^\(/ ?? "" :: " ") + input_type + " -> " + output_type + "\n");
			to_libmythryl_xxx_c_funs  " */\n";
			to_libmythryl_xxx_c_funs ("static Val   do__" + fn_name + "   (Task* task, Val arg)\n");
			to_libmythryl_xxx_c_funs  "{\n";
			to_libmythryl_xxx_c_funs  "\n";
		    };

		#
		fun build_fun_trailer_for_'libmythryl_xxx_c' ()
		    =
		    {
			to_libmythryl_xxx_c_funs  "}\n";
			to_libmythryl_xxx_c_funs("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  write_libmythryl_xxx_c_plain_fun  per  " + path.library_binding_specification + ". */\n");
			to_libmythryl_xxx_c_funs  "\n";
			to_libmythryl_xxx_c_funs  "\n";
		    };


		# Build C code
		# to fetch all the arguments
		# out of argc/argv:
		#
		fun build_fun_arg_loads_for_'libmythryl_xxx_c' (fn_name, fn_type, args, libcall)
		    =
		    {
			case args
			    0 => ();

		#            Having just one argument used to be a special case
		#            because then we passed the argument directly rather
		#            than packed within a tuple.  But the first argument
		#            to a gtk-client-driver-for-library-in-main-process.pkg function is always a Session,
		#            and it is more efficient to pass on the tuple from
		#            that layer to the mythryl-gtk-library-in-main-process.c layer rather than
		#            unpacking and repacking just to get rid of the Session
		#            argument, consequently if we have any arguments of
		#            interest (i.e., non-Session arguments) at this point
		#            we will always have a tuple, eliminating the special
		#	         case.  I've left this code here, commented out, just
		#            in case this situation changes and it is needed again:
		#
		#
		#            1 => {  arg_type = get_nth_arg_type( 0, libcall );
		#
		#		    if   (arg_type == "b")    to_libmythryl_xxx_c_funs "    int    b0 = TAGGED_INT_TO_C_INT(arg) == HEAP_TRUE;\n";
		#		    elif (arg_type == "f")    to_libmythryl_xxx_c_funs "    double f0 = *(PTR_CAST(double*, arg));\n";
		#		    elif (arg_type == "i")    to_libmythryl_xxx_c_funs "    int    i0 = TAGGED_INT_TO_C_INT(arg);\n";
		#		    elif (arg_type == "s")    to_libmythryl_xxx_c_funs "    char*  s0 = HEAP_STRING_AS_C_STRING(arg);\n";
		#		    elif (arg_type == "w")
		#
		#			# Usually we fetch a widget as just
		#			#
		#			#    GtkWidget* widget    =  widget[ TAGGED_INT_TO_C_INT(arg) ];
		#			#
		#			# or such, but in a few cases we must cast to
		#			# another type:
		#			#  o If we see   GTK_ADJUSTMENT(w0)    we must do   GtkAdjustment*  w0 =  (GtkAdjustment*)  widget[ TAGGED_INT_TO_C_INT(arg) ];
		#			#  o If we see   GTK_SCALE(w0)         we must do   GtkScale*       w0 =  (GtkScale*)       widget[ TAGGED_INT_TO_C_INT(arg) ];
		#			#  o If we wee   GTK_RADIO_BUTTON(w0)  we must do   GtkRadioButton* w0 =  (GtkRadioButton*) widget[ TAGGED_INT_TO_C_INT(arg) ];
		#
		#			widget_type = REF "GtkWidget";
		#
		#			if   (libcall =~   ./GTK_ADJUSTMENT\(\s*w0\s*\)/)   widget_type := "GtkAdjustment";
		#			elif (libcall =~        ./GTK_SCALE\(\s*w0\s*\)/)   widget_type := "GtkScale";
		#			elif (libcall =~ ./GTK_RADIO_BUTTON\(\s*w0\s*\)/)   widget_type := "GtkRadioButton";
		#			fi;
		#
		#			to_libmythryl_xxx_c_funs (sprintf  "    %-14s    w0 =    %-16s  widget[ TAGGED_INT_TO_C_INT(arg) ];\n"
		#                                                  (*widget_type + "*")
		#                                                  ("(" + *widget_type + "*)")
		#                                        );
		#
		#		    else
		#			raise exception FAIL ("Bug: unsupported arg type '" + arg_type + "' #0 from libcall '" + libcall + "\n");
		#		    fi;
		#		};

			    _ => {  if (args < 0)  die_x "build_fun_arg_loads_for_'libmythryl_xxx_c': Negative 'args' value not supported.";  fi;
				    #
				    for (a = 0;   a < args;  ++a) {
					#
					# Remember type of this arg,
					# which will be one of:
					#   w (widget),
					#   i (int),
					#   b (bool)
					#   s (string)
					#   f (double):
					#
					arg_type = get_nth_arg_type( a, libcall );

					if   (arg_type == "b")    to_libmythryl_xxx_c_funs (sprintf  "    int               b%d =                            GET_TUPLE_SLOT_AS_VAL( arg, %d) == HEAP_TRUE;\n"   a (a+1)); # +1 because 1st arg is always Session.
					elif (arg_type == "f")    to_libmythryl_xxx_c_funs (sprintf  "    double            f%d =        *(PTR_CAST(double*, GET_TUPLE_SLOT_AS_VAL( arg, %d)));\n"              a (a+1));
					elif (arg_type == "i")    to_libmythryl_xxx_c_funs (sprintf  "    int               i%d =                            GET_TUPLE_SLOT_AS_INT( arg, %d);\n"                a (a+1));
					elif (arg_type == "s")    to_libmythryl_xxx_c_funs (sprintf  "    char*             s%d =   HEAP_STRING_AS_C_STRING (GET_TUPLE_SLOT_AS_VAL( arg, %d));\n"               a (a+1));

					else
					    case (string_map::get  (*arg_load_fns_for_'libmythryl_xxx_c', arg_type))		# Custom library-specific arg type handling for "w" etc.
						#
						THE build_arg_load_fn =>  to_libmythryl_xxx_c_funs  (build_arg_load_fn (arg_type, a, libcall));
						NULL                  =>  raise exception FAIL ("Bug: unsupported arg type '" + arg_type + "' #" + int::to_string a + " from libcall '" + libcall + "\n");
					    esac;
					fi;
				    };
				};
			esac;
		    };
		#
		fun build_fun_body_for_'libmythryl_xxx_c'
		    ( state: State,
		      fn_name,			# E.g., "make_window2"
		      fn_type,			# E.g., "Session -> Widget".
		      libcall,			# E.g., "gtk_window_new( GTK_WINDOW_TOPLEVEL )".
		      result_type		# E.g., "Float"
		    )
		    =
		    {
			case result_type
			    #
			    "Void"
				=>
				{   # Now we just print
				    # the supplied gtk call
				    # and wrap up:
				    #
				    to_libmythryl_xxx_c_funs "\n";
				    to_libmythryl_xxx_c_funs ("    " + libcall + ";\n");
				    to_libmythryl_xxx_c_funs "\n";
				    to_libmythryl_xxx_c_funs  "    return HEAP_VOID;\n";
				};

			    "Bool"
				=>
				{   to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs ("    int result = " + libcall + ";\n");
				    to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs  "    return  result ? HEAP_TRUE : HEAP_FALSE;\n";
				};

			    "Float"
				=>
				{   to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs ("    double d = " + libcall + ";\n");
				    to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs  "    return  make_float64(task, d );\n";
				};

			    "Int"
				=>
				{   to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs ("    int result = " + libcall + ";\n");
				    to_libmythryl_xxx_c_funs  "\n";
				    to_libmythryl_xxx_c_funs  "    return TAGGED_INT_FROM_C_INT(result);\n";
				};


			    _   =>  case (string_map::get  (*mainprocess_custom_plain_fun_bodies, result_type))							# Custom library-specific arg type handling for "Widget", "new Widget" etc.
					#
					THE build_fn =>  build_fn { fn_name, libcall, to_libmythryl_xxx_c_funs, path };
					NULL         =>  raise exception FAIL (sprintf "Unsupported result type '%s' at line %d" result_type *state.line_number);
				    esac;

			esac;
		    };

		# Synthesize a function for   libmythryl-xxx.c  like
		# 
		#   /* do__gtk_init : Void -> Void
		#    *
		#    *
		#    */
		#   
		#   static Val do__gtk_init (Task* task, Val arg)
		#   {
		#       int y         = INT1_LIB7toC(              GET_TUPLE_SLOT_AS_INT(arg, 0) );
		#       char *symname = HEAP_STRING_AS_C_STRING(   GET_TUPLE_SLOT_AS_VAL(arg, 1) );
		#       int lazy      =                            GET_TUPLE_SLOT_AS_VAL(arg, 2) == HEAP_TRUE;
		#
		#       int result = move( y, x );
		#   
		#       if (result == ERR)     return RAISE_ERROR__MAY_HEAPCLEAN(task, "move", NULL);
		#   
		#       return HEAP_VOID;
		#   }
		#    
		#    
		#    
		# Cheatsheet:
		#    
		#   Accepting a lone float arg:
		#      double d = *(PTR_CAST(double*, arg));						# Example in src/c/lib/math/cos64.c
		#
		#   Accepting a lone int arg:
		#      int socket = TAGGED_INT_TO_C_INT(arg);						# Example in src/c/lib/socket/accept.c
		#
		#   Accepting a lone string arg:							# Example in src/c/lib/posix-file-system/readlink.c
		#      char* path = HEAP_STRING_AS_C_STRING(arg);
		#
		#   Accepting a lone Null_Or( Tuple ) arg:						# Example in src/c/lib/socket/get-protocol-by-name.c
		#       
		#   Accepting a Bool from a tuple:      						# Example in src/c/lib/dynamic-loading/dlopen.c
		#     int lazy = GET_TUPLE_SLOT_AS_VAL (arg, 1) == HEAP_TRUE;
		#
		#   Accepting an Int from a tuple:							# Example in src/c/lib/posix-file-system/fchown.c
		#     int fd =  GET_TUPLE_SLOT_AS_INT (arg, 0);
		#
		#   Accepting a String from a tuple:							# Example in src/c/lib/dynamic-loading/dlsym.c
		#     char *symname = HEAP_STRING_AS_C_STRING (GET_TUPLE_SLOT_AS_VAL (arg, 1));
		#       
		#   Accepting a Float from a tuple:							# THIS IS MY OWN GUESS!
		#     double d =  *(PTR_CAST(double*, GET_TUPLE_SLOT_AS_VAL(arg,%d)));
		#
		#   Accepting a Null_Or(String) from a tuple:   					# Example in src/c/lib/dynamic-loading/dlopen.c
		#       
		#       
		#   Returning
		#
		#     Void:    return HEAP_VOID;							# Defined in src/c/h/runtime-values.h
		#     TRUE:    return HEAP_TRUE;							# Defined in src/c/h/runtime-values.h
		#     FALSE:   return HEAP_FALSE;							# Defined in src/c/h/runtime-values.h
		#     Int:     return TAGGED_INT_FROM_C_INT(size);					# Defined in src/c/h/runtime-values.h
		#     NULL:    return OPTION_NULL;							# Defined in src/c/h/make-strings-and-vectors-etc.h    Example in src/c/machine-dependent/interprocess-signals.c
		#     THE foo: return OPTION_THE(task, foo);						# Defined in src/c/h/make-strings-and-vectors-etc.h
		#              										# Example in src/c/machine-dependent/interprocess-signals.c
		#
		#   Returning a float:
		#              return  make_float64(task, cos(d) );					# Defined in src/c/h/make-strings-and-vectors-etc.h
		#
		#   Returning a string:
		#       Val result = allocate_nonempty_ascii_string__may_heapclean(task, size, NULL);
		#	strncpy (HEAP_STRING_AS_C_STRING(result), buf, size);
		#	return result;
		#    
		#   Returning a tuple:									# Example from src/c/lib/date/gmtime.c
		#
		#       set_slot_in_nascent_heapchunk(task, 0, MAKE_TAGWORD(PAIRS_AND_RECORDS_BTAG, 9));
		#       set_slot_in_nascent_heapchunk(task, 1, TAGGED_INT_FROM_C_INT(tm->tm_sec));
		#       ...
		#       set_slot_in_nascent_heapchunk(task, 9, TAGGED_INT_FROM_C_INT(tm->tm_isdst));
		#
		#       return commit_nascent_heapchunk(task, 9);
		#    
		#    
		#     Return functions which check ERR
		#     and optionally raise an exception:             src/c/lib/raise-error.h
		#
		#	CHK_RETURN_VAL(task, status, val)	Check status for an error (< 0); if okay,
		#					then return val.  Otherwise raise
		#					SYSTEM_ERROR with the appropriate system
		#					error message.
		#
		#	CHK_RETURN(task, status)	Check status for an error (< 0); if okay,
		#					then return it as the result (after
		#					converting to an Lib7 int).
		#
		#	CHK_RETURN_UNIT(task, status)	Check status for an error (< 0); if okay,
		#					then return Void.
		#
		#     GET_TUPLE_SLOT_AS_VAL &Co        are from:  src/c/h/runtime-values.h
		#     allocate_nonempty_ascii_string__may_heapclean    is from:  src/c/h/make-strings-and-vectors-etc.h
		#     CHK_RETURN_VAL &Co are from:  src/c/lib/raise-error.h
		#
		fun build_plain_fun_for_'libmythryl_xxx_c'
		    ( state: State,
		      fn_name,			# E.g., "make_window2"
		      fn_type,			# E.g., "Session -> Widget".
		      libcall,			# E.g., "gtk_window_new( GTK_WINDOW_TOPLEVEL )".
		      result_type		# E.g., "Float"
		    )
		    =
		    {   arg_count =  count_args( libcall );
			#
			   build_fun_header_for_'libmythryl_xxx_c' (       fn_name, fn_type, arg_count, libcall, result_type);
			build_fun_arg_loads_for_'libmythryl_xxx_c' (       fn_name, fn_type, arg_count, libcall);
			     build_fun_body_for_'libmythryl_xxx_c' (state, fn_name, fn_type, libcall, result_type);
			  build_fun_trailer_for_'libmythryl_xxx_c' ();

			plain_fns_autobuilt_for_'libmythryl_xxx_c'
			    :=
			    *plain_fns_autobuilt_for_'libmythryl_xxx_c'
			    + 1;
		    };

		# Given a libcall like      "gtk_foo( /*bar_to_int bar*/i0, /*zot*/i1 )"
		# and a parameter name like  "i0" or "i1"
		# return nickname like       "bar_to_int bar" or "zot"
		# if available, else         "i0" or "i1":
		#
		fun arg_name (arg, libcall)
		    =
		    {   regex = .|/\*([A-Za-z0-9_' ]+)\*/| + arg;	# Something like:   /*([A-Za-z0-9_' ]+)*/f0

			(regex::find_first_group 1 regex libcall)
			except
			    NOT_FOUND = arg;
		    };

		# Given a libcall like      "gtk_foo( /*bar_to_int bar*/i0, /*zot*/i1 )"
		# and a parameter name like  "i0" or "i1"
		# return nickname like       "bar" or "zot"
		# if available, else         "i0" or "i1":
		#
		fun param_name (arg, libcall)
		    =
		    {   regex = .|/\*([A-Za-z0-9_' ]+)\*/| + arg;		# Something like:   /*([A-Za-z0-9_' ]+)*/f0

			{
			    name = regex::find_first_group 1 regex libcall;

			    # If 'name' contains blanks, we want
			    # only the part after the last blank:
			    # 
			    name = (regex::find_first_group 1 .|^[:A-Za-z0-9_' ]+ ([A-Za-z0-9_']+)$| name)
				   except
				       NOT_FOUND = name;

			    name;
			}
			except NOT_FOUND = arg;
		    };

		# Synthesize a function for   gtk-client-g.pkg  like
		# 
		#	 #
		#        fun make_vertical_scale_with_range (session: Session, min, max, step)
		#            =
		#	    drv::make_vertical_scale_with_range (session.subsession, min, max, step);
		#
		fun build_plain_fun_for_'xxx_client_g_pkg' (state: State,  fn_name, libcall)
		    =
		    case (maybe_get_field (state, "code"))
			#
			THE field
			    =>
			    {   to_xxx_client_g_pkg_funs  "        #\n";
				to_xxx_client_g_pkg_funs  field;
				to_xxx_client_g_pkg_funs  "            \n";
				to_xxx_client_g_pkg_funs  "            # Above function handbuilt via src/lib/make-library-glue/make-library-glue.pkg: build_plain_fun_for_'xxx_client_g_pkg'.\n";
				to_xxx_client_g_pkg_funs  "\n";

				plain_fns_handbuilt_for_'xxx_client_g_pkg'
				    :=
				    *plain_fns_handbuilt_for_'xxx_client_g_pkg' + 1;
			    };

			NULL =>
			    {
				arg_count = count_args( libcall );

				fun make_args get_name		# get_name will be arg_name or param_name.
				    =
				    for (a = 0; a < arg_count; ++a) {

					# Remember type of this arg,
					# which will be one of:
					#   w (widget),
					#   i (int),
					#   b (bool)
					#   s (string)
					#   f (double):
					#
					arg_type = get_nth_arg_type( a, libcall );

					arg = sprintf "%s%d" arg_type a;

					to_xxx_client_g_pkg_funs (sprintf ", %s" (get_name (arg, libcall)));
				    }; 

				# Select between  foo  (session.subsession, bar, zot);
				#                 foo { session.subsession, bar, zot };
				#
				my (lparen, rparen)
				    =
				    # It is a poor idea to have xxx-client-g.pkg functions
				    # with multiple arguments of the same type use
				    # argument tuples, because it is too easy to
				    # mis-order such arguments, and the compiler
				    # type checking won't flag it -- in such cases
				    # it is better to use argument records:
				    #
				    arg_types_are_all_unique  libcall
					??  ( "(" ,  ")" )
					::  ( "{ ", " }" );

				to_xxx_client_g_pkg_funs "\n";
				to_xxx_client_g_pkg_funs "        #\n";
				to_xxx_client_g_pkg_funs "        fun ";
				to_xxx_client_g_pkg_funs fn_name;


				to_xxx_client_g_pkg_funs (sprintf " %ssession: Session"  lparen);
				make_args  param_name;
				to_xxx_client_g_pkg_funs (sprintf "%s\n" rparen);


				# Select between  drv::foo   session.subsession;
				#                 drv::foo  (session.subsession, bar, zot);
				#
				my (lparen, rparen)
				    =
				    arg_count == 0
					??  (" ", "" )
					::  ("(", ")");

				fn_name =   regex::replace_all ./'/ "2" fn_name;		# Primes don't work in C!

				to_xxx_client_g_pkg_funs          "            =\n";
				to_xxx_client_g_pkg_funs (sprintf "            drv::%s %ssession.subsession" fn_name lparen);
				make_args  arg_name;
				to_xxx_client_g_pkg_funs (sprintf "%s;\n" rparen);

				to_xxx_client_g_pkg_funs "            \n";
				to_xxx_client_g_pkg_funs("            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  " + path.library_binding_specification + ".\n");
				to_xxx_client_g_pkg_funs "\n";


				plain_fns_autobuilt_for_'xxx_client_g_pkg'
				    :=
				    *plain_fns_autobuilt_for_'xxx_client_g_pkg'
				    + 1;
			    };
		    esac;

		# Synthesize a function for   xxx-client-g.pkg  like
		# 
		#	 #
		#	 fun set_clicked_callback  s w c = set_void_callback (s, c, drv::set_clicked_callback (s.subsession, w));	# Handle "clicked" signal.
		#
		fun build_callback_fun_for_'xxx_client_g_pkg'
		    ( state: State,
		      fn_name,			# E.g. "set_foo_callback"
		      callback_type		# E.g. "Void_Callback"
		    )
		    =
		    case (maybe_get_field (state, "code"))
			#
			THE field
			    =>
			    {   to_xxx_client_g_pkg_funs  "        #\n";
				to_xxx_client_g_pkg_funs  field;
				to_xxx_client_g_pkg_funs  "            \n";
				to_xxx_client_g_pkg_funs  "            # Above function handbuilt via src/lib/make-library-glue/make-library-glue.pkg:  build_callback_fun_for_'xxx_client_g_pkg'.\n";
				to_xxx_client_g_pkg_funs  "\n";

				callback_fns_handbuilt_for_'xxx_client_g_pkg'
				    :=
				    *callback_fns_handbuilt_for_'xxx_client_g_pkg' + 1;
			    };

			NULL =>
			    {
				signal_name
				    =
				    (regex::find_first_group 1 ./^set_(.*)_callback$/  fn_name)
				    except
					NOT_FOUND
					    =
					    die_x(sprintf "build_callback_fun_for_'xxx_client_g_pkg': fn_name '%s' does not have form set_foo_callback for any foo\n" fn_name);

				note_callback_fn = "note_" + (tolower callback_type);		# "Void_Callback" -> "note_void_callback"

				to_xxx_client_g_pkg_funs
				    (    sprintf "    fun %-36s s w c = %-28s (s, c, drv::%-36s (s.subsession, w));\t# Handle '%s' signal\n"
						 fn_name
						 note_callback_fn
						 fn_name
						 signal_name
				    );

				callback_fns_handbuilt_for_'xxx_client_g_pkg'
				    :=
				    *callback_fns_handbuilt_for_'xxx_client_g_pkg'
				    + 1;
			    };
		    esac;



		# Synthesize a xxx-client.api line like
		#
		#      make_window:    Session -> Widget;
		#
		stipulate

		    line_count = REF 2;

		herein

		    #
		    fun build_fun_declaration_for_'xxx_client_api' (fn_name, fn_type)
			=
			{
			    # Add a blank line every three declarations:
			    #
			    line_count := *line_count + 1;

			    if ((*line_count % 3) == 0)
				#
				to_xxx_client_api_funs  "\n";
			    fi;

			    # The 'if' here is just to exdent by one char
			    # types starting with a paren, so that we get
			    #
			    #     foo:    Session -> Void;
			    #     bar:   (Session, Widget) -> Void;
			    #
			    # rather than the slightly rattier looking  
			    #
			    #     foo:    Session -> Void;
			    #     bar:    (Session, Widget) -> Void;
			    #
			    if (fn_type =~ ./^\(/)	to_xxx_client_api_funs (sprintf "    %-40s%s;\n"  (fn_name + ":")  fn_type);
			    else			to_xxx_client_api_funs (sprintf "    %-41s%s;\n"  (fn_name + ":")  fn_type);
			    fi;
			};
		end;

		#
		fun update_field (state: State, field_name, field_line)
		    =
		    {
			case (string_map::get (*state.fields, field_name))
			    #
			    THE field
				=>
				{   field.string := *field.string + field_line;
				    field.line_n := *state.line_number;

				    string_map::set (*state.fields, field_name, field);

				    ();
				};

			    NULL =>
				{   field = { string =>  REF field_line,
					      line_1 =>  REF *state.line_number,
					      line_n =>  REF *state.line_number,
					      used   =>  REF FALSE
					    };

				    state.fields
					:=
					string_map::set (*state.fields, field_name, field);

				    ();
				};
			esac;
		    };

		#
		fun figure_function_result_type  (state: State,  fn_name,  fn_type)
		    =
		    # result_type can be "Int", "String", "Bool", "Float" or "Void".
		    #
		    # It can also be "Widget" or "new Widget", the difference being
		    # that in the former case the mythryl-xxx-library-in-c-subprocess.c logic can merely
		    # fetch it out of its array  widget[],  whereas in the latter a
		    # new entry is being created in  widget[].
		    #
		    # We can usually deduce the difference:  If fn_name starts with
		    # "make_" then we have the "new Widget" case, otherwise we have
		    # the "Widget" case:
		    #
		    case (maybe_get_field (state, "result"))
			#
			THE string => string;
			#
			NULL =>
			    # Pick off terminal  " -> Void"
			    # or whatever from fn_type
			    # and switch on it:
			    #
			    case (regex::find_first_group 1 ./->\s*([A-Za-z_']+)\s*$/ fn_type)
				#
				"Bool"   => "Bool";
				"Float"  => "Float";
				"Int"    => "Int";
				"String" => "String";
				"Void"   => "Void";

				result_type =>  case (string_map::get (*figure_function_result_type_fns, result_type))
						    #
						    THE function =>  function  fn_name;					# E.g., "Widget" -> ("Widget" or "new Widget")
						    #
						    NULL => die_x(sprintf "Unsupported result fn-type %s in type %s at %s..\n"
									   result_type
									   fn_type
									  (get_field_location (state, "fn-type"))
								 );
						esac;
			    esac
			    except
				NOT_FOUND
				    =
				    die_x(sprintf "Unsupported result fn-type %s at %s..\n"
						 fn_type
						 (get_field_location (state, "fn-type"))
					);
		    esac;


		fun build_plain_function (state: State)
		    =
		    {	
			url   = case (maybe_get_field(state,"url"))
				    #	
				    THE field => field;
				    NULL      => "";
				esac;

			fn_name =  get_field (state, "fn-name");					# E.g., "make_window".
			fn_type =  get_field (state, "fn-type");					# E.g., "Session -> Widget".
			libcall =  get_field (state, "libcall");					# E.g., "gtk_window_new( GTK_WINDOW_TOPLEVEL )".

			c_fn_name =  regex::replace_all  ./'/  "2"  fn_name;				# C fn names cannot contain apostrophes.

			result_type =  figure_function_result_type  (state, fn_name, fn_type);

			build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c'(       c_fn_name );
			build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c' (state, c_fn_name, fn_type, libcall, result_type);

			build_plain_fun_for_'libmythryl_xxx_c'                      (state, c_fn_name, fn_type, libcall, result_type);
			build_table_entry_for_'libmythryl_xxx_c'                           (c_fn_name, fn_type);


			note__section_libref_xxx_tex__entry { state, fn_name, libcall, url, fn_type };

			build_fun_declaration_for_'xxx_client_driver_api'				(c_fn_name, libcall, result_type);
			build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'	(c_fn_name, libcall, result_type);

			build_fun_declaration_for_'xxx_client_api'					(fn_name, fn_type);
			build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg'	(fn_name, c_fn_name, fn_type, libcall, result_type);

			build_plain_fun_for_'xxx_client_g_pkg'						(state,  fn_name, libcall);
		    };


		#
		fun build_function_doc (state: State)
		    =
		    {	
			url    = case (maybe_get_field(state,"url"))
				     #	
				     THE field => field;
				     NULL      => "";
				 esac;

			fn_name  =  get_field(state, "fn-name");	# "make_window" or such.
			fn_type  =  get_field(state, "fn-type");	# "Session -> Widget" or such.

			note__section_libref_xxx_tex__entry { state, fn_name, libcall => "", url, fn_type };
		    };


		#
		fun build_mythryl_type (state: State)
		    =
		    {	
			type     =  get_field(state, "type");
			#
			to_xxx_client_api_types		type;
			to_xxx_client_g_pkg_types	type;
		    };

		fun build_mythryl_code (state: State)
		    =
		    {	
			code     =  get_field(state, "code");
			#
			to_xxx_client_g_pkg_funs  code;
		    };


		#
		fun handle_fieldset (state: State)
		    =
		    {
			if (not  (string_map::is_empty  *state.fields))
			    #
			    case (trim (get_field (state, "build-a")))
				#
				"plain-fn"     =>  build_plain_function     state;
				"fn-doc"       =>  build_function_doc       state;
				"mythryl-type" =>  build_mythryl_type       state;
				"mythryl-code" =>  build_mythryl_code       state;
				#
				other_field_name =>
				    {
					case (string_map::get (*build_fns, other_field_name))
					    #
					    THE build_fn
						=>
						build_fn										# Build custom fn type, passing build_fn all the equipment needed for code synthesis.
						  { state,
						    path,
						    #
						    maybe_get_field,
							  get_field,
							  get_field_location,
						    #
						    build_table_entry_for_'libmythryl_xxx_c',
						    build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c',
						    #	
						    build_fun_declaration_for_'xxx_client_api',
						    build_fun_declaration_for_'xxx_client_driver_api',
						    build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg',
						    build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg',

						    build_callback_fun_for_'xxx_client_g_pkg',

						    to_xxx_client_driver_api,
						    to_xxx_client_driver_for_library_in_c_subprocess_pkg,
						    to_xxx_client_driver_for_library_in_main_process_pkg,
						    to_xxx_client_g_pkg_funs,
						    to_xxx_client_g_pkg_types,
						    to_xxx_client_api_funs,
						    to_xxx_client_api_types,
						    to_mythryl_xxx_library_in_c_subprocess_c_funs,
						    to_mythryl_xxx_library_in_c_subprocess_c_trie,
						    to_libmythryl_xxx_c_table,
						    to_libmythryl_xxx_c_funs,
						    to_section_libref_xxx_tex_table1,
						    to_section_libref_xxx_tex_table2,

						    custom_fns_autobuilt_for_'libmythryl_xxx_c',
						    custom_fns_autobuilt_for_'mythryl_xxx_library_in_c_subprocess_c',

						    note__section_libref_xxx_tex__entry
						  };

					    NULL =>  die_x (sprintf "Unsupported 'build-a' field value '%s' at %s\n" other_field_name (get_field_location (state, "build-a")));
					esac;
				    };
			    esac;

			    clear_state  state;
			fi;
		    };    

		# Scan src/glu/xxx/etc/library-glue.plan
		# digesting the blank-line-delimited
		# config info paragraphs, then
		# build code accordingly:
		# 
		fun process_library_binding_specification_file ()
		    =
		    {	config_file_in =  fil::open_for_read  path.library_binding_specification;
			#
			loop { line_number =>  REF 0,
			       fd          =>  config_file_in,
			       fields      =>  REF (string_map::empty: string_map::Map( Field ))
			     };

			fil::close_input  config_file_in;
		    }
		    where
		        fun loop  (state: State)
			    =
			    case (fil::read_line  state.fd)
				#
				NULL => handle_fieldset  state;			# Done.
				#
				THE input_line
				    =>
				    {   state.line_number :=  *state.line_number + 1;
					#
					if (input_line =~ ./^\s*#/)			# If it is a comment line,
					    #
					    loop  state;				# ignore it.

					elif (input_line =~ ./^\s*$/)			# If it is a blank line, it marks the end of a field cluster,
					    #
					    handle_fieldset  state;			# so process any fields we have in hand:

					else

					    # Line format should be  "line-type: rest".
					    # Split it into two strings at the ':' and
					    # dispatch on the line type:
					    #
					    case (regex::find_first_groups_all ./^([^:]+):(.*\n)$/ input_line)
						#
						[ line_type, line_contents ]
						    =>
						    {   # Drop leading and trailing whitespace:
							#
							line_type =  trim  line_type;

							line_contents
							    =
							    case line_type
								"type"      =>       line_contents;	# Contains raw indented code, so leave whitespace in place and restore dropped newline.
								"code"      =>       line_contents;	# Contains raw indented code, so leave whitespace in place and restore dropped newline.
								_           => trim  line_contents;	# Drop leading and trailing whitespace.
							    esac;

							update_field (state,  line_type,  line_contents);
						    };

						_   =>   die_x ("UNRecognized library-glue.plan line: '" + (chomp input_line) + "'  -- make-library-glue.pkg\n");
					    esac
					    except
						NOT_FOUND =  die_x (sprintf "Unrecognized library-glue.plan line %d: '%s'    -- make-library-glue.pkg\n" *state.line_number (chomp input_line));

					fi;

					loop  state;				# Scan rest of file.
				    };
			    esac;

		    end;


	    end;
    };
end;

###################################################################################
# Note[1]:  Format of             library-glue.plan               files
#
#
# A library-glue.plan file is broken
# into logical paragraphs separated by blank lines.
#
# In general each paragraph describes one end-user-callable
# function in the Gtk API.
#
# Each paragraph consists of one or more lines;
# each line begins with a colon-delimited type
# field determining its semantics.
#
# Supported line types are:
#
#     make:     Must appear in every paragraph.
#               Determines which make-library-glue function processes the paragraph:
#                   plain-fn       build_plain_function      # The usual case.
#                   callback-fn    build_callback_function   # Special-purpose variant.
#                   fn-doc         build_function_doc        # Document fn without code generation, e.g. for Mythryl-only fns.
#                   mythryl-code   build_mythryl_code        # Special hack to deposit verbatim Mythryl code.
#                   mythryl-type   build_mythryl_type        # Special hack to deposit verbatim Mythryl declarations.
#
#     The 'make' line determines which other
#     lines may appear in the paragraph, per the
#     following table. ("X" == mandatory, "O" == optional):
#
#                  callback-fn   fn-doc   plain-fn   mythryl-code  mythryl-type
#                  -----------   ------   --------   ------------  -----------
#
#         fn-name:      X           X         X
#         fn-type:      X           X         X
#         lowtype:      X                     X
#         libcall:                            X
#         result:                             O
#         doc-fn:       O           O         O
#         url:          O           O         O
#         code:         O                     O            X
#         type:                                                         X
#
#
#     fn-name:  Name of the end-user-callable Mythryl function,   e.g. halt_and_catch_fire
#     fn-type:  Mythryl type for the function,                    e.g. Int -> Void
#     url:      URL documenting the underlying C Gtk function,    e.g. http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-init
#     code:     Literal Mythryl code to be inserted near bottom of gtk-client-g.pkg
#     type:     Literal Mythryl code to be inserted near top    of gtk-client-g.pkg and also in gtk-client.api
#     lowtype:  Gtk cast macro for widget: Usually G_OBJECT, occasionally GTK_MENU_ITEM or such.
#
#     doc-fn:   Usually name of fn for documentation purposes is obtained from 'libcall' line,
#               but this line may be used to specify it explicitly.
#
#     libcall:  C-level gtk call to make                          e.g. gtk_layout_put( GTK_LAYOUT(w0), GTK_WIDGET(w1), i2, i3)
#
#		libcall contains embedded arguments like w0, i1, f2, b3, s4.
#		
#		The argument letter gives us the argument type:
#		
#		   w == widget
#		   i == int
#		   f == double  (Mythryl "Float")
#		   b == bool
#		   s == string
#		
#		The argument digit gives us the argument order:
#		
#		   0 == first arg
#		   1 == second arg
#		   ...
#
#
#     result:   C-level result type for call.  In practice we always default
#               this and make-library-glue deduces it from the Mythryl type.
#               #
#               Can be one of "Int", "String", "Bool", "Float" or "Void".
#               #
#               Can also be "Widget" or "new Widget", the difference being
#	        that in the former case the mythryl-gtk-server.c logic can merely
#	        fetch it out of its array  widget[],  whereas in the latter a
#	        new entry is being created in  widget[].
#               #
#               We can usually deduce the difference:  If fn_name starts with
#	        "make_" then we have the "new Widget" case, otherwise we have
#	        the "Widget" case:



## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
