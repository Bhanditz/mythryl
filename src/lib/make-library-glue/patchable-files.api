## patchable-files.api
#
# Adding content to files in spots
# marked by linepairs like
#
#    # Do not edit this or following lines -- they are autobuilt.
#    ...
#    # Do not edit this or preceding lines -- they are autobuilt.

# Compiled by:
#     src/lib/std/standard.lib

stipulate
    package sm  =  string_map;											# string_map		is from   src/lib/src/string-map.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/make-library-glue/patchable-files.api
    #
    api  Patchable_Files
    {
	Patch = { patchname: String,										# patchname will be "functions" for a patch started by:
		  lines:     List(String)									#     # Do not edit this or following lines -- they are autobuilt.  (patchname="functions")
		};

	Patchable_File;

	get_patch_names:	Patchable_File -> List(String);

	get_patch:		(Patchable_File, String) -> Patch;						# Get patch by name.
	set_patch:		(Patchable_File, Patch) -> Patchable_File;					# Set patch by name.

	print_patchable_file:	Patchable_File -> Void;

	read_patchable_file:	String -> Patchable_File;

	write_patchable_file:	Patchable_File -> Void;
	write_patchable_file':	Patchable_File -> List(Patch) -> Void;

	patch_count:		Patchable_File -> Int;
	text_count:		Patchable_File -> Int;

	get_only_patch:		Patchable_File -> List(String);							# Patchable_File must contain exactly one patch.

	set_only_patch:		Patchable_File -> List(String) -> Patchable_File;				# Patchable_File must contain exactly one patch.
	set_patches:		Patchable_File -> List(Patch)  -> Patchable_File;				# Patchable_File must contain matching number of patches.

	patch_append:		(Patchable_File, String, List(String)) -> Patchable_File;			# Append  given lines to named patch.
	patch_prepend:		(Patchable_File, String, List(String)) -> Patchable_File;			# Prepend given lines to named patch.

	empty_all_patches:	Patchable_File -> Patchable_File;						# Set every patch to contain the empty list.

	map_patches:		Patchable_File									# Set contents of each patch to some function of that patch.
				    -> (   { filename: String,  patchname: String,  lines: List(String) }	# User fn maps { filename, patchname, lines } -> lines.
					   ->
					   List(String)
				       )
				    -> Patchable_File;
							

	patch_apply:		Patchable_File									# Call user_fn on every patch in file.
				    -> (   { filename: String,  patchname: String,  lines: List(String) }
					   ->
					   Void
				       )
				    -> Void;



	# Do we need a fold() as well?
    };
end;

