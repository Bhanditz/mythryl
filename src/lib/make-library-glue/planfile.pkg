## planfile.pkg
#
# Read one or more  .plan files like src/glu/gtk/etc/construction.plan,
# parse and validate the contents, and return as a list of paragraphs.

# Compiled by:
#     src/lib/std/standard.lib

stipulate
    package deq =  queue;										# queue				is from   src/lib/src/queue.pkg
    package fil =  file__premicrothread;								# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package lms =  list_mergesort;									# list_mergesort		is from   src/lib/src/list-mergesort.pkg
    package sm  =  string_map;										# string_map			is from   src/lib/src/string-map.pkg
    #
    exit_x =  winix__premicrothread::process::exit_x;
    =~     =  regex::(=~);
    chomp	=  string::chomp;

    #
    # Drop leading and trailing
    # whitespace from a string.
    #
    fun trim string
	=
	{   if (string =~ ./^\s*$/)

		"";

	    else
		# Drop trailing whitespace:
		#
		string
		    =
		    (regex::find_first_group 1 ./^(.*\S)\s*$/ string)
		    except
			NOT_FOUND = string;

		# Drop leading whitespace:
		#
		string
		    =
		    (regex::find_first_group 1 ./^\s*(\S.*)$/ string)
		    except
			NOT_FOUND = string;

		string;
	    fi;
	};
herein

    # This package is invoked in:
    #
    #     src/lib/make-library-glue/make-library-glue.pkg

    package  planfile:
	     Planfile											# Planfile			is from   src/lib/make-library-glue/planfile.api
    {
	# Field is a contiguous sequence of lines
	# all with the same linetype field:
	#
	#    foo:  this
	#    foo:  that
	#
	# Most fields will be single-line, but this format
	# supports conveniently including blocks of code,
	# such as complete function definitions.
	#

	Lines = LINE  String
	      | LINES List(String)
	      ;	

	Field =   { fieldname:	String,					# Label appearing before the colon, trimmed of whitespace.
		    lines:	Lines,					# Line(s) for this field, stripped of initial label and colon.
		    filename:	String,					# Name of file from which field was read.
		    line_1:	Int,					# First line number in file for field.
		    line_n:	Int					# Last  line number in file for field.
		  };


	Fields =  sm::Map( Field );					# Stored indexed by field name.

	Paragraph =   { do_it:	    Fields -> Void,			# Does all required work to implement the paragraph type.
			fields:	    Fields				# Stored indexed by field name.
		      };
	
	Field_Trait
	  #
	  = OPTIONAL
	  | DO_NOT_TRIM_WHITESPACE
	  | ALLOW_MULTIPLE_LINES
	  ;

	Field_Traits =    { optional:		    Bool,		# TRUE if this field may be omitted from paragraph.
			    trim_whitespace:	    Bool,		# TRUE if leading and trailing whitespace should be trimmed from lines for this fieldtype.
			    allow_multiple_lines:   Bool
			  };

	default_field_traits						# We presume most fields will be mandatory, single-line and
	  = 								# should be trimmed of leading and trailing whitespace.
	  {  optional             =>  FALSE,
	     trim_whitespace      =>  TRUE,
	     allow_multiple_lines =>  FALSE
	  };

	Field_Definition
	  =
	  { fieldname:			String,
	    traits:			List( Field_Trait )
	  };

	Paragraph_Definition
	  =
	  { name:			String,				# The 'build-a' line value.
	    do_it:			Fields -> Void,			# Does all required work to implement the paragraph type.	
	    #
	    fields:			List( Field_Definition )
	  };

	Digested_Paragraph_Definition
	  =
	  { name:			String,
	    do_it:			Fields -> Void,
	    fields:			sm::Map( Field_Traits )
	  };

	Digested_Paragraph_Definitions
	    =
	    sm::Map( Digested_Paragraph_Definition );				# Stored indexed by name.


        fun digested_paragraph_definition_to_string  (def: Digested_Paragraph_Definition)
	    =
	    # Generate human-readable form for debugging and such:
	    #
	    {   header =    [ sprintf "{ name => \"%s\",\n" def.name,
			      "  do_it => (fn ... )\n",
			      "  fields => [\n"
			    ];

		rest  = sm::keyed_fold_right
			    (fn (key, { optional, trim_whitespace, allow_multiple_lines }, results)
				=
				(sprintf
				    "      %s => { optional => %b, trim_whitespace => %b, allow_multiple_lines => %b }\n"
				    key  optional  trim_whitespace  allow_multiple_lines
				)
			        !  results
			    )
			    []
			    def.fields;

		(cat header)  +  (cat (reverse rest))  +  "}\n";
	    };

	fun digest_paragraph_definitions  previous_defs  filename  (defs: List(Paragraph_Definition))
	    =
	    # Digest caller-provided paragraph definitions into internal form.
	    # This mainly involves sanity checking:
	    #
	    #  o  Each fieldname should be lexically sane. Currently this means matching [A-Za-z0-9_\-]+
	    #  o  Each 'build-a:' paragraph type should be defined at most once.
	    #  o  Within a paragraph definition, each field should be defined at most once.
	    #
	    list::fold_right  digest_def  previous_defs  defs
	    where
		fun digest_def  (def: Paragraph_Definition,  result)
		    =
		    case (sm::get (result, def.name))
			#
			THE _ =>    raise exception FAIL (sprintf "Fatal error: Multiple definitions of paragraph type %s" def.name);
			#
			NULL  =>    {   validate_paragraph_definition  def;
					#
					name   =    def.name;
					do_it  =    def.do_it;

					fields =    fold_right
						        (fn ({ fieldname, traits }, fields) =  sm::set  (fields,  fieldname,  parse_traits (traits, default_field_traits)))
							sm::empty
							def.fields;


					sm::set (result, name, { name, do_it, fields });
				    };
		    esac
		    where
			fun parse_traits ([], result)
			        =>
				result;

			    parse_traits  (OPTIONAL               ! rest,  { optional, trim_whitespace, allow_multiple_lines }) =>   parse_traits (rest, { optional => TRUE, trim_whitespace,         allow_multiple_lines         });
			    parse_traits  (DO_NOT_TRIM_WHITESPACE ! rest,  { optional, trim_whitespace, allow_multiple_lines }) =>   parse_traits (rest, { optional,         trim_whitespace => TRUE, allow_multiple_lines         });
			    parse_traits  (ALLOW_MULTIPLE_LINES   ! rest,  { optional, trim_whitespace, allow_multiple_lines }) =>   parse_traits (rest, { optional => TRUE, trim_whitespace,         allow_multiple_lines => TRUE });
			end;

			fun validate_paragraph_definition  (def: Paragraph_Definition)
			    =
			    # Check that fieldnames are unique and match [A-Za-z0-9_\-]+
			    #
			    {   all_fieldnames =   map  (fn field = field.fieldname)  def.fields;
				#
				case (lms::sort_list_and_find_duplicates  string::compare  all_fieldnames)
				    #
				    [] 		=>  ();

				    duplicates  =>  {   header =  sprintf "Paragraph definition %s in planfile %s contains duplicate definitions of:\n"  def.name  filename;
							body   =  map  (fn d = sprintf "    %s\n" d)  duplicates;
							raise exception FAIL (header + cat body);
						    };
				esac;

				sorted_fieldnames =  lms::sort_list  string::(>)  all_fieldnames;

				apply  validate_fieldname  sorted_fieldnames;
			    }
			    where
				fun validate_fieldname  fieldname
				    =
				    if (not (fieldname =~ ./^[A-Za-z0-9_\-]+/))
					#
					raise exception FAIL (sprintf "File %s paragraph definition %s: '%s' is not a valid fieldname\n"  filename  def.name  fieldname);
				    fi;
			    end;
		    end;	
	    end;


	State = { line_number:  Ref(Int),							# Exported as an opaque type.

		  fd:           fil::Input_Stream,

		  fields:       Ref( sm::Map( Field ))
		};




	# Scan src/glu/xxx/etc/construction.plan
	# digesting the blank-line-delimited
	# paragraphs, then validate and return them:
	# 
	fun read_planfile  digested_paragraph_definitions  filename
	    =
	    {	fd =  fil::open_for_read  filename;
		#
		{   paragraphs = loop { line_number =>  0,
					paragraph   =>  sm::empty:  sm::Map( Field ),		# Accumulates the fields of the paragraph being parsed.
					paragraphs  =>  []					# Accumulates the fully-processed paragraphs in the file.
				      };

		    fil::close_input  fd;

		    paragraphs;	
		}
		where

		    fun loop  { line_number, paragraph, paragraphs }		# 'paragraphs' is our result;
			=							# 'paragraph' accumulates the fields of the paragraph we're currently parsing.
			{
#			    fun maybe_get_field (state: State, field_name)
#				=
#				case (sm::get (*state.fields, field_name))
#				    #
#				    THE field => { field.used := TRUE;  THE *field.string; };
#				    NULL      => NULL;
#				esac;

			    #
			    fun get_field (fields, fieldname)
				=
				case (sm::get (fields, fieldname))
				    #
				    THE field => field;
				    #
				    NULL      => raise exception FAIL (sprintf "Above line %d in file '%s': required field %s missing\n"  line_number  filename  fieldname);
				esac;

			    fun add_line_to_paragraph { paragraph, fieldname, line }
				=
				case (sm::get (paragraph, fieldname))
				    #
				    THE { lines => LINES lines, fieldname, filename, line_1, line_n } =>  sm::set (paragraph, fieldname, { filename, fieldname, line_1,                line_n => line_number, lines => LINES ( line ! lines ) });
				    THE { lines => LINE  line', fieldname, filename, line_1, line_n } =>  sm::set (paragraph, fieldname, { filename, fieldname, line_1,                line_n => line_number, lines => LINES [ line,  line' ] });
				    NULL 							      =>  sm::set (paragraph, fieldname, { filename, fieldname, line_1 => line_number, line_n => line_number, lines => LINE    line           });
				esac;

			    #
			    fun validate_paragraph { paragraph, paragraphs }
				=
				# A paragraph is valid if:
				#
				#  o  It contains a build-a specifying a defined paragraph type.
				#  o  All mandatory fields present.
				#  o  All fields present are permitted by the paragraph definition.
				#  o  All multiline fields allowed to be multiline.
				#
				# After verifying paragraph validity, we trim all fields
				# as specified in the paragraph definition.
				#
				if (sm::is_empty  paragraph)
				    #
				    paragraphs;	
				else
				    #
				    build_a =   case (sm::get (paragraph, "build-a"))  THE field =>  field;
										       NULL      =>  raise exception FAIL (sprintf "file %s line %d: Paragraph lacks a 'build-a:' line\n"  filename  line_number);
						esac;


				    case  (sm::get  (digested_paragraph_definitions,  build_a.fieldname))
					#
					THE def =>  (process_fields def paragraph) ! paragraphs; 
					#
					NULL    =>  raise exception FAIL (sprintf "File %s line %d: build-a: type '%s' is undefined.\n"  filename  line_number  build_a.fieldname);
				    esac
					where
					    fun process_fields  (def: Digested_Paragraph_Definition)  (paragraph: sm::Map( Field ))
						=
						# Here we need to:
						#
						#  o  Verify that all mandatory fields are present.
						#  o  Verify that every field present is permitted.
						#  o  Verify that every multiline field is allowed.
						#  o  Trim whitespace from fields as directed.
						#
						{
						    verify_that_every_field_present_is_permitted ();
						    verify_that_all_mandatory_fields_are_present ();
						    verify_that_every_multiline_field_is_allowed ();

						    do_it  =  def.do_it;

						    fields =  sm::map  trim_whitespace_per_paragraph_definition  paragraph;

						    { do_it, fields };
						}
						where
						    fun verify_that_every_field_present_is_permitted ()
							=
							sm::apply  check_field  paragraph
							where
							    fun check_field  (field: Field)
								=
								if (field.fieldname != "build-a")				# build-a: line is always implicitly permitted -- in fact mandatory.
								    #
								    case (sm::get (def.fields, field.fieldname))
									THE _ => ();
									NULL  => raise exception FAIL (sprintf "Field %s at %d-%d in %s is not allowed by build-a definition '%s'"  field.fieldname  field.line_1  field.line_n  filename  build_a.fieldname);
								    esac;
								fi;
							end;	

						    fun verify_that_all_mandatory_fields_are_present ()
							=
							sm::keyed_apply  verify_presence_of_field_if_mandatory  def.fields
							where
							    fun verify_presence_of_field_if_mandatory  (fieldname,  traits: Field_Traits)
								=
								if (not (traits.optional))
								    #	
								    case (sm::get (paragraph, fieldname))
									THE _ =>  ();
									NULL  =>  raise exception FAIL (sprintf "build-a: %s paragraph ending at line %d in file %s lacks mandatory field '%s'"  build_a.fieldname  line_number  filename  fieldname);
								    esac;
								fi;
							end;	

						    fun get_traits  fieldname
							=	
							if (fieldname == "build-a")				# build-a: line traits are implicitly specified.
							    #
							    default_field_traits;
							else
							    case (sm::get (def.fields, fieldname))
								THE traits => traits;
								NULL       => raise exception FAIL "impossible";
							    esac;
							fi;

						    fun verify_that_every_multiline_field_is_allowed ()
							=
							sm::apply  check_multiline_permission  paragraph
							where
							    fun check_multiline_permission  (field: Field)
								=
								case field.lines
								    #
								    LINE  _ =>  ();
								    #
								    LINES _ =>  {   traits =  get_traits  field.fieldname;
										    #
										    if (not traits.allow_multiple_lines)
											#
											raise exception FAIL (sprintf "build-a: %s paragraph ending at line %d in file %s field %s: Multiline value not allowed"  build_a.fieldname  line_number  filename  field.fieldname);
										    fi;
										};
								esac;
							end;

						    fun trim_whitespace_per_paragraph_definition (field as { fieldname, lines, filename, line_1, line_n })
							=
							{   traits =  get_traits  fieldname;
							    #
							    if (not (traits.trim_whitespace))
								#
								field;
							    else
								case lines
								    #
								    LINE  line  => { fieldname, filename, line_1, line_n, lines => LINE (trim line)       };
								    LINES lines => { fieldname, filename, line_1, line_n, lines => LINES (map trim lines) };
								esac;
							    fi;
							};
						end;
					end;
				fi;


			    case (fil::read_line  fd)
				#
				THE input_line
				    =>
				    {   line_number =  line_number + 1;
					#
					if (input_line =~ ./^\s*#/)							# If it is a comment line,
					    #
					    loop  { line_number, paragraph, paragraphs };				# ignore it.

					elif (input_line =~ ./^\s*$/)							# If it is a blank line, it marks the end of a paragraph (fieldset),
					    #
					    loop  { line_number,							# so process any fields we have in hand:
						    paragraph  =>  sm::empty,						#
						    paragraphs =>  validate_paragraph { paragraph, paragraphs }
						  };
					else

					    # Line format should be  "line-type: rest".
					    # Split it into two strings at the ':' and
					    # dispatch on the line type:
					    #
					    case (regex::find_first_groups_all ./^([^:]+):(.*\n)$/ input_line)
						#
						[ fieldname, line ]
						    =>
						    {   fieldname =  trim  fieldname;					# Drop leading and trailing whitespace.
							#
							line =  (fieldname == "build-a")  ??  trim line  ::  line;	# Trim build-a immediately to simplify processing; we'll trim other fields later, if so specified by the def.
							#
							loop  { line_number,
								paragraph => add_line_to_paragraph { paragraph, fieldname, line },
								paragraphs
							      };
						    };

						_   =>       paragraphs;  # Dummy value falling through to below exception.  Keeps typechecker happy.
					    esac
					    except
						NOT_FOUND =  paragraphs;  # Dummy value falling through to below exception.  Keeps typechecker happy.


					    raise exception FAIL (sprintf "Unrecognizable .plan-file line at %d in file %s: '%s'    -- planfile.pkg\n"  line_number  filename  (chomp input_line));
					fi;
				    };
				#
				NULL => validate_paragraph { paragraph, paragraphs };				# Done. Validate final paragraph and return list of processed paragraphs.
			    esac;
			};
		end;
	    };


	fun read_planfiles  digested_paragraph_definitions  planfiles
	    =
	    [];
    };
end;


## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
