# overloaded-vector-ops-unit-test.pkg 

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg

# Unit tests for:
#     Overloading/vector/matrix functionality.

stipulate
    package fil =  file__premicrothread;							# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package psx =  posixlib;									# posixlib			is from   src/lib/std/src/psx/posixlib.pkg

    infix my 50 ==== !=;
    (====) = eight_byte_float::(====);
herein
    package overloaded_vector_ops_unit_test {
	#
	include unit_test;									# unit_test			is from   src/lib/src/unit-test.pkg

	name =  "src/lib/src/overloaded-vector-ops-unit-test.pkg unit tests";

	fun exercise_vector_gets_and_sets ()
	    =
	    {
		vector_of_chars			=   "abc";
		rw_vector_of_chars		=             rw_vector_of_chars::from_list                             [ 'x', 'y', 'z' ] ;
                chars_in_vector			=                         vector::from_list                             [ 'A', 'B', 'C' ] ;
		chars_in_rw_vector		=                      rw_vector::from_list                             [ 'X', 'Y', 'Z' ] ;
		vector_of_one_byte_unts		=        vector_of_one_byte_unts::from_list (map one_byte_unt::from_int [  5,   6,   7  ]);
		rw_vector_of_one_byte_unts	=     rw_vector_of_one_byte_unts::from_list (map one_byte_unt::from_int [ 15,  16,  17  ]);
		rw_vector_of_eight_byte_floats	= rw_vector_of_eight_byte_floats::from_list                             [ 1.0, 2.0, 3.0 ] ;

		assert (                        string::get                (vector_of_chars,1) == 'b');
		assert (                        vector::get                (chars_in_vector,1) == 'B');
		assert (                     rw_vector::get             (chars_in_rw_vector,1) == 'Y');
		assert (            rw_vector_of_chars::get             (rw_vector_of_chars,1) == 'y');
		assert (       vector_of_one_byte_unts::get        (vector_of_one_byte_unts,1) ==  one_byte_unt::from_int  6 );
		assert (    rw_vector_of_one_byte_unts::get     (rw_vector_of_one_byte_unts,1) ==  one_byte_unt::from_int 16 );
		assert (rw_vector_of_eight_byte_floats::get (rw_vector_of_eight_byte_floats,1) ==== 2.0 );

		assert (               vector_of_chars[1] == 'b'			);							# I spent 2-3 months getting this one to work. :-)   -- 2013-11-20 CrT
		assert (               chars_in_vector[1] == 'B'			);
		assert (            chars_in_rw_vector[1] == 'Y'			);
		assert (            rw_vector_of_chars[1] == 'y'			);
		assert (       vector_of_one_byte_unts[1] ==  one_byte_unt::from_int  6 );
		assert (    rw_vector_of_one_byte_unts[1] ==  one_byte_unt::from_int 16 );
		assert (rw_vector_of_eight_byte_floats[1] ==== 2.0			);

		chars_in_rw_vector[1]			:=  chars_in_rw_vector[2];
		rw_vector_of_chars[1]			:=  rw_vector_of_chars[2];
		rw_vector_of_one_byte_unts[1]		:=  rw_vector_of_one_byte_unts[2];
		rw_vector_of_eight_byte_floats[1]	:=  rw_vector_of_eight_byte_floats[2];

		assert (            chars_in_rw_vector[1] == 'Z'			);
		assert (            rw_vector_of_chars[1] == 'z'			);
		assert (    rw_vector_of_one_byte_unts[1] ==  one_byte_unt::from_int 17 );
		assert (rw_vector_of_eight_byte_floats[1] ==== 3.0			);
	    };

	fun run ()
	    =
	    {
		printf "\nDoing %s:\n" name;   

		exercise_vector_gets_and_sets ();

		summarize_unit_tests  name;
	    };
    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
