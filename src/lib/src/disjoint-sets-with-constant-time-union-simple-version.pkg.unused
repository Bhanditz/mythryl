# disjoint-sets-with-constant-time-union-simple-version.pkg.unused
#
# See comments in:	src/lib/src/disjoint-sets-with-constant-time-union.api
# Compare to:		src/lib/src/disjoint-sets-with-constant-time-union.pkg
#
# Author:
#    Fritz Henglein
#    DIKU, University of Copenhagen
#    henglein@diku.dk

# Compiled by:
#     src/lib/std/standard.lib

# 2011-07-20 CrT: Dropped this package from standard.lib because it offers no
#                 apparent advantages over disjoint_sets_with_constant_time_union
#		  and I don't want to gunk up standard.lib with junk packages of
#		  no particular value. This file should be deleted unless some positive
#                 reason for keeping it around turns up.

package  disjoint_sets_with_constant_time_union_simple_version
: (weak) Disjoint_Sets_With_Constant_Time_Union			# Disjoint_Sets_With_Constant_Time_Union	is from   src/lib/src/disjoint-sets-with-constant-time-union.api
{
    exception UNION_FIND  String;

    Disjoint_Set_C(X)
      = ECR(X)
      | PTR  Disjoint_Set(X)

    withtype
    Disjoint_Set(X) = Ref( Disjoint_Set_C(X) );

    fun chase (p as REF (ECR _))
            =>
            p;

        chase (p as REF (PTR p'))
            =>
            {   p'' = chase p';
          
	        p := PTR p''; p'';
            };
    end;

    fun make_singleton_disjoint_set x
        =
        REF (ECR x);

    fun get p
        =
        case *(chase p)
	    #	  
	    ECR x =>  x;
	    _     =>  raise exception MATCH;
        esac;
      
    fun equal (p, p')
        =
        chase p == chase p';

    fun set (p, x)
        =
        {   p' = chase p;
	  
	    p' := ECR x;
	};

    fun link (p, q)
        =
        {   p' = chase p;
            q' = chase q;
	  
	    if (p' == q')  		    FALSE;
            else 	    p' := PTR q';   TRUE;
	    fi;
	};
 
    union = link;

    fun unify f (p, q)
        =
        {   v =  f (get p, get q);
	  
	    union (p, q)
            then
                set (q, v);
	};
};

