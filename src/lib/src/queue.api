## queue.api
#
# Immutable, fully-persistent queues.
#
# For mutable queues see:
#
#     src/lib/src/rw-queue.api

# Compiled by:
#     src/lib/std/standard.lib

# This api is implemented in:
#
#     src/lib/src/queue.pkg

api Queue {
    #
    Queue(X) = QUEUE { front: List(X),			# No harm in publishing the structure -- it is not going to change.
                       rear:  List(X)
                     };

    exception DEQUEUE;

    empty_queue:     Queue(X);				# An empty queue, to save clients from constantly recreating  QUEUE { front => [], back => [] };
    queue_is_empty:  Queue(X) -> Bool;

    enqueue:  (Queue(X), X) -> Queue(X);
    dequeue:   Queue(X) -> (Queue(X), X);

    delete:   (Queue(X), (X -> Bool)) -> Queue(X);	# Drop all queue elements for which given predicate returns TRUE.

    head:      Queue(X) -> X;
    peek:      Queue(X) -> Null_Or(X);

    length:    Queue(X) -> Int;
    contents:  Queue(X) -> List(X);

    apply:  (X -> Void) -> Queue(X) -> Void;
    map:    (X -> Y) -> Queue(X) -> Queue(Y);

    fold_left:   ((X, Y) -> Y) -> Y -> Queue(X) -> Y;
    fold_right:  ((X, Y) -> Y) -> Y -> Queue(X) -> Y;

};		#  api Queue


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
