## queue.api
#
# Immutable, fully-persistent queues.
#
# For mutable queues see:
#
#     src/lib/src/rw-queue.api

# Compiled by:
#     src/lib/std/standard.lib

# This api is implemented in:
#
#     src/lib/src/queue.pkg

api Queue {
    #
    Queue(X) = QUEUE { front: List(X),						# No harm in publishing the structure -- it is not going to change.
                       back:  List(X)
                     };

    empty_queue:     Queue(X);							# An empty queue, to save clients from constantly recreating  QUEUE { front => [], back => [] };
    queue_is_empty:  Queue(X) -> Bool;

    push_item_into_back_of_queue:    (Queue(X), X) -> Queue(X);			# Normal way of adding an item.
    push:			     (Queue(X), X) -> Queue(X);			# Synonym for previous.

    pull_item_from_front_of_queue:     Queue(X) -> (Queue(X), Null_Or(X));	# Normal way of removing an item.
    pull:			      Queue(X) -> (Queue(X), Null_Or(X));	# Synonym for previous.

    unpull_item_into_front_of_queue: (Queue(X), X) -> Queue(X);			# Bass-ackwards way of adding an item.
    unpull:			     (Queue(X), X) -> Queue(X);			# Synonym for previous.

    unpush_item_from_back_of_queue:   Queue(X) -> (Queue(X), Null_Or(X));	# Bass-ackwards way of removing an item.
    unpush:			     Queue(X) -> (Queue(X), Null_Or(X));	# Synonym for previous.

    to_list:   Queue(X) -> List(X);
};		#  api Queue


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
