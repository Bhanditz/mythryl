## graph.api
#
# API for simple, general-purpose fully-persistent graphs.

# Compiled by:
#     src/lib/std/standard.lib

# Compare to:
#     src/lib/src/graphnt.api
#     src/lib/src/tuplebase.api
#     src/lib/graph/oop-digraph.api

# This api is implemented in:
#     src/lib/src/graph.pkg

api Graph {
    #
    Other = Exception;

    Graph;
    Node;
    Tag;

    Edge = (Node, Tag, Node);

    package es: Set;							# Sets of Edges.	Set is from   src/lib/src/set.api

    make_node:		Void   -> Node;					# Create a Node.
    make_string_node:	String -> Node;					# Create a Node with an associated String value, retrievable via node_string.
    make_float_node:	Float  -> Node;					# Create a Node with an associated Float  value, retrievable via node_float.
    make_graph_node:	Graph  -> Node;					# Create a Node with an associated Other  value, retrievable via node_graph.
    make_other_node:	Other  -> Node;					# Create a Node with an associated Other  value, retrievable via node_other. This allows arbitrary values to be associated with the Node.

    make_tag:		Void   -> Node;					# Create a Node.
    make_string_tag:	String -> Node;					# Create a Node with an associated String value, retrievable via tag_string.
    make_float_tag:	Float  -> Node;					# Create a Node with an associated Float  value, retrievable via tag_float.
    make_graph_tag:	Graph  -> Node;					# Create a Node with an associated Graph  value, retrievable via tag_graph.
    make_other_tag:	Other  -> Node;					# Create a Node with an associated Other  value, retrievable via tag_other. This allows arbitrary values to be associated with the Tag.

    node_string:	Node   -> Null_Or(String);			# Return String associated with given Node, if any, else NULL.
    node_float:		Node   -> Null_Or(Float);			# Return Float  associated with given Node, if any, else NULL.
    node_graph:		Node   -> Null_Or(Graph);			# Return Graph  associated with given Node, if any, else NULL.
    node_other:		Node   -> Null_Or(Other);			# Return Other  associated with given Node, if any, else NULL.

    tag_string:		Node   -> Null_Or(String);			# Return String associated with given Tag,  if any, else NULL.
    tag_float:		Node   -> Null_Or(Float);			# Return Float  associated with given Tag,  if any, else NULL.
    tag_graph:		Node   -> Null_Or(Graph);			# Return Graph  associated with given Tag,  if any, else NULL.
    tag_other:		Node   -> Null_Or(Other);			# Return Other  associated with given Tag,  if any, else NULL.

    empty_graph:	Graph;

    put_edge:		(Graph, Edge) -> Graph;				# Store  a Edge into the Graph, returning the updated Graph. The input Graph is unchanged.
    drop_edge:		(Graph, Edge) -> Graph;				# Remove a Edge from the Graph, returning the updated Graph. The input Graph is unchanged.

    get_edges:		 Graph        ->         es::Set ;		# Get all Edges  in Graph.    User can iterate via es::apply etc or do set operations via es::union etc -- see src/lib/src/set.api.
    #
    get_edges1:		(Graph, Node) -> Null_Or(es::Set);		# Get all Edges in Graph with given Node in first  slot.
    get_edges2:		(Graph, Tag ) -> Null_Or(es::Set);		# Get all Edges in Graph with given Tag  in second slot.
    get_edges3:		(Graph, Node) -> Null_Or(es::Set);		# Get all Edges in Graph with given Node in third  slot.
    #
    get_edges12:	(Graph, Node, Tag ) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in first  and second slots.
    get_edges13:	(Graph, Node, Node) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in first  and third  slots.
    get_edges23:	(Graph, Tag,  Node) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in second and third  slots.
    #
    has_edge:		(Graph, Edge) -> Bool;				# See if given Edge is in Graph.

    nodes_apply:	Graph -> (Node -> Void) -> Void;		# Apply given fn once per Node for all Nodes in Graph.  This iterates over all tuples in the Graph.

};									# api Graph


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
