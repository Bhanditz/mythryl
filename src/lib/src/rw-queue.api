## rw-queue.api
#
# This is the core queue used throughout threadkit
# for run queues and wait queues.
#
# There's nothing thread-specific about the implemention.
#
# We make our datastructure externally visible so that
# other modules can inline the operations.  (Someday we'll
# be able to count on the compiler for that...)
#
# NB: We actually implement both adding and removing from
# both front and back of queue, making this technically
# a deque rather than a queue, but we use it primarily
# as a queue and thus for clarity continue to call it that.

# Compiled by:
#     src/lib/std/standard.lib


###        "If you cannot grok the overall pattern
###         of a program while taking a shower,
###         you are not ready to code it."
###
###                            -- Richard Pattis






										# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg

# This api is implemented in:
#
#     src/lib/src/rw-queue.pkg
#
api Rw_Queue {
    #
    Rw_Queue(X)									# Simple queue using the usual trick of adding to the q.back list,
	=									# removing from the q.front list, and when the q.front list is empty,
	RW_QUEUE								# reversing the q.back list and making it the new q.front list.
	  {									# This is a nice simple algorithm where both push and pull are O(1).
	    front:  Ref( List(X) ),						#
	    back:   Ref( List(X) )						# We publish our datastructure because many clients duplicate critical fns locally
	  };									# for speed because the compiler does not yet do cross-package inlining.
										# (Also, the datastructure isn't likely to change, so there is little need to encapsulate it anyhow.)
    make_rw_queue:  Void -> Rw_Queue(X);

    same_queue:  (Rw_Queue(X), Rw_Queue(X)) -> Bool;				# Returns TRUE iff the two queues are the same.  This is an O(1) computation -- essentially pointer equality.

    queue_is_empty:  Rw_Queue(X) -> Bool;					# Returns TRUE iff the queue is empty.

    push_item_onto_back_of_queue:  (Rw_Queue(X), X) -> Void;			# The normal way of inserting an item into the queue.
    push:                          (Rw_Queue(X), X) -> Void;			# Synonym for previous.

    pull_item_off_front_of_queue:  Rw_Queue(X) -> Null_Or(X);			# De-queue and return the next item in the queue.   Return NULL if the queue is empty.
    pull: 			   Rw_Queue(X) -> Null_Or(X);			# Synonym for previous.

    pull_item_off_front_of_queue_or_raise_exception				# Dequeue an item; raise exception FAIL "queue is empty" if the queue is empty.
	:									# Use this only if it is a coding error for the queue to be empty at that point in the code.
	Rw_Queue(X) -> X;

    clear_queue_to_empty:  Rw_Queue(X) -> Void;					# Reset a queue to all empty, discarding any and all current contents.

    find_first_matching_item_and_remove_from_queue				# Find and remove the first item that satisfies the predicate. 
	:									# This is currently unused; I don't know why Reppy included it.  -- 2012-03-28 CrT
	(Rw_Queue(X), (X -> Bool)) -> Null_Or(X);
	
    unpull_item_onto_front_of_queue:  (Rw_Queue(X), X) -> Void;			# We occasionally use this when a thread needs to run immediately.
    unpull:			      (Rw_Queue(X), X) -> Void;			# Synonym for previous.

    unpush_item_off_back_of_queue:  Rw_Queue(X) -> Null_Or(X);			# Abnormal case included for completeness -- currently unused:  Dequeue and return the last item in the queue.
    unpush:			    Rw_Queue(X) -> Null_Or(X);			# Synonym for previous.
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
