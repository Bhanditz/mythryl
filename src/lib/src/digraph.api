## digraph.api
#
# API for simple, general-purpose fully-persistent graphs.

# Compiled by:
#     src/lib/std/standard.lib

# Compare to:
#     src/lib/src/tuplebase.api
#     src/lib/graph/oop-digraph.api

# This api is implemented in:
#     src/lib/src/digraph.pkg

api Digraph {
    #
    Other = Exception;								# We support the usual hack of using Exception as an extensible datatype to associate arbitrary values with Edges and Tags.

    Graph;
    Node;
    Tag;

    Tagless_Edge  = (Node, Node);
    Edge 	  = (Node, Tag, Node);

    package ts: Set;							# Sets of Tagless_Edges.	Set is from   src/lib/src/set.api
    package es: Set;							# Sets of Edges.		Set is from   src/lib/src/set.api

    make_node:		Void	-> Node;				# Create an Node.
    make_string_node:	String	-> Node;				# Create an Node with an associated String value, retrievable via node_string.
    make_float_node:	Float	-> Node;				# Create an Node with an associated Float  value, retrievable via node_float.
    make_graph_node:	Graph	-> Node;				# Create an Node with an associated Other  value, retrievable via node_graph.
    make_other_node:	Other	-> Node;				# Create an Node with an associated Other  value, retrievable via node_other. This allows arbitrary values to be associated with the Node.

    node_string:	Node   -> Null_Or(String);			# Return String associated with given Node, if any, else NULL.
    node_float:		Node   -> Null_Or(Float);			# Return Float  associated with given Node, if any, else NULL.
    node_graph:		Node   -> Null_Or(Graph);			# Return Graph  associated with given Node, if any, else NULL.
    node_other:		Node   -> Null_Or(Other);			# Return Other  associated with given Node, if any, else NULL.

    make_tag:		Void	-> Tag;					# Create an Tag.
    make_string_tag:	String	-> Tag;					# Create an Tag with an associated String value, retrievable via tag_string.
    make_float_tag:	Float	-> Tag;					# Create an Tag with an associated Float  value, retrievable via tag_float.
    make_graph_tag:	Graph	-> Tag;					# Create an Tag with an associated Other  value, retrievable via tag_graph.
    make_other_tag:	Other	-> Tag;					# Create an Tag with an associated Other  value, retrievable via tag_other. This allows arbitrary values to be associated with the Tag.

    tag_string:		Tag   -> Null_Or(String);			# Return String associated with given Tag, if any, else NULL.
    tag_float:		Tag   -> Null_Or(Float);			# Return Float  associated with given Tag, if any, else NULL.
    tag_graph:		Tag   -> Null_Or(Graph);			# Return Graph  associated with given Tag, if any, else NULL.
    tag_other:		Tag   -> Null_Or(Other);			# Return Other  associated with given Tag, if any, else NULL.

    empty_graph:	Graph;

    put_tagless_edge:	(Graph, Tagless_Edge) -> Graph;			# Store  a Tagless_Edge  into the Graph, returning the updated Graph. The input Graph is unchanged.
    put_edge:		(Graph, Edge        ) -> Graph;			# Store  a Edge into the Graph, returning the updated Graph. The input Graph is unchanged.

    drop_tagless_edge:	(Graph, Tagless_Edge ) -> Graph;		# Remove a Tagless_Edge  from the Graph, returning the updated Graph. The input Graph is unchanged.
    drop_edge:		(Graph, Edge) -> Graph;				# Remove a Edge from the Graph, returning the updated Graph. The input Graph is unchanged.


    get_tagless_edges:	 Graph        ->         ts::Set ;		# Get all Tagless_Edges  in Graph.  User can iterate via ts::apply etc or do set operations via ts::union etc -- see src/lib/src/set.api
    #
    get_tagless_edges1:	(Graph, Node) -> Null_Or(ts::Set);		# Get all Tagless_Edges  in Graph with given Node in first  slot.
    get_tagless_edges2:	(Graph, Node) -> Null_Or(ts::Set);		# Get all Tagless_Edges  in Graph with given Node in second slot.
    #
    has_tagless_edge:	(Graph, Tagless_Edge) -> Bool;			# See if given Tagless_Edge is in Graph.

    get_edges:		 Graph        ->         es::Set ;		# Get all Edges  in Graph.    User can iterate via es::apply etc or do set operations via es::union etc -- see src/lib/src/set.api.
    #
    get_edges1:		(Graph, Node) -> Null_Or(es::Set);		# Get all Edges in Graph with given Node in first  slot.
    get_edges2:		(Graph, Tag ) -> Null_Or(es::Set);		# Get all Edges in Graph with given Node in second slot.
    get_edges3:		(Graph, Node) -> Null_Or(es::Set);		# Get all Edges in Graph with given Node in third  slot.
    #
    get_edges12:	(Graph, Node, Tag ) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in first  and second slots.
    get_edges13:	(Graph, Node, Node) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in first  and third  slots.
    get_edges23:	(Graph, Tag,  Node) -> Null_Or(es::Set);	# Get all Edges in Graph with given Nodes in second and third  slots.
    #
    has_edge:		(Graph, Edge) -> Bool;				# See if given Edge is in Graph.

    nodes_apply:	 Graph -> (Node -> Void) -> Void;		# Apply given fn once per Node for all Nodes in Graph.  This iterates over all Edges in the Graph.
    tags_apply:		 Graph -> (Tag  -> Void) -> Void;		# Apply given fn once per Tag  for all Tags  in Graph.  This iterates over all Edges in the Graph.

};									# api Graph


## Original code by Jeff Prothero Copyright (c) 2014-2014,
## released per terms of SMLNJ-COPYRIGHT.
