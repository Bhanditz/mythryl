## threadkit-winix-io.api
#
# The threadkit version of the generic low-level I/O interface.
#
# Compare to:
#
#     src/lib/std/src/winix/winix-io.api

# Compiled by:
#     src/lib/std/standard.lib



stipulate
    package mop =  mailop;								# mailop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
    package tim =  time;								# time			is from   src/lib/std/time.pkg
    package wty =  winix_types;								# winix_types		is from   src/lib/std/src/posix/winix-types.pkg
herein

    # This api is referenced in:
    #
    #     src/lib/src/lib/thread-kit/src/winix/threadkit-winix.api
    #     src/lib/std/src/threadkit/posix/threadkit-winix-io.pkg

    api Threadkit_Winix_Io {
	#
	eqtype Iod;									# "Iod" == "I/O descriptor". 
											# An Iod is an abstract descriptor for an OS entity
											# that supports I/O (e.g., file, tty device, socket, ...).
											# (In practice on posix it is an Int encoding a host-OS fd.)


	Iod_Kind = FILE									# On posix defined by   psx::stat::is_file
		 | DIRECTORY								# On posix defined by   psx::stat::is_directory
		 | SYMLINK								# On posix defined by   psx::stat::is_symlink
		 | CHAR_DEVICE								# On posix defined by   psx::stat::is_char_dev
		 | BLOCK_DEVICE								# On posix defined by   psx::stat::is_block_dev
		 | PIPE									# On posix defined by   psx::stat::is_pipe
		 | SOCKET								# On posix defined by   psx::stat::is_socket
		 | OTHER								# Future-proofing.
		 ;

	hash:  Iod -> Unt;								# Return a hash value for the I/O descriptor. 

	compare:  (Iod, Iod) -> Order;							# Compare two I/O descriptors 

	iod_to_iodkind:  Iod -> wty::Iod_Kind;						# Classify iod as FILE/DIR/SYMLINK/TTY/PIPE/SOCKET/DEVICE
											# Existing code uses this only to check for TTY, mostly to select line-buffering vs block buffering.



	Wait_Request
	    =
	    { io_descriptor:    Iod,
	      readable:	    Bool,
	      writable:	    Bool,
	      oobdable:	    Bool				# Out-Of-Band-Data available on socket or PTY.
	    };
	    #
	    # Public representation of a polling operation on
	    # an I/O descriptor.

	Wait_Result	= Wait_Request;				# A synonym to clarify declarations.

	exception BAD_WAIT_REQUEST;

	wait_for_io_opportunity
	    :
	    ( List( Wait_Request ),
	      Null_Or( tim::Time )	# Timeout: NULL means wait indefinitely; (THE tim::zero_time) means do not block.
	    )
	    ->
	    List( Wait_Result );

	wait_for_io_opportunity_mailop
	    :
	    List( Wait_Request )
	    ->
	    mop::Mailop( List( Wait_Result ) );

	# Deprecated synonyms for above, mainly so that unix
	# folks looking for 'select' in the function index
	# will get led here:
	#	 
	select
	    :
	    ( List( Wait_Request ),
	      Null_Or( tim::Time )	# Timeout: NULL means wait indefinitely; (THE tim::zero_time) means do not block.
	    )
	    ->
	    List( Wait_Result );

	select_mailop
	    :
	    List( Wait_Request )
	    ->
	    mop::Mailop( List( Wait_Result ) );

    }; #  Winix_Io 
end;


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
