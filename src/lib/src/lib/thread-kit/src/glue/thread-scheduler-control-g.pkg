## thread-scheduler-control-g.pkg

# Compiled by:
#     src/lib/std/standard.lib



									# Threadkit_Os_Glue			is from   src/lib/src/lib/thread-kit/src/posix/threadkit-os-glue.api
									# threadkit_os_glue			is from   src/lib/src/lib/thread-kit/src/posix/unix-threadkit-os-glue.pkg
									# winix					is from   src/lib/std/winix.pkg
									# winix_guts				is from   src/lib/std/src/posix/winix-guts.pkg
									# winix_process				is from   src/lib/std/src/posix/winix-process.pkg
stipulate
    package ts  =  thread_scheduler;					# thread_scheduler			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    package sig =  runtime_signals;					# runtime_signals			is from   src/lib/std/src/nj/runtime-signals.pkg
    package cu  =  threadkit_startup_and_shutdown_hooks;		# threadkit_startup_and_shutdown_hooks	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit-startup-and-shutdown-hooks.pkg
    package rs  =  runtime_signals;					# runtime_signals			is from   src/lib/std/src/nj/runtime-signals.pkg
    package ci  =  unsafe::mythryl_callable_c_library_interface;	# unsafe				is from   src/lib/std/src/unsafe/unsafe.pkg
									# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
herein

    # This generic is invoked (only) by:
    #
    #     src/lib/src/lib/thread-kit/src/posix/thread-scheduler-control.pkg
    #
    generic package  thread_scheduler_control_g   (
	#            ==========================
	#
	threadkit_os_glue:  Threadkit_Os_Glue
    )
    : (weak) Thread_Scheduler_Control				# Thread_Scheduler_Control		is from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control.api

    {

	package glue  = threadkit_os_glue;


	# Force hook initialization
	# to link (and thus execute):
	#
	include  initialize_threadkit_startup_and_shutdown_hooks;
								# initialize_threadkit_startup_and_shutdown_hooks	is from   src/lib/src/lib/thread-kit/src/glue/initialize-threadkit-startup-and-shutdown-hooks.pkg

								    # threadkit_export_function_g				is from   src/lib/src/lib/thread-kit/src/glue/threadkit-export-function-g.pkg
	package export
	    =
	    threadkit_export_function_g( glue );


	include cu;


	is_running
	    =
	    thread_scheduler_is_running::thread_scheduler_is_running;


	fun thread_scheduler_is_running ()
	    =
	    *is_running;
								    # fate					is from   src/lib/std/src/nj/fate.pkg

	fun shut_down_thread_scheduler  status
	    =
	    if *is_running
		#
		fate::resume_fate  *ts::shutdown_hook  (TRUE, status);
	    else
		raise exception FAIL "threadkit is not running";
	    fi;

	# A dummy print function, in case the
	# user's program doesn't reference
	# threadkit's file package directly.
	#
	fun dummy_print _
	    =
	    raise exception FAIL "print called without loading threadkit's file";


	my interrupt_fate:  fate::Fate( Void )
	    =
	    fate::make_isolated_fate
		(fn _ =  shut_down_thread_scheduler  winix::process::failure);


	fun start_up_thread_scheduler''
	    ( first_thread_thunk,		# Thunk for initial thread to run.
	      time_quantum			# THE timeslicing time quantum. If NULL, defaults to 20 milliseconds.
	    )
	    =
	    {   saved_interrupt_handler
		    =
		    sig::get_signal_handler
			sig::interrupt_signal;

		saved_print_function
		    =
		    *runtime_internals::print_hook;				# runtime_internals		is from   src/lib/std/src/nj/runtime-internals.pkg


		if *is_running
		    raise exception FAIL "threadkit is already running";
		fi;

		is_running := TRUE;
									    # thread		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread.pkg
		thread::reset TRUE;
									    # threadkit_os_glue	is from   src/lib/src/lib/thread-kit/src/posix/unix-threadkit-os-glue.pkg
		glue::init ();	# Empty out the timeout queue.

									    # poll_fate		def in   src/lib/src/lib/thread-kit/src/glue/threadkit-export-function-g.pkg
									    # pause_fate		def in   src/lib/src/lib/thread-kit/src/glue/threadkit-export-function-g.pkg
		ts::scheduler_hook :=  export::poll_fate ;
		ts::pause_hook     :=  export::pause_fate;

		my  (clean_up, status)
		    =
		    fate::call_with_current_fate
			(   fn done_fate
				=
				{   sig::set_signal_handler
					( sig::interrupt_signal,
					  sig::HANDLER (fn _ =  interrupt_fate)
					);

				    ts::shutdown_hook
					:=
					done_fate;

				    runtime_internals::print_hook
					:=
					dummy_print;


				    case time_quantum
					#
					THE time_quantum =>    ts::start_thread_scheduler_timer  time_quantum;
					_                =>  ts::restart_thread_scheduler_timer ();
				    esac;


				    cu::do_actions_for  cu::STARTUP;


				    #####################################
				    # This is where we actually enter
				    # concurrent programming mode,
				    # initially with a single thread
				    # running the first_thread_thunk:
				    #####################################
				    #
				    thread::make_thread  "thread_scheduler_control start_up"  first_thread_thunk;
				    #
				    ts::dispatch_next_thread ();
				}
			);

		#####################################
		# At this point we have exited
		# concurrent programming mode
		# and are returning to vanilla
		# single-threaded operation.
		#####################################

		cu::do_actions_for  cu::THREADKIT_SHUTDOWN;

		glue::shutdown    ();
		ts::stop_thread_scheduler_timer ();

		thread::reset FALSE;

		is_running := FALSE;


		runtime_internals::print_hook
		    :=
		    saved_print_function;


		sig::set_signal_handler
		    #
		    (sig::interrupt_signal, saved_interrupt_handler);

		status;
	    };


	fun start_up_thread_scheduler
		first_thread_thunk
	    =
	    start_up_thread_scheduler'' 
	      ( first_thread_thunk,		# Thunk for initial thread to run.
		NULL			# THE timeslicing time quantum. If NULL, defaults to 20 milliseconds.
	      );


	fun start_up_thread_scheduler'
		time 
		first_thread_thunk
	    =
	    start_up_thread_scheduler'' 
	      ( first_thread_thunk,		# Thunk for initial thread to run.
		THE time			# THE timeslicing time quantum. If NULL, defaults to 20 milliseconds.
	      );

	# Run given first_thread_thunk with
	# threadkit concurrency support.
	# Make life easy for the user by
	# nesting cleanly -- we start up
	# threadkit only if needed, if it
	# is already running we just run
	# the thunk and return:
	#
	fun thread_scheduler
		first_thread_thunk
	    =
	    if *is_running

		first_thread_thunk ();

		();

	    else

		start_up_thread_scheduler  .{

		    first_thread_thunk ();

		    shut_down_thread_scheduler  0;
		};

		();				# Return Void.
	    fi;


	Cmdt = export::Pair (String, List( String ) )
	       ->
	       winix::process::Status;


	my  spawn_to_disk' : ((String, Cmdt)) -> Void
	    =
	    ci::find_c_function { lib_name => "heap", fun_name => "spawn_to_disk" };


	fun spawn_to_disk (file_name, main, time_q)
	    =
	    {   if (not *is_running)
		    #
		    is_running := TRUE;
		else
		    raise exception FAIL "Cannot spawn_to_disk while threadkit is running";
		fi;

		rs::mask_signals  rs::MASK_ALL;

		# Run the Lib7 SPAWN_TO_DISK at-functions
		# to avoid some space-leaks:
		#
		runtime_internals::at::run_functions_scheduled_to_run
		    #
		    runtime_internals::at::SPAWN_TO_DISK;

		# Strip out any unecessary stuff from
		# the threadkit Cleanup state: 
		#
		cu::export_fn_cleanup ();

		# Unlink the SML print function: 
		#
		runtime_internals::print_hook
		    :=
		    (fn _ = ());

		# Clear the pervasive package list
		# of picklehash-pickle pairs:
		#
		unsafe::pervasive_package_pickle_list__global
		    :=
		    unsafe::p::NIL;

		# Now export the wrapped main function: 
		#
		spawn_to_disk'  (file_name,  export::wrap_for_export (main, time_q));
	    };
    };
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
