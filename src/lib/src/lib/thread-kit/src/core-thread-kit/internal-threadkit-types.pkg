## internal-threadkit-types.pkg
#
# These are the concrete representations of the various threadkit types.
# These types are abstract (or not even visible) outside this library.

# Compiled by:
#     src/lib/std/standard.lib


###	       "The programmer who is not in love with lisp by age twenty has no spirit of adventure.
###		The programmer who is still in love with lisp by age thirty has no common sense."
###
###							-- Walt Filmore


stipulate
    package fat =  fate;					# fate		is from   src/lib/std/src/nj/fate.pkg
herein

    package internal_threadkit_types {

	# Thread IDs --- see
	#
	#     src/lib/src/lib/thread-kit/src/core-thread-kit/thread.pkg
	#
	Thread_State
	    =
	    THREAD_STATE
	      { thread_id:		Int,				# A unique ID. 
		name:			String,				# Purely for display to humans.
		didmail:		Ref( Bool ),			# Set this whenever this thread does some concurrency operation; thread-scheduler favors mail-performing threads.
		#
		exception_handler:	Ref( Exception -> Void ),	# Root-level exception handler hook.
		properties:	        Ref(  List(  Exception ) ),	# Holds thread-local properties.

		dead:			Condition_Variable		# Set when the thread dies. 
	      }

	# Mailop_Done refcells are used to track blocked
	# threads in the various waiting queues.
	#
	# They are set to MAILOP_DONE when they (or
	# some other competing) mailop is selected
	# -- i.e., when they are no longer a candidate
	# for execution.
	#
	also
	Mailop_Done
	  #
	  = MAILOP_DONE
	  | MAILOP_PENDING_FOR  Thread_State

	# Condition variables --- see
	#     src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
	# These are essentially Void-valued oneshot_maildrop instances,
	# and are used for various internal synchronization
	# conditions, e.g., nack mail_ops, I/O synchronization,
	# and thread termination:
	#
	also
	Condition_Variable
	    =
	    CONDITION_VARIABLE  Ref( Condvar_State )

	also
	Condvar_State									# "condvar" == "condition variable".
	  #
	  = CONDVAR_UNSET    List { mailop_done:	Ref( Mailop_Done ),		# Unset condvar together with the list of threads waiting for it to be set.
				    clean_up:		Void -> Void,
				    fate:		fate::Fate( Void )
				  }
	  | CONDVAR_VALUE    Int							# Condvar which has been set.  The int value is a priority counting the number of times that
	  ;										# the condvar has been waited on without firint -- see wait_on_condvar__mailop()   
											# in   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
	# Mailops -- see
	#     src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
	#
	Mailop_Readiness(X)
	  #
	  = MAILOP_READY								# MAILOP_READY means this select[...] rule is ready to fire. (select[...] can fire at most one rule per invocation.)
	      {
		priority:	Int,
		do_it:		Void -> X						# We fire a rule by calling do_it().	Reppy calls this field doFn
	      }

	  | MAILOP_UNREADY								# MAILOP_UNREADY means this select[...] rule is not ready to fire.
	      {
		mailop_done:    Ref( Mailop_Done ),
		clean_up:       Void -> Void,
		next:           Void -> Void
	      }
	      ->
	      X
	  ;

	Mailop_Baseop(X)
	    =
	    Void -> Mailop_Readiness(X);

	Mailop(X)
	  = BASEOPS 	    List(    Mailop_Baseop(X) )
	  | CHOOSE          List(           Mailop(X) )
	  | GUARD           Void         -> Mailop(X)
	  | WITH_NACK       Mailop(Void) -> Mailop(X)
	  ;

	# Useful when debugging threadkit internals:
	#
	fun thread_to_string (THREAD_STATE { thread_id, ... } )
	    =
	    cat [ "[",
		   number_string::pad_left '0' 6 (int::to_string thread_id),
		  "]"
		];

    };
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
