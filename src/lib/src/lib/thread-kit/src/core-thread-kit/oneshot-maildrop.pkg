## oneshot-maildrop.pkg

# Compiled by:
#     src/lib/std/standard.lib



# The implementation of Id-style synchronizing memory cells.



###          "We're fools whether we dance or not,
###           so we might as well dance."
###
###                   -- Japanese proverb



stipulate
    package fat =  fate;			# fate				is from   src/lib/std/src/nj/fate.pkg
    package itt =  internal_threadkit_types;	# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg
    package rwq =  rw_queue;			# rw_queue			is from   src/lib/src/rw-queue.pkg
    package ts  =  thread_scheduler;		# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    #
    Fate(X) =   fat::Fate(X);
    #
    call_with_current_fate =  fat::call_with_current_fate;
    switch_to_fate         =  fat::switch_to_fate;
herein

    package   oneshot_maildrop
    :         Oneshot_Maildrop			# Oneshot_Maildrop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/oneshot-maildrop.api
    {

	# We use the same underlying representation
	# for both ivars and mvars:
	#
	Cell(X) =   CELL  { priority:  Ref( Int ),
			    read_q:    rwq::Rw_Queue( (Ref( itt::Selectrun_Status ), Fate(X)) ),
			    value:     Ref(  Null_Or(X) )
			  };

	Oneshot_Maildrop(X) = Cell(X);

	exception MAY_NOT_FILL_ALREADY_FULL_ONESHOT_MAILDROP;

	fun new_cell ()
	    =
	    CELL { priority => REF 0,
		   value    => REF NULL,
		   read_q   => rwq::make_rw_queue ()
		 };

	fun same_cell (CELL { value=>v1, ... }, CELL { value=>v2, ... } )
	    =
	    v1 == v2;


	fun make_transaction_id ()
	    =
	    REF (itt::SELECTRUN_IS_BLOCKED (ts::get_current_thread()));


	fun mark_selectrun_complete_and_return_thread (selectrun_status as REF (itt::SELECTRUN_IS_BLOCKED thread_id))
		=>
		{   selectrun_status :=   itt::SELECTRUN_IS_COMPLETE;
		    #
		    thread_id;
		};

	    mark_selectrun_complete_and_return_thread  (REF (itt::SELECTRUN_IS_COMPLETE))
		=>
		raise exception FAIL "Compiler bug:  Attempt to cancel already-cancelled transaction-id";			# Never happens; here to suppress 'nonexhaustive match' compile warning.
	end;


	# Bump a priority value by one,
	# returning the old value:
	#
	fun bump_priority (p as REF n)
	    =
	    {   p := n+1;
		n;
	    };

	Qy_Item X
	  = NO_ITEM
	  | ITEM  ((Ref(itt::Selectrun_Status), Fate(X)) )
	  ;

	# Functions to clean channel input and output queues 
	#
	stipulate

	    fun clean ((REF itt::SELECTRUN_IS_COMPLETE, _)  !  rest)
		    =>
		    clean rest;

		clean l => l;
	    end;

	    fun clean_rev ([], l)
		    =>
		    l;

		clean_rev ((REF itt::SELECTRUN_IS_COMPLETE, _) ! rest,  l)
		    =>
		    clean_rev (rest,  l);

		clean_rev (x ! rest,  l)
		    =>
		    clean_rev (rest,  x ! l);
	    end;

	herein

	    fun clean_and_check (priority, rwq::RW_QUEUE { front, back } )
		=
		clean_front  *front
		where
		    fun clean_front [] =>   clean_back  *back;
			#
			clean_front f
			    =>
			    case (clean f)
				#
				[] =>   clean_back  *back;

				f' =>   {   front :=  f';
					    #
					    bump_priority  priority;
				        };
			    esac;
		    end

		    also
		    fun clean_back [] =>   0;
			#
			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))
				    #
				    [] =>   0;

				    rr =>   {   front :=  rr;
						#
						bump_priority  priority;
					    };
				esac;
			    };
		    end;
		end;

	    fun clean_and_remove (rwq::RW_QUEUE { front, back, ... } )
		=
		clean_front  *front
		where
		    fun clean_front [] =>   clean_back *back;
			#
			clean_front f
			    =>
			    case (clean f)
				#
				[] =>               clean_back  *back;

				(item ! rest) =>    {   front :=  rest;
							#
						        ITEM  item;
						    };
			    esac;

		    end

		    also
		    fun clean_back [] =>   NO_ITEM;
			#
			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))
				    #
				    [] =>  NO_ITEM;

				    item ! rest
					=>
					{   front :=  rest;
					    #
					    ITEM  item;
					};
				esac;
			    };
		    end;
		end;

	    fun clean_and_enqueue (rwq::RW_QUEUE { front, back, ... }, item)
		=
		clean_front  *front
		where
		    fun clean_front [] =>    clean_back  *back;
			#
			clean_front f
			    =>
			    case (clean f)
				#
				[] =>   clean_back  *back;

				f' =>   {   front :=  f';
					    #
					    back :=  item ! *back;
				        };
			    esac;
		    end

		    also
		    fun clean_back [] =>   front :=  [ item ];
			#
			clean_back r
			    =>
			    case (clean_rev (r, []))
				#
				[] => {  front := [item];  back  := []; };
				rr => {  back  := [item];  front := rr; };
			    esac;
		    end;
		end;
	end;					# stipulate


	# When a thread is resumed after being blocked
	# on an oneshot get() or maildrop empty() operation
	# there may be other threads also blocked on the variable.
	#
	# This function is used to propagate the message
	# to all of the threads that are blocked on the
	# variable (or until one of them takes the value
	# in the maildropr case).
	#
	# It must be called from an uninterruptable scope.
	# When the read_q is finally empty we end
	# the auninterruptable scope.
	#
	# We must use "clean_and_remove" to get items
	# from the read_q in the unlikely event that
	# a single thread executes a choice of
	# multiple gets on the same variable.
	#
	fun relay_msg (read_q, msg)
	    =
	    case (clean_and_remove read_q)
		#
		NO_ITEM =>   ts::reenable_thread_switching ();
		#
		ITEM (selectrun_status, fate)
		    =>
		    call_with_current_fate
			(fn my_fate
			    =
			    {   ts::run_thread   (mark_selectrun_complete_and_return_thread  selectrun_status,   my_fate);
				#
				switch_to_fate  fate  msg;						# 
			    }
			);
	    esac;


	# I-variables
	#
	make_oneshot_maildrop =  new_cell;
	same_oneshot_maildrop =  same_cell;

	fun set (CELL { priority, read_q, value }, oneshot_value)
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #
		    NULL => {   value := THE oneshot_value;
				#
				case (clean_and_remove  read_q)
				    #
				    NO_ITEM =>   ts::reenable_thread_switching ();
				    #
				    ITEM (selectrun_status, fate)
					=>
					call_with_current_fate
					    (
					     fn my_fate
						=
						{   ts::run_thread   (mark_selectrun_complete_and_return_thread   selectrun_status,   my_fate);
						    #
						    priority := 1;

						    switch_to_fate  fate  oneshot_value;								# 
						}
					    );
				esac;
			    };

		    THE _ =>
			{   ts::reenable_thread_switching ();
			    #
			    raise exception  MAY_NOT_FILL_ALREADY_FULL_ONESHOT_MAILDROP;
			};
		esac;
	    };

	fun get (CELL { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #	      
		    NULL =>     {   msg =   call_with_current_fate
						(fn fate
						    =
						    {   rwq::push_item_into_back_of_queue (read_q, (make_transaction_id(), fate));
							#
							ts::reenable_thread_switching_and_dispatch_next_thread ();
						    }
						);

				    relay_msg (read_q, msg);

				    msg;
				};

		    THE v =>    {   ts::reenable_thread_switching ();
				    v;
				};
	       esac;
	    };

	fun get' (CELL { priority, read_q, value } )
	    =
	    itt::ISREADY_MAILOPS [is_mailop_ready_to_fire]
	    where
		fun start_watching_for_mailop_ready_to_fire					# Reppy refers to 'start_watching_for_mailop_ready_to_fire' as 'blockFn'.
		      {
			selectrun_status,
			finish_selectrun,								# Do any required end-of-selectrun work such as  selectrun_status := SELECTRUN_IS_COMPLETE;  and sending nacks as appropriate.
			next
		      }
		    =
		    # This fn gets used in
		    #
		    #     src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
		    #
		    # when a
		    #
		    #     select [ ... ]
		    #
		    # call has no mailops ready to fire.  'select' must then block until
		    # at least one mailop is ready to fire.  It does this by calling the
		    #
		    #     start_watching_for_mailop_ready_to_fire ()
		    #
		    # fn on each mailop in the list; each such call will typically
		    # make an entry in one or more queues of blocked threads.
		    #
		    # The first mailop to fire cancels the rest by setting
		    #
		    #     selectrun_status :=  SELECTRUN_IS_COMPLETE;
		    #
		    {
			(call_with_current_fate
			    (fn fate
				=
				{   rwq::push_item_into_back_of_queue
				      ( read_q,
					(selectrun_status,  fate)
				      );

				    next ();

				    raise exception FAIL "maildrop: impossible";				# Execution should never get to here.
				}
			    )
			)
			    -> oneshot_value;									# Execution will pick up here when set() (above) eventually does:   switch_to_fate  fate  oneshot_value;

			finish_selectrun ();									# Keep any other mailops in the current select[...] from executing.

			relay_msg (read_q, oneshot_value);							# relay_msg() takes care of   ts::reenable_thread_switching ();   for us.

			oneshot_value;
		    };

		fun is_mailop_ready_to_fire ()									# Reppy refers to 'is_mailop_ready_to_fire' as 'pollFn'.
		    =
		    case *value
			#
			NULL  =>    itt::MAILOP_IS_NOT_READY_TO_FIRE  start_watching_for_mailop_ready_to_fire;
			#
			THE v =>    itt::MAILOP_IS_READY_TO_FIRE
				      {
					priority    =>  bump_priority  priority,
					#
					fire_mailop => .{   priority := 1;					# Reppy refers to 'fire_mailop' as 'doFn'.
							    ts::reenable_thread_switching ();
							    v;
							}

				      };
		   esac;
	    end;

	fun nonblocking_get (CELL { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #
		    THE v =>    {   ts::reenable_thread_switching ();
				    #
				    THE v;
				};

		    NULL  =>  NULL;
		esac;
	    };

    };						# package maildrop1 
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


