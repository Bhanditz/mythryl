## safe-maildrop.api
#
# Just like   src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.api
# except that we use separate handles for
# read and write, so that we can hand out
# read handles for publication purposes without
# worrying about some broken client doingw writes.
#
# See also:
#
#     src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.api
#     src/lib/src/lib/thread-kit/src/core-thread-kit/oneshot-maildrop.api

# Compiled by:
#     src/lib/std/standard.lib





stipulate
    package mop =  mailop;								# mailop	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/src/lib/thread-kit/src/core-thread-kit/safe-maildrop.pkg
    #
    api Safe_Maildrop {
	#
	Rw_Maildrop(X);
	Maildrop(X);

	exception  MAY_NOT_FILL_ALREADY_FULL_MAILDROP;

	make_empty_maildrop:    	Void -> Rw_Maildrop(X);				# 
	make_maildrop:			X    -> Rw_Maildrop(X);				# 

	maildrop_from_rw_maildrop:	Rw_Maildrop(X) -> Maildrop(X);			# This is the only new fn.

	put_in_maildrop:		(Rw_Maildrop(X), X) -> Void;
	get_from_maildrop:		Maildrop(X) -> X;

	get_from_maildrop':		Maildrop(X) -> mop::Mailop(X);

	nonblocking_get_from_maildrop:	Maildrop(X) -> Null_Or(X);			# 

	peek_in_maildrop:		Maildrop(X) -> X;
	peek_in_maildrop':		Maildrop(X) -> mop::Mailop(X);

	nonblocking_peek_in_maildrop:	Maildrop(X) -> Null_Or(X);			# 

	maildrop_swap:			(Rw_Maildrop(X), X) -> X;
	maildrop_swap':			(Rw_Maildrop(X), X) -> mop::Mailop(X);

	same_maildrop:			(Maildrop(X), Maildrop(X)) -> Bool;
    };
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
