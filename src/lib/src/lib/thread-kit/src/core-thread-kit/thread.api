## thread.api

# Compiled by:
#     src/lib/std/standard.lib

stipulate
    package mop =  mailop;							# mailop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
herein

    # This api is implemented in:
    #     src/lib/src/lib/thread-kit/src/core-thread-kit/thread.pkg

    api Thread {
	#
	exception THREAD_SCHEDULER_NOT_RUNNING;

	Thread_State;

	get_current_thread:         Void -> Thread_State;
	get_current_thread's_name:  Void -> String;
	get_current_thread's_id:    Void -> Int;

	same_thread:     (Thread_State, Thread_State) -> Bool;
	compare_thread:  (Thread_State, Thread_State) -> Order;
	hash_thread:      Thread_State -> Unt;

	thread_to_string:  Thread_State -> String;		# "003141" or such.
	thread_to_name:    Thread_State -> String;

	#              Name      Thread body            Result
	#              ------    ------------------     ---------
	make_thread:   String -> (Void -> Void)      -> Thread_State;
	make_thread':  String -> (X    -> Void) -> X -> Thread_State;

	thread_done:  Void -> X;

	thread_death_mailop:  Thread_State -> mop::Mailop( Void );

	yield:  Void -> Void;	#  mostly for benchmarking 


	# Thread-local data support:

	make_per_thread_property
	    :
	    (Void -> X)
	    ->
	    { clear:  Void -> Void,			# Clear current thread's property. 

	      get:    Void -> X,			# Get current thread's property;
							# If the property is not defined
							# then set it using the initialization 
							# function. 

	      peek:  Void -> Null_Or(X),		# Return the property's value, if any. 

	      set:   X -> Void				# Set the property's value for the current thread. 
	    };

	make_boolean_per_thread_property
	    :
	    Void
	    ->
	    { get:  Void -> Bool,
	      set:  Bool -> Void
	    };

    };
end;


## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
