## binarytree-ximp.pkg
#
# This file is intended purely for clone-and-mutate
# construction of new X imps ("ximps").
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/test/unit-tests.lib





stipulate
    include threadkit;													# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package btp =  binarytree_port;											# binarytree_port			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/binarytree-port.pkg
herein


    package   binarytree_ximp
    : (weak)  Binarytree_Ximp												# Binarytree_Ximp			is from   src/lib/x-kit/xclient/src/wire/binarytree-ximp.api
    {
	include binarytree_port;											# binarytree_ximp_clientport		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/binarytree-ximp-clientport.pkg
	#
	Binarytree_Ximp_State = Ref( Int );										# Opaque wrapper for all nonephemeral mutable state maintained by ximp.

	Clientplea  =  SET_STATE Int
		    |  PASS_SUBTREE_SUM Oneshot_Maildrop( Int )
		    ;
	Clientq     = Mailqueue( Clientplea );

	Imports = {  leftkid:  Null_Or( btp::Binarytree_Port ),
                    rightkid:  Null_Or( btp::Binarytree_Port )
		};

	Configstate = Mailslot ( { imports: 	Imports,
				  me:		Binarytree_Ximp_State,
				  run_gun':	Run_Gun,
				  end_gun':	End_Gun
				}
			      );

	Exports	= { binarytree_port:	btp::Binarytree_Port
		  };


	fun run {													# These values will be statically globally visible throughout the code body for the imp.
		  me:			Binarytree_Ximp_State,								# State which is preserved across imp shutdown/restart cycles.
		  imports:		Imports,									# Ximps to which we send requests.
		  to:			Replyqueue,									# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		  end_gun':		End_Gun,									# We shut down the microthread when this fires.
		  clientq:		Clientq										# 
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (end_gun'                         ==>  shut_down_binarytree_imp'),
			    (take_from_mailqueue' clientq     ==>  do_clientplea)
			];

			loop ();
		    }	
		    where
			fun shut_down_binarytree_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.
			    };

			fun do_clientplea  (SET_STATE i)
			        =>
				me := i;

			    do_clientplea  (PASS_SUBTREE_SUM reply_oneshot)
				=>
				case imports.leftkid
				    #
				    THE leftkid =>  leftkid.pass_subtree_sum to .{
							#
							sum =  *me  +  #subtree_sum;

							case imports.rightkid
							    #
							    THE rightkid => rightkid.pass_subtree_sum to .{
										#
										put_in_oneshot (reply_oneshot, sum + #subtree_sum);
									    };


							    NULL    =>  put_in_oneshot (reply_oneshot, sum);
							esac;
						    };

				    NULL    =>  case imports.rightkid
						    #
						    THE rightkid => rightkid.pass_subtree_sum to .{
									#
									put_in_oneshot (reply_oneshot, *me + #subtree_sum);
								    };

						    NULL    =>  put_in_oneshot (reply_oneshot, *me);
						esac;
				esac;
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( (Configstate, Exports) ))   ()					# Root fn of imp microthread.  Note currying -- second arg is provided by make_thread.
	    =
	    {   configstate =  make_mailslot  ()	:  Configstate;

		binarytree_port  = { set_state, pass_subtree_sum, get_subtree_sum };

		to         =  make_replyqueue();

		put_in_oneshot (reply_oneshot, (configstate, { binarytree_port }));					# Return value from make_binarytree_ximp().

		(take_from_mailslot  configstate)									# Input args from configure_binarytree_ximp().
		    ->
		    { me, imports, run_gun', end_gun' };

		block_until_mailop_fires  run_gun';									# Wait for the starting gun.

		run { me, clientq, imports, to, end_gun' };								# Will not return.
	    }
	    where
		clientq =  make_mailqueue (get_current_microthread())	:  Clientq;

		fun set_state (i: Int)											# External entrypoint.
		    =	
		    put_in_mailqueue  (clientq, SET_STATE i);


		fun pass_subtree_sum  (replyqueue: Replyqueue)  (reply_handler: Int -> Void)				# External entrypoint.
		    =
		    {
			reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (clientq, PASS_SUBTREE_SUM reply_oneshot);

			put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
		    };

		fun get_subtree_sum  ()											# External entrypoint.
		    =
		    {   reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
			#
			put_in_mailqueue  (clientq, PASS_SUBTREE_SUM reply_oneshot);

			get_from_oneshot reply_oneshot;
		    };
	    end;


        ##########################################################################################
	# External entrypoints
	#
	fun make_binarytree_ximp_state i										# External entrypoint.
	    =
	    REF i;

	fun make_binarytree_ximp  (name: String)									# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop();
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried -- second arg is provided by make_thread.

		get_from_oneshot  reply_oneshot;
	    };

	fun configure_binarytree_ximp											# External entrypoint.
	      (
		configstate:	Configstate,
		me:		Binarytree_Ximp_State,
		imports:	Imports,
		run_gun':	Run_Gun,
		end_gun':	End_Gun
	      )
	    =
	    put_in_mailslot  (configstate, { me, imports, run_gun', end_gun' });


	fun clientport_to_mailqueue x = x;										# For debugging

    };															# package binarytree_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
