## binarytree-ximp.pkg
#
# This file is intended purely for clone-and-mutate
# construction of new X imps ("ximps").
#
# For the big picture see the imp dataflow diagram in
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/test/unit-tests.lib





stipulate
    include threadkit;													# threadkit				is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein


    package   binarytree_ximp
    : (weak)  Binarytree_Ximp												# Binarytree_Ximp			is from   src/lib/x-kit/xclient/src/wire/binarytree-ximp.api
    {
	Starting_Gun = Mailop(Void);											# Purely for readability.
	#
	Binarytree_Ximp_State = Ref( Int );										# Opaque wrapper for all nonephemeral mutable state maintained by ximp.

	Patronplea  =  STOP
		    ;
	Patronport = Mailslot( Patronplea );


	Clientplea  =  SET_STATE Int
		    |  PASS_SUBTREE_SUM Oneshot_Maildrop( Int )
		    ;
	Clientport = Mailqueue( Clientplea );

	Links = {  leftkid:  Null_Or(Clientport),
                  rightkid:  Null_Or(Clientport)
		};

	Configport = Mailslot ( { links: 	    Links,
				  me:		    Binarytree_Ximp_State,
				  starting_gun':    Starting_Gun
				}
			      );

	Ports	= { configport:		Configport,
		    clientport:		Clientport,
		    patronport:		Patronport,
		    replyqueue: 	Replyqueue(Void)								# Strictly for debugging.
		  };


	fun pass_subtree_sum  (mailqueue: Clientport)  (replyqueue: Replyqueue(Void))  (reply_handler: Int -> Void)	# External entrypoint.
	    =
	    {
log::note_on_stderr .{ sprintf "%s\tpass_subtree_sum/AAA" (log::debug_statestring()); };
		reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
		#
log::note_on_stderr .{ sprintf "%s\tpass_subtree_sum/BBB" (log::debug_statestring()); };
		put_in_mailqueue  (mailqueue, PASS_SUBTREE_SUM reply_oneshot);

log::note_on_stderr .{ sprintf "%s\tpass_subtree_sum/CCC" (log::debug_statestring()); };
result =
		put_in_replyqueue (replyqueue, (get_from_oneshot' reply_oneshot) ==> reply_handler);
log::note_on_stderr .{ sprintf "%s\tpass_subtree_sum/ZZZ" (log::debug_statestring()); };
result;
	    };

	fun get_subtree_sum  (mailqueue: Clientport)									# External entrypoint.
	    =
	    {
log::debugging := TRUE;
log::note_on_stderr .{ sprintf "%s\tget_subtree_sum/AAA"  (log::debug_statestring()); };
		reply_oneshot =  make_oneshot_maildrop():  Oneshot_Maildrop( Int );
		#
log::note_on_stderr .{ sprintf "%s\tget_subtree_sum/BBB"  (log::debug_statestring()); };
		put_in_mailqueue  (mailqueue, PASS_SUBTREE_SUM reply_oneshot);

log::note_on_stderr .{ sprintf "%s\tget_subtree_sum/CCC"  (log::debug_statestring()); };
result =
		get_from_oneshot reply_oneshot;
log::note_on_stderr .{ sprintf "%s\tget_subtree_sum/ZZZ"  (log::debug_statestring()); };
result;
	    };


	fun run {   me:			Binarytree_Ximp_State,								# These four values will be statically globally visible
		    patronport:		Patronport,									# throughout the code body for the imp.
		    clientport:		Clientport,
		    links:		Links,
		    to:			Replyqueue(Void)								# The name makes   foo::pass_something(imp) to .{ ... }   syntax read well.
		}
	    =
	    loop ()
	    where
		fun loop ()												# Outer loop for the imp.
		    =
		    {   do_one_mailop' to [
			    #
			    (take_from_mailslot'  patronport  ==>  do_patronplea),
			    (take_from_mailqueue' clientport  ==>  do_clientplea)
			];

			loop ();
		    }	
		    where
			fun shut_down_binarytree_imp' ()
			    =
			    {
				thread_exit { success => TRUE };							# Will not return.	
			    };

			fun do_patronplea  STOP
			    =
			    shut_down_binarytree_imp' ();								# Will not return.	

			fun do_clientplea  (SET_STATE i)
			        =>
				me := i;

			    do_clientplea  (PASS_SUBTREE_SUM reply_oneshot)
				=>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/AAA"; };
				case links.leftkid
				    #
				    THE leftkid =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/THE leftkid"; };
						    pass_subtree_sum(leftkid) to .{
							#
							sum =  *me  +  #subtree_sum;

							case links.rightkid
							    #
							    THE rightkid =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/THE leftkid/THE rightkid"; };
									    pass_subtree_sum(rightkid) to .{
										#
log::note_on_stderr .{ "PASS_SUBTREE_SUM/THE leftkid/THE rightkid/thunk"; };
										put_in_oneshot (reply_oneshot, sum + #subtree_sum);
									    };
};


							    NULL    =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/THE leftkid/NULL"; };
									put_in_oneshot (reply_oneshot, sum);
};
							esac;
						    };
};

				    NULL    =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/NULL"; };
						case links.rightkid
						    #
						    THE rightkid =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/NULL/THE rightkid"; };
								    pass_subtree_sum(rightkid) to .{
									#
log::note_on_stderr .{ "PASS_SUBTREE_SUM/NULL/THE rightkid/thunk"; };
									put_in_oneshot (reply_oneshot, *me + #subtree_sum);
								    };
};

						    NULL    =>
{
log::note_on_stderr .{ "PASS_SUBTREE_SUM/NULL/NULL"; };
								put_in_oneshot (reply_oneshot, *me);
};
						esac;
};
				esac;
log::note_on_stderr .{ "PASS_SUBTREE_SUM/ZZZ"; };
};
			end;
		    end;
	    end;	



	fun startup   (reply_oneshot:  Oneshot_Maildrop( Ports ))   ()							# Root fn of imp microthread.  Note currying -- second arg is provided by make_thread.
	    =
	    {   configport =  make_mailslot  ()					:  Configport;
		patronport =  make_mailslot  ()					:  Patronport;
		clientport =  make_mailqueue (get_current_microthread())	:  Clientport;

		to         =  make_replyqueue();

log::note_on_stderr .{ sprintf "%s\tbinarytree-ximp.pkg: startup/AAA: calling put_in_oneshot (reply_oneshot...)"  (log::debug_statestring()); };
		put_in_oneshot (reply_oneshot, { configport, patronport, clientport, replyqueue => to });		# Return value from make_binarytree_ximp().

log::note_on_stderr .{ sprintf "%s\tbinarytree-ximp.pkg: startup/BBB: reading from configport..."  (log::debug_statestring()); };
		(take_from_mailslot  configport)									# Input args from configure_binarytree_ximp().
		    ->
		    { me, links, starting_gun' };

log::note_on_stderr .{ sprintf "%s\tbinarytree-ximp.pkg: startup/CCC: blocking on starting_gun'..."  (log::debug_statestring()); };
		block_until_mailop_fires  starting_gun';								# Wait for the starting gun.
log::note_on_stderr .{ sprintf "%s\tbinarytree-ximp.pkg: startup/ZZZ: done blocking on starting_gun' calling run{}."  (log::debug_statestring()); };

		run { me, patronport, clientport, links, to };								# Will not return.
	    };


        ##########################################################################################
	# External entrypoints
	#
	fun make_binarytree_ximp_state i										# External entrypoint.
	    =
	    REF i;

	fun make_binarytree_ximp  (name: String)									# External entrypoint.
	    =
	    {   reply_oneshot = make_oneshot_maildrop();
		#
		xlogger::make_thread  name  (startup  reply_oneshot);							# Note that startup() is curried -- second arg is provided by make_thread.

		get_from_oneshot  reply_oneshot;
	    };

	fun configure_binarytree_ximp											# External entrypoint.
	      (
		configport:	Configport,
		me:		Binarytree_Ximp_State,
		links:		Links,
		starting_gun':	Starting_Gun
	      )
	    =
	    put_in_mailslot  (configport, { me, links, starting_gun' });

	fun set_state (args as (mailqueue: Clientport,  i: Int))							# External entrypoint.
	    =	
	    put_in_mailqueue  (mailqueue, SET_STATE i);


	fun shut_down_binarytree_ximp  (patronport: Patronport)								# External entrypoint.
	    =
	    put_in_mailslot  (patronport,  STOP);

	fun clientport_to_mailqueue x = x;										# For debugging

    };															# package binarytree_ximp
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
