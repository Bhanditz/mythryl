## maildrop.pkg
#
# The implementation of Id-style synchronizing memory cells.
# These are essentially concurrency-safe replacements for REF cells.

# Compiled by:
#     src/lib/std/standard.lib






###          "We're fools whether we dance or not,
###           so we might as well dance."
###
###                   -- Japanese proverb



stipulate
    package fat =  fate;			# fate				is from   src/lib/std/src/nj/fate.pkg
    package itt =  internal_threadkit_types;	# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg
    package rwq =  rw_queue;			# rw_queue			is from   src/lib/src/rw-queue.pkg
    package ts  =  thread_scheduler;		# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    #
    call_with_current_fate =  fat::call_with_current_fate;
    switch_to_fate         =  fat::switch_to_fate;
herein

    package   maildrop
    :         Maildrop				# Maildrop			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.api
    {
	exception MAY_NOT_FILL_ALREADY_FULL_MAILDROP;
	#
	Fate(X) =   fat::Fate(X);
	#
	Maildrop(X) =   MAILDROP
			  {
			    priority:  Ref( Int ),
			    read_q:    rwq::Rw_Queue( (Ref( itt::Mailop_Done ), Fate(X)) ),
			    value:     Ref(  Null_Or(X) )
			  };


	fun make_cell ()
	    =
	    MAILDROP  { priority =>  REF 0,
			value    =>  REF NULL,
			read_q   =>  rwq::make_rw_queue ()
		      };

	fun same_cell ( MAILDROP { value => v1, ... },
			MAILDROP { value => v2, ... }
		      )
	    =
	    v1 == v2;

	fun make_transaction_id ()
	    =
	    REF (itt::MAILOP_PENDING_FOR (ts::get_current_thread()));


	fun cancel_transaction_and_return_thread_id  (mailop_done  as  REF  (itt::MAILOP_PENDING_FOR  thread_id))
		=>
		{   mailop_done :=   itt::MAILOP_DONE;
		    #
		    thread_id;
		};

	    cancel_transaction_and_return_thread_id  (REF (itt::MAILOP_DONE))
		=>
		raise exception FAIL "Compiler bug:  Attempt to cancel already-cancelled transaction-id";			# Never happens; here to suppress 'nonexhaustive match' compile warning.
	end;


	fun bump_priority (p as REF n)										# Bump a priority value by one, returning the old value.
	    =
	    {   p := n+1;
		n;
	    };


	Qy_Item(X)
	  #
	  = NO_ITEM
	  | ITEM  ((Ref itt::Mailop_Done,  Fate(X)))
	  ;

	# Functions to clean channel input and output queues 
	#
	stipulate

	    fun clean ((REF itt::MAILOP_DONE, _) ! rest)				# Drop any cancelled transactions at start of list.
		    =>
		    clean rest;

		clean l  =>  l;
	    end;

	    fun clean_rev ([], result)								# Drop all cancelled transactions from list; result is in reverse order.
		    =>
		    result;

		clean_rev ((REF itt::MAILOP_DONE, _) ! rest,  result)
		    =>
		    clean_rev (rest, result);

		clean_rev (x ! rest,  result)
		    =>
		    clean_rev (rest, x ! result);
	    end;

	herein

	    fun clean_and_check (priority, rwq::RW_QUEUE { front, back } )
		=
		clean_front *front
		where
		    fun clean_front []
			    =>
			    clean_back *back;

			clean_front f
			    =>
			    case (clean f)
				#
				[] =>   clean_back  *back;

				f' =>   {   front :=  f';
					    #
					    bump_priority  priority;
				        };
			    esac;
		    end

		    also
		    fun clean_back []
			    =>
			    0;

			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))
				    #
				    [] =>   0;

				    rr =>   {   front :=  rr;
						#
						bump_priority  priority;
					    };
				esac;
			    };
		    end;
		end;


	    fun clean_and_remove (rwq::RW_QUEUE { front, back, ... } )
		=
		clean_front *front
		where
		    fun clean_front [] =>   clean_back  *back;
			#
			clean_front f
			    =>
			    case (clean f)
				#
				[]            =>    clean_back  *back;

				(item ! rest) =>    {   front :=  rest;
							#
							ITEM  item;
						    };
			    esac;
		    end

		    also
		    fun clean_back [] =>   NO_ITEM;
			#
			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))
				    #
				    [] => NO_ITEM;

				    item ! rest
					=>
					{   front :=  rest;
					    #
					    ITEM item;
					};
				esac;
			    };
		    end;
		end;

	    fun clean_and_enqueue (rwq::RW_QUEUE { front, back, ... }, item)
		=
		clean_front  *front
		where
		    fun clean_front [] =>   clean_back  *back;
			#
			clean_front f
			    =>
			    case (clean f)
				#
				[] =>   clean_back *back;

				f' =>   {   front := f';
					    #
					    back  := item ! *back;
				        };
			    esac;
		    end

		    also
		    fun clean_back []
			    =>
			    front := [item];

			clean_back r
			    =>
			    case (clean_rev (r, []))
				#
				[] => {  front := [item];  back  := []; };
				rr => {  back  := [item];  front := rr; };
			    esac;
		    end;
		end;
	end;					# stipulate


	# When a thread is resumed after being blocked
	# on a maildrop or oneshot_maildrop op there may
	# be other threads also blocked on the variable.
	#
	# This function is used to propagate the message
	# to all of the threads that are blocked on the
	# variable (or until one of them takes the value
	# in the mvar case).
	#
	# It must be called from an atomic region.
	# When the readQ is finally empty we leave
	# the atomic region.
	#
	# We must use "clean_and_remove" to get items
	# from the readQ in the unlikely event that
	# a single thread executes a choice of
	# multiple gets on the same variable.
	#
	fun relay_msg (read_q, msg)
	    =
	    case (clean_and_remove  read_q)
		#
		NO_ITEM =>   ts::reenable_thread_switching ();

		ITEM (mailop_done, fate)
		    =>
		    call_with_current_fate
			(fn my_fate
			    =
			    {   ts::run_thread  (cancel_transaction_and_return_thread_id  mailop_done,   my_fate);
				#
				switch_to_fate  fate  msg;									# 
			    }
			);
	    esac;

	fun impossible ()
	    =
	    raise exception  FAIL "maildrop: impossible";


	# M-variables:
	#
	make_empty_maildrop
	    =
	    make_cell;


	fun make_full_maildrop  x
	    =
	    MAILDROP { priority =>  REF 0,
		       read_q   =>  rwq::make_rw_queue (),
		       value    =>  REF (THE x)
		     };

	same_maildrop =  same_cell;


	fun fill (MAILDROP { priority, read_q, value }, x)
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #
		    NULL =>
			{   value := THE x;
			    #
			    case (clean_and_remove read_q)
				#
				NO_ITEM =>   ts::reenable_thread_switching ();

				ITEM (mailop_done, fate)
				    =>
				    call_with_current_fate
					(fn my_fate
					    =
					    {   ts::run_thread   (cancel_transaction_and_return_thread_id mailop_done,   my_fate);
						#
						priority := 1;

						switch_to_fate  fate  x;									# 
					    }
					);
			    esac;
			};

		    THE _ =>
			{   ts::reenable_thread_switching ();
			    #
			    raise exception MAY_NOT_FILL_ALREADY_FULL_MAILDROP;
			};
		esac;
	    };


	fun empty' (MAILDROP { priority, read_q, value } )
	    =
	    {   fun wait_for { mailop_done, clean_up, next }				# Reppy calls this fn blockFn
		    =
		    {   v = call_with_current_fate
				(fn fate
				    =
				    {   rwq::push_item_into_back_of_queue (read_q, (mailop_done, fate));
					next ();
					impossible ();
				    }
				);

			clean_up ();
			value := NULL;
			ts::reenable_thread_switching ();
			v;
		    };

		fun is_ready ()								# Reppy calls this fn pollFn
		    =
		    case *value
			#
			NULL  =>    itt::MAILOP_UNREADY  wait_for;
			#
			THE v =>    itt::MAILOP_READY
				      {
					priority  	    =>   bump_priority priority,

					fire_select_rule    => .{   value := NULL;				# Reppy refers to 'fire_select_rule' as 'doFn'.
								    ts::reenable_thread_switching ();
								    v;
								}
				      };
		    esac;


		itt::ISREADY_MAILOPS [is_ready];
	    };


	fun nonblocking_empty (MAILDROP { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching();
		#
		case *value
		    #
		    THE v =>    {   value := NULL;
				    ts::reenable_thread_switching ();
				    THE v;
				};

		    NULL =>     NULL;
		esac;
	    };


	fun empty (MAILDROP { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching();
		#
		case *value
		    #
		    NULL =>
			{   v = call_with_current_fate
				    (fn fate
					=
					{   rwq::push_item_into_back_of_queue (read_q, (make_transaction_id(), fate));
					    #
					    ts::reenable_thread_switching_and_dispatch_next_thread ();
					}
				    );

			    value := NULL;
			    ts::reenable_thread_switching ();
			    v;
			};

		    THE v =>
			{   value := NULL;
			    ts::reenable_thread_switching ();
			    v;
			};
		esac;
	    };


	fun peek (MAILDROP { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #
		    NULL =>     {   v =  call_with_current_fate
					    (fn fate
						=
						{   rwq::push_item_into_back_of_queue (read_q, (make_transaction_id(), fate));
						    #
						    ts::reenable_thread_switching_and_dispatch_next_thread ();
						}
					    );

				    relay_msg (read_q, v);

				    v;
				};

		    THE v =>    {   ts::reenable_thread_switching ();
				    v;
				};
		esac;
	    };


	fun peek' (MAILDROP { priority, read_q, value } )
	    =
	    {
		fun wait_for { mailop_done, clean_up, next }							# Reppy refers to 'wait_for' as 'blockFn'.
		    =
		    {   v = call_with_current_fate
				(fn fate
				    =
				    {   rwq::push_item_into_back_of_queue (read_q, (mailop_done, fate));
					next ();
					impossible ();
				    }
				);

			clean_up();
			relay_msg (read_q, v);
			v;
		    };

		fun is_ready ()											# Reppy refers to 'is_ready' as 'pollFn'.
		    =
		    case *value
			#	        
			NULL  =>    itt::MAILOP_UNREADY  wait_for;
			#
			THE v =>    itt::MAILOP_READY
				      {
					priority	    =>   bump_priority priority,
					#
					fire_select_rule    => .{   ts::reenable_thread_switching ();		# Reppy refers to 'fire_select_rule' as 'doFn'.
								    v;
								}
				      };
		    esac;

		itt::ISREADY_MAILOPS [is_ready];
	    };


	fun nonblocking_peek (MAILDROP { priority, read_q, value } )
	    =
	    {   ts::disable_thread_switching ();
		#
		case *value
		    #
		    THE v =>    {   ts::reenable_thread_switching ();
				    #
				    THE v;
				};

		    NULL =>     NULL;
		esac;
	    };


	# Swap the current contents of the cell with a new value.
	#
	# This function has the effect of an
	# get_mail followed by a put_mail,
	# except that it is guaranteed to be atomic.
	#
	# It is also somewhat more efficient.
	#
	fun swap (MAILDROP { priority, read_q, value }, new_v)
	    =
	    {   ts::disable_thread_switching ();

		case *value
		    #
		    NULL =>     {   v = call_with_current_fate
					    (fn fate
						=
						{   rwq::push_item_into_back_of_queue (read_q, (make_transaction_id(), fate));
						    #
						    ts::reenable_thread_switching_and_dispatch_next_thread ();
						}
					    );

				    value :=  THE new_v;

				    relay_msg  (read_q,  new_v);					# Relay the new value to any other blocked threads.

				    v;
				};

		    THE v =>    {   value := THE new_v;
				    ts::reenable_thread_switching ();
				    v;
				};
		esac;
	    };


	fun swap' (MAILDROP { priority, read_q, value }, new_v)
	    =
	    itt::ISREADY_MAILOPS [ is_ready ]
	    where
		fun wait_for { mailop_done, clean_up, next }						# Reppy refers to 'wait_for' as 'blockFn'.
		    =
		    {   v = call_with_current_fate
				(fn fate
				    =
				    {   rwq::push_item_into_back_of_queue (read_q, (mailop_done, fate));
					next ();
					impossible();
				    }
				);

			clean_up ();
			value := THE new_v;
			relay_msg (read_q, new_v);
			v;
		    };

		fun is_ready ()
		    =
		    case *value
			#
			NULL  =>    itt::MAILOP_UNREADY  wait_for;

			THE v =>    itt::MAILOP_READY
				      {
				        priority	    =>   bump_priority priority,
					#
					fire_select_rule    => .{   value := THE new_v;				# Reppy refers to 'fire_select_rule' as 'doFn'.
								    ts::reenable_thread_switching ();
								    v;
								}
				      };
		    esac;
	    end;

    };						# package maildrop 
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


