## mailop.api
#
# Here we define the core mailop api,
# in particular the 'select' and '==>' fns which are the
# primary client-code interface to the mailop system via
# handle-mail-from-multiple-sources calls looking like
#
#     select [
#         foo' ==> .{ do_this(); },
#         bar' ==> .{ do_that(); }
#     ]; 

# Compiled by:
#     src/lib/std/standard.lib




api Mailop {
    #
    Mailop(X);

    # These are the big two from the client-code perspective:
    #
    select:  List( Mailop(X) ) -> X;					# Given a list of [ foo' ==> do_this, bar' ==> do_that ] rules, pick at most one that is ready to run and run it.
    #
    (==>):         (Mailop(X), X -> Y) -> Mailop(Y);			# Given a mailop and a corresponding action fn, construct a complete   foo' ==> action   rule for use (typically) in a select[...] call.



    ###################################
    # The remaining fns here are used
    # much less often in client code:

    dynamic_mailop:  (        Void   -> Mailop(X) ) -> Mailop(X);	# Dynamically generate rule for a select[...] statement while the select is running.
									# This is used fairly heavily in:   src/lib/std/src/socket/threadkit-socket.pkg

    with_nack:       (Mailop( Void ) -> Mailop(X) ) -> Mailop(X);

    never:   Mailop(X);							# Used to construct 'select' rules which are -never- ready to run.

    always_mailop:  X -> Mailop(X);					# Used to construct 'select' rules which are -always- ready to run.

    make_select_rule:    (Mailop(X), X -> Y) -> Mailop(Y);		# This is just a non-infix synonym for '==>'.

    make_exception_handling_mailop
	:
	(Mailop(X), Exception -> X) -> Mailop(X);

    choose:  List( Mailop(X) ) -> Mailop(X);				# Given a list of select rules, pick one which is ready to run -- but don't run it, just return it.

    do_mailop:     Mailop(X) -> X;					# Run an individual select[...] rule without bothering with a full select [...] statement.
};



## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
