## mailslot.pkg
#
# Mailslots implement synchronous message sends -- both
# threads must be ready before either can proceed.
#
# To ensure that we always leave the atomic region exactly once, we
# require that the blocking operation be responsible for leaving the
# atomic region (in the mailop case, it must also execute the clean-up
# action).  The fire_mailop fn always transfers control to the blocked thread
# without leaving the atomic region.  Note that the give (and give')
# wait_fors run using the receiver's thread state.

# Compiled by:
#     src/lib/std/standard.lib





stipulate
    package fat =  fate;				# fate				is from   src/lib/std/src/nj/fate.pkg
    package mop =  mailop;				# mailop			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
    package rwq =  rw_queue;				# rw_queue			is from   src/lib/src/rw-queue.pkg
    package itt =  internal_threadkit_types;		# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg
    package ts  =  thread_scheduler;			# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    package t = thread;					# thread			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread.pkg
    #
    Fate(X) =   fat::Fate(X);
    #
    call_with_current_fate =  fat::call_with_current_fate;
    switch_to_fate         =  fat::switch_to_fate;
herein

    package mailslot: (weak)
    api {

	Mailop(X);

	include Mailslot;				# Mailslot			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailslot.api

	reset_mailslot:  Mailslot(X) -> Void;

    }

    {
	Mailop(X) =  mop::Mailop(X);

	# Some inline functions to improve performance 
	#
	fun enqueue (rwq::RW_QUEUE { back, ... }, x)
	    =
	    back :=  x ! *back;

	Mailslot(X)
	    =
	    MAILSLOT
	      { priority:  Ref( Int ),
		in_q:      rwq::Rw_Queue( (Ref( itt::Mailop_Done ), Fate(X)) ),
		out_q:     rwq::Rw_Queue( (Ref( itt::Mailop_Done ), Fate( (itt::Thread_State, Fate(X)) )) )
	      };

	fun reset_mailslot (MAILSLOT { priority, in_q, out_q } )
	    =
	    {   priority :=  1;
		#
		rwq::clear_queue_to_empty  in_q;
		rwq::clear_queue_to_empty  out_q;
	    };

	fun make_mailslot ()
	    =
	    MAILSLOT
	      { priority => REF 1,
		in_q     => rwq::make_rw_queue (),
		out_q    => rwq::make_rw_queue ()
	      };

	fun same_mailslot							# (Mailslot(X), Mailslot(X)) -> Bool 
	    ( MAILSLOT { in_q=>in1, ... },
	      MAILSLOT { in_q=>in2, ... }
	    )
	    =
	    rwq::same_queue (in1, in2);


	fun make__mailop_done__refcell ()
	    =
	    REF (itt::MAILOP_PENDING_FOR (ts::get_current_thread()) );


	fun end_transaction_and_return_thread_state (mailop_done as REF (itt::MAILOP_PENDING_FOR thread_id))
		=>
		{   mailop_done :=   itt::MAILOP_DONE;
		    #
		    thread_id;
		};

	    end_transaction_and_return_thread_state  (REF (itt::MAILOP_DONE))
		=>
		raise exception FAIL "Compiler bug:  Attempt to cancel already-cancelled transaction-id";			# Never happens; here to suppress 'nonexhaustive match' compile warning.
	end;

	# Given a mailop_done refcell
	# set the current thread
	# to its thread state and
	# mark it complete:
	#
	fun set_current_thread  mailop_done
	    =
	    ts::set_current_thread  (end_transaction_and_return_thread_state  mailop_done);

	Queue_Item(X)
	  = NO_ITEM
	  |    ITEM  (Ref(itt::Mailop_Done), Fate(X))
	  ;

	# Bump a priority value by one,
	# returning the old value:
	#
	fun bump_priority (p as REF n)
	    =
	    {   p := n+1;
		n;
	    };

	# Functions to clean slot input and output queues 
	#
	stipulate

	    fun clean ((REF itt::MAILOP_DONE, _) ! rest)
		    =>
		    clean rest;

		clean l  => l;
	    end;

	    fun clean_rev ((REF itt::MAILOP_DONE, _) ! rest,  l)
		    =>
		    clean_rev (rest, l);

		clean_rev (x ! rest,  l)
		    =>  clean_rev (rest,  x ! l);

		clean_rev ([], l)
		    =>
		    l;
	    end;

	    fun clean_all l
		=
		reverse (clean_rev (l, []), [])
		where
		    fun reverse (x ! r, l)
			    =>
			    reverse (r, x ! l);

			reverse ([], l)
			    =>
			    l;
		    end;
		end;

	herein

	    fun clean_and_check (priority, rwq::RW_QUEUE { front, back } )
		= 
		clean_front  *front
		where
		    fun clean_front []
			    =>
			    clean_back *back;

			clean_front f
			    =>
			    case (clean f)
				#
				[] =>   clean_back  *back;
				#
				f' =>   {   front :=  f';
					    #
					    bump_priority  priority;
				        };
			    esac;
		    end

		    also
		    fun clean_back [] =>   0;
			#
			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))
				    #
				    [] =>   0;
				    #
				    rr =>   {   front :=  rr;
						#
					        bump_priority  priority;
					    };
				esac;
			    };
		    end;
		end;

	    fun clean_and_remove  (rwq::RW_QUEUE  { front,  back,  ...  } )
		=
		clean_front  *front
		where
		    fun clean_front []
			    =>
			    clean_back  *back;

			clean_front f
			    =>
			    case (clean f)
				#
				[]            =>    clean_back  *back;

				(item ! rest) =>    {   front :=  rest;
							#
							ITEM item;
						    };
			   esac;
		    end

		    also
		    fun clean_back [] =>   NO_ITEM;
			#
			clean_back r
			    =>
			    {   back :=  [];
				#
				case (clean_rev (r, []))

				    []  => NO_ITEM;

				    item ! rest
					=>
					{   front := rest;
					    ITEM item;
					};
				 esac;
			    };
		    end;
		end;

	    fun clean_and_enqueue (rwq::RW_QUEUE { front, back, ... }, item)
		=
		case (clean_all *front)
		    #
		    [] =>  {  front := clean_rev(*back, [item]);  back :=  [];                      };
		    f  =>  {  front := f;                         back :=  item ! clean_all *back;  };
		esac;

	end;				# stipulate


	fun impossible ()
	    =
	    raise exception  FAIL "Slot: impossible";


	fun give (MAILSLOT { priority, in_q, out_q }, msg)
	    =
	    {   ts::disable_thread_switching ();
		#
		case (clean_and_remove  in_q)
		    #
		    ITEM (rid, rfate)
			=>
			call_with_current_fate
			    (fn put_fate =  {   ts::run_thread   (end_transaction_and_return_thread_state  rid,    put_fate);
						#
						priority := 1;

						switch_to_fate  rfate  msg;
					    }
			    );

		    NO_ITEM
			=>
			{   my (get_id, get_fate)
				= 
				call_with_current_fate
				    (fn put_fate
					=
					{   enqueue (out_q, (make__mailop_done__refcell(), put_fate));
					    #
					    ts::reenable_thread_switching_and_dispatch_next_thread ();
					}
				    );

			    ts::reenable_thread_switching_and_switch_to_thread
			      (get_id, get_fate, msg);
			};
		esac;
	    };


	fun give' (MAILSLOT { priority, in_q, out_q }, msg)
	    =
	    itt::ISREADY_MAILOPS [is_mailop_ready_to_fire]
	    where
		fun fire_mailop ()								# Reppy refers to 'fire_mailop' as 'doFn'.
		    =
		    {   (the (rwq::pull_item_from_front_of_queue  in_q))
			    ->
			    (mailop_done,  rfate);
			    

			call_with_current_fate
			    (fn put_fate
				=
				{   ts::run_thread   (end_transaction_and_return_thread_state  mailop_done,    put_fate);
				    #
				    priority := 1;

				    switch_to_fate  rfate  msg;					# 
				}
			    );
		    };

		fun wait_for { mailop_done, clean_up, next }					# Reppy calls this fn blockFn
		    =
		    {   my (get_id, get_fate)
			    =
			    call_with_current_fate
				(fn put_fate
				    =
				    {   clean_and_enqueue (out_q, (mailop_done, put_fate));
					next();
					impossible ();						# next() should never return.
				    }
				);

			clean_up();

			ts::reenable_thread_switching_and_switch_to_thread (get_id, get_fate, msg);
		    };

		fun is_mailop_ready_to_fire ()
		    =
		    case (clean_and_check (priority, in_q))
			#
			0        =>  itt::MAILOP_UNREADY wait_for;
			priority =>  itt::MAILOP_READY { priority, fire_mailop };
		    esac;
	    end;

	fun nonblocking_give (MAILSLOT { priority, in_q, out_q }, msg)
	    =
	    call_with_current_fate
		(
		 fn put_fate
		    =
		    {   ts::disable_thread_switching ();
			#
			case (clean_and_remove  in_q)
			    #
			    ITEM (rid, rfate)
				=>
				{   call_with_current_fate
					(
					 fn put_fate
					    =
					    {   ts::run_thread   (end_transaction_and_return_thread_state  rid,   put_fate);
						#
						priority :=  1;

						switch_to_fate  rfate  msg;							# NB: switch_to_fate never returns.
					    }
					);

				    TRUE;
				};

			    NO_ITEM
				=>
				{   ts::reenable_thread_switching ();
				    #
				    FALSE;
				};
			esac;
		    }
		);

	fun take (MAILSLOT { priority, in_q, out_q } )
	    =
	    call_with_current_fate
		(
		 fn get_fate
		    =
		    {   ts::disable_thread_switching ();
			#
			case (clean_and_remove out_q)
			    #
			    ITEM (mailop_done, put_fate)
				=>
				{   my_id =  ts::get_current_thread ();
				    #
				    set_current_thread  mailop_done;

				    priority := 1;

				    switch_to_fate  put_fate  (my_id, get_fate);			# 
				};

			    NO_ITEM
				=>
				{   enqueue (in_q, (make__mailop_done__refcell(), get_fate));
				    #
				    ts::reenable_thread_switching_and_dispatch_next_thread ();
				};
			esac;
		    }
		);

	fun take' (MAILSLOT { priority, in_q, out_q } )
	    =
	    itt::ISREADY_MAILOPS [is_mailop_ready_to_fire]
	    where
		fun fire_mailop ()								# Reppy refers to 'fire_mailop' as 'doFn'.
		    =
		    {   (rwq::pull_item_from_front_of_queue_or_raise_exception  out_q)
			    ->
			    (mailop_done, put_fate);

			my_id =  ts::get_current_thread ();

			set_current_thread mailop_done;

			priority := 1;

			call_with_current_fate
			    #
			    (fn get_fate
				=
				switch_to_fate  put_fate  (my_id,  get_fate)				# 
			    );
		    };

		fun wait_for { mailop_done, clean_up, next }					# Reppy calls this fn blockFn
		    =
		    {   msg =   call_with_current_fate
				    (
				     fn get_fate
					=
					{   clean_and_enqueue  (in_q,  (mailop_done, get_fate));
					    #
					    next ();						# next () should never return.

					    impossible();
					}
				    );

			clean_up ();

			ts::reenable_thread_switching ();

			msg;
		    };

		fun is_mailop_ready_to_fire ()
		    =
		    case (clean_and_check (priority, out_q))
			#
			0        =>  itt::MAILOP_UNREADY wait_for;
			priority =>  itt::MAILOP_READY { priority, fire_mailop };
		    esac;
	    end;

	fun nonblocking_take (MAILSLOT { priority, in_q, out_q } )
	    =
	    {   ts::disable_thread_switching ();
		#
		case (clean_and_remove out_q)
		    #
		    ITEM (mailop_done, put_fate)
			=>
			THE (call_with_current_fate
				(fn get_fate
				    =
				    {   my_id =  ts::get_current_thread ();
					#
					set_current_thread  mailop_done;

					priority := 1;

					switch_to_fate  put_fate  (my_id,  get_fate);		# 
				    }
			    )   );

		    NO_ITEM
			=>
			{   ts::reenable_thread_switching ();
			    #
			    NULL;
			};
		esac;
	    };
    };
end;

## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


