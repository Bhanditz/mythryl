## os-io.pkg



###             "Hacking, like painting, like composing,
###              allows one that sublime satisfaction which
###              comes only from the creation of beauty."
###
###                             -- Johannes K. Jörg



stipulate
    package wty =  winix_types;					# winix_types		is from   src/lib/std/src/posix/winix-types.pkg
herein
package winix_io:  Threadkit_Winix_Io {

    package IOM = IOManager

    type Iod = winix::io::Iod
#    type Iod_Kind = winix::io::Iod_Kind

    hash = winix::io::hash
    compare = winix::io::compare
    kind = winix::io::kind

    package Kind = winix::io::Kind

    type Wait_Request = winix::io::Wait_Request
    type Wait_Result = winix::io::Wait_Result

    pollDesc = winix::io::pollDesc
    pollToIODesc = winix::io::pollToIODesc

    exception BAD_WAIT_REQUEST = winix::io::BAD_WAIT_REQUEST

  /* set polling events; if the polling operation is not appropriate
   * for the underlying I/O device, then the Poll exception is raised.
   */
    pollIn  = winix::io::pollIn
    pollOut = winix::io::pollOut
    pollPri = winix::io::pollPri

  #  polling functions 
    local
      fun timeOut t = threadkit::wrap (threadkit::timeOutEvt t, fn () => [])
      fun ioEvt pd = threadkit::wrap (IOM::ioEvt pd, fn info => [info])
    in
    fun pollEvt [pd] = ioEvt pd
      | pollEvt _ = raise exception FAIL "io::winix::pollEvt not fully implemented"
    fun poll ([pd], NULL) = threadkit::sync (ioEvt pd)
      | poll ([pd], THE t) = threadkit::select[timeOut t, ioEvt pd]
      | poll _ = raise exception FAIL "io::winix::poll not fully implemented"
    end

  #  Check for conditions 
    isIn 		= winix::io::isIn
    isOut		= winix::io::isOut
    isPri		= winix::io::isPri
    infoToPollDesc  = winix::io::infoToPollDesc

};


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
