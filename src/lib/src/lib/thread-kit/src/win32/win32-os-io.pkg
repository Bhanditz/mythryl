## win32-os-io.pkg
## COPYRIGHT (c) 1996 Bell Laboratories.



# Replacement of winix::IO package for Win32.
# It implements a simple type of polling for files.


stipulate
    package wty =  winix_types;					# winix_types			is from   src/lib/std/src/posix/winix-types.pkg
herein
package Win32OSIO {

    package W32G = Win32::general
    package W32FS = Win32::file_system
    type one_word_unt = one_word_unt::word

    exception RUNTIME_EXCEPTION = winix::RUNTIME_EXCEPTION

    enum Iod = IODESC of REF( W32G::hndl )		#  winix::io::Iod 

    #  hash: can't assume 32 bits 
    fun hash (IODESC (REF (0wxffffffff:  W32G::hndl))) = 0wx7fffffff:  word 
      | hash (IODESC (REF h)) = (unt::from_int o W32G::unt::toInt) h

    fun compare (IODESC (REF wa), IODESC (REF wb)) = W32G::unt::compare (wa, wb)

#    enum Iod_Kind = K of String


    fun kind (IODESC (REF h)) = (case W32FS::getFileAttributes' h
	   of NULL => wty::OTHER
	    | THE w => if W32FS::isRegularFile h
		then wty::FILE
		else wty::DIRECTORY
	  )		# end case

    # No win32 polling devices for now 
    noPolling = "polling not implemented for win32 for this device/type"

    enum Wait_Request = POLL_DESC of Iod
    enum Wait_Result       = POLL_RESULT of Wait_Request
	
    fun pollDesc id = THE (POLL_DESC id) #  NULL 
    fun pollToIODesc (POLL_DESC pd) = pd #  raise exception FAIL("pollToIODesc: "$noPolling) 
    exception BAD_WAIT_REQUEST

    fun pollIn pd = pd #  raise exception FAIL("pollIn: "$noPolling) 
    fun pollOut pd = pd #  raise exception FAIL("pollOut: "$noPolling) 
    fun pollPri pd = pd #  raise exception FAIL("pollPri: "$noPolling) 

    local 
      my poll' : (List( one_word_unt *  Null_Or( one_word_int::Int * Int ) ->  List( one_word_unt ) )
          = 
	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "win32_io", fun_name => "poll" };
      fun toPollInfo (w) = POLL_RESULT (POLL_DESC (IODESC (REF w)))
      fun fromPollDesc (POLL_DESC (IODESC (REF w))) = w
    in
    fun poll (pdl, t) = let
	  timeout = (case t
		 of (THE t) =>
		      THE (time::to_seconds t, int::fromLarge (time::to_microseconds t))
		  | NULL => NULL)
	  info = poll' (list::map fromPollDesc pdl, timeout)
	  in
	    list::map toPollInfo info
	  end
    end #  end local 
		    
    fun isIn pd = raise exception FAIL("isIn: "$noPolling)
    fun isOut pd = raise exception FAIL("isOut: "$noPolling)
    fun isPri pd = raise exception FAIL("isPri: "$noPolling)

    fun infoToPollDesc (POLL_RESULT pd) = pd #  raise exception FAIL("infoToPollDesc: "$noPolling) 

};


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
