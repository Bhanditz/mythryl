## compile-info.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/frontend/typecheck-stuff/typecheckdata.make6


package compile_info {

							# stamp			is from   src/lib/compiler/frontend/typecheck-stuff/basics/stamp.pkg
							# symbol		is from   src/lib/compiler/frontend/basics/mlcomp/symbol.pkg
							# var_home		is from   src/lib/compiler/frontend/typecheck-stuff/basics/var-home.pkg
							# error_message		is from   src/lib/compiler/frontend/basics/errormsg/error-message.pkg
							# source_map		is from   src/lib/compiler/frontend/basics/source/source-map.pkg
							# highcode_var		is from   src/lib/compiler/backend/upper/highcode/highcode-var.pkg
							# prettyprinter		is from   src/lib/prettyprint/src/prettyprinter.pkg
							# cpu_timer		is from   src/lib/std/src/cpu_timer.pkg
							# time			is from   src/lib/std/time.pkg
    Compile_Info( A_deep_syntax_tree )
        =
        { make_stamp:              Void -> stamp::Stamp,
	  make_highcode_variable:  Null_Or( symbol::Symbol ) -> var_home::Highcode_Variable,
	  any_errors:              Ref( Bool ),
	  error_fn:                error_message::Error_Function,
	  error_match:             source_map::Source_Code_Region -> String,
	  transform:               A_deep_syntax_tree -> A_deep_syntax_tree,
	  source_name:             String,
          prettyprinter_or_null:   Null_Or prettyprinter::Prettyprinter,
	  cpu_timer:		   cpu_timer::Cpu_Timer
        };
	#
	# 2010-09-07 CrT:   XXX BUGGO FIXME
	#
        # I think
	#
        #     prettyprinter_or_null:   Null_Or prettyprinter::Prettyprinter
	#
        # above should be changed go
	#
        #     compile_log: Null_Or( file::Output_Stream ),
	#
        # per "simple things should be simple; complex things should be possible":
	# Most of the time we'll just want to write a line of text, so that should
        # be the favored case.
        #
        # (I'd like to treat the prettyprint stuff not as an opaque output stream,
        # but rather as a buffer/datastructure that a client uses to produce a string
        # which is then written to an output stream.)
        #
        # Over time, I'd like to evolve the .compile.log
        # support stuff in the direction of
	#
	#     src/lib/src/lib/thread-kit/src/lib/tracing.pkg
	#
	# This cannot be done immediately because tracing.pkg depends on having
	# threadkit running, and the compiler doesn't currently run threadkit.
	#
	# Also, we probably don't want trace.logs to interfere with compile.log
	# generation or vice versa, even if user apps invoke the compiler internally,
	# so we probably don't want to do a simple-minded merge of the two facilities.
	# (Maybe they can wind up being two calls to a single generic package?)

    fun make_compile_info {
            source,
            transform:  X -> X,
            make_stamp_generator,
            prettyprinter_or_null
        }
        =
        {   my { error_fn, error_match, any_errors }
                =
                error_message::errors  source;
	                                                             

            highcode_var::clear ();

									# cpu_timer		is from   src/lib/std/src/cpu-timer.pkg
	    stamp_generator =  make_stamp_generator  ();
	    cpu_timer       =  cpu_timer::make_cpu_timer ();


	    fun make_highcode_variable  NULL
                    =>
                    highcode_var::make_highcode_variable ();

	        make_highcode_variable (THE symbol)
                    =>
                    highcode_var::make_named_highcode_variable symbol;
            end;
	

	    {   make_stamp             =>  .{ stamp::fresh  stamp_generator; },
		make_highcode_variable,
		source_name            =>  source.file_opened,
		any_errors,
		error_fn,
		error_match,
		transform,
                prettyprinter_or_null,
		cpu_timer
            }
            : Compile_Info(  X );
	};

    fun any_errors (compile_info: Compile_Info( X ))
        =
        *compile_info.any_errors;

}; #  package compile_info 
