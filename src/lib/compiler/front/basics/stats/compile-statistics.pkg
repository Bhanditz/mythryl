## compile-statistics.pkg
#
# Support code for tracking and printing the CPU
# time used by various parts of the compile process.

# Compiled by:
#     src/lib/compiler/front/basics/basics.sublib



###             "We are all in the gutter, but
###              some of us are looking at the stars."
###
###                        -- Oscar Wilde


stipulate
    package tm =  time;					# time			is from   src/lib/std/time.pkg
    package at =  runtime_internals::at;		# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg
herein

    package   compile_statistics
    :         Compile_Statistics			# Compile_Statistics	is from   src/lib/compiler/front/basics/stats/compile-statistics.api
    {
	time_to_string
	    =
	    tm::format 2;

	Counter
	    =
	    COUNTER
	      { c:   Ref( Int ),
		cs:  List( Counter )
	      };

	Stat = STAT  {   name: String,
			 tot: List( Counter )
		     };

	all_stats = REF (NIL:  List( Stat ));		# More icky thread-hostile mutable global state. :-(	XXX BUGGO FIXME


	# Search by name in a list of stats (in practice, all_stats),
	# return NULL if not found:
	#
	fun find_stat (name, NIL)
		=>
		NULL;

	    find_stat (name, (p as STAT { name=>n, ... } ) ! rest)
		=> 
		if (name == n)   THE p;
		else             find_stat (name, rest);
		fi;
	end;


	# Add stat to a list (in practice, all_stats):
	#
	fun insert (p as STAT { name=>pn, ... }, (q as STAT { name=>qn, ... } ) ! rest)
		=>
		if (pn < qn)   p ! q ! rest;
		else           q ! insert (p, rest);
		fi;

	    insert (p, NIL)
		=>
		p ! NIL;
	end;


	fun new_counter cs
	    =
	    COUNTER { c=>REF 0, cs };

	fun add_counter (COUNTER { c, cs } ) n
	    =
	    {   c := *c + n;
		apply  (fn c =  add_counter c n)  cs;
	    };

	fun get_counter (COUNTER { c=>REF c, ... } )
	    =
	    c;

	fun new_stat (name, cs)
	    =
	    STAT { name, tot=>cs };

	fun register_stat (p as STAT { name, tot } )
	    = 
	    case (find_stat (name,*all_stats))
		#
		THE p =>  ();
		NULL  =>  all_stats := insert (p,*all_stats);
	    esac;

	fun make_stat name
	    =
	    case (find_stat (name,*all_stats))
		#	  
		THE p =>  p;
		#
		NULL  =>  {   p =  new_stat (name, [new_counter []]);

			      all_stats :=  insert (p,*all_stats); p;
			  };
	    esac;

	fun add_stat (STAT { tot => (c ! _), ... } ) n =>  add_counter c n;
	    add_stat (STAT { tot => [],      ... } ) _ =>  ();
	end;

	say   =  control_print::say;
	flush =  control_print::flush;

	# NOTE: we should be able to rewrite this using the timer package   XXX BUGGO FIXME

	Times = { usr: tm::Time,
		  sys: tm::Time,
		  gc:  tm::Time
		};

	zeros = { usr =>  tm::zero_time,
		  sys =>  tm::zero_time,
		  gc  =>  tm::zero_time
		};

	Phase = PHASE  { name:   String,
			 accum:  Ref( Times ),
			 this:   Ref( Times )
		       };


	all_phases =  REF (NIL:  List(Phase));					# XXX BUGGO FIXME Another icky bit of global mutable state.



	stipulate
	    # Search by name in all_phases, return phase else NULL:
	    #
	    fun find_phase (name, NIL)
		    =>
		    NULL;

		find_phase (name, (p as PHASE { name=>n, ... } ) ! rest)
		    => 
		    if (name == n)   THE p;
		    else             find_phase (name, rest);
		    fi;
	    end;

	    # Add named phase to all_phases:
	    #
	    fun insert_phase (p as PHASE { name=>pn, ... }, (q as PHASE { name=>qn, ... } ) ! rest)
		    =>
		    if (pn < qn)    p ! q ! rest;
		    else            q ! insert_phase (p, rest);
		    fi;

		insert_phase (p, NIL)
		    =>
		    p ! NIL;
	    end;
	herein

	    fun make_phase name
		=
		case (find_phase (name, *all_phases))
		    #	  
		    THE p =>  p;
		    #
		    NULL  =>  p
			      where
				  p = PHASE {   name,
						accum => REF zeros,
						this  => REF zeros
					    };

				  all_phases :=  insert_phase (p, *all_phases);
			      end;
		esac;
	end;

	current		 =  REF (make_phase "Other");		# Global mutable state.	XXX BUGGO FIXME

	keep_time	 =  REF TRUE;				# Global mutable state.	XXX BUGGO FIXME
	approx_time	 =  REF TRUE;				# Global mutable state.	XXX BUGGO FIXME
	#
	# At the moment these three are controlled by hardwired logic in
	#     src/app/makelib/compile/compile-dependency-graph-walk-g.pkg
	# -- look for show_compile_phase_runtimes_for():
	#
	say_begin	 =  REF FALSE;			# By default, do not narrate start of each compile phase.									# Global mutable state.	XXX BUGGO FIXME
	say_end		 =  REF FALSE;			# By default, do not narrate end   of each compile phase, with CPU seconds used.						# Global mutable state.	XXX BUGGO FIXME
	say_when_nonzero =  REF FALSE;			# By default, even if previous is *TRUE, do not narrate end of compile phases with 0.00 seconds of CPU usage.			# Global mutable state.	XXX BUGGO FIXME

	infix val 70 +++ ;   my (+++) = time::(+) ;
	infix val 70 --- ;   my (---) = time::(-) ;

	infix val 70  ++++ ;

	fun { usr, sys, gc }++++{ usr=>u, sys=>s, gc=>g }
	    =
	    { usr =>  usr+++u,
	      sys =>  sys+++s,
	      gc  =>  gc+++g
	    };

	infix val 70  ---- ;

	fun { usr, sys, gc }----{ usr=>u, sys=>s, gc=>g }
	    = 
	    if (time::(<) (usr, u))
		#
		zeros; 
	    else
		{ usr =>  usr---u,
		  sys =>  sys---s,
		  gc  =>  gc---g
		};
	    fi;

	stipulate
	    fun gettime ()
		=
		{   my { nongc, gc }
			=
			cpu_timer::get_elapsed_gc_and_nongc_usr_and_sys_cpu_times (cpu_timer::get_cpu_timer());

		    # This is a hack.
		    # (This module deserves a complete rewrite!!) XXX BUGGO FIXME

		    { usr =>  nongc.usr,
		      sys =>  time::(+) (nongc.sys, gc.sys),
		      gc  =>  gc.usr
		    };
		};

	    last   = REF (gettime());				# Global mutable state.	XXX BUGGO FIXME
	herein 
	    fun reset ()
		=
		{   last := gettime();

		    apply
			(fn PHASE { this, accum, ... } =  { this := zeros;   accum := zeros; }) 
			*all_phases;

		    apply
			(fn STAT { tot, ... } =  apply  (fn COUNTER { c, ... } =  c:=0)  tot)
			*all_stats;
		};


										    my _ = 
	    at::schedule
		(
		  "CompilerStats",				# Arbitrary label

		  [ at::FORK_TO_DISK,			# When to run the function
		    at::SPAWN_TO_DISK,
		    at::STARTUP
		  ],

		  fn at::STARTUP =>  reset();		# Function to run.
		     _              =>  last := zeros;
		  end 
		);

	    fun since()
		=
		{
      #	         x = if *approxTime
      #			then let
      #			  t1 = *lastcollect
      #			  u1 = *System::Runtime::minorcollections
      #			  in lastcollect := u1; u1!=t1 end
      #			else TRUE;

		    x = TRUE;

		    if x
			t =  *last;
			u =  gettime();

			last := u;
			(u ---- t);
		    else
			zeros;
		    fi;
		};

	end;							# stipulate

	# Call f(x) n times:
	#
	fun repeat 0 f x
		=>
		();

	   repeat n f x
		=>
		{   f x;
		    repeat (n - 1) f x;
		};
	end;

	# Print 'string', pad to length 'n'
	# with trailing blanks:
	#
	fun sayfield (n, string)
	    =
	    {    say string;
		 repeat (int::max (0, n - size(string)))  say " ";
	    };


	# Call f(x) while tracking and maybe
	# printing its CPU time consumption:
	#
	fun do_phase (p as PHASE { name, this, accum }) f x
	    =
	    {   (*current)
		    ->
		    prev as PHASE { this=>t', ... };

		fun end_time()
		    =
		    {   my x as { usr, sys, gc }
			    =
			    since() ++++ *this;

			this := zeros;
			accum := *accum ++++ x;
			usr +++ sys +++ gc;
		    };

		fun finish()
		    =
		    {   current := prev;

			if *say_end
			    #
			    time = time_to_string (end_time());
			    #
			    if (time != "0.00" or *say_when_nonzero)
				#
				say "End   ";
				sayfield (40, name);

				if *keep_time   apply say ["    ", time, " sec\n"];
				else            say "\n";
				fi;

				flush();
			    else
				();
			    fi;
			else
			    end_time();
			    ();
			fi;
		    };

		if *keep_time
		    t' := since() ++++ *t';
		fi;

		current := p;

		if *say_begin
		    #
		    apply say ["Begin ", name, "\n"];
		    flush();
		fi;

		(   (f x)
		    except
			e =  {   finish ();
				 raise exception e;
			     }
		)
		before
		    finish ();
	    };

	fun get_stat (STAT { tot, ... } )
	    =
	    fold_left
		(fn (c, s) =  get_counter c + s)
		0
		tot;

	fun show_stat (s as STAT { name, tot } )
	    =
	    {   sayfield (40, name);
		say (int::to_string (get_stat s));
		say "\n";
	    };

	fun show_phase (PHASE { name, this, accum } )
	    =
	    {   my { usr, sys, gc }
		    =
		    *this ++++ *accum;

		sayfield (40, name); 
		say (time_to_string usr);  say "u  ";
		say (time_to_string sys);  say "s  ";
		say (time_to_string gc );  say "g  ";
		say "\n";
	    };

	fun summary ()
	    =
	    {   sum = fold_right
			  (fn (PHASE { accum, ... }, t) = *accum ++++ t)
			  zeros
			  *all_phases;

		apply  show_stat  *all_stats; 

		apply
		    show_phase
		    (*all_phases @ [PHASE { name=>"TOTAL", this=>REF zeros, accum=>REF sum } ]);
	    };

	fun show_phase_sp (PHASE { name, this, accum } )
	    =
	    {   my { usr, sys, gc }
		    =
		    *this ++++ *accum;

		case (tm::compare (usr+++sys+++gc, tm::zero_time))
		    #
		    EQUAL => ();
		    #
		    _     => {   sayfield (40, name); 
				 say (time_to_string (usr+++sys));  say "u  ";
#    	  	                 say (time_to_string sys);          say "s  "; 
				 say (time_to_string gc);           say "g  ";
				 say "\n";
			     };
		esac;
	    };

	fun summary_sp ()								# Apparently never called.  No clue what "sp" means.
	    =
	    {   sum = fold_right
			  (fn (PHASE { accum, ... }, t) =  *accum++++t)
			  zeros
			  *all_phases;

		apply show_stat *all_stats; 

		apply show_phase_sp
		  (   *all_phases
		      @
		      [ PHASE {   name  => "TOTAL",
				  this  => REF zeros,
				  accum => REF sum
			      }
		      ]
		  );
	    };

    }; #  package compile_statistics 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
