## basic-control.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/basics/basics.sublib



###             "Alas, I am dying beyond my means."
###
###                          -- Oscar Wilde,
###                             as he sipped champagne
###                             on his deathbed



stipulate
    package ci  =  control_index;					# control_index		is from   src/lib/controls/control-index.pkg
    package ctl =  control;						# control		is from   src/lib/controls/control.pkg
herein

    api Basic_Control {
	#
	#
	print_warnings:	Ref( Bool );					#  If FALSE, suppress all warning messages 

	top_index:	ci::Control_Index;				#  The top-level registry of the compiler.


	#  Nest a tier-2 registry within the top-level registry: 

	note_subindex
	    :
	    ( String,
	      ci::Control_Index,
	      ctl::Menu_Slot
	    )
	    ->
	    Void;
    };
end;



stipulate
    package ci  =  control_index;					# control_index		is from   src/lib/controls/control-index.pkg
    package cj  =  control_junk;					# control_junk		is from   src/lib/controls/control-junk.pkg
    package ctl =  control;						# control		is from   src/lib/controls/control.pkg
herein

    package   basic_control
    : (weak)  Basic_Control
    {
	top_index							# XXX BUGGO FIXME more icky thread-hostile mutable toplevel state -- should be part of a compiler state record.
	    =
	    ci::make { help => "Compiler controls" };

	registry
	    =
	    ci::make { help => "compiler settings" };

	fun note_subindex (prefix, reg, menu_slot)
	    =
	    ci::note_subindex
		#
		top_index
		    {
		      prefix => THE prefix,
		      menu_slot,
		      obscurity => 0,
		      reg
		    };


										    my _ = 
	note_subindex ("basic", registry, [10, 10, 1]);

	print_warnings
	    =
	    r
	    where
		r = REF TRUE;

		control
		    =
		    ctl::make_control
		      {
			name      =>  "print_warnings",
			menu_slot =>  [0],
			obscurity =>  1,
			help      =>  "whether warnings get generated",
			control   =>  r
		      };

		sctl =  ctl::make_string_control
			    #
			    cj::cvt::bool
			    #
			    control;

		ci::note_control  registry
		  {
		    control         =>  sctl,
		    dictionary_name =>  THE "PRINT_CONTROL"
		  };
	    end;
    };
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
