## picklehash.pkg

# Compiled by:
#     src/lib/compiler/front/basics/basics.sublib

#   We use pickle hashes to provide portable, abstract,
#   filesystem-independent identifiers for pickles
#   (compiled files).
#


stipulate
    package err =  error_message;						# error_message	is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package ns  =  number_string;						# number_string	is from   src/lib/std/src/number-string.pkg
herein

    package   picklehash
    :         Picklehash							# Picklehash	is from   src/lib/compiler/front/basics/map/picklehash.api
    {
	Picklehash = PICKLEHASH  unt8_vector::Vector;				# unt8_vector	is from   src/lib/std/src/unt8-vector.pkg

	pickle_hash_size = 16;

	fun compare (PICKLEHASH v1, PICKLEHASH v2)
	    =
	    string::compare
	      (
		byte::bytes_to_string v1,
		byte::bytes_to_string v2
	      );

										# string	is from   src/lib/std/string.pkg

	fun to_bytes (PICKLEHASH x)
	    =
	    x;

	fun from_bytes v
	    =
	    if   (unt8_vector::length v == pickle_hash_size)
		 PICKLEHASH v;
	    else err::impossible "picklehash::stringToStamp";
	    fi;

	# Convert the Picklehash to a printable representation (hex digits) 

	fun to_hex (PICKLEHASH pid)
	    = 
	    {   fun cvt_byte b
		    =
		    ns::pad_left '0' 2 (unt8::to_string b);


		fun f (b, l)
		    =
		    cvt_byte b ! l;

		string::cat (unt8_vector::fold_right f [] pid);
	    };

	fun from_hex s
	    =
	    {   fun onebyte i
		    =
		    {   i2 =   2 * i;
			c1 =   string::get (s, i2);
			c2 =   string::get (s, i2 + 1);

			the (unt8::from_string (implode [c1, c2]));
		    };

		THE (PICKLEHASH (unt8_vector::tabulate (pickle_hash_size, onebyte)));
	    }
	    except _
		=
		NULL;

    };
end;

## Copyright (c) 2004 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
