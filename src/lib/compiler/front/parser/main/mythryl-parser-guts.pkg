## mythryl-parser-guts.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/parser/parser.sublib



								# Mythryl_Parser_Guts	is from   src/lib/compiler/front/parser/main/mythryl-parser-guts.api
								# lr_parser		is from   src/app/yacc/lib/parser2.pkg

stipulate
    package cp  =  control_print;				# control_print		is from   src/lib/compiler/front/basics/print/control-print.pkg
    package err =  error_message;				# error_message		is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package fil =  file;					# file			is from   src/lib/std/src/posix/file.pkg
    package lnd =  line_number_db;				# line_number_db	is from   src/lib/compiler/front/basics/source/line-number-db.pkg
    package lrp =  lr_parser;					# lr_parser		is from   src/app/yacc/lib/parser2.pkg
    package mp  =  mythryl_parser;				# mythryl_parser	is from   src/lib/compiler/front/parser/main/mythryl-parser.pkg
    package sci =  sourcecode_info;				# sourcecode_info	is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
    package str =  string;					# string		is from   src/lib/std/string.pkg
herein

    package   mythryl_parser_guts
    : (weak)  Mythryl_Parser_Guts
    {
	package mythryl_lr_vals
		  =
		  mythryl_lr_vals_fun (

		      package token
			  =
			  lrp::token;
		  );

	package lex
		  =
		  mythryl_lex_g (

		      package tokens
			  =
			  mythryl_lr_vals::tokens;
		  );

								    # make_complete_yacc_parser_with_custom_argument_g	def in    src/app/yacc/lib/make-complete-yacc-parser-with-custom-argument-g.pkg
	package mlp
		  =
		  make_complete_yacc_parser_with_custom_argument_g (

		      package parser_data = mythryl_lr_vals::parser_data;
		      package lex = lex;
		      package lr_parser = lr_parser;		# Typically from  ROOT/src/app/yacc/lib/parser2.pkg
		  );

	# The following two functions are also defined in build/computil.pkg

	add_lines
	    =
	    compile_statistics::add_stat (compile_statistics::make_stat "Source Lines");

	package err= error_message;
								    # raw_syntax	is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax.pkg

	Parse_Result = EOF             #  End of file reached 
		     | ERROR           #  Parsed successfully, but with syntactic or semantic errors 
		     | ABORT           #  Could not even parse to end of declaration 
		     | PARSE  raw_syntax::Declaration;

	dummy_eof    =   mythryl_lr_vals::tokens::eof  (0, 0);
	dummy_semi   =   mythryl_lr_vals::tokens::semi (0, 0);

	fun prompt_read_parse_and_return_one_toplevel_mythryl_expression (

		source as {
		    source_stream,
		    error_consumer,
		    interactive,
		    line_number_db,
		    saw_errors,
		    ...
		}
		:
		sci::Sourcecode_Info
	    )
	    =
	    {
		err   =   err::error source;

    #	    complain_match   =   err::match_error_string  source;

		fun parse_error (s, p1, p2)
		    =
		    err (p1, p2) err::ERROR s err::null_error_body;

		lex_arg = {  comment_nesting_depth => REF 0,
			     line_number_db,
			     stringlist            => REF (NIL:  List( String )),

			     stringtype            => REF FALSE,
			     stringstart           => REF 0,
			     brack_stack           => REF (NIL: List(  Ref(  Int ) )),

			     err
			 };


		do_prompt =   REF TRUE;
		prompt    =   REF *mp::primary_prompt;

		fun inputc_source_stream _
		    =
		    fil::read  source_stream;

		exception ABORT_LEX;

		# Read one line of interactive input from user.
		# (This function is called only when parsing
		# interactively entered program text.)		XXX BUGGO FIXME, actually it doesn't read by lines any more,
		#							and is also (only?) used when executing scripts.
		fun get_line k
		    =
		    {   if *do_prompt
			    #		        
			    if  *saw_errors    raise exception ABORT_LEX;  fi;


			    if *mp::interactive
				#
				cp::say
				    if ( *lex_arg.comment_nesting_depth > 0
					 or
					 *lex_arg.stringlist != NIL
				    )
					 *mp::secondary_prompt;
				    else 
					 *prompt;
				    fi;

				cp::flush();
			    fi;

			    do_prompt := FALSE;
			fi;

			s =  inputc_source_stream  k;

			do_prompt
			    :=
			    ((str::get (s, size s - 1) == '\n')
			    except
				_ = FALSE);
			s;
		    };

		lexer
		    = 
		    lex::make_lexer							# lex is defined above
			(interactive   ??   get_line
				       ::   inputc_source_stream
			)
			lex_arg;

		lexer'      =   REF (lrp::stream::streamify lexer);
		lookahead   =   if interactive  0; else 30;fi;

		fun prompt_read_parse_and_return_one_toplevel_mythryl_expression' ()
		    =
		    {   prompt :=  *mp::primary_prompt;

			my (next_token, rest)
			    =
			    lrp::stream::get  *lexer';

			start_position
			    =
			    lnd::last_change  line_number_db;

			fun lines_read ()
			    =
			    lnd::newline_count
				line_number_db 
				( start_position,
				  lnd::last_change line_number_db
				);


			# if interactive
			# then lnd::forget_old_positions line_number_db  fi

			if (mlp::same_token (next_token, dummy_semi)) 
			    #		         
			    lexer' := rest;
			    prompt_read_parse_and_return_one_toplevel_mythryl_expression' ();

			else 

			    if (mlp::same_token (next_token, dummy_eof))
				#
				EOF;
			   else
				prompt := *mp::secondary_prompt;

				my (result, lexer'')
				    =
				    mlp::parse (lookahead, *lexer', parse_error, err);

				add_lines (lines_read ());
				lexer' := lexer'';

				if *saw_errors      ERROR;
				else                PARSE result;
				fi;
			    fi;
			fi;
		    }
		    except
			lrp::PARSE_ERROR =>  ABORT;
			ABORT_LEX        =>  ABORT;
		    end ;


		fn ()
		    =
		    {   saw_errors :=  FALSE;
			#
			prompt_read_parse_and_return_one_toplevel_mythryl_expression' ();
		    };
	    };					# fun prompt_read_parse_and_return_one_toplevel_mythryl_expression
    };
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
