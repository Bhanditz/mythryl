generic package mythryl_lr_vals_fun(package token:  Token;)
 : (weak) api { package parser_data : Parser_Data;
       package tokens : Mythryl_Tokens;
   }
 { 
package parser_data{
package header { 
##  mythryl.grammar
#
# This is the Mythryl syntax grammar file.
#
# Mythryl-Yacc consumes this and spits out an LALR (1)
# parser which accepts tokens produced by the lexer from
#
#    src/lib/compiler/front/parser/lex/mythryl.lex
#
# and produces raw syntax trees.
#
# Mythryl-Yacc puts the generated code for the parser in the files
#
#     mythryl.grammar.api
#     mythryl.grammar.pkg
#
# with the former containing
#
#	api Mythryl_Tokens {
#	    Token (X,Y);
#	    Semantic_Value;
#	    colon: (X, X) -> Token (Semantic_Value,X);
#           ...
#	};
#	api Mythryl_Lrvals{
#	    package tokens:  Mythryl_Tokens;
#	    package parser_data: Parser_Data;
#	    sharing parser_data::token::Token == tokens::Token;
#	    sharing parser_data::Semantic_Value == tokens::Semantic_Value;
#	};
#
# and the latter containing
#
#	generic package mythryl_lr_vals_fun (package token:  Token;)
#	: (weak) api {	package parser_data : Parser_Data;
#			package tokens : Mythryl_Tokens;
#		    }
#	{ 
#	    package parser_data {
#		package header { 
#		    <header code from mythryl.grammar>
#		};
#		package lr_table = token::lr_table;
#		package token = token;
#		...
#	    };
#	    package tokens : (weak) Mythryl_Tokens {
#		Semantic_Value = parser_data::Semantic_Value;
#		Token (X,Y) = token::Token(X,Y);
#		...
#	    };
#	};
#
# The above generic gets invoked in
#
#     src/lib/compiler/front/parser/main/mythryl-parser-guts.pkg
#
# which assembles a complete parser from the lexer, the Mythryl-Yacc output, and
#
#     src/app/yacc/lib/make-complete-yacc-parser-with-custom-argument-g.pkg
# 
# The Mythryl parser gets invoked by
#     prompt_read_parse_and_return_one_toplevel_mythryl_expression
#     parse_complete_mythryl_file
# in  src/lib/compiler/front/parser/main/parse-mythryl.pkg
#
# For further higher-level context see:
#
#     src/A.COMPILER-PASSES.OVERVIEW
# 
# Mythryl-Yacc also produces a file
#
#     mythryl.grammar.desc
#
# as human-readable documentation of the parser.
#
# The invocation of Mythryl-Yacc and compilation of
# the resulting code is driven by
#
#     src/lib/compiler/front/parser/parser.sublib
#
# The raw-syntax trees we produce at runtime are defined in:
#
#     compiler/parse/raw-syntax/raw-syntax.api
#     compiler/parse/raw-syntax/raw-syntax.pkg
#
# The file syntax here is very close to classic
# YACC input syntax, with Mythryl substituted
# for C in the actions.  The biggest difference
# is that when we declare nonterminal symbols via
# '%nonterm', we also declare types for them.
#
# The top section (to the first double-percent-sign
# separator) contains arbitrary Mythryl code -- support
# for rule actions.


#     Appel's 1992 Critique http://www.cs.princetone.edu/research/techforms/TR-364-92
#     points out a case in which SML implementations (of the time at least)
#     would in fact "go wrong":  If we're to use Mythryl as a trusted environment
#     in which to run untrusted code from the internet, this will need to be
#     reviewed and if necessary repaired in some fashion.		XXX BUGGO FIXME
# 



###             "Bilbo had a shirt of mithril rings that Thorin gave him.
###              I never told him, but its worth was greater than the
###              value of the Shire."
### 
###                                           -- Gandalf



###             "I think it is extraordinarily important that
###              we in computer science keep fun in computing.
###
###              When it started out, it was an awful lot of fun.
###
###              Of course, the paying customers got shafted every
###              now and then, and after awhile we began to take
###              their complaints seriously.  We began to feel as
###              if we really were responsible for the successful,
###              error-free perfect use of these machines.
###
###              I don't think we are.
###
###              I think we're responsible for stretching them,
###              setting them off in new directions, and keeping
###              fun in the house.  I hope the field of computer
###              science never loses its sense of fun.
###
###              Above all, I hope we don't become missionaries.
###              Don't feel as if you're Bible salesmen.  The
###              world has too many of those already.  What you
###              know about computing other people will learn.
###              Don't feel as if the key to successful computing
###              is only in your hands.
###
###              What's in your hands, I think and hope, is
###              intelligence:  The ability to see the machine
###              as more than when you were first led up to it,
###              that you can make it more."   
###
###                 -- Alan J Perlis
###
###                     (Quoted in the excellent MIT
###                      introductory programming text
###                       "Structure and Interpretation
###                        of Computer Programs".)



###             "I have heard from many different people that they
###              find the ML syntax confusing, ugly, and difficult
###              to learn.  As a long-time ML programmer, I am quite
###              comfortable with ML syntax; but perhaps the frequency
###              of these comments might serve as a hint that there is
###              an opportunity for a syntax designer of rare taste and
###              genius."
###
###                                         -- Andrew W Appel  1992


package raw =  raw_syntax;			# raw_syntax				is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax.pkg

						# hash_string				is from   src/lib/src/hash-string.pkg
include package   raw_syntax;			# raw_syntax				is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax.pkg
include package   make_raw_syntax;		# make_raw_syntax			is from   src/lib/compiler/front/parser/raw-syntax/make-raw-syntax.pkg
include package   error_message;		# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
include package   symbol;			# symbol				is from   src/lib/compiler/front/basics/map/symbol.pkg
include package   fast_symbol;			# fast_symbol				is from   src/lib/compiler/front/basics/map/fast-symbol.pkg
include package   raw_syntax_junk;		# raw_syntax_junk			is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax-junk.pkg
include package   regex_to_raw_syntax;		# regex_to_raw_syntax			is from   src/lib/compiler/front/parser/raw-syntax/regex-to-raw-syntax.pkg
include package   fixity;			# fixity				is from   src/lib/compiler/front/basics/map/fixity.pkg

package elc = expand_list_comprehension_syntax;	# expand_list_comprehension_syntax	is from   src/lib/compiler/front/parser/raw-syntax/expand-list-comprehension-syntax.pkg
package hs  = hash_string;			# hash_string				is from   src/lib/src/hash-string.pkg

include package   printf_format_string_to_raw_syntax;	# printf_format_string_to_raw_syntax	is from   src/lib/compiler/front/parser/raw-syntax/printf-format-string-to-raw-syntax.pkg


Raw_Symbol
    =
    fast_symbol::Raw_Symbol;


# 
# fun mark_expression (e as SOURCE_CODE_REGION_FOR_EXPRESSION    _, _, _) =>  e;
#     mark_expression (e,                                           a, b) =>  SOURCE_CODE_REGION_FOR_EXPRESSION (e, (a, b));
# end;
# 
# fun mark_declaration (d as SOURCE_CODE_REGION_FOR_DECLARATION _, _, _) =>  d;
#     mark_declaration (d,                                          a, b) =>  SOURCE_CODE_REGION_FOR_DECLARATION (d, (a, b));
# end;


# fun dropit (id, idleft, idright)
#     =
#     {   my RAWSYM( word, string )
#            =
#            id;
# 
#         fun log_change new_string
#             =
# 	    case  *mythryl_parser::edit_request_stream 
# 
# 		 THE stream
# 		      =>
# 		      {   file::write (
# 			      stream,
# 			      (   (int::to_string (idleft - 2))
# 			      +   ": `" + string + "` -> `" + new_string + "`\n"
# 			      )
# 			  );
# 			  id;
# 		      };
# 
# 		 NULL => id;
# 
# 	    esac;
# 
# 
# 
# 	fun munge ([], _, done)
#                 =>
#                 log_change (implode (reverse done));
# 
# 	    munge (c ! to_do, last, done)
# 		=>
# 		{   if  (char::is_lower last
#                     and  char::is_upper c
#                         ) 
# 			munge( to_do, c, (char::to_lower c) ! '_' ! done );
# 		    else
# 		    if (char::is_upper c )
# 			munge( to_do, c, (char::to_lower c) ! done );
# 		    else
# 			munge( to_do, c, c ! done );
# 		    fi; fi;
# 		};
# 	end;
# 
#         fun its_big_enough char_list
#             =
# 	      length( char_list ) > 1;
# 
# #            case char_list
# #		 'a' ! _ => length( char_list ) > 7;
# #		 'b' ! _ => length( char_list ) > 7;
# #		 'c' ! _ => length( char_list ) > 7;
# #		 'd' ! _ => length( char_list ) > 7;
# #		 'e' ! _ => length( char_list ) > 7;
# #		 'f' ! _ => length( char_list ) > 7;
# #		 'g' ! _ => length( char_list ) > 7;
# #		 'h' ! _ => length( char_list ) > 7;
# #		 'i' ! _ => length( char_list ) > 7;
# #		 'j' ! _ => length( char_list ) > 7;
# #		 'k' ! _ => length( char_list ) > 7;
# #		 'l' ! _ => length( char_list ) > 7;
# #		 'm' ! _ => length( char_list ) > 7;
# #		 'n' ! _ => length( char_list ) > 7;
# #		 'o' ! _ => length( char_list ) > 7;
# #		 'p' ! _ => length( char_list ) > 7;
# #		 'q' ! _ => length( char_list ) > 7;
# #		 'r' ! _ => length( char_list ) > 7;
# #		 's' ! _ => length( char_list ) > 7;
# #		 't' ! _ => length( char_list ) > 7;
# #		 'u' ! _ => length( char_list ) > 7;
# #		 'v' ! _ => length( char_list ) > 7;
# #		 'w' ! _ => length( char_list ) > 7;
# #		 'x' ! _ => length( char_list ) > 7;
# #		 'y' ! _ => length( char_list ) > 7;
# #		 'z' ! _ => length( char_list ) > 7;
# #		 _ => FALSE;
# #            esac;
# 
#         char_list = explode string;
# 
# 	has_lower = list::exists char::is_lower char_list;
# 	has_upper = list::exists char::is_upper char_list;
# 
# 	case (has_lower, has_upper)
# 
# 	     (TRUE,  TRUE )
# 		 =>
# 		 if   (its_big_enough char_list)
# 		     
# 		      munge (char_list, '_', [] );
# 		 else
# 		      id;
# 		 fi;
# 	     _              =>   id;
# 
# 	esac;
# 
#     };

# Given "a::b::c", return ["a", "b", "c"]:
#
fun explode_path string
    =
    loop (char_list, [], [])
    where
         char_list = explode string;

         fun loop (chars_left, chars_done, result_strings)
             =
	     case  chars_left

		  []  =>
		      reverse ((implode (reverse chars_done)) ! result_strings);

		  (':' ! ':' ! rest)	# Found a path divider.
		      =>
		      loop( rest, [], (implode (reverse chars_done)) ! result_strings );

		  ('`' ! rest)		# chars_left == `++` or such -- must be last string in path.
		      =>
		      reverse ((implode chars_left) ! result_strings);

		  (c ! rest)
		      =>
		      loop( rest, c ! chars_done, result_strings );

	     esac;  
    end;



# The grammar token declaration section starts after this marker:



};
package lr_table = token::lr_table;
package token = token;
stipulate include package   lr_table; herein 
my table={   action_rows =
"\
\\x01\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\
\\x01\x00\x02\x00\x65\x04\x03\x00\x65\x04\x04\x00\x65\x04\x05\x00\x65\x04\
\\x08\x00\x65\x04\x09\x00\x65\x04\x0a\x00\x65\x04\x0b\x00\x65\x04\
\\x0c\x00\x65\x04\x0d\x00\x65\x04\x0e\x00\x65\x04\x11\x00\x65\x04\
\\x12\x00\x65\x04\x13\x00\x65\x04\x14\x00\x65\x04\x15\x00\x65\x04\
\\x16\x00\x65\x04\x17\x00\x65\x04\x18\x00\x65\x04\x19\x00\x65\x04\
\\x1a\x00\x65\x04\x1b\x00\x65\x04\x1c\x00\x65\x04\x1e\x00\x65\x04\
\\x1f\x00\x65\x04\x22\x00\x65\x04\x24\x00\x65\x04\x2c\x00\x65\x04\
\\x30\x00\x03\x02\x32\x00\x65\x04\x34\x00\x65\x04\x36\x00\x65\x04\
\\x38\x00\x65\x04\x39\x00\x65\x04\x3a\x00\x65\x04\x3c\x00\x65\x04\
\\x3d\x00\x65\x04\x3e\x00\x65\x04\x3f\x00\x65\x04\x41\x00\x65\x04\
\\x42\x00\x65\x04\x43\x00\xd9\x04\x45\x00\x65\x04\x46\x00\x65\x04\
\\x47\x00\x65\x04\x48\x00\x65\x04\x4a\x00\x65\x04\x4b\x00\x65\x04\
\\x4c\x00\x65\x04\x4e\x00\x65\x04\x4f\x00\x65\x04\x50\x00\x65\x04\
\\x52\x00\x65\x04\x53\x00\x65\x04\x54\x00\x65\x04\x56\x00\x65\x04\
\\x58\x00\x65\x04\x5a\x00\x65\x04\x5b\x00\x65\x04\x5c\x00\x65\x04\
\\x5e\x00\x65\x04\x5f\x00\x65\x04\x60\x00\x65\x04\x62\x00\x65\x04\
\\x63\x00\x65\x04\x64\x00\x65\x04\x67\x00\x65\x04\x69\x00\x65\x04\
\\x6b\x00\x65\x04\x6d\x00\x65\x04\x6e\x00\x65\x04\x6f\x00\x65\x04\
\\x71\x00\x65\x04\x72\x00\x65\x04\x73\x00\x65\x04\x75\x00\x65\x04\
\\x76\x00\x65\x04\x77\x00\x65\x04\x7a\x00\x65\x04\x7b\x00\x65\x04\
\\x7d\x00\x65\x04\x7e\x00\x65\x04\x7f\x00\x65\x04\x81\x00\x65\x04\
\\x82\x00\x65\x04\x84\x00\x65\x04\x85\x00\x65\x04\x88\x00\x65\x04\
\\x89\x00\x65\x04\x8a\x00\x65\x04\x8b\x00\x65\x04\x8d\x00\x65\x04\
\\x8e\x00\x65\x04\x8f\x00\x65\x04\x90\x00\x65\x04\x91\x00\x65\x04\
\\x93\x00\x65\x04\x94\x00\x65\x04\x96\x00\x65\x04\x97\x00\x65\x04\
\\x98\x00\x65\x04\x99\x00\x65\x04\x9b\x00\x65\x04\x9d\x00\x65\x04\
\\x9f\x00\x65\x04\xa0\x00\x65\x04\xa1\x00\x65\x04\xa4\x00\x65\x04\
\\xa8\x00\x65\x04\xa9\x00\x65\x04\xaa\x00\xd9\x04\xab\x00\x65\x04\
\\xac\x00\x65\x04\xaf\x00\x65\x04\xb0\x00\x65\x04\xb1\x00\x65\x04\
\\xb2\x00\x65\x04\xb5\x00\x65\x04\x00\x00\
\\x01\x00\x02\x00\x68\x04\x03\x00\x68\x04\x04\x00\x68\x04\x05\x00\x68\x04\
\\x08\x00\x68\x04\x09\x00\x68\x04\x0a\x00\x68\x04\x0b\x00\x68\x04\
\\x0c\x00\x68\x04\x0d\x00\x68\x04\x0e\x00\x68\x04\x11\x00\x68\x04\
\\x12\x00\x68\x04\x13\x00\x68\x04\x14\x00\x68\x04\x15\x00\x68\x04\
\\x16\x00\x68\x04\x17\x00\x68\x04\x18\x00\x68\x04\x19\x00\x68\x04\
\\x1a\x00\x68\x04\x1b\x00\x68\x04\x1c\x00\x68\x04\x1e\x00\x68\x04\
\\x1f\x00\x68\x04\x22\x00\x68\x04\x24\x00\x68\x04\x2b\x00\xa1\x04\
\\x2c\x00\x68\x04\x30\x00\x02\x02\x32\x00\x68\x04\x34\x00\x68\x04\
\\x36\x00\x68\x04\x38\x00\x68\x04\x39\x00\x68\x04\x3a\x00\x68\x04\
\\x3c\x00\x68\x04\x3d\x00\x68\x04\x3e\x00\x68\x04\x3f\x00\x68\x04\
\\x41\x00\x68\x04\x42\x00\x68\x04\x43\x00\xd8\x04\x45\x00\x68\x04\
\\x46\x00\x68\x04\x47\x00\x68\x04\x48\x00\x68\x04\x49\x00\x06\x01\
\\x4a\x00\x68\x04\x4b\x00\x68\x04\x4c\x00\x68\x04\x4d\x00\x05\x01\
\\x4e\x00\x68\x04\x4f\x00\x68\x04\x50\x00\x68\x04\x51\x00\x04\x01\
\\x52\x00\x68\x04\x53\x00\x68\x04\x54\x00\x68\x04\x55\x00\x03\x01\
\\x56\x00\x68\x04\x58\x00\x68\x04\x59\x00\x02\x01\x5a\x00\x68\x04\
\\x5b\x00\x68\x04\x5c\x00\x68\x04\x5e\x00\x68\x04\x5f\x00\x68\x04\
\\x60\x00\x68\x04\x61\x00\x01\x01\x62\x00\x68\x04\x63\x00\x68\x04\
\\x64\x00\x68\x04\x65\x00\x00\x01\x67\x00\x68\x04\x69\x00\x68\x04\
\\x6b\x00\x68\x04\x6c\x00\xff\x00\x6d\x00\x68\x04\x6e\x00\x68\x04\
\\x6f\x00\x68\x04\x70\x00\xfe\x00\x71\x00\x68\x04\x72\x00\x68\x04\
\\x73\x00\x68\x04\x74\x00\xfd\x00\x75\x00\x68\x04\x76\x00\x68\x04\
\\x77\x00\x68\x04\x78\x00\xfc\x00\x7a\x00\x68\x04\x7b\x00\x68\x04\
\\x7c\x00\xfb\x00\x7d\x00\x68\x04\x7e\x00\x68\x04\x7f\x00\x68\x04\
\\x80\x00\xfa\x00\x81\x00\x68\x04\x82\x00\x68\x04\x84\x00\x68\x04\
\\x85\x00\x68\x04\x88\x00\x68\x04\x89\x00\x68\x04\x8a\x00\x68\x04\
\\x8b\x00\x68\x04\x8d\x00\x68\x04\x8e\x00\x68\x04\x8f\x00\x68\x04\
\\x90\x00\x68\x04\x91\x00\x68\x04\x93\x00\x68\x04\x94\x00\x68\x04\
\\x96\x00\x68\x04\x97\x00\x68\x04\x98\x00\x68\x04\x99\x00\x68\x04\
\\x9b\x00\x68\x04\x9d\x00\x68\x04\x9f\x00\x68\x04\xa0\x00\x68\x04\
\\xa1\x00\x68\x04\xa4\x00\x68\x04\xa8\x00\x68\x04\xa9\x00\x68\x04\
\\xaa\x00\xd8\x04\xab\x00\x68\x04\xac\x00\x68\x04\xaf\x00\x68\x04\
\\xb0\x00\x68\x04\xb1\x00\x68\x04\xb2\x00\x68\x04\xb5\x00\x68\x04\x00\x00\
\\x01\x00\x02\x00\x68\x04\x03\x00\x68\x04\x04\x00\x68\x04\x05\x00\x68\x04\
\\x08\x00\x68\x04\x09\x00\x68\x04\x0a\x00\x68\x04\x0b\x00\x68\x04\
\\x0c\x00\x68\x04\x0d\x00\x68\x04\x0e\x00\x68\x04\x11\x00\x68\x04\
\\x12\x00\x68\x04\x13\x00\x68\x04\x14\x00\x68\x04\x15\x00\x68\x04\
\\x16\x00\x68\x04\x17\x00\x68\x04\x18\x00\x68\x04\x19\x00\x68\x04\
\\x1a\x00\x68\x04\x1b\x00\x68\x04\x1c\x00\x68\x04\x1e\x00\x68\x04\
\\x1f\x00\x68\x04\x22\x00\x68\x04\x24\x00\x68\x04\x2b\x00\xa1\x04\
\\x2c\x00\x68\x04\x32\x00\x68\x04\x34\x00\x68\x04\x36\x00\x68\x04\
\\x38\x00\x68\x04\x39\x00\x68\x04\x3a\x00\x68\x04\x3c\x00\x68\x04\
\\x3d\x00\x68\x04\x3e\x00\x68\x04\x3f\x00\x68\x04\x41\x00\x68\x04\
\\x42\x00\x68\x04\x45\x00\x68\x04\x46\x00\x68\x04\x47\x00\x68\x04\
\\x48\x00\x68\x04\x49\x00\x06\x01\x4a\x00\x68\x04\x4b\x00\x68\x04\
\\x4c\x00\x68\x04\x4d\x00\x05\x01\x4e\x00\x68\x04\x4f\x00\x68\x04\
\\x50\x00\x68\x04\x51\x00\x04\x01\x52\x00\x68\x04\x53\x00\x68\x04\
\\x54\x00\x68\x04\x55\x00\x03\x01\x56\x00\x68\x04\x58\x00\x68\x04\
\\x59\x00\x02\x01\x5a\x00\x68\x04\x5b\x00\x68\x04\x5c\x00\x68\x04\
\\x5e\x00\x68\x04\x5f\x00\x68\x04\x60\x00\x68\x04\x61\x00\x01\x01\
\\x62\x00\x68\x04\x63\x00\x68\x04\x64\x00\x68\x04\x65\x00\x00\x01\
\\x67\x00\x68\x04\x69\x00\x68\x04\x6b\x00\x68\x04\x6c\x00\xff\x00\
\\x6d\x00\x68\x04\x6e\x00\x68\x04\x6f\x00\x68\x04\x70\x00\xfe\x00\
\\x71\x00\x68\x04\x72\x00\x68\x04\x73\x00\x68\x04\x74\x00\xfd\x00\
\\x75\x00\x68\x04\x76\x00\x68\x04\x77\x00\x68\x04\x78\x00\xfc\x00\
\\x7a\x00\x68\x04\x7b\x00\x68\x04\x7c\x00\xfb\x00\x7d\x00\x68\x04\
\\x7e\x00\x68\x04\x7f\x00\x68\x04\x80\x00\xfa\x00\x81\x00\x68\x04\
\\x82\x00\x68\x04\x84\x00\x68\x04\x85\x00\x68\x04\x88\x00\x68\x04\
\\x89\x00\x68\x04\x8a\x00\x68\x04\x8b\x00\x68\x04\x8d\x00\x68\x04\
\\x8e\x00\x68\x04\x8f\x00\x68\x04\x90\x00\x68\x04\x91\x00\x68\x04\
\\x93\x00\x68\x04\x94\x00\x68\x04\x96\x00\x68\x04\x97\x00\x68\x04\
\\x98\x00\x68\x04\x99\x00\x68\x04\x9b\x00\x68\x04\x9d\x00\x68\x04\
\\x9f\x00\x68\x04\xa0\x00\x68\x04\xa1\x00\x68\x04\xa4\x00\x68\x04\
\\xa8\x00\x68\x04\xa9\x00\x68\x04\xab\x00\x68\x04\xac\x00\x68\x04\
\\xaf\x00\x68\x04\xb0\x00\x68\x04\xb1\x00\x68\x04\xb2\x00\x68\x04\
\\xb5\x00\x68\x04\x00\x00\
\\x01\x00\x02\x00\x69\x04\x03\x00\x69\x04\x04\x00\x69\x04\x05\x00\x69\x04\
\\x08\x00\x69\x04\x09\x00\x69\x04\x0a\x00\x69\x04\x0b\x00\x69\x04\
\\x0c\x00\x69\x04\x0d\x00\x69\x04\x0e\x00\x69\x04\x11\x00\x69\x04\
\\x12\x00\x69\x04\x13\x00\x69\x04\x14\x00\x69\x04\x15\x00\x69\x04\
\\x16\x00\x69\x04\x17\x00\x69\x04\x18\x00\x69\x04\x19\x00\x69\x04\
\\x1a\x00\x69\x04\x1b\x00\x69\x04\x1c\x00\x69\x04\x1e\x00\x69\x04\
\\x1f\x00\x69\x04\x22\x00\x69\x04\x24\x00\x69\x04\x2b\x00\xa0\x04\
\\x2c\x00\x69\x04\x32\x00\x69\x04\x34\x00\x69\x04\x36\x00\x69\x04\
\\x38\x00\x69\x04\x39\x00\x69\x04\x3a\x00\x69\x04\x3c\x00\x69\x04\
\\x3d\x00\x69\x04\x3e\x00\x69\x04\x3f\x00\x69\x04\x41\x00\x69\x04\
\\x42\x00\x69\x04\x45\x00\x69\x04\x46\x00\x69\x04\x47\x00\x69\x04\
\\x48\x00\x69\x04\x4a\x00\x69\x04\x4b\x00\x69\x04\x4c\x00\x69\x04\
\\x4e\x00\x69\x04\x4f\x00\x69\x04\x50\x00\x69\x04\x52\x00\x69\x04\
\\x53\x00\x69\x04\x54\x00\x69\x04\x56\x00\x69\x04\x58\x00\x69\x04\
\\x5a\x00\x69\x04\x5b\x00\x69\x04\x5c\x00\x69\x04\x5e\x00\x69\x04\
\\x5f\x00\x69\x04\x60\x00\x69\x04\x62\x00\x69\x04\x63\x00\x69\x04\
\\x64\x00\x69\x04\x67\x00\x69\x04\x69\x00\x69\x04\x6b\x00\x69\x04\
\\x6d\x00\x69\x04\x6e\x00\x69\x04\x6f\x00\x69\x04\x71\x00\x69\x04\
\\x72\x00\x69\x04\x73\x00\x69\x04\x75\x00\x69\x04\x76\x00\x69\x04\
\\x77\x00\x69\x04\x7a\x00\x69\x04\x7b\x00\x69\x04\x7d\x00\x69\x04\
\\x7e\x00\x69\x04\x7f\x00\x69\x04\x81\x00\x69\x04\x82\x00\x69\x04\
\\x84\x00\x69\x04\x85\x00\x69\x04\x88\x00\x69\x04\x89\x00\x69\x04\
\\x8a\x00\x69\x04\x8b\x00\x69\x04\x8d\x00\x69\x04\x8e\x00\x69\x04\
\\x8f\x00\x69\x04\x90\x00\x69\x04\x91\x00\x69\x04\x93\x00\x69\x04\
\\x94\x00\x69\x04\x96\x00\x69\x04\x97\x00\x69\x04\x98\x00\x69\x04\
\\x99\x00\x69\x04\x9b\x00\x69\x04\x9d\x00\x69\x04\x9f\x00\x69\x04\
\\xa0\x00\x69\x04\xa1\x00\x69\x04\xa4\x00\x69\x04\xa8\x00\x69\x04\
\\xa9\x00\x69\x04\xab\x00\x69\x04\xac\x00\x69\x04\xaf\x00\x69\x04\
\\xb0\x00\x69\x04\xb1\x00\x69\x04\xb2\x00\x69\x04\xb5\x00\x69\x04\x00\x00\
\\x01\x00\x02\x00\x6a\x04\x03\x00\x6a\x04\x04\x00\x6a\x04\x05\x00\x6a\x04\
\\x08\x00\x6a\x04\x09\x00\x6a\x04\x0a\x00\x6a\x04\x0b\x00\x6a\x04\
\\x0c\x00\x6a\x04\x0d\x00\x6a\x04\x0e\x00\x6a\x04\x11\x00\x6a\x04\
\\x12\x00\x6a\x04\x13\x00\x6a\x04\x14\x00\x6a\x04\x15\x00\x6a\x04\
\\x16\x00\x6a\x04\x17\x00\x6a\x04\x18\x00\x6a\x04\x19\x00\x6a\x04\
\\x1a\x00\x6a\x04\x1b\x00\x6a\x04\x1c\x00\x6a\x04\x1e\x00\x6a\x04\
\\x1f\x00\x6a\x04\x22\x00\x6a\x04\x24\x00\x6a\x04\x2b\x00\xb0\x04\
\\x2c\x00\x6a\x04\x32\x00\x6a\x04\x34\x00\x6a\x04\x36\x00\x6a\x04\
\\x38\x00\x6a\x04\x39\x00\x6a\x04\x3a\x00\x6a\x04\x3c\x00\x6a\x04\
\\x3d\x00\x6a\x04\x3e\x00\x6a\x04\x3f\x00\x6a\x04\x41\x00\x6a\x04\
\\x42\x00\x6a\x04\x45\x00\x6a\x04\x46\x00\x6a\x04\x47\x00\x6a\x04\
\\x48\x00\x6a\x04\x4a\x00\x6a\x04\x4b\x00\x6a\x04\x4c\x00\x6a\x04\
\\x4e\x00\x6a\x04\x4f\x00\x6a\x04\x50\x00\x6a\x04\x52\x00\x6a\x04\
\\x53\x00\x6a\x04\x54\x00\x6a\x04\x56\x00\x6a\x04\x58\x00\x6a\x04\
\\x5a\x00\x6a\x04\x5b\x00\x6a\x04\x5c\x00\x6a\x04\x5e\x00\x6a\x04\
\\x5f\x00\x6a\x04\x60\x00\x6a\x04\x62\x00\x6a\x04\x63\x00\x6a\x04\
\\x64\x00\x6a\x04\x67\x00\x6a\x04\x69\x00\x6a\x04\x6b\x00\x6a\x04\
\\x6d\x00\x6a\x04\x6e\x00\x6a\x04\x6f\x00\x6a\x04\x71\x00\x6a\x04\
\\x72\x00\x6a\x04\x73\x00\x6a\x04\x75\x00\x6a\x04\x76\x00\x6a\x04\
\\x77\x00\x6a\x04\x7a\x00\x6a\x04\x7b\x00\x6a\x04\x7d\x00\x6a\x04\
\\x7e\x00\x6a\x04\x7f\x00\x6a\x04\x81\x00\x6a\x04\x82\x00\x6a\x04\
\\x84\x00\x6a\x04\x85\x00\x6a\x04\x88\x00\x6a\x04\x89\x00\x6a\x04\
\\x8a\x00\x6a\x04\x8b\x00\x6a\x04\x8d\x00\x6a\x04\x8e\x00\x6a\x04\
\\x8f\x00\x6a\x04\x90\x00\x6a\x04\x91\x00\x6a\x04\x93\x00\x6a\x04\
\\x94\x00\x6a\x04\x96\x00\x6a\x04\x97\x00\x6a\x04\x98\x00\x6a\x04\
\\x99\x00\x6a\x04\x9b\x00\x6a\x04\x9d\x00\x6a\x04\x9f\x00\x6a\x04\
\\xa0\x00\x6a\x04\xa1\x00\x6a\x04\xa4\x00\x6a\x04\xa8\x00\x6a\x04\
\\xa9\x00\x6a\x04\xab\x00\x6a\x04\xac\x00\x6a\x04\xaf\x00\x6a\x04\
\\xb0\x00\x6a\x04\xb1\x00\x6a\x04\xb2\x00\x6a\x04\xb5\x00\x6a\x04\x00\x00\
\\x01\x00\x02\x00\x6b\x04\x03\x00\x6b\x04\x04\x00\x6b\x04\x05\x00\x6b\x04\
\\x08\x00\x6b\x04\x09\x00\x6b\x04\x0a\x00\x6b\x04\x0b\x00\x6b\x04\
\\x0c\x00\x6b\x04\x0d\x00\x6b\x04\x0e\x00\x6b\x04\x11\x00\x6b\x04\
\\x12\x00\x6b\x04\x13\x00\x6b\x04\x14\x00\x6b\x04\x15\x00\x6b\x04\
\\x16\x00\x6b\x04\x17\x00\x6b\x04\x18\x00\x6b\x04\x19\x00\x6b\x04\
\\x1a\x00\x6b\x04\x1b\x00\x6b\x04\x1c\x00\x6b\x04\x1e\x00\x6b\x04\
\\x1f\x00\x6b\x04\x22\x00\x6b\x04\x24\x00\x6b\x04\x2b\x00\xb1\x04\
\\x2c\x00\x6b\x04\x32\x00\x6b\x04\x34\x00\x6b\x04\x36\x00\x6b\x04\
\\x38\x00\x6b\x04\x39\x00\x6b\x04\x3a\x00\x6b\x04\x3c\x00\x6b\x04\
\\x3d\x00\x6b\x04\x3e\x00\x6b\x04\x3f\x00\x6b\x04\x41\x00\x6b\x04\
\\x42\x00\x6b\x04\x45\x00\x6b\x04\x46\x00\x6b\x04\x47\x00\x6b\x04\
\\x48\x00\x6b\x04\x4a\x00\x6b\x04\x4b\x00\x6b\x04\x4c\x00\x6b\x04\
\\x4e\x00\x6b\x04\x4f\x00\x6b\x04\x50\x00\x6b\x04\x52\x00\x6b\x04\
\\x53\x00\x6b\x04\x54\x00\x6b\x04\x56\x00\x6b\x04\x58\x00\x6b\x04\
\\x5a\x00\x6b\x04\x5b\x00\x6b\x04\x5c\x00\x6b\x04\x5e\x00\x6b\x04\
\\x5f\x00\x6b\x04\x60\x00\x6b\x04\x62\x00\x6b\x04\x63\x00\x6b\x04\
\\x64\x00\x6b\x04\x67\x00\x6b\x04\x69\x00\x6b\x04\x6b\x00\x6b\x04\
\\x6d\x00\x6b\x04\x6e\x00\x6b\x04\x6f\x00\x6b\x04\x71\x00\x6b\x04\
\\x72\x00\x6b\x04\x73\x00\x6b\x04\x75\x00\x6b\x04\x76\x00\x6b\x04\
\\x77\x00\x6b\x04\x7a\x00\x6b\x04\x7b\x00\x6b\x04\x7d\x00\x6b\x04\
\\x7e\x00\x6b\x04\x7f\x00\x6b\x04\x81\x00\x6b\x04\x82\x00\x6b\x04\
\\x84\x00\x6b\x04\x85\x00\x6b\x04\x88\x00\x6b\x04\x89\x00\x6b\x04\
\\x8a\x00\x6b\x04\x8b\x00\x6b\x04\x8d\x00\x6b\x04\x8e\x00\x6b\x04\
\\x8f\x00\x6b\x04\x90\x00\x6b\x04\x91\x00\x6b\x04\x93\x00\x6b\x04\
\\x94\x00\x6b\x04\x96\x00\x6b\x04\x97\x00\x6b\x04\x98\x00\x6b\x04\
\\x99\x00\x6b\x04\x9b\x00\x6b\x04\x9d\x00\x6b\x04\x9f\x00\x6b\x04\
\\xa0\x00\x6b\x04\xa1\x00\x6b\x04\xa4\x00\x6b\x04\xa8\x00\x6b\x04\
\\xa9\x00\x6b\x04\xab\x00\x6b\x04\xac\x00\x6b\x04\xaf\x00\x6b\x04\
\\xb0\x00\x6b\x04\xb1\x00\x6b\x04\xb2\x00\x6b\x04\xb5\x00\x6b\x04\x00\x00\
\\x01\x00\x02\x00\x6c\x04\x03\x00\x6c\x04\x04\x00\x6c\x04\x05\x00\x6c\x04\
\\x08\x00\x6c\x04\x09\x00\x6c\x04\x0a\x00\x6c\x04\x0b\x00\x6c\x04\
\\x0c\x00\x6c\x04\x0d\x00\x6c\x04\x0e\x00\x6c\x04\x11\x00\x6c\x04\
\\x12\x00\x6c\x04\x13\x00\x6c\x04\x14\x00\x6c\x04\x15\x00\x6c\x04\
\\x16\x00\x6c\x04\x17\x00\x6c\x04\x18\x00\x6c\x04\x19\x00\x6c\x04\
\\x1a\x00\x6c\x04\x1b\x00\x6c\x04\x1c\x00\x6c\x04\x1e\x00\x6c\x04\
\\x1f\x00\x6c\x04\x22\x00\x6c\x04\x24\x00\x6c\x04\x2b\x00\xb2\x04\
\\x2c\x00\x6c\x04\x32\x00\x6c\x04\x34\x00\x6c\x04\x36\x00\x6c\x04\
\\x38\x00\x6c\x04\x39\x00\x6c\x04\x3a\x00\x6c\x04\x3c\x00\x6c\x04\
\\x3d\x00\x6c\x04\x3e\x00\x6c\x04\x3f\x00\x6c\x04\x41\x00\x6c\x04\
\\x42\x00\x6c\x04\x45\x00\x6c\x04\x46\x00\x6c\x04\x47\x00\x6c\x04\
\\x48\x00\x6c\x04\x4a\x00\x6c\x04\x4b\x00\x6c\x04\x4c\x00\x6c\x04\
\\x4e\x00\x6c\x04\x4f\x00\x6c\x04\x50\x00\x6c\x04\x52\x00\x6c\x04\
\\x53\x00\x6c\x04\x54\x00\x6c\x04\x56\x00\x6c\x04\x58\x00\x6c\x04\
\\x5a\x00\x6c\x04\x5b\x00\x6c\x04\x5c\x00\x6c\x04\x5e\x00\x6c\x04\
\\x5f\x00\x6c\x04\x60\x00\x6c\x04\x62\x00\x6c\x04\x63\x00\x6c\x04\
\\x64\x00\x6c\x04\x67\x00\x6c\x04\x69\x00\x6c\x04\x6b\x00\x6c\x04\
\\x6d\x00\x6c\x04\x6e\x00\x6c\x04\x6f\x00\x6c\x04\x71\x00\x6c\x04\
\\x72\x00\x6c\x04\x73\x00\x6c\x04\x75\x00\x6c\x04\x76\x00\x6c\x04\
\\x77\x00\x6c\x04\x7a\x00\x6c\x04\x7b\x00\x6c\x04\x7d\x00\x6c\x04\
\\x7e\x00\x6c\x04\x7f\x00\x6c\x04\x81\x00\x6c\x04\x82\x00\x6c\x04\
\\x84\x00\x6c\x04\x85\x00\x6c\x04\x88\x00\x6c\x04\x89\x00\x6c\x04\
\\x8a\x00\x6c\x04\x8b\x00\x6c\x04\x8d\x00\x6c\x04\x8e\x00\x6c\x04\
\\x8f\x00\x6c\x04\x90\x00\x6c\x04\x91\x00\x6c\x04\x93\x00\x6c\x04\
\\x94\x00\x6c\x04\x96\x00\x6c\x04\x97\x00\x6c\x04\x98\x00\x6c\x04\
\\x99\x00\x6c\x04\x9b\x00\x6c\x04\x9d\x00\x6c\x04\x9f\x00\x6c\x04\
\\xa0\x00\x6c\x04\xa1\x00\x6c\x04\xa4\x00\x6c\x04\xa8\x00\x6c\x04\
\\xa9\x00\x6c\x04\xab\x00\x6c\x04\xac\x00\x6c\x04\xaf\x00\x6c\x04\
\\xb0\x00\x6c\x04\xb1\x00\x6c\x04\xb2\x00\x6c\x04\xb5\x00\x6c\x04\x00\x00\
\\x01\x00\x02\x00\x6d\x04\x03\x00\x6d\x04\x04\x00\x6d\x04\x05\x00\x6d\x04\
\\x08\x00\x6d\x04\x09\x00\x6d\x04\x0a\x00\x6d\x04\x0b\x00\x6d\x04\
\\x0c\x00\x6d\x04\x0d\x00\x6d\x04\x0e\x00\x6d\x04\x11\x00\x6d\x04\
\\x12\x00\x6d\x04\x13\x00\x6d\x04\x14\x00\x6d\x04\x15\x00\x6d\x04\
\\x16\x00\x6d\x04\x17\x00\x6d\x04\x18\x00\x6d\x04\x19\x00\x6d\x04\
\\x1a\x00\x6d\x04\x1b\x00\x6d\x04\x1c\x00\x6d\x04\x1e\x00\x6d\x04\
\\x1f\x00\x6d\x04\x22\x00\x6d\x04\x24\x00\x6d\x04\x2b\x00\xb3\x04\
\\x2c\x00\x6d\x04\x32\x00\x6d\x04\x34\x00\x6d\x04\x36\x00\x6d\x04\
\\x38\x00\x6d\x04\x39\x00\x6d\x04\x3a\x00\x6d\x04\x3c\x00\x6d\x04\
\\x3d\x00\x6d\x04\x3e\x00\x6d\x04\x3f\x00\x6d\x04\x41\x00\x6d\x04\
\\x42\x00\x6d\x04\x45\x00\x6d\x04\x46\x00\x6d\x04\x47\x00\x6d\x04\
\\x48\x00\x6d\x04\x4a\x00\x6d\x04\x4b\x00\x6d\x04\x4c\x00\x6d\x04\
\\x4e\x00\x6d\x04\x4f\x00\x6d\x04\x50\x00\x6d\x04\x52\x00\x6d\x04\
\\x53\x00\x6d\x04\x54\x00\x6d\x04\x56\x00\x6d\x04\x58\x00\x6d\x04\
\\x5a\x00\x6d\x04\x5b\x00\x6d\x04\x5c\x00\x6d\x04\x5e\x00\x6d\x04\
\\x5f\x00\x6d\x04\x60\x00\x6d\x04\x62\x00\x6d\x04\x63\x00\x6d\x04\
\\x64\x00\x6d\x04\x67\x00\x6d\x04\x69\x00\x6d\x04\x6b\x00\x6d\x04\
\\x6d\x00\x6d\x04\x6e\x00\x6d\x04\x6f\x00\x6d\x04\x71\x00\x6d\x04\
\\x72\x00\x6d\x04\x73\x00\x6d\x04\x75\x00\x6d\x04\x76\x00\x6d\x04\
\\x77\x00\x6d\x04\x7a\x00\x6d\x04\x7b\x00\x6d\x04\x7d\x00\x6d\x04\
\\x7e\x00\x6d\x04\x7f\x00\x6d\x04\x81\x00\x6d\x04\x82\x00\x6d\x04\
\\x84\x00\x6d\x04\x85\x00\x6d\x04\x88\x00\x6d\x04\x89\x00\x6d\x04\
\\x8a\x00\x6d\x04\x8b\x00\x6d\x04\x8d\x00\x6d\x04\x8e\x00\x6d\x04\
\\x8f\x00\x6d\x04\x90\x00\x6d\x04\x91\x00\x6d\x04\x93\x00\x6d\x04\
\\x94\x00\x6d\x04\x96\x00\x6d\x04\x97\x00\x6d\x04\x98\x00\x6d\x04\
\\x99\x00\x6d\x04\x9b\x00\x6d\x04\x9d\x00\x6d\x04\x9f\x00\x6d\x04\
\\xa0\x00\x6d\x04\xa1\x00\x6d\x04\xa4\x00\x6d\x04\xa8\x00\x6d\x04\
\\xa9\x00\x6d\x04\xab\x00\x6d\x04\xac\x00\x6d\x04\xaf\x00\x6d\x04\
\\xb0\x00\x6d\x04\xb1\x00\x6d\x04\xb2\x00\x6d\x04\xb5\x00\x6d\x04\x00\x00\
\\x01\x00\x02\x00\x6e\x04\x03\x00\x6e\x04\x04\x00\x6e\x04\x05\x00\x6e\x04\
\\x08\x00\x6e\x04\x09\x00\x6e\x04\x0a\x00\x6e\x04\x0b\x00\x6e\x04\
\\x0c\x00\x6e\x04\x0d\x00\x6e\x04\x0e\x00\x6e\x04\x11\x00\x6e\x04\
\\x12\x00\x6e\x04\x13\x00\x6e\x04\x14\x00\x6e\x04\x15\x00\x6e\x04\
\\x16\x00\x6e\x04\x17\x00\x6e\x04\x18\x00\x6e\x04\x19\x00\x6e\x04\
\\x1a\x00\x6e\x04\x1b\x00\x6e\x04\x1c\x00\x6e\x04\x1e\x00\x6e\x04\
\\x1f\x00\x6e\x04\x22\x00\x6e\x04\x24\x00\x6e\x04\x2b\x00\xb4\x04\
\\x2c\x00\x6e\x04\x32\x00\x6e\x04\x34\x00\x6e\x04\x36\x00\x6e\x04\
\\x38\x00\x6e\x04\x39\x00\x6e\x04\x3a\x00\x6e\x04\x3c\x00\x6e\x04\
\\x3d\x00\x6e\x04\x3e\x00\x6e\x04\x3f\x00\x6e\x04\x41\x00\x6e\x04\
\\x42\x00\x6e\x04\x45\x00\x6e\x04\x46\x00\x6e\x04\x47\x00\x6e\x04\
\\x48\x00\x6e\x04\x4a\x00\x6e\x04\x4b\x00\x6e\x04\x4c\x00\x6e\x04\
\\x4e\x00\x6e\x04\x4f\x00\x6e\x04\x50\x00\x6e\x04\x52\x00\x6e\x04\
\\x53\x00\x6e\x04\x54\x00\x6e\x04\x56\x00\x6e\x04\x58\x00\x6e\x04\
\\x5a\x00\x6e\x04\x5b\x00\x6e\x04\x5c\x00\x6e\x04\x5e\x00\x6e\x04\
\\x5f\x00\x6e\x04\x60\x00\x6e\x04\x62\x00\x6e\x04\x63\x00\x6e\x04\
\\x64\x00\x6e\x04\x67\x00\x6e\x04\x69\x00\x6e\x04\x6b\x00\x6e\x04\
\\x6d\x00\x6e\x04\x6e\x00\x6e\x04\x6f\x00\x6e\x04\x71\x00\x6e\x04\
\\x72\x00\x6e\x04\x73\x00\x6e\x04\x75\x00\x6e\x04\x76\x00\x6e\x04\
\\x77\x00\x6e\x04\x7a\x00\x6e\x04\x7b\x00\x6e\x04\x7d\x00\x6e\x04\
\\x7e\x00\x6e\x04\x7f\x00\x6e\x04\x81\x00\x6e\x04\x82\x00\x6e\x04\
\\x84\x00\x6e\x04\x85\x00\x6e\x04\x88\x00\x6e\x04\x89\x00\x6e\x04\
\\x8a\x00\x6e\x04\x8b\x00\x6e\x04\x8d\x00\x6e\x04\x8e\x00\x6e\x04\
\\x8f\x00\x6e\x04\x90\x00\x6e\x04\x91\x00\x6e\x04\x93\x00\x6e\x04\
\\x94\x00\x6e\x04\x96\x00\x6e\x04\x97\x00\x6e\x04\x98\x00\x6e\x04\
\\x99\x00\x6e\x04\x9b\x00\x6e\x04\x9d\x00\x6e\x04\x9f\x00\x6e\x04\
\\xa0\x00\x6e\x04\xa1\x00\x6e\x04\xa4\x00\x6e\x04\xa8\x00\x6e\x04\
\\xa9\x00\x6e\x04\xab\x00\x6e\x04\xac\x00\x6e\x04\xaf\x00\x6e\x04\
\\xb0\x00\x6e\x04\xb1\x00\x6e\x04\xb2\x00\x6e\x04\xb5\x00\x6e\x04\x00\x00\
\\x01\x00\x02\x00\x6f\x04\x03\x00\x6f\x04\x04\x00\x6f\x04\x05\x00\x6f\x04\
\\x08\x00\x6f\x04\x09\x00\x6f\x04\x0a\x00\x6f\x04\x0b\x00\x6f\x04\
\\x0c\x00\x6f\x04\x0d\x00\x6f\x04\x0e\x00\x6f\x04\x11\x00\x6f\x04\
\\x12\x00\x6f\x04\x13\x00\x6f\x04\x14\x00\x6f\x04\x15\x00\x6f\x04\
\\x16\x00\x6f\x04\x17\x00\x6f\x04\x18\x00\x6f\x04\x19\x00\x6f\x04\
\\x1a\x00\x6f\x04\x1b\x00\x6f\x04\x1c\x00\x6f\x04\x1e\x00\x6f\x04\
\\x1f\x00\x6f\x04\x22\x00\x6f\x04\x24\x00\x6f\x04\x2b\x00\xb5\x04\
\\x2c\x00\x6f\x04\x32\x00\x6f\x04\x34\x00\x6f\x04\x36\x00\x6f\x04\
\\x38\x00\x6f\x04\x39\x00\x6f\x04\x3a\x00\x6f\x04\x3c\x00\x6f\x04\
\\x3d\x00\x6f\x04\x3e\x00\x6f\x04\x3f\x00\x6f\x04\x41\x00\x6f\x04\
\\x42\x00\x6f\x04\x45\x00\x6f\x04\x46\x00\x6f\x04\x47\x00\x6f\x04\
\\x48\x00\x6f\x04\x4a\x00\x6f\x04\x4b\x00\x6f\x04\x4c\x00\x6f\x04\
\\x4e\x00\x6f\x04\x4f\x00\x6f\x04\x50\x00\x6f\x04\x52\x00\x6f\x04\
\\x53\x00\x6f\x04\x54\x00\x6f\x04\x56\x00\x6f\x04\x58\x00\x6f\x04\
\\x5a\x00\x6f\x04\x5b\x00\x6f\x04\x5c\x00\x6f\x04\x5e\x00\x6f\x04\
\\x5f\x00\x6f\x04\x60\x00\x6f\x04\x62\x00\x6f\x04\x63\x00\x6f\x04\
\\x64\x00\x6f\x04\x67\x00\x6f\x04\x69\x00\x6f\x04\x6b\x00\x6f\x04\
\\x6d\x00\x6f\x04\x6e\x00\x6f\x04\x6f\x00\x6f\x04\x71\x00\x6f\x04\
\\x72\x00\x6f\x04\x73\x00\x6f\x04\x75\x00\x6f\x04\x76\x00\x6f\x04\
\\x77\x00\x6f\x04\x7a\x00\x6f\x04\x7b\x00\x6f\x04\x7d\x00\x6f\x04\
\\x7e\x00\x6f\x04\x7f\x00\x6f\x04\x81\x00\x6f\x04\x82\x00\x6f\x04\
\\x84\x00\x6f\x04\x85\x00\x6f\x04\x88\x00\x6f\x04\x89\x00\x6f\x04\
\\x8a\x00\x6f\x04\x8b\x00\x6f\x04\x8d\x00\x6f\x04\x8e\x00\x6f\x04\
\\x8f\x00\x6f\x04\x90\x00\x6f\x04\x91\x00\x6f\x04\x93\x00\x6f\x04\
\\x94\x00\x6f\x04\x96\x00\x6f\x04\x97\x00\x6f\x04\x98\x00\x6f\x04\
\\x99\x00\x6f\x04\x9b\x00\x6f\x04\x9d\x00\x6f\x04\x9f\x00\x6f\x04\
\\xa0\x00\x6f\x04\xa1\x00\x6f\x04\xa4\x00\x6f\x04\xa8\x00\x6f\x04\
\\xa9\x00\x6f\x04\xab\x00\x6f\x04\xac\x00\x6f\x04\xaf\x00\x6f\x04\
\\xb0\x00\x6f\x04\xb1\x00\x6f\x04\xb2\x00\x6f\x04\xb5\x00\x6f\x04\x00\x00\
\\x01\x00\x02\x00\x70\x04\x03\x00\x70\x04\x04\x00\x70\x04\x05\x00\x70\x04\
\\x08\x00\x70\x04\x09\x00\x70\x04\x0a\x00\x70\x04\x0b\x00\x70\x04\
\\x0c\x00\x70\x04\x0d\x00\x70\x04\x0e\x00\x70\x04\x11\x00\x70\x04\
\\x12\x00\x70\x04\x13\x00\x70\x04\x14\x00\x70\x04\x15\x00\x70\x04\
\\x16\x00\x70\x04\x17\x00\x70\x04\x18\x00\x70\x04\x19\x00\x70\x04\
\\x1a\x00\x70\x04\x1b\x00\x70\x04\x1c\x00\x70\x04\x1e\x00\x70\x04\
\\x1f\x00\x70\x04\x22\x00\x70\x04\x24\x00\x70\x04\x2b\x00\xb6\x04\
\\x2c\x00\x70\x04\x32\x00\x70\x04\x34\x00\x70\x04\x36\x00\x70\x04\
\\x38\x00\x70\x04\x39\x00\x70\x04\x3a\x00\x70\x04\x3c\x00\x70\x04\
\\x3d\x00\x70\x04\x3e\x00\x70\x04\x3f\x00\x70\x04\x41\x00\x70\x04\
\\x42\x00\x70\x04\x45\x00\x70\x04\x46\x00\x70\x04\x47\x00\x70\x04\
\\x48\x00\x70\x04\x4a\x00\x70\x04\x4b\x00\x70\x04\x4c\x00\x70\x04\
\\x4e\x00\x70\x04\x4f\x00\x70\x04\x50\x00\x70\x04\x52\x00\x70\x04\
\\x53\x00\x70\x04\x54\x00\x70\x04\x56\x00\x70\x04\x58\x00\x70\x04\
\\x5a\x00\x70\x04\x5b\x00\x70\x04\x5c\x00\x70\x04\x5e\x00\x70\x04\
\\x5f\x00\x70\x04\x60\x00\x70\x04\x62\x00\x70\x04\x63\x00\x70\x04\
\\x64\x00\x70\x04\x67\x00\x70\x04\x69\x00\x70\x04\x6b\x00\x70\x04\
\\x6d\x00\x70\x04\x6e\x00\x70\x04\x6f\x00\x70\x04\x71\x00\x70\x04\
\\x72\x00\x70\x04\x73\x00\x70\x04\x75\x00\x70\x04\x76\x00\x70\x04\
\\x77\x00\x70\x04\x7a\x00\x70\x04\x7b\x00\x70\x04\x7d\x00\x70\x04\
\\x7e\x00\x70\x04\x7f\x00\x70\x04\x81\x00\x70\x04\x82\x00\x70\x04\
\\x84\x00\x70\x04\x85\x00\x70\x04\x88\x00\x70\x04\x89\x00\x70\x04\
\\x8a\x00\x70\x04\x8b\x00\x70\x04\x8d\x00\x70\x04\x8e\x00\x70\x04\
\\x8f\x00\x70\x04\x90\x00\x70\x04\x91\x00\x70\x04\x93\x00\x70\x04\
\\x94\x00\x70\x04\x96\x00\x70\x04\x97\x00\x70\x04\x98\x00\x70\x04\
\\x99\x00\x70\x04\x9b\x00\x70\x04\x9d\x00\x70\x04\x9f\x00\x70\x04\
\\xa0\x00\x70\x04\xa1\x00\x70\x04\xa4\x00\x70\x04\xa8\x00\x70\x04\
\\xa9\x00\x70\x04\xab\x00\x70\x04\xac\x00\x70\x04\xaf\x00\x70\x04\
\\xb0\x00\x70\x04\xb1\x00\x70\x04\xb2\x00\x70\x04\xb5\x00\x70\x04\x00\x00\
\\x01\x00\x02\x00\x71\x04\x03\x00\x71\x04\x04\x00\x71\x04\x05\x00\x71\x04\
\\x08\x00\x71\x04\x09\x00\x71\x04\x0a\x00\x71\x04\x0b\x00\x71\x04\
\\x0c\x00\x71\x04\x0d\x00\x71\x04\x0e\x00\x71\x04\x11\x00\x71\x04\
\\x12\x00\x71\x04\x13\x00\x71\x04\x14\x00\x71\x04\x15\x00\x71\x04\
\\x16\x00\x71\x04\x17\x00\x71\x04\x18\x00\x71\x04\x19\x00\x71\x04\
\\x1a\x00\x71\x04\x1b\x00\x71\x04\x1c\x00\x71\x04\x1e\x00\x71\x04\
\\x1f\x00\x71\x04\x22\x00\x71\x04\x24\x00\x71\x04\x2b\x00\xb7\x04\
\\x2c\x00\x71\x04\x32\x00\x71\x04\x34\x00\x71\x04\x36\x00\x71\x04\
\\x38\x00\x71\x04\x39\x00\x71\x04\x3a\x00\x71\x04\x3c\x00\x71\x04\
\\x3d\x00\x71\x04\x3e\x00\x71\x04\x3f\x00\x71\x04\x41\x00\x71\x04\
\\x42\x00\x71\x04\x45\x00\x71\x04\x46\x00\x71\x04\x47\x00\x71\x04\
\\x48\x00\x71\x04\x4a\x00\x71\x04\x4b\x00\x71\x04\x4c\x00\x71\x04\
\\x4e\x00\x71\x04\x4f\x00\x71\x04\x50\x00\x71\x04\x52\x00\x71\x04\
\\x53\x00\x71\x04\x54\x00\x71\x04\x56\x00\x71\x04\x58\x00\x71\x04\
\\x5a\x00\x71\x04\x5b\x00\x71\x04\x5c\x00\x71\x04\x5e\x00\x71\x04\
\\x5f\x00\x71\x04\x60\x00\x71\x04\x62\x00\x71\x04\x63\x00\x71\x04\
\\x64\x00\x71\x04\x67\x00\x71\x04\x69\x00\x71\x04\x6b\x00\x71\x04\
\\x6d\x00\x71\x04\x6e\x00\x71\x04\x6f\x00\x71\x04\x71\x00\x71\x04\
\\x72\x00\x71\x04\x73\x00\x71\x04\x75\x00\x71\x04\x76\x00\x71\x04\
\\x77\x00\x71\x04\x7a\x00\x71\x04\x7b\x00\x71\x04\x7d\x00\x71\x04\
\\x7e\x00\x71\x04\x7f\x00\x71\x04\x81\x00\x71\x04\x82\x00\x71\x04\
\\x84\x00\x71\x04\x85\x00\x71\x04\x88\x00\x71\x04\x89\x00\x71\x04\
\\x8a\x00\x71\x04\x8b\x00\x71\x04\x8d\x00\x71\x04\x8e\x00\x71\x04\
\\x8f\x00\x71\x04\x90\x00\x71\x04\x91\x00\x71\x04\x93\x00\x71\x04\
\\x94\x00\x71\x04\x96\x00\x71\x04\x97\x00\x71\x04\x98\x00\x71\x04\
\\x99\x00\x71\x04\x9b\x00\x71\x04\x9d\x00\x71\x04\x9f\x00\x71\x04\
\\xa0\x00\x71\x04\xa1\x00\x71\x04\xa4\x00\x71\x04\xa8\x00\x71\x04\
\\xa9\x00\x71\x04\xab\x00\x71\x04\xac\x00\x71\x04\xaf\x00\x71\x04\
\\xb0\x00\x71\x04\xb1\x00\x71\x04\xb2\x00\x71\x04\xb5\x00\x71\x04\x00\x00\
\\x01\x00\x02\x00\x72\x04\x03\x00\x72\x04\x04\x00\x72\x04\x05\x00\x72\x04\
\\x08\x00\x72\x04\x09\x00\x72\x04\x0a\x00\x72\x04\x0b\x00\x72\x04\
\\x0c\x00\x72\x04\x0d\x00\x72\x04\x0e\x00\x72\x04\x11\x00\x72\x04\
\\x12\x00\x72\x04\x13\x00\x72\x04\x14\x00\x72\x04\x15\x00\x72\x04\
\\x16\x00\x72\x04\x17\x00\x72\x04\x18\x00\x72\x04\x19\x00\x72\x04\
\\x1a\x00\x72\x04\x1b\x00\x72\x04\x1c\x00\x72\x04\x1e\x00\x72\x04\
\\x1f\x00\x72\x04\x22\x00\x72\x04\x24\x00\x72\x04\x2b\x00\xb8\x04\
\\x2c\x00\x72\x04\x32\x00\x72\x04\x34\x00\x72\x04\x36\x00\x72\x04\
\\x38\x00\x72\x04\x39\x00\x72\x04\x3a\x00\x72\x04\x3c\x00\x72\x04\
\\x3d\x00\x72\x04\x3e\x00\x72\x04\x3f\x00\x72\x04\x41\x00\x72\x04\
\\x42\x00\x72\x04\x45\x00\x72\x04\x46\x00\x72\x04\x47\x00\x72\x04\
\\x48\x00\x72\x04\x4a\x00\x72\x04\x4b\x00\x72\x04\x4c\x00\x72\x04\
\\x4e\x00\x72\x04\x4f\x00\x72\x04\x50\x00\x72\x04\x52\x00\x72\x04\
\\x53\x00\x72\x04\x54\x00\x72\x04\x56\x00\x72\x04\x58\x00\x72\x04\
\\x5a\x00\x72\x04\x5b\x00\x72\x04\x5c\x00\x72\x04\x5e\x00\x72\x04\
\\x5f\x00\x72\x04\x60\x00\x72\x04\x62\x00\x72\x04\x63\x00\x72\x04\
\\x64\x00\x72\x04\x67\x00\x72\x04\x69\x00\x72\x04\x6b\x00\x72\x04\
\\x6d\x00\x72\x04\x6e\x00\x72\x04\x6f\x00\x72\x04\x71\x00\x72\x04\
\\x72\x00\x72\x04\x73\x00\x72\x04\x75\x00\x72\x04\x76\x00\x72\x04\
\\x77\x00\x72\x04\x7a\x00\x72\x04\x7b\x00\x72\x04\x7d\x00\x72\x04\
\\x7e\x00\x72\x04\x7f\x00\x72\x04\x81\x00\x72\x04\x82\x00\x72\x04\
\\x84\x00\x72\x04\x85\x00\x72\x04\x88\x00\x72\x04\x89\x00\x72\x04\
\\x8a\x00\x72\x04\x8b\x00\x72\x04\x8d\x00\x72\x04\x8e\x00\x72\x04\
\\x8f\x00\x72\x04\x90\x00\x72\x04\x91\x00\x72\x04\x93\x00\x72\x04\
\\x94\x00\x72\x04\x96\x00\x72\x04\x97\x00\x72\x04\x98\x00\x72\x04\
\\x99\x00\x72\x04\x9b\x00\x72\x04\x9d\x00\x72\x04\x9f\x00\x72\x04\
\\xa0\x00\x72\x04\xa1\x00\x72\x04\xa4\x00\x72\x04\xa8\x00\x72\x04\
\\xa9\x00\x72\x04\xab\x00\x72\x04\xac\x00\x72\x04\xaf\x00\x72\x04\
\\xb0\x00\x72\x04\xb1\x00\x72\x04\xb2\x00\x72\x04\xb5\x00\x72\x04\x00\x00\
\\x01\x00\x02\x00\x73\x04\x03\x00\x73\x04\x04\x00\x73\x04\x05\x00\x73\x04\
\\x08\x00\x73\x04\x09\x00\x73\x04\x0a\x00\x73\x04\x0b\x00\x73\x04\
\\x0c\x00\x73\x04\x0d\x00\x73\x04\x0e\x00\x73\x04\x11\x00\x73\x04\
\\x12\x00\x73\x04\x13\x00\x73\x04\x14\x00\x73\x04\x15\x00\x73\x04\
\\x16\x00\x73\x04\x17\x00\x73\x04\x18\x00\x73\x04\x19\x00\x73\x04\
\\x1a\x00\x73\x04\x1b\x00\x73\x04\x1c\x00\x73\x04\x1e\x00\x73\x04\
\\x1f\x00\x73\x04\x22\x00\x73\x04\x24\x00\x73\x04\x2b\x00\xb9\x04\
\\x2c\x00\x73\x04\x32\x00\x73\x04\x34\x00\x73\x04\x36\x00\x73\x04\
\\x38\x00\x73\x04\x39\x00\x73\x04\x3a\x00\x73\x04\x3c\x00\x73\x04\
\\x3d\x00\x73\x04\x3e\x00\x73\x04\x3f\x00\x73\x04\x41\x00\x73\x04\
\\x42\x00\x73\x04\x45\x00\x73\x04\x46\x00\x73\x04\x47\x00\x73\x04\
\\x48\x00\x73\x04\x4a\x00\x73\x04\x4b\x00\x73\x04\x4c\x00\x73\x04\
\\x4e\x00\x73\x04\x4f\x00\x73\x04\x50\x00\x73\x04\x52\x00\x73\x04\
\\x53\x00\x73\x04\x54\x00\x73\x04\x56\x00\x73\x04\x58\x00\x73\x04\
\\x5a\x00\x73\x04\x5b\x00\x73\x04\x5c\x00\x73\x04\x5e\x00\x73\x04\
\\x5f\x00\x73\x04\x60\x00\x73\x04\x62\x00\x73\x04\x63\x00\x73\x04\
\\x64\x00\x73\x04\x67\x00\x73\x04\x69\x00\x73\x04\x6b\x00\x73\x04\
\\x6d\x00\x73\x04\x6e\x00\x73\x04\x6f\x00\x73\x04\x71\x00\x73\x04\
\\x72\x00\x73\x04\x73\x00\x73\x04\x75\x00\x73\x04\x76\x00\x73\x04\
\\x77\x00\x73\x04\x7a\x00\x73\x04\x7b\x00\x73\x04\x7d\x00\x73\x04\
\\x7e\x00\x73\x04\x7f\x00\x73\x04\x81\x00\x73\x04\x82\x00\x73\x04\
\\x84\x00\x73\x04\x85\x00\x73\x04\x88\x00\x73\x04\x89\x00\x73\x04\
\\x8a\x00\x73\x04\x8b\x00\x73\x04\x8d\x00\x73\x04\x8e\x00\x73\x04\
\\x8f\x00\x73\x04\x90\x00\x73\x04\x91\x00\x73\x04\x93\x00\x73\x04\
\\x94\x00\x73\x04\x96\x00\x73\x04\x97\x00\x73\x04\x98\x00\x73\x04\
\\x99\x00\x73\x04\x9b\x00\x73\x04\x9d\x00\x73\x04\x9f\x00\x73\x04\
\\xa0\x00\x73\x04\xa1\x00\x73\x04\xa4\x00\x73\x04\xa8\x00\x73\x04\
\\xa9\x00\x73\x04\xab\x00\x73\x04\xac\x00\x73\x04\xaf\x00\x73\x04\
\\xb0\x00\x73\x04\xb1\x00\x73\x04\xb2\x00\x73\x04\xb5\x00\x73\x04\x00\x00\
\\x01\x00\x02\x00\x74\x04\x03\x00\x74\x04\x04\x00\x74\x04\x05\x00\x74\x04\
\\x08\x00\x74\x04\x09\x00\x74\x04\x0a\x00\x74\x04\x0b\x00\x74\x04\
\\x0c\x00\x74\x04\x0d\x00\x74\x04\x0e\x00\x74\x04\x11\x00\x74\x04\
\\x12\x00\x74\x04\x13\x00\x74\x04\x14\x00\x74\x04\x15\x00\x74\x04\
\\x16\x00\x74\x04\x17\x00\x74\x04\x18\x00\x74\x04\x19\x00\x74\x04\
\\x1a\x00\x74\x04\x1b\x00\x74\x04\x1c\x00\x74\x04\x1e\x00\x74\x04\
\\x1f\x00\x74\x04\x22\x00\x74\x04\x24\x00\x74\x04\x2b\x00\xba\x04\
\\x2c\x00\x74\x04\x32\x00\x74\x04\x34\x00\x74\x04\x36\x00\x74\x04\
\\x38\x00\x74\x04\x39\x00\x74\x04\x3a\x00\x74\x04\x3c\x00\x74\x04\
\\x3d\x00\x74\x04\x3e\x00\x74\x04\x3f\x00\x74\x04\x41\x00\x74\x04\
\\x42\x00\x74\x04\x45\x00\x74\x04\x46\x00\x74\x04\x47\x00\x74\x04\
\\x48\x00\x74\x04\x4a\x00\x74\x04\x4b\x00\x74\x04\x4c\x00\x74\x04\
\\x4e\x00\x74\x04\x4f\x00\x74\x04\x50\x00\x74\x04\x52\x00\x74\x04\
\\x53\x00\x74\x04\x54\x00\x74\x04\x56\x00\x74\x04\x58\x00\x74\x04\
\\x5a\x00\x74\x04\x5b\x00\x74\x04\x5c\x00\x74\x04\x5e\x00\x74\x04\
\\x5f\x00\x74\x04\x60\x00\x74\x04\x62\x00\x74\x04\x63\x00\x74\x04\
\\x64\x00\x74\x04\x67\x00\x74\x04\x69\x00\x74\x04\x6b\x00\x74\x04\
\\x6d\x00\x74\x04\x6e\x00\x74\x04\x6f\x00\x74\x04\x71\x00\x74\x04\
\\x72\x00\x74\x04\x73\x00\x74\x04\x75\x00\x74\x04\x76\x00\x74\x04\
\\x77\x00\x74\x04\x7a\x00\x74\x04\x7b\x00\x74\x04\x7d\x00\x74\x04\
\\x7e\x00\x74\x04\x7f\x00\x74\x04\x81\x00\x74\x04\x82\x00\x74\x04\
\\x84\x00\x74\x04\x85\x00\x74\x04\x88\x00\x74\x04\x89\x00\x74\x04\
\\x8a\x00\x74\x04\x8b\x00\x74\x04\x8d\x00\x74\x04\x8e\x00\x74\x04\
\\x8f\x00\x74\x04\x90\x00\x74\x04\x91\x00\x74\x04\x93\x00\x74\x04\
\\x94\x00\x74\x04\x96\x00\x74\x04\x97\x00\x74\x04\x98\x00\x74\x04\
\\x99\x00\x74\x04\x9b\x00\x74\x04\x9d\x00\x74\x04\x9f\x00\x74\x04\
\\xa0\x00\x74\x04\xa1\x00\x74\x04\xa4\x00\x74\x04\xa8\x00\x74\x04\
\\xa9\x00\x74\x04\xab\x00\x74\x04\xac\x00\x74\x04\xaf\x00\x74\x04\
\\xb0\x00\x74\x04\xb1\x00\x74\x04\xb2\x00\x74\x04\xb5\x00\x74\x04\x00\x00\
\\x01\x00\x02\x00\x75\x04\x03\x00\x75\x04\x04\x00\x75\x04\x05\x00\x75\x04\
\\x08\x00\x75\x04\x09\x00\x75\x04\x0a\x00\x75\x04\x0b\x00\x75\x04\
\\x0c\x00\x75\x04\x0d\x00\x75\x04\x0e\x00\x75\x04\x11\x00\x75\x04\
\\x12\x00\x75\x04\x13\x00\x75\x04\x14\x00\x75\x04\x15\x00\x75\x04\
\\x16\x00\x75\x04\x17\x00\x75\x04\x18\x00\x75\x04\x19\x00\x75\x04\
\\x1a\x00\x75\x04\x1b\x00\x75\x04\x1c\x00\x75\x04\x1e\x00\x75\x04\
\\x1f\x00\x75\x04\x22\x00\x75\x04\x24\x00\x75\x04\x2b\x00\xbb\x04\
\\x2c\x00\x75\x04\x32\x00\x75\x04\x34\x00\x75\x04\x36\x00\x75\x04\
\\x38\x00\x75\x04\x39\x00\x75\x04\x3a\x00\x75\x04\x3c\x00\x75\x04\
\\x3d\x00\x75\x04\x3e\x00\x75\x04\x3f\x00\x75\x04\x41\x00\x75\x04\
\\x42\x00\x75\x04\x45\x00\x75\x04\x46\x00\x75\x04\x47\x00\x75\x04\
\\x48\x00\x75\x04\x4a\x00\x75\x04\x4b\x00\x75\x04\x4c\x00\x75\x04\
\\x4e\x00\x75\x04\x4f\x00\x75\x04\x50\x00\x75\x04\x52\x00\x75\x04\
\\x53\x00\x75\x04\x54\x00\x75\x04\x56\x00\x75\x04\x58\x00\x75\x04\
\\x5a\x00\x75\x04\x5b\x00\x75\x04\x5c\x00\x75\x04\x5e\x00\x75\x04\
\\x5f\x00\x75\x04\x60\x00\x75\x04\x62\x00\x75\x04\x63\x00\x75\x04\
\\x64\x00\x75\x04\x67\x00\x75\x04\x69\x00\x75\x04\x6b\x00\x75\x04\
\\x6d\x00\x75\x04\x6e\x00\x75\x04\x6f\x00\x75\x04\x71\x00\x75\x04\
\\x72\x00\x75\x04\x73\x00\x75\x04\x75\x00\x75\x04\x76\x00\x75\x04\
\\x77\x00\x75\x04\x7a\x00\x75\x04\x7b\x00\x75\x04\x7d\x00\x75\x04\
\\x7e\x00\x75\x04\x7f\x00\x75\x04\x81\x00\x75\x04\x82\x00\x75\x04\
\\x84\x00\x75\x04\x85\x00\x75\x04\x88\x00\x75\x04\x89\x00\x75\x04\
\\x8a\x00\x75\x04\x8b\x00\x75\x04\x8d\x00\x75\x04\x8e\x00\x75\x04\
\\x8f\x00\x75\x04\x90\x00\x75\x04\x91\x00\x75\x04\x93\x00\x75\x04\
\\x94\x00\x75\x04\x96\x00\x75\x04\x97\x00\x75\x04\x98\x00\x75\x04\
\\x99\x00\x75\x04\x9b\x00\x75\x04\x9d\x00\x75\x04\x9f\x00\x75\x04\
\\xa0\x00\x75\x04\xa1\x00\x75\x04\xa4\x00\x75\x04\xa8\x00\x75\x04\
\\xa9\x00\x75\x04\xab\x00\x75\x04\xac\x00\x75\x04\xaf\x00\x75\x04\
\\xb0\x00\x75\x04\xb1\x00\x75\x04\xb2\x00\x75\x04\xb5\x00\x75\x04\x00\x00\
\\x01\x00\x02\x00\x76\x04\x03\x00\x76\x04\x04\x00\x76\x04\x05\x00\x76\x04\
\\x08\x00\x76\x04\x09\x00\x76\x04\x0a\x00\x76\x04\x0b\x00\x76\x04\
\\x0c\x00\x76\x04\x0d\x00\x76\x04\x0e\x00\x76\x04\x11\x00\x76\x04\
\\x12\x00\x76\x04\x13\x00\x76\x04\x14\x00\x76\x04\x15\x00\x76\x04\
\\x16\x00\x76\x04\x17\x00\x76\x04\x18\x00\x76\x04\x19\x00\x76\x04\
\\x1a\x00\x76\x04\x1b\x00\x76\x04\x1c\x00\x76\x04\x1e\x00\x76\x04\
\\x1f\x00\x76\x04\x22\x00\x76\x04\x24\x00\x76\x04\x2b\x00\xbc\x04\
\\x2c\x00\x76\x04\x32\x00\x76\x04\x34\x00\x76\x04\x36\x00\x76\x04\
\\x38\x00\x76\x04\x39\x00\x76\x04\x3a\x00\x76\x04\x3c\x00\x76\x04\
\\x3d\x00\x76\x04\x3e\x00\x76\x04\x3f\x00\x76\x04\x41\x00\x76\x04\
\\x42\x00\x76\x04\x45\x00\x76\x04\x46\x00\x76\x04\x47\x00\x76\x04\
\\x48\x00\x76\x04\x4a\x00\x76\x04\x4b\x00\x76\x04\x4c\x00\x76\x04\
\\x4e\x00\x76\x04\x4f\x00\x76\x04\x50\x00\x76\x04\x52\x00\x76\x04\
\\x53\x00\x76\x04\x54\x00\x76\x04\x56\x00\x76\x04\x58\x00\x76\x04\
\\x5a\x00\x76\x04\x5b\x00\x76\x04\x5c\x00\x76\x04\x5e\x00\x76\x04\
\\x5f\x00\x76\x04\x60\x00\x76\x04\x62\x00\x76\x04\x63\x00\x76\x04\
\\x64\x00\x76\x04\x67\x00\x76\x04\x69\x00\x76\x04\x6b\x00\x76\x04\
\\x6d\x00\x76\x04\x6e\x00\x76\x04\x6f\x00\x76\x04\x71\x00\x76\x04\
\\x72\x00\x76\x04\x73\x00\x76\x04\x75\x00\x76\x04\x76\x00\x76\x04\
\\x77\x00\x76\x04\x7a\x00\x76\x04\x7b\x00\x76\x04\x7d\x00\x76\x04\
\\x7e\x00\x76\x04\x7f\x00\x76\x04\x81\x00\x76\x04\x82\x00\x76\x04\
\\x84\x00\x76\x04\x85\x00\x76\x04\x88\x00\x76\x04\x89\x00\x76\x04\
\\x8a\x00\x76\x04\x8b\x00\x76\x04\x8d\x00\x76\x04\x8e\x00\x76\x04\
\\x8f\x00\x76\x04\x90\x00\x76\x04\x91\x00\x76\x04\x93\x00\x76\x04\
\\x94\x00\x76\x04\x96\x00\x76\x04\x97\x00\x76\x04\x98\x00\x76\x04\
\\x99\x00\x76\x04\x9b\x00\x76\x04\x9d\x00\x76\x04\x9f\x00\x76\x04\
\\xa0\x00\x76\x04\xa1\x00\x76\x04\xa4\x00\x76\x04\xa8\x00\x76\x04\
\\xa9\x00\x76\x04\xab\x00\x76\x04\xac\x00\x76\x04\xaf\x00\x76\x04\
\\xb0\x00\x76\x04\xb1\x00\x76\x04\xb2\x00\x76\x04\xb5\x00\x76\x04\x00\x00\
\\x01\x00\x02\x00\x77\x04\x03\x00\x77\x04\x04\x00\x77\x04\x05\x00\x77\x04\
\\x08\x00\x77\x04\x09\x00\x77\x04\x0a\x00\x77\x04\x0b\x00\x77\x04\
\\x0c\x00\x77\x04\x0d\x00\x77\x04\x0e\x00\x77\x04\x11\x00\x77\x04\
\\x12\x00\x77\x04\x13\x00\x77\x04\x14\x00\x77\x04\x15\x00\x77\x04\
\\x16\x00\x77\x04\x17\x00\x77\x04\x18\x00\x77\x04\x19\x00\x77\x04\
\\x1a\x00\x77\x04\x1b\x00\x77\x04\x1c\x00\x77\x04\x1e\x00\x77\x04\
\\x1f\x00\x77\x04\x22\x00\x77\x04\x24\x00\x77\x04\x2b\x00\xbd\x04\
\\x2c\x00\x77\x04\x32\x00\x77\x04\x34\x00\x77\x04\x36\x00\x77\x04\
\\x38\x00\x77\x04\x39\x00\x77\x04\x3a\x00\x77\x04\x3c\x00\x77\x04\
\\x3d\x00\x77\x04\x3e\x00\x77\x04\x3f\x00\x77\x04\x41\x00\x77\x04\
\\x42\x00\x77\x04\x45\x00\x77\x04\x46\x00\x77\x04\x47\x00\x77\x04\
\\x48\x00\x77\x04\x4a\x00\x77\x04\x4b\x00\x77\x04\x4c\x00\x77\x04\
\\x4e\x00\x77\x04\x4f\x00\x77\x04\x50\x00\x77\x04\x52\x00\x77\x04\
\\x53\x00\x77\x04\x54\x00\x77\x04\x56\x00\x77\x04\x58\x00\x77\x04\
\\x5a\x00\x77\x04\x5b\x00\x77\x04\x5c\x00\x77\x04\x5e\x00\x77\x04\
\\x5f\x00\x77\x04\x60\x00\x77\x04\x62\x00\x77\x04\x63\x00\x77\x04\
\\x64\x00\x77\x04\x67\x00\x77\x04\x69\x00\x77\x04\x6b\x00\x77\x04\
\\x6d\x00\x77\x04\x6e\x00\x77\x04\x6f\x00\x77\x04\x71\x00\x77\x04\
\\x72\x00\x77\x04\x73\x00\x77\x04\x75\x00\x77\x04\x76\x00\x77\x04\
\\x77\x00\x77\x04\x7a\x00\x77\x04\x7b\x00\x77\x04\x7d\x00\x77\x04\
\\x7e\x00\x77\x04\x7f\x00\x77\x04\x81\x00\x77\x04\x82\x00\x77\x04\
\\x84\x00\x77\x04\x85\x00\x77\x04\x88\x00\x77\x04\x89\x00\x77\x04\
\\x8a\x00\x77\x04\x8b\x00\x77\x04\x8d\x00\x77\x04\x8e\x00\x77\x04\
\\x8f\x00\x77\x04\x90\x00\x77\x04\x91\x00\x77\x04\x93\x00\x77\x04\
\\x94\x00\x77\x04\x96\x00\x77\x04\x97\x00\x77\x04\x98\x00\x77\x04\
\\x99\x00\x77\x04\x9b\x00\x77\x04\x9d\x00\x77\x04\x9f\x00\x77\x04\
\\xa0\x00\x77\x04\xa1\x00\x77\x04\xa4\x00\x77\x04\xa8\x00\x77\x04\
\\xa9\x00\x77\x04\xab\x00\x77\x04\xac\x00\x77\x04\xaf\x00\x77\x04\
\\xb0\x00\x77\x04\xb1\x00\x77\x04\xb2\x00\x77\x04\xb5\x00\x77\x04\x00\x00\
\\x01\x00\x02\x00\x78\x04\x03\x00\x78\x04\x04\x00\x78\x04\x05\x00\x78\x04\
\\x08\x00\x78\x04\x09\x00\x78\x04\x0a\x00\x78\x04\x0b\x00\x78\x04\
\\x0c\x00\x78\x04\x0d\x00\x78\x04\x0e\x00\x78\x04\x11\x00\x78\x04\
\\x12\x00\x78\x04\x13\x00\x78\x04\x14\x00\x78\x04\x15\x00\x78\x04\
\\x16\x00\x78\x04\x17\x00\x78\x04\x18\x00\x78\x04\x19\x00\x78\x04\
\\x1a\x00\x78\x04\x1b\x00\x78\x04\x1c\x00\x78\x04\x1e\x00\x78\x04\
\\x1f\x00\x78\x04\x22\x00\x78\x04\x24\x00\x78\x04\x2b\x00\xbe\x04\
\\x2c\x00\x78\x04\x32\x00\x78\x04\x34\x00\x78\x04\x36\x00\x78\x04\
\\x38\x00\x78\x04\x39\x00\x78\x04\x3a\x00\x78\x04\x3c\x00\x78\x04\
\\x3d\x00\x78\x04\x3e\x00\x78\x04\x3f\x00\x78\x04\x41\x00\x78\x04\
\\x42\x00\x78\x04\x45\x00\x78\x04\x46\x00\x78\x04\x47\x00\x78\x04\
\\x48\x00\x78\x04\x4a\x00\x78\x04\x4b\x00\x78\x04\x4c\x00\x78\x04\
\\x4e\x00\x78\x04\x4f\x00\x78\x04\x50\x00\x78\x04\x52\x00\x78\x04\
\\x53\x00\x78\x04\x54\x00\x78\x04\x56\x00\x78\x04\x58\x00\x78\x04\
\\x5a\x00\x78\x04\x5b\x00\x78\x04\x5c\x00\x78\x04\x5e\x00\x78\x04\
\\x5f\x00\x78\x04\x60\x00\x78\x04\x62\x00\x78\x04\x63\x00\x78\x04\
\\x64\x00\x78\x04\x67\x00\x78\x04\x69\x00\x78\x04\x6b\x00\x78\x04\
\\x6d\x00\x78\x04\x6e\x00\x78\x04\x6f\x00\x78\x04\x71\x00\x78\x04\
\\x72\x00\x78\x04\x73\x00\x78\x04\x75\x00\x78\x04\x76\x00\x78\x04\
\\x77\x00\x78\x04\x7a\x00\x78\x04\x7b\x00\x78\x04\x7d\x00\x78\x04\
\\x7e\x00\x78\x04\x7f\x00\x78\x04\x81\x00\x78\x04\x82\x00\x78\x04\
\\x84\x00\x78\x04\x85\x00\x78\x04\x88\x00\x78\x04\x89\x00\x78\x04\
\\x8a\x00\x78\x04\x8b\x00\x78\x04\x8d\x00\x78\x04\x8e\x00\x78\x04\
\\x8f\x00\x78\x04\x90\x00\x78\x04\x91\x00\x78\x04\x93\x00\x78\x04\
\\x94\x00\x78\x04\x96\x00\x78\x04\x97\x00\x78\x04\x98\x00\x78\x04\
\\x99\x00\x78\x04\x9b\x00\x78\x04\x9d\x00\x78\x04\x9f\x00\x78\x04\
\\xa0\x00\x78\x04\xa1\x00\x78\x04\xa4\x00\x78\x04\xa8\x00\x78\x04\
\\xa9\x00\x78\x04\xab\x00\x78\x04\xac\x00\x78\x04\xaf\x00\x78\x04\
\\xb0\x00\x78\x04\xb1\x00\x78\x04\xb2\x00\x78\x04\xb5\x00\x78\x04\x00\x00\
\\x01\x00\x02\x00\x79\x04\x03\x00\x79\x04\x04\x00\x79\x04\x05\x00\x79\x04\
\\x08\x00\x79\x04\x09\x00\x79\x04\x0a\x00\x79\x04\x0b\x00\x79\x04\
\\x0c\x00\x79\x04\x0d\x00\x79\x04\x0e\x00\x79\x04\x11\x00\x79\x04\
\\x12\x00\x79\x04\x13\x00\x79\x04\x14\x00\x79\x04\x15\x00\x79\x04\
\\x16\x00\x79\x04\x17\x00\x79\x04\x18\x00\x79\x04\x19\x00\x79\x04\
\\x1a\x00\x79\x04\x1b\x00\x79\x04\x1c\x00\x79\x04\x1e\x00\x79\x04\
\\x1f\x00\x79\x04\x22\x00\x79\x04\x24\x00\x79\x04\x2b\x00\xbf\x04\
\\x2c\x00\x79\x04\x32\x00\x79\x04\x34\x00\x79\x04\x36\x00\x79\x04\
\\x38\x00\x79\x04\x39\x00\x79\x04\x3a\x00\x79\x04\x3c\x00\x79\x04\
\\x3d\x00\x79\x04\x3e\x00\x79\x04\x3f\x00\x79\x04\x41\x00\x79\x04\
\\x42\x00\x79\x04\x45\x00\x79\x04\x46\x00\x79\x04\x47\x00\x79\x04\
\\x48\x00\x79\x04\x4a\x00\x79\x04\x4b\x00\x79\x04\x4c\x00\x79\x04\
\\x4e\x00\x79\x04\x4f\x00\x79\x04\x50\x00\x79\x04\x52\x00\x79\x04\
\\x53\x00\x79\x04\x54\x00\x79\x04\x56\x00\x79\x04\x58\x00\x79\x04\
\\x5a\x00\x79\x04\x5b\x00\x79\x04\x5c\x00\x79\x04\x5e\x00\x79\x04\
\\x5f\x00\x79\x04\x60\x00\x79\x04\x62\x00\x79\x04\x63\x00\x79\x04\
\\x64\x00\x79\x04\x67\x00\x79\x04\x69\x00\x79\x04\x6b\x00\x79\x04\
\\x6d\x00\x79\x04\x6e\x00\x79\x04\x6f\x00\x79\x04\x71\x00\x79\x04\
\\x72\x00\x79\x04\x73\x00\x79\x04\x75\x00\x79\x04\x76\x00\x79\x04\
\\x77\x00\x79\x04\x7a\x00\x79\x04\x7b\x00\x79\x04\x7d\x00\x79\x04\
\\x7e\x00\x79\x04\x7f\x00\x79\x04\x81\x00\x79\x04\x82\x00\x79\x04\
\\x84\x00\x79\x04\x85\x00\x79\x04\x88\x00\x79\x04\x89\x00\x79\x04\
\\x8a\x00\x79\x04\x8b\x00\x79\x04\x8d\x00\x79\x04\x8e\x00\x79\x04\
\\x8f\x00\x79\x04\x90\x00\x79\x04\x91\x00\x79\x04\x93\x00\x79\x04\
\\x94\x00\x79\x04\x96\x00\x79\x04\x97\x00\x79\x04\x98\x00\x79\x04\
\\x99\x00\x79\x04\x9b\x00\x79\x04\x9d\x00\x79\x04\x9f\x00\x79\x04\
\\xa0\x00\x79\x04\xa1\x00\x79\x04\xa4\x00\x79\x04\xa8\x00\x79\x04\
\\xa9\x00\x79\x04\xab\x00\x79\x04\xac\x00\x79\x04\xaf\x00\x79\x04\
\\xb0\x00\x79\x04\xb1\x00\x79\x04\xb2\x00\x79\x04\xb5\x00\x79\x04\x00\x00\
\\x01\x00\x02\x00\x7a\x04\x03\x00\x7a\x04\x04\x00\x7a\x04\x05\x00\x7a\x04\
\\x08\x00\x7a\x04\x09\x00\x7a\x04\x0a\x00\x7a\x04\x0b\x00\x7a\x04\
\\x0c\x00\x7a\x04\x0d\x00\x7a\x04\x0e\x00\x7a\x04\x11\x00\x7a\x04\
\\x12\x00\x7a\x04\x13\x00\x7a\x04\x14\x00\x7a\x04\x15\x00\x7a\x04\
\\x16\x00\x7a\x04\x17\x00\x7a\x04\x18\x00\x7a\x04\x19\x00\x7a\x04\
\\x1a\x00\x7a\x04\x1b\x00\x7a\x04\x1c\x00\x7a\x04\x1e\x00\x7a\x04\
\\x1f\x00\x7a\x04\x22\x00\x7a\x04\x24\x00\x7a\x04\x2b\x00\xc0\x04\
\\x2c\x00\x7a\x04\x32\x00\x7a\x04\x34\x00\x7a\x04\x36\x00\x7a\x04\
\\x38\x00\x7a\x04\x39\x00\x7a\x04\x3a\x00\x7a\x04\x3c\x00\x7a\x04\
\\x3d\x00\x7a\x04\x3e\x00\x7a\x04\x3f\x00\x7a\x04\x41\x00\x7a\x04\
\\x42\x00\x7a\x04\x45\x00\x7a\x04\x46\x00\x7a\x04\x47\x00\x7a\x04\
\\x48\x00\x7a\x04\x4a\x00\x7a\x04\x4b\x00\x7a\x04\x4c\x00\x7a\x04\
\\x4e\x00\x7a\x04\x4f\x00\x7a\x04\x50\x00\x7a\x04\x52\x00\x7a\x04\
\\x53\x00\x7a\x04\x54\x00\x7a\x04\x56\x00\x7a\x04\x58\x00\x7a\x04\
\\x5a\x00\x7a\x04\x5b\x00\x7a\x04\x5c\x00\x7a\x04\x5e\x00\x7a\x04\
\\x5f\x00\x7a\x04\x60\x00\x7a\x04\x62\x00\x7a\x04\x63\x00\x7a\x04\
\\x64\x00\x7a\x04\x67\x00\x7a\x04\x69\x00\x7a\x04\x6b\x00\x7a\x04\
\\x6d\x00\x7a\x04\x6e\x00\x7a\x04\x6f\x00\x7a\x04\x71\x00\x7a\x04\
\\x72\x00\x7a\x04\x73\x00\x7a\x04\x75\x00\x7a\x04\x76\x00\x7a\x04\
\\x77\x00\x7a\x04\x7a\x00\x7a\x04\x7b\x00\x7a\x04\x7d\x00\x7a\x04\
\\x7e\x00\x7a\x04\x7f\x00\x7a\x04\x81\x00\x7a\x04\x82\x00\x7a\x04\
\\x84\x00\x7a\x04\x85\x00\x7a\x04\x88\x00\x7a\x04\x89\x00\x7a\x04\
\\x8a\x00\x7a\x04\x8b\x00\x7a\x04\x8d\x00\x7a\x04\x8e\x00\x7a\x04\
\\x8f\x00\x7a\x04\x90\x00\x7a\x04\x91\x00\x7a\x04\x93\x00\x7a\x04\
\\x94\x00\x7a\x04\x96\x00\x7a\x04\x97\x00\x7a\x04\x98\x00\x7a\x04\
\\x99\x00\x7a\x04\x9b\x00\x7a\x04\x9d\x00\x7a\x04\x9f\x00\x7a\x04\
\\xa0\x00\x7a\x04\xa1\x00\x7a\x04\xa4\x00\x7a\x04\xa8\x00\x7a\x04\
\\xa9\x00\x7a\x04\xab\x00\x7a\x04\xac\x00\x7a\x04\xaf\x00\x7a\x04\
\\xb0\x00\x7a\x04\xb1\x00\x7a\x04\xb2\x00\x7a\x04\xb5\x00\x7a\x04\x00\x00\
\\x01\x00\x02\x00\x7b\x04\x03\x00\x7b\x04\x04\x00\x7b\x04\x05\x00\x7b\x04\
\\x08\x00\x7b\x04\x09\x00\x7b\x04\x0a\x00\x7b\x04\x0b\x00\x7b\x04\
\\x0c\x00\x7b\x04\x0d\x00\x7b\x04\x0e\x00\x7b\x04\x11\x00\x7b\x04\
\\x12\x00\x7b\x04\x13\x00\x7b\x04\x14\x00\x7b\x04\x15\x00\x7b\x04\
\\x16\x00\x7b\x04\x17\x00\x7b\x04\x18\x00\x7b\x04\x19\x00\x7b\x04\
\\x1a\x00\x7b\x04\x1b\x00\x7b\x04\x1c\x00\x7b\x04\x1e\x00\x7b\x04\
\\x1f\x00\x7b\x04\x22\x00\x7b\x04\x24\x00\x7b\x04\x2b\x00\xc2\x04\
\\x2c\x00\x7b\x04\x32\x00\x7b\x04\x34\x00\x7b\x04\x36\x00\x7b\x04\
\\x38\x00\x7b\x04\x39\x00\x7b\x04\x3a\x00\x7b\x04\x3c\x00\x7b\x04\
\\x3d\x00\x7b\x04\x3e\x00\x7b\x04\x3f\x00\x7b\x04\x41\x00\x7b\x04\
\\x42\x00\x7b\x04\x45\x00\x7b\x04\x46\x00\x7b\x04\x47\x00\x7b\x04\
\\x48\x00\x7b\x04\x4a\x00\x7b\x04\x4b\x00\x7b\x04\x4c\x00\x7b\x04\
\\x4e\x00\x7b\x04\x4f\x00\x7b\x04\x50\x00\x7b\x04\x52\x00\x7b\x04\
\\x53\x00\x7b\x04\x54\x00\x7b\x04\x56\x00\x7b\x04\x58\x00\x7b\x04\
\\x5a\x00\x7b\x04\x5b\x00\x7b\x04\x5c\x00\x7b\x04\x5e\x00\x7b\x04\
\\x5f\x00\x7b\x04\x60\x00\x7b\x04\x62\x00\x7b\x04\x63\x00\x7b\x04\
\\x64\x00\x7b\x04\x67\x00\x7b\x04\x69\x00\x7b\x04\x6b\x00\x7b\x04\
\\x6d\x00\x7b\x04\x6e\x00\x7b\x04\x6f\x00\x7b\x04\x71\x00\x7b\x04\
\\x72\x00\x7b\x04\x73\x00\x7b\x04\x75\x00\x7b\x04\x76\x00\x7b\x04\
\\x77\x00\x7b\x04\x7a\x00\x7b\x04\x7b\x00\x7b\x04\x7d\x00\x7b\x04\
\\x7e\x00\x7b\x04\x7f\x00\x7b\x04\x81\x00\x7b\x04\x82\x00\x7b\x04\
\\x84\x00\x7b\x04\x85\x00\x7b\x04\x88\x00\x7b\x04\x89\x00\x7b\x04\
\\x8a\x00\x7b\x04\x8b\x00\x7b\x04\x8d\x00\x7b\x04\x8e\x00\x7b\x04\
\\x8f\x00\x7b\x04\x90\x00\x7b\x04\x91\x00\x7b\x04\x93\x00\x7b\x04\
\\x94\x00\x7b\x04\x96\x00\x7b\x04\x97\x00\x7b\x04\x98\x00\x7b\x04\
\\x99\x00\x7b\x04\x9b\x00\x7b\x04\x9d\x00\x7b\x04\x9f\x00\x7b\x04\
\\xa0\x00\x7b\x04\xa1\x00\x7b\x04\xa4\x00\x7b\x04\xa8\x00\x7b\x04\
\\xa9\x00\x7b\x04\xab\x00\x7b\x04\xac\x00\x7b\x04\xaf\x00\x7b\x04\
\\xb0\x00\x7b\x04\xb1\x00\x7b\x04\xb2\x00\x7b\x04\xb5\x00\x7b\x04\x00\x00\
\\x01\x00\x02\x00\x7c\x04\x03\x00\x7c\x04\x04\x00\x7c\x04\x05\x00\x7c\x04\
\\x08\x00\x7c\x04\x09\x00\x7c\x04\x0a\x00\x7c\x04\x0b\x00\x7c\x04\
\\x0c\x00\x7c\x04\x0d\x00\x7c\x04\x0e\x00\x7c\x04\x11\x00\x7c\x04\
\\x12\x00\x7c\x04\x13\x00\x7c\x04\x14\x00\x7c\x04\x15\x00\x7c\x04\
\\x16\x00\x7c\x04\x17\x00\x7c\x04\x18\x00\x7c\x04\x19\x00\x7c\x04\
\\x1a\x00\x7c\x04\x1b\x00\x7c\x04\x1c\x00\x7c\x04\x1e\x00\x7c\x04\
\\x1f\x00\x7c\x04\x22\x00\x7c\x04\x24\x00\x7c\x04\x2b\x00\xc1\x04\
\\x2c\x00\x7c\x04\x32\x00\x7c\x04\x34\x00\x7c\x04\x36\x00\x7c\x04\
\\x38\x00\x7c\x04\x39\x00\x7c\x04\x3a\x00\x7c\x04\x3c\x00\x7c\x04\
\\x3d\x00\x7c\x04\x3e\x00\x7c\x04\x3f\x00\x7c\x04\x41\x00\x7c\x04\
\\x42\x00\x7c\x04\x45\x00\x7c\x04\x46\x00\x7c\x04\x47\x00\x7c\x04\
\\x48\x00\x7c\x04\x4a\x00\x7c\x04\x4b\x00\x7c\x04\x4c\x00\x7c\x04\
\\x4e\x00\x7c\x04\x4f\x00\x7c\x04\x50\x00\x7c\x04\x52\x00\x7c\x04\
\\x53\x00\x7c\x04\x54\x00\x7c\x04\x56\x00\x7c\x04\x58\x00\x7c\x04\
\\x5a\x00\x7c\x04\x5b\x00\x7c\x04\x5c\x00\x7c\x04\x5e\x00\x7c\x04\
\\x5f\x00\x7c\x04\x60\x00\x7c\x04\x62\x00\x7c\x04\x63\x00\x7c\x04\
\\x64\x00\x7c\x04\x67\x00\x7c\x04\x69\x00\x7c\x04\x6b\x00\x7c\x04\
\\x6d\x00\x7c\x04\x6e\x00\x7c\x04\x6f\x00\x7c\x04\x71\x00\x7c\x04\
\\x72\x00\x7c\x04\x73\x00\x7c\x04\x75\x00\x7c\x04\x76\x00\x7c\x04\
\\x77\x00\x7c\x04\x7a\x00\x7c\x04\x7b\x00\x7c\x04\x7d\x00\x7c\x04\
\\x7e\x00\x7c\x04\x7f\x00\x7c\x04\x81\x00\x7c\x04\x82\x00\x7c\x04\
\\x84\x00\x7c\x04\x85\x00\x7c\x04\x88\x00\x7c\x04\x89\x00\x7c\x04\
\\x8a\x00\x7c\x04\x8b\x00\x7c\x04\x8d\x00\x7c\x04\x8e\x00\x7c\x04\
\\x8f\x00\x7c\x04\x90\x00\x7c\x04\x91\x00\x7c\x04\x93\x00\x7c\x04\
\\x94\x00\x7c\x04\x96\x00\x7c\x04\x97\x00\x7c\x04\x98\x00\x7c\x04\
\\x99\x00\x7c\x04\x9b\x00\x7c\x04\x9d\x00\x7c\x04\x9f\x00\x7c\x04\
\\xa0\x00\x7c\x04\xa1\x00\x7c\x04\xa4\x00\x7c\x04\xa8\x00\x7c\x04\
\\xa9\x00\x7c\x04\xab\x00\x7c\x04\xac\x00\x7c\x04\xaf\x00\x7c\x04\
\\xb0\x00\x7c\x04\xb1\x00\x7c\x04\xb2\x00\x7c\x04\xb5\x00\x7c\x04\x00\x00\
\\x01\x00\x02\x00\x7d\x04\x03\x00\x7d\x04\x04\x00\x7d\x04\x05\x00\x7d\x04\
\\x08\x00\x7d\x04\x09\x00\x7d\x04\x0a\x00\x7d\x04\x0b\x00\x7d\x04\
\\x0c\x00\x7d\x04\x0d\x00\x7d\x04\x0e\x00\x7d\x04\x11\x00\x7d\x04\
\\x12\x00\x7d\x04\x13\x00\x7d\x04\x14\x00\x7d\x04\x15\x00\x7d\x04\
\\x16\x00\x7d\x04\x17\x00\x7d\x04\x18\x00\x7d\x04\x19\x00\x7d\x04\
\\x1a\x00\x7d\x04\x1b\x00\x7d\x04\x1c\x00\x7d\x04\x1e\x00\x7d\x04\
\\x1f\x00\x7d\x04\x22\x00\x7d\x04\x24\x00\x7d\x04\x2b\x00\xc3\x04\
\\x2c\x00\x7d\x04\x32\x00\x7d\x04\x34\x00\x7d\x04\x36\x00\x7d\x04\
\\x38\x00\x7d\x04\x39\x00\x7d\x04\x3a\x00\x7d\x04\x3c\x00\x7d\x04\
\\x3d\x00\x7d\x04\x3e\x00\x7d\x04\x3f\x00\x7d\x04\x41\x00\x7d\x04\
\\x42\x00\x7d\x04\x45\x00\x7d\x04\x46\x00\x7d\x04\x47\x00\x7d\x04\
\\x48\x00\x7d\x04\x4a\x00\x7d\x04\x4b\x00\x7d\x04\x4c\x00\x7d\x04\
\\x4e\x00\x7d\x04\x4f\x00\x7d\x04\x50\x00\x7d\x04\x52\x00\x7d\x04\
\\x53\x00\x7d\x04\x54\x00\x7d\x04\x56\x00\x7d\x04\x58\x00\x7d\x04\
\\x5a\x00\x7d\x04\x5b\x00\x7d\x04\x5c\x00\x7d\x04\x5e\x00\x7d\x04\
\\x5f\x00\x7d\x04\x60\x00\x7d\x04\x62\x00\x7d\x04\x63\x00\x7d\x04\
\\x64\x00\x7d\x04\x67\x00\x7d\x04\x69\x00\x7d\x04\x6b\x00\x7d\x04\
\\x6d\x00\x7d\x04\x6e\x00\x7d\x04\x6f\x00\x7d\x04\x71\x00\x7d\x04\
\\x72\x00\x7d\x04\x73\x00\x7d\x04\x75\x00\x7d\x04\x76\x00\x7d\x04\
\\x77\x00\x7d\x04\x7a\x00\x7d\x04\x7b\x00\x7d\x04\x7d\x00\x7d\x04\
\\x7e\x00\x7d\x04\x7f\x00\x7d\x04\x81\x00\x7d\x04\x82\x00\x7d\x04\
\\x84\x00\x7d\x04\x85\x00\x7d\x04\x88\x00\x7d\x04\x89\x00\x7d\x04\
\\x8a\x00\x7d\x04\x8b\x00\x7d\x04\x8d\x00\x7d\x04\x8e\x00\x7d\x04\
\\x8f\x00\x7d\x04\x90\x00\x7d\x04\x91\x00\x7d\x04\x93\x00\x7d\x04\
\\x94\x00\x7d\x04\x96\x00\x7d\x04\x97\x00\x7d\x04\x98\x00\x7d\x04\
\\x99\x00\x7d\x04\x9b\x00\x7d\x04\x9d\x00\x7d\x04\x9f\x00\x7d\x04\
\\xa0\x00\x7d\x04\xa1\x00\x7d\x04\xa4\x00\x7d\x04\xa8\x00\x7d\x04\
\\xa9\x00\x7d\x04\xab\x00\x7d\x04\xac\x00\x7d\x04\xaf\x00\x7d\x04\
\\xb0\x00\x7d\x04\xb1\x00\x7d\x04\xb2\x00\x7d\x04\xb5\x00\x7d\x04\x00\x00\
\\x01\x00\x02\x00\x90\x04\x03\x00\x90\x04\x04\x00\x90\x04\x05\x00\x90\x04\
\\x08\x00\x90\x04\x09\x00\x90\x04\x0a\x00\x90\x04\x0b\x00\x90\x04\
\\x0c\x00\x90\x04\x0d\x00\x90\x04\x0e\x00\x90\x04\x11\x00\x90\x04\
\\x12\x00\x90\x04\x13\x00\x90\x04\x14\x00\x90\x04\x15\x00\x90\x04\
\\x16\x00\x90\x04\x17\x00\x90\x04\x18\x00\x90\x04\x19\x00\x90\x04\
\\x1a\x00\x90\x04\x1b\x00\x90\x04\x1c\x00\x90\x04\x1e\x00\x90\x04\
\\x1f\x00\x90\x04\x23\x00\x90\x04\x24\x00\x90\x04\x2b\x00\x90\x04\
\\x2c\x00\x90\x04\x30\x00\x90\x04\x32\x00\x90\x04\x34\x00\x90\x04\
\\x36\x00\x90\x04\x38\x00\x90\x04\x39\x00\x90\x04\x3a\x00\x90\x04\
\\x3c\x00\x90\x04\x3d\x00\x90\x04\x3e\x00\x90\x04\x3f\x00\x90\x04\
\\x40\x00\x90\x04\x41\x00\x90\x04\x42\x00\x90\x04\x43\x00\x90\x04\
\\x44\x00\x90\x04\x45\x00\x90\x04\x46\x00\x90\x04\x47\x00\x90\x04\
\\x48\x00\x90\x04\x4a\x00\x90\x04\x4b\x00\x90\x04\x4c\x00\x90\x04\
\\x4e\x00\x90\x04\x4f\x00\x90\x04\x50\x00\x90\x04\x52\x00\x90\x04\
\\x53\x00\x90\x04\x54\x00\x90\x04\x56\x00\x90\x04\x57\x00\x90\x04\
\\x58\x00\x90\x04\x5a\x00\x90\x04\x5b\x00\x90\x04\x5c\x00\x90\x04\
\\x5e\x00\x90\x04\x5f\x00\x90\x04\x60\x00\x90\x04\x62\x00\x90\x04\
\\x63\x00\x90\x04\x67\x00\x90\x04\x69\x00\x90\x04\x6a\x00\x90\x04\
\\x6b\x00\x90\x04\x6d\x00\x90\x04\x6e\x00\x90\x04\x6f\x00\x90\x04\
\\x71\x00\x90\x04\x72\x00\x90\x04\x73\x00\x90\x04\x75\x00\x90\x04\
\\x76\x00\x90\x04\x77\x00\x90\x04\x79\x00\x90\x04\x7a\x00\x90\x04\
\\x7b\x00\x90\x04\x7d\x00\x90\x04\x7e\x00\x90\x04\x7f\x00\x90\x04\
\\x81\x00\x90\x04\x84\x00\x90\x04\x85\x00\x90\x04\x8a\x00\x90\x04\
\\x8b\x00\x90\x04\x8d\x00\x90\x04\x8e\x00\x90\x04\x8f\x00\x90\x04\
\\x90\x00\x90\x04\x91\x00\x90\x04\x93\x00\x90\x04\x94\x00\x90\x04\
\\x96\x00\x90\x04\x97\x00\x90\x04\x98\x00\x90\x04\x99\x00\x90\x04\
\\xa2\x00\x90\x04\xa4\x00\x90\x04\xaa\x00\x90\x04\xab\x00\x90\x04\
\\xac\x00\x90\x04\xad\x00\x90\x04\xae\x00\x90\x04\xb1\x00\x90\x04\
\\xb2\x00\x90\x04\xb5\x00\x90\x04\x00\x00\
\\x01\x00\x02\x00\x91\x04\x03\x00\x91\x04\x04\x00\x91\x04\x05\x00\x91\x04\
\\x08\x00\x91\x04\x09\x00\x91\x04\x0a\x00\x91\x04\x0b\x00\x91\x04\
\\x0c\x00\x91\x04\x0d\x00\x91\x04\x0e\x00\x91\x04\x11\x00\x91\x04\
\\x12\x00\x91\x04\x13\x00\x91\x04\x14\x00\x91\x04\x15\x00\x91\x04\
\\x16\x00\x91\x04\x17\x00\x91\x04\x18\x00\x91\x04\x19\x00\x91\x04\
\\x1a\x00\x91\x04\x1b\x00\x91\x04\x1c\x00\x91\x04\x1e\x00\x91\x04\
\\x1f\x00\x91\x04\x23\x00\x91\x04\x24\x00\x91\x04\x2b\x00\x91\x04\
\\x2c\x00\x91\x04\x30\x00\x91\x04\x32\x00\x91\x04\x34\x00\x91\x04\
\\x36\x00\x91\x04\x38\x00\x91\x04\x39\x00\x91\x04\x3a\x00\x91\x04\
\\x3c\x00\x91\x04\x3d\x00\x91\x04\x3e\x00\x91\x04\x3f\x00\x91\x04\
\\x40\x00\x91\x04\x41\x00\x91\x04\x42\x00\x91\x04\x43\x00\x91\x04\
\\x44\x00\x91\x04\x45\x00\x91\x04\x46\x00\x91\x04\x47\x00\x91\x04\
\\x48\x00\x91\x04\x4a\x00\x91\x04\x4b\x00\x91\x04\x4c\x00\x91\x04\
\\x4e\x00\x91\x04\x4f\x00\x91\x04\x50\x00\x91\x04\x52\x00\x91\x04\
\\x53\x00\x91\x04\x54\x00\x91\x04\x56\x00\x91\x04\x57\x00\x91\x04\
\\x58\x00\x91\x04\x5a\x00\x91\x04\x5b\x00\x91\x04\x5c\x00\x91\x04\
\\x5e\x00\x91\x04\x5f\x00\x91\x04\x60\x00\x91\x04\x62\x00\x91\x04\
\\x63\x00\x91\x04\x67\x00\x91\x04\x69\x00\x91\x04\x6a\x00\x91\x04\
\\x6b\x00\x91\x04\x6d\x00\x91\x04\x6e\x00\x91\x04\x6f\x00\x91\x04\
\\x71\x00\x91\x04\x72\x00\x91\x04\x73\x00\x91\x04\x75\x00\x91\x04\
\\x76\x00\x91\x04\x77\x00\x91\x04\x79\x00\x91\x04\x7a\x00\x91\x04\
\\x7b\x00\x91\x04\x7d\x00\x91\x04\x7e\x00\x91\x04\x7f\x00\x91\x04\
\\x81\x00\x91\x04\x84\x00\x91\x04\x85\x00\x91\x04\x8a\x00\x91\x04\
\\x8b\x00\x91\x04\x8d\x00\x91\x04\x8e\x00\x91\x04\x8f\x00\x91\x04\
\\x90\x00\x91\x04\x91\x00\x91\x04\x93\x00\x91\x04\x94\x00\x91\x04\
\\x96\x00\x91\x04\x97\x00\x91\x04\x98\x00\x91\x04\x99\x00\x91\x04\
\\xa2\x00\x91\x04\xa4\x00\x91\x04\xaa\x00\x91\x04\xab\x00\x91\x04\
\\xac\x00\x91\x04\xad\x00\x91\x04\xae\x00\x91\x04\xb1\x00\x91\x04\
\\xb2\x00\x91\x04\xb5\x00\x91\x04\x00\x00\
\\x01\x00\x02\x00\x92\x04\x03\x00\x92\x04\x04\x00\x92\x04\x05\x00\x92\x04\
\\x08\x00\x92\x04\x09\x00\x92\x04\x0a\x00\x92\x04\x0b\x00\x92\x04\
\\x0c\x00\x92\x04\x0d\x00\x92\x04\x0e\x00\x92\x04\x11\x00\x92\x04\
\\x12\x00\x92\x04\x13\x00\x92\x04\x14\x00\x92\x04\x15\x00\x92\x04\
\\x16\x00\x92\x04\x17\x00\x92\x04\x18\x00\x92\x04\x19\x00\x92\x04\
\\x1a\x00\x92\x04\x1b\x00\x92\x04\x1c\x00\x92\x04\x1e\x00\x92\x04\
\\x1f\x00\x92\x04\x23\x00\x92\x04\x24\x00\x92\x04\x2b\x00\x92\x04\
\\x2c\x00\x92\x04\x30\x00\x92\x04\x32\x00\x92\x04\x34\x00\x92\x04\
\\x36\x00\x92\x04\x38\x00\x92\x04\x39\x00\x92\x04\x3a\x00\x92\x04\
\\x3c\x00\x92\x04\x3d\x00\x92\x04\x3e\x00\x92\x04\x3f\x00\x92\x04\
\\x40\x00\x92\x04\x41\x00\x92\x04\x42\x00\x92\x04\x43\x00\x92\x04\
\\x44\x00\x92\x04\x45\x00\x92\x04\x46\x00\x92\x04\x47\x00\x92\x04\
\\x48\x00\x92\x04\x4a\x00\x92\x04\x4b\x00\x92\x04\x4c\x00\x92\x04\
\\x4e\x00\x92\x04\x4f\x00\x92\x04\x50\x00\x92\x04\x52\x00\x92\x04\
\\x53\x00\x92\x04\x54\x00\x92\x04\x56\x00\x92\x04\x57\x00\x92\x04\
\\x58\x00\x92\x04\x5a\x00\x92\x04\x5b\x00\x92\x04\x5c\x00\x92\x04\
\\x5e\x00\x92\x04\x5f\x00\x92\x04\x60\x00\x92\x04\x62\x00\x92\x04\
\\x63\x00\x92\x04\x67\x00\x92\x04\x69\x00\x92\x04\x6a\x00\x92\x04\
\\x6b\x00\x92\x04\x6d\x00\x92\x04\x6e\x00\x92\x04\x6f\x00\x92\x04\
\\x71\x00\x92\x04\x72\x00\x92\x04\x73\x00\x92\x04\x75\x00\x92\x04\
\\x76\x00\x92\x04\x77\x00\x92\x04\x79\x00\x92\x04\x7a\x00\x92\x04\
\\x7b\x00\x92\x04\x7d\x00\x92\x04\x7e\x00\x92\x04\x7f\x00\x92\x04\
\\x81\x00\x92\x04\x84\x00\x92\x04\x85\x00\x92\x04\x8a\x00\x92\x04\
\\x8b\x00\x92\x04\x8d\x00\x92\x04\x8e\x00\x92\x04\x8f\x00\x92\x04\
\\x90\x00\x92\x04\x91\x00\x92\x04\x93\x00\x92\x04\x94\x00\x92\x04\
\\x96\x00\x92\x04\x97\x00\x92\x04\x98\x00\x92\x04\x99\x00\x92\x04\
\\xa2\x00\x92\x04\xa4\x00\x92\x04\xaa\x00\x92\x04\xab\x00\x92\x04\
\\xac\x00\x92\x04\xad\x00\x92\x04\xae\x00\x92\x04\xb1\x00\x92\x04\
\\xb2\x00\x92\x04\xb5\x00\x92\x04\x00\x00\
\\x01\x00\x02\x00\x93\x04\x03\x00\x93\x04\x04\x00\x93\x04\x05\x00\x93\x04\
\\x08\x00\x93\x04\x09\x00\x93\x04\x0a\x00\x93\x04\x0b\x00\x93\x04\
\\x0c\x00\x93\x04\x0d\x00\x93\x04\x0e\x00\x93\x04\x11\x00\x93\x04\
\\x12\x00\x93\x04\x13\x00\x93\x04\x14\x00\x93\x04\x15\x00\x93\x04\
\\x16\x00\x93\x04\x17\x00\x93\x04\x18\x00\x93\x04\x19\x00\x93\x04\
\\x1a\x00\x93\x04\x1b\x00\x93\x04\x1c\x00\x93\x04\x1e\x00\x93\x04\
\\x1f\x00\x93\x04\x23\x00\x93\x04\x24\x00\x93\x04\x2b\x00\x93\x04\
\\x2c\x00\x93\x04\x30\x00\x93\x04\x32\x00\x93\x04\x34\x00\x93\x04\
\\x36\x00\x93\x04\x38\x00\x93\x04\x39\x00\x93\x04\x3a\x00\x93\x04\
\\x3c\x00\x93\x04\x3d\x00\x93\x04\x3e\x00\x93\x04\x3f\x00\x93\x04\
\\x40\x00\x93\x04\x41\x00\x93\x04\x42\x00\x93\x04\x43\x00\x93\x04\
\\x44\x00\x93\x04\x45\x00\x93\x04\x46\x00\x93\x04\x47\x00\x93\x04\
\\x48\x00\x93\x04\x4a\x00\x93\x04\x4b\x00\x93\x04\x4c\x00\x93\x04\
\\x4e\x00\x93\x04\x4f\x00\x93\x04\x50\x00\x93\x04\x52\x00\x93\x04\
\\x53\x00\x93\x04\x54\x00\x93\x04\x56\x00\x93\x04\x57\x00\x93\x04\
\\x58\x00\x93\x04\x5a\x00\x93\x04\x5b\x00\x93\x04\x5c\x00\x93\x04\
\\x5e\x00\x93\x04\x5f\x00\x93\x04\x60\x00\x93\x04\x62\x00\x93\x04\
\\x63\x00\x93\x04\x67\x00\x93\x04\x69\x00\x93\x04\x6a\x00\x93\x04\
\\x6b\x00\x93\x04\x6d\x00\x93\x04\x6e\x00\x93\x04\x6f\x00\x93\x04\
\\x71\x00\x93\x04\x72\x00\x93\x04\x73\x00\x93\x04\x75\x00\x93\x04\
\\x76\x00\x93\x04\x77\x00\x93\x04\x79\x00\x93\x04\x7a\x00\x93\x04\
\\x7b\x00\x93\x04\x7d\x00\x93\x04\x7e\x00\x93\x04\x7f\x00\x93\x04\
\\x81\x00\x93\x04\x84\x00\x93\x04\x85\x00\x93\x04\x8a\x00\x93\x04\
\\x8b\x00\x93\x04\x8d\x00\x93\x04\x8e\x00\x93\x04\x8f\x00\x93\x04\
\\x90\x00\x93\x04\x91\x00\x93\x04\x93\x00\x93\x04\x94\x00\x93\x04\
\\x96\x00\x93\x04\x97\x00\x93\x04\x98\x00\x93\x04\x99\x00\x93\x04\
\\xa2\x00\x93\x04\xa4\x00\x93\x04\xaa\x00\x93\x04\xab\x00\x93\x04\
\\xac\x00\x93\x04\xad\x00\x93\x04\xae\x00\x93\x04\xb1\x00\x93\x04\
\\xb2\x00\x93\x04\xb5\x00\x93\x04\x00\x00\
\\x01\x00\x02\x00\x95\x04\x03\x00\x95\x04\x04\x00\x95\x04\x05\x00\x95\x04\
\\x08\x00\x95\x04\x09\x00\x95\x04\x0a\x00\x95\x04\x0b\x00\x95\x04\
\\x0c\x00\x95\x04\x0d\x00\x95\x04\x0e\x00\x95\x04\x11\x00\x95\x04\
\\x12\x00\x95\x04\x13\x00\x95\x04\x14\x00\x95\x04\x15\x00\x95\x04\
\\x16\x00\x95\x04\x17\x00\x95\x04\x18\x00\x95\x04\x19\x00\x95\x04\
\\x1a\x00\x95\x04\x1b\x00\x95\x04\x1c\x00\x95\x04\x1e\x00\x95\x04\
\\x1f\x00\x95\x04\x23\x00\x95\x04\x24\x00\x95\x04\x2b\x00\x95\x04\
\\x2c\x00\x95\x04\x30\x00\x95\x04\x32\x00\x95\x04\x34\x00\x95\x04\
\\x36\x00\x95\x04\x38\x00\x95\x04\x39\x00\x95\x04\x3a\x00\x95\x04\
\\x3c\x00\x95\x04\x3d\x00\x95\x04\x3e\x00\x95\x04\x3f\x00\x95\x04\
\\x40\x00\x95\x04\x41\x00\x95\x04\x42\x00\x95\x04\x43\x00\x95\x04\
\\x44\x00\x95\x04\x45\x00\x95\x04\x46\x00\x95\x04\x47\x00\x95\x04\
\\x48\x00\x95\x04\x4a\x00\x95\x04\x4b\x00\x95\x04\x4c\x00\x95\x04\
\\x4e\x00\x95\x04\x4f\x00\x95\x04\x50\x00\x95\x04\x52\x00\x95\x04\
\\x53\x00\x95\x04\x54\x00\x95\x04\x56\x00\x95\x04\x57\x00\x95\x04\
\\x58\x00\x95\x04\x5a\x00\x95\x04\x5b\x00\x95\x04\x5c\x00\x95\x04\
\\x5e\x00\x95\x04\x5f\x00\x95\x04\x60\x00\x95\x04\x62\x00\x95\x04\
\\x63\x00\x95\x04\x67\x00\x95\x04\x69\x00\x95\x04\x6a\x00\x95\x04\
\\x6b\x00\x95\x04\x6d\x00\x95\x04\x6e\x00\x95\x04\x6f\x00\x95\x04\
\\x71\x00\x95\x04\x72\x00\x95\x04\x73\x00\x95\x04\x75\x00\x95\x04\
\\x76\x00\x95\x04\x77\x00\x95\x04\x79\x00\x95\x04\x7a\x00\x95\x04\
\\x7b\x00\x95\x04\x7d\x00\x95\x04\x7e\x00\x95\x04\x7f\x00\x95\x04\
\\x81\x00\x95\x04\x84\x00\x95\x04\x85\x00\x95\x04\x8a\x00\x95\x04\
\\x8b\x00\x95\x04\x8d\x00\x95\x04\x8e\x00\x95\x04\x8f\x00\x95\x04\
\\x90\x00\x95\x04\x91\x00\x95\x04\x93\x00\x95\x04\x94\x00\x95\x04\
\\x96\x00\x95\x04\x97\x00\x95\x04\x98\x00\x95\x04\x99\x00\x95\x04\
\\xa2\x00\x95\x04\xa4\x00\x95\x04\xaa\x00\x95\x04\xab\x00\x95\x04\
\\xac\x00\x95\x04\xad\x00\x95\x04\xae\x00\x95\x04\xb1\x00\x95\x04\
\\xb2\x00\x95\x04\xb5\x00\x95\x04\x00\x00\
\\x01\x00\x02\x00\x96\x04\x03\x00\x96\x04\x04\x00\x96\x04\x05\x00\x96\x04\
\\x08\x00\x96\x04\x09\x00\x96\x04\x0a\x00\x96\x04\x0b\x00\x96\x04\
\\x0c\x00\x96\x04\x0d\x00\x96\x04\x0e\x00\x96\x04\x11\x00\x96\x04\
\\x12\x00\x96\x04\x13\x00\x96\x04\x14\x00\x96\x04\x15\x00\x96\x04\
\\x16\x00\x96\x04\x17\x00\x96\x04\x18\x00\x96\x04\x19\x00\x96\x04\
\\x1a\x00\x96\x04\x1b\x00\x96\x04\x1c\x00\x96\x04\x1e\x00\x96\x04\
\\x1f\x00\x96\x04\x23\x00\x96\x04\x24\x00\x96\x04\x2b\x00\x96\x04\
\\x2c\x00\x96\x04\x30\x00\x96\x04\x32\x00\x96\x04\x34\x00\x96\x04\
\\x36\x00\x96\x04\x38\x00\x96\x04\x39\x00\x96\x04\x3a\x00\x96\x04\
\\x3c\x00\x96\x04\x3d\x00\x96\x04\x3e\x00\x96\x04\x3f\x00\x96\x04\
\\x40\x00\x96\x04\x41\x00\x96\x04\x42\x00\x96\x04\x43\x00\x96\x04\
\\x44\x00\x96\x04\x45\x00\x96\x04\x46\x00\x96\x04\x47\x00\x96\x04\
\\x48\x00\x96\x04\x4a\x00\x96\x04\x4b\x00\x96\x04\x4c\x00\x96\x04\
\\x4e\x00\x96\x04\x4f\x00\x96\x04\x50\x00\x96\x04\x52\x00\x96\x04\
\\x53\x00\x96\x04\x54\x00\x96\x04\x56\x00\x96\x04\x57\x00\x96\x04\
\\x58\x00\x96\x04\x5a\x00\x96\x04\x5b\x00\x96\x04\x5c\x00\x96\x04\
\\x5e\x00\x96\x04\x5f\x00\x96\x04\x60\x00\x96\x04\x62\x00\x96\x04\
\\x63\x00\x96\x04\x67\x00\x96\x04\x69\x00\x96\x04\x6a\x00\x96\x04\
\\x6b\x00\x96\x04\x6d\x00\x96\x04\x6e\x00\x96\x04\x6f\x00\x96\x04\
\\x71\x00\x96\x04\x72\x00\x96\x04\x73\x00\x96\x04\x75\x00\x96\x04\
\\x76\x00\x96\x04\x77\x00\x96\x04\x79\x00\x96\x04\x7a\x00\x96\x04\
\\x7b\x00\x96\x04\x7d\x00\x96\x04\x7e\x00\x96\x04\x7f\x00\x96\x04\
\\x81\x00\x96\x04\x84\x00\x96\x04\x85\x00\x96\x04\x8a\x00\x96\x04\
\\x8b\x00\x96\x04\x8d\x00\x96\x04\x8e\x00\x96\x04\x8f\x00\x96\x04\
\\x90\x00\x96\x04\x91\x00\x96\x04\x93\x00\x96\x04\x94\x00\x96\x04\
\\x96\x00\x96\x04\x97\x00\x96\x04\x98\x00\x96\x04\x99\x00\x96\x04\
\\xa2\x00\x96\x04\xa4\x00\x96\x04\xaa\x00\x96\x04\xab\x00\x96\x04\
\\xac\x00\x96\x04\xad\x00\x96\x04\xae\x00\x96\x04\xb1\x00\x96\x04\
\\xb2\x00\x96\x04\xb5\x00\x96\x04\x00\x00\
\\x01\x00\x02\x00\x97\x04\x03\x00\x97\x04\x04\x00\x97\x04\x05\x00\x97\x04\
\\x08\x00\x97\x04\x09\x00\x97\x04\x0a\x00\x97\x04\x0b\x00\x97\x04\
\\x0c\x00\x97\x04\x0d\x00\x97\x04\x0e\x00\x97\x04\x11\x00\x97\x04\
\\x12\x00\x97\x04\x13\x00\x97\x04\x14\x00\x97\x04\x15\x00\x97\x04\
\\x16\x00\x97\x04\x17\x00\x97\x04\x18\x00\x97\x04\x19\x00\x97\x04\
\\x1a\x00\x97\x04\x1b\x00\x97\x04\x1c\x00\x97\x04\x1e\x00\x97\x04\
\\x1f\x00\x97\x04\x23\x00\x97\x04\x24\x00\x97\x04\x2b\x00\x97\x04\
\\x2c\x00\x97\x04\x30\x00\x97\x04\x32\x00\x97\x04\x34\x00\x97\x04\
\\x36\x00\x97\x04\x38\x00\x97\x04\x39\x00\x97\x04\x3a\x00\x97\x04\
\\x3c\x00\x97\x04\x3d\x00\x97\x04\x3e\x00\x97\x04\x3f\x00\x97\x04\
\\x40\x00\x97\x04\x41\x00\x97\x04\x42\x00\x97\x04\x43\x00\x97\x04\
\\x44\x00\x97\x04\x45\x00\x97\x04\x46\x00\x97\x04\x47\x00\x97\x04\
\\x48\x00\x97\x04\x4a\x00\x97\x04\x4b\x00\x97\x04\x4c\x00\x97\x04\
\\x4e\x00\x97\x04\x4f\x00\x97\x04\x50\x00\x97\x04\x52\x00\x97\x04\
\\x53\x00\x97\x04\x54\x00\x97\x04\x56\x00\x97\x04\x57\x00\x97\x04\
\\x58\x00\x97\x04\x5a\x00\x97\x04\x5b\x00\x97\x04\x5c\x00\x97\x04\
\\x5e\x00\x97\x04\x5f\x00\x97\x04\x60\x00\x97\x04\x62\x00\x97\x04\
\\x63\x00\x97\x04\x67\x00\x97\x04\x69\x00\x97\x04\x6a\x00\x97\x04\
\\x6b\x00\x97\x04\x6d\x00\x97\x04\x6e\x00\x97\x04\x6f\x00\x97\x04\
\\x71\x00\x97\x04\x72\x00\x97\x04\x73\x00\x97\x04\x75\x00\x97\x04\
\\x76\x00\x97\x04\x77\x00\x97\x04\x79\x00\x97\x04\x7a\x00\x97\x04\
\\x7b\x00\x97\x04\x7d\x00\x97\x04\x7e\x00\x97\x04\x7f\x00\x97\x04\
\\x81\x00\x97\x04\x84\x00\x97\x04\x85\x00\x97\x04\x8a\x00\x97\x04\
\\x8b\x00\x97\x04\x8d\x00\x97\x04\x8e\x00\x97\x04\x8f\x00\x97\x04\
\\x90\x00\x97\x04\x91\x00\x97\x04\x93\x00\x97\x04\x94\x00\x97\x04\
\\x96\x00\x97\x04\x97\x00\x97\x04\x98\x00\x97\x04\x99\x00\x97\x04\
\\xa2\x00\x97\x04\xa4\x00\x97\x04\xaa\x00\x97\x04\xab\x00\x97\x04\
\\xac\x00\x97\x04\xad\x00\x97\x04\xae\x00\x97\x04\xb1\x00\x97\x04\
\\xb2\x00\x97\x04\xb5\x00\x97\x04\x00\x00\
\\x01\x00\x02\x00\x98\x04\x03\x00\x98\x04\x04\x00\x98\x04\x05\x00\x98\x04\
\\x08\x00\x98\x04\x09\x00\x98\x04\x0a\x00\x98\x04\x0b\x00\x98\x04\
\\x0c\x00\x98\x04\x0d\x00\x98\x04\x0e\x00\x98\x04\x11\x00\x98\x04\
\\x12\x00\x98\x04\x13\x00\x98\x04\x14\x00\x98\x04\x15\x00\x98\x04\
\\x16\x00\x98\x04\x17\x00\x98\x04\x18\x00\x98\x04\x19\x00\x98\x04\
\\x1a\x00\x98\x04\x1b\x00\x98\x04\x1c\x00\x98\x04\x1e\x00\x98\x04\
\\x1f\x00\x98\x04\x23\x00\x98\x04\x24\x00\x98\x04\x2b\x00\x98\x04\
\\x2c\x00\x98\x04\x30\x00\x98\x04\x32\x00\x98\x04\x34\x00\x98\x04\
\\x36\x00\x98\x04\x38\x00\x98\x04\x39\x00\x98\x04\x3a\x00\x98\x04\
\\x3c\x00\x98\x04\x3d\x00\x98\x04\x3e\x00\x98\x04\x3f\x00\x98\x04\
\\x40\x00\x98\x04\x41\x00\x98\x04\x42\x00\x98\x04\x43\x00\x98\x04\
\\x44\x00\x98\x04\x45\x00\x98\x04\x46\x00\x98\x04\x47\x00\x98\x04\
\\x48\x00\x98\x04\x4a\x00\x98\x04\x4b\x00\x98\x04\x4c\x00\x98\x04\
\\x4e\x00\x98\x04\x4f\x00\x98\x04\x50\x00\x98\x04\x52\x00\x98\x04\
\\x53\x00\x98\x04\x54\x00\x98\x04\x56\x00\x98\x04\x57\x00\x98\x04\
\\x58\x00\x98\x04\x5a\x00\x98\x04\x5b\x00\x98\x04\x5c\x00\x98\x04\
\\x5e\x00\x98\x04\x5f\x00\x98\x04\x60\x00\x98\x04\x62\x00\x98\x04\
\\x63\x00\x98\x04\x67\x00\x98\x04\x69\x00\x98\x04\x6a\x00\x98\x04\
\\x6b\x00\x98\x04\x6d\x00\x98\x04\x6e\x00\x98\x04\x6f\x00\x98\x04\
\\x71\x00\x98\x04\x72\x00\x98\x04\x73\x00\x98\x04\x75\x00\x98\x04\
\\x76\x00\x98\x04\x77\x00\x98\x04\x79\x00\x98\x04\x7a\x00\x98\x04\
\\x7b\x00\x98\x04\x7d\x00\x98\x04\x7e\x00\x98\x04\x7f\x00\x98\x04\
\\x81\x00\x98\x04\x84\x00\x98\x04\x85\x00\x98\x04\x8a\x00\x98\x04\
\\x8b\x00\x98\x04\x8d\x00\x98\x04\x8e\x00\x98\x04\x8f\x00\x98\x04\
\\x90\x00\x98\x04\x91\x00\x98\x04\x93\x00\x98\x04\x94\x00\x98\x04\
\\x96\x00\x98\x04\x97\x00\x98\x04\x98\x00\x98\x04\x99\x00\x98\x04\
\\xa2\x00\x98\x04\xa4\x00\x98\x04\xaa\x00\x98\x04\xab\x00\x98\x04\
\\xac\x00\x98\x04\xad\x00\x98\x04\xae\x00\x98\x04\xb1\x00\x98\x04\
\\xb2\x00\x98\x04\xb5\x00\x98\x04\x00\x00\
\\x01\x00\x02\x00\x99\x04\x03\x00\x99\x04\x04\x00\x99\x04\x05\x00\x99\x04\
\\x08\x00\x99\x04\x09\x00\x99\x04\x0a\x00\x99\x04\x0b\x00\x99\x04\
\\x0c\x00\x99\x04\x0d\x00\x99\x04\x0e\x00\x99\x04\x11\x00\x99\x04\
\\x12\x00\x99\x04\x13\x00\x99\x04\x14\x00\x99\x04\x15\x00\x99\x04\
\\x16\x00\x99\x04\x17\x00\x99\x04\x18\x00\x99\x04\x19\x00\x99\x04\
\\x1a\x00\x99\x04\x1b\x00\x99\x04\x1c\x00\x99\x04\x1e\x00\x99\x04\
\\x1f\x00\x99\x04\x23\x00\x99\x04\x24\x00\x99\x04\x2b\x00\x99\x04\
\\x2c\x00\x99\x04\x30\x00\x99\x04\x32\x00\x99\x04\x34\x00\x99\x04\
\\x36\x00\x99\x04\x38\x00\x99\x04\x39\x00\x99\x04\x3a\x00\x99\x04\
\\x3c\x00\x99\x04\x3d\x00\x99\x04\x3e\x00\x99\x04\x3f\x00\x99\x04\
\\x40\x00\x99\x04\x41\x00\x99\x04\x42\x00\x99\x04\x43\x00\x99\x04\
\\x44\x00\x99\x04\x45\x00\x99\x04\x46\x00\x99\x04\x47\x00\x99\x04\
\\x48\x00\x99\x04\x4a\x00\x99\x04\x4b\x00\x99\x04\x4c\x00\x99\x04\
\\x4e\x00\x99\x04\x4f\x00\x99\x04\x50\x00\x99\x04\x52\x00\x99\x04\
\\x53\x00\x99\x04\x54\x00\x99\x04\x56\x00\x99\x04\x57\x00\x99\x04\
\\x58\x00\x99\x04\x5a\x00\x99\x04\x5b\x00\x99\x04\x5c\x00\x99\x04\
\\x5e\x00\x99\x04\x5f\x00\x99\x04\x60\x00\x99\x04\x62\x00\x99\x04\
\\x63\x00\x99\x04\x67\x00\x99\x04\x69\x00\x99\x04\x6a\x00\x99\x04\
\\x6b\x00\x99\x04\x6d\x00\x99\x04\x6e\x00\x99\x04\x6f\x00\x99\x04\
\\x71\x00\x99\x04\x72\x00\x99\x04\x73\x00\x99\x04\x75\x00\x99\x04\
\\x76\x00\x99\x04\x77\x00\x99\x04\x79\x00\x99\x04\x7a\x00\x99\x04\
\\x7b\x00\x99\x04\x7d\x00\x99\x04\x7e\x00\x99\x04\x7f\x00\x99\x04\
\\x81\x00\x99\x04\x84\x00\x99\x04\x85\x00\x99\x04\x8a\x00\x99\x04\
\\x8b\x00\x99\x04\x8d\x00\x99\x04\x8e\x00\x99\x04\x8f\x00\x99\x04\
\\x90\x00\x99\x04\x91\x00\x99\x04\x93\x00\x99\x04\x94\x00\x99\x04\
\\x96\x00\x99\x04\x97\x00\x99\x04\x98\x00\x99\x04\x99\x00\x99\x04\
\\xa2\x00\x99\x04\xa4\x00\x99\x04\xaa\x00\x99\x04\xab\x00\x99\x04\
\\xac\x00\x99\x04\xad\x00\x99\x04\xae\x00\x99\x04\xb1\x00\x99\x04\
\\xb2\x00\x99\x04\xb5\x00\x99\x04\x00\x00\
\\x01\x00\x02\x00\x9a\x04\x03\x00\x9a\x04\x04\x00\x9a\x04\x05\x00\x9a\x04\
\\x08\x00\x9a\x04\x09\x00\x9a\x04\x0a\x00\x9a\x04\x0b\x00\x9a\x04\
\\x0c\x00\x9a\x04\x0d\x00\x9a\x04\x0e\x00\x9a\x04\x11\x00\x9a\x04\
\\x12\x00\x9a\x04\x13\x00\x9a\x04\x14\x00\x9a\x04\x15\x00\x9a\x04\
\\x16\x00\x9a\x04\x17\x00\x9a\x04\x18\x00\x9a\x04\x19\x00\x9a\x04\
\\x1a\x00\x9a\x04\x1b\x00\x9a\x04\x1c\x00\x9a\x04\x1e\x00\x9a\x04\
\\x1f\x00\x9a\x04\x23\x00\x9a\x04\x24\x00\x9a\x04\x2b\x00\x9a\x04\
\\x2c\x00\x9a\x04\x30\x00\x9a\x04\x32\x00\x9a\x04\x34\x00\x9a\x04\
\\x36\x00\x9a\x04\x38\x00\x9a\x04\x39\x00\x9a\x04\x3a\x00\x9a\x04\
\\x3c\x00\x9a\x04\x3d\x00\x9a\x04\x3e\x00\x9a\x04\x3f\x00\x9a\x04\
\\x40\x00\x9a\x04\x41\x00\x9a\x04\x42\x00\x9a\x04\x43\x00\x9a\x04\
\\x44\x00\x9a\x04\x45\x00\x9a\x04\x46\x00\x9a\x04\x47\x00\x9a\x04\
\\x48\x00\x9a\x04\x4a\x00\x9a\x04\x4b\x00\x9a\x04\x4c\x00\x9a\x04\
\\x4e\x00\x9a\x04\x4f\x00\x9a\x04\x50\x00\x9a\x04\x52\x00\x9a\x04\
\\x53\x00\x9a\x04\x54\x00\x9a\x04\x56\x00\x9a\x04\x57\x00\x9a\x04\
\\x58\x00\x9a\x04\x5a\x00\x9a\x04\x5b\x00\x9a\x04\x5c\x00\x9a\x04\
\\x5e\x00\x9a\x04\x5f\x00\x9a\x04\x60\x00\x9a\x04\x62\x00\x9a\x04\
\\x63\x00\x9a\x04\x67\x00\x9a\x04\x69\x00\x9a\x04\x6a\x00\x9a\x04\
\\x6b\x00\x9a\x04\x6d\x00\x9a\x04\x6e\x00\x9a\x04\x6f\x00\x9a\x04\
\\x71\x00\x9a\x04\x72\x00\x9a\x04\x73\x00\x9a\x04\x75\x00\x9a\x04\
\\x76\x00\x9a\x04\x77\x00\x9a\x04\x79\x00\x9a\x04\x7a\x00\x9a\x04\
\\x7b\x00\x9a\x04\x7d\x00\x9a\x04\x7e\x00\x9a\x04\x7f\x00\x9a\x04\
\\x81\x00\x9a\x04\x84\x00\x9a\x04\x85\x00\x9a\x04\x8a\x00\x9a\x04\
\\x8b\x00\x9a\x04\x8d\x00\x9a\x04\x8e\x00\x9a\x04\x8f\x00\x9a\x04\
\\x90\x00\x9a\x04\x91\x00\x9a\x04\x93\x00\x9a\x04\x94\x00\x9a\x04\
\\x96\x00\x9a\x04\x97\x00\x9a\x04\x98\x00\x9a\x04\x99\x00\x9a\x04\
\\xa2\x00\x9a\x04\xa4\x00\x9a\x04\xaa\x00\x9a\x04\xab\x00\x9a\x04\
\\xac\x00\x9a\x04\xad\x00\x9a\x04\xae\x00\x9a\x04\xb1\x00\x9a\x04\
\\xb2\x00\x9a\x04\xb5\x00\x9a\x04\x00\x00\
\\x01\x00\x02\x00\xd4\x04\x06\x00\xd4\x04\x07\x00\xd4\x04\x10\x00\xd4\x04\
\\x20\x00\xd4\x04\x22\x00\xd4\x04\x42\x00\xd4\x04\xa1\x00\x58\x06\
\\xac\x00\xd4\x04\xae\x00\x58\x06\x00\x00\
\\x01\x00\x02\x00\x21\x05\x03\x00\x21\x05\x04\x00\x21\x05\x05\x00\x21\x05\
\\x06\x00\x21\x05\x08\x00\x21\x05\x09\x00\x21\x05\x0a\x00\x21\x05\
\\x0b\x00\x21\x05\x0c\x00\x21\x05\x0d\x00\x21\x05\x0e\x00\x21\x05\
\\x11\x00\x21\x05\x12\x00\x21\x05\x13\x00\x21\x05\x14\x00\x21\x05\
\\x15\x00\x21\x05\x16\x00\x21\x05\x17\x00\x21\x05\x18\x00\x21\x05\
\\x19\x00\x21\x05\x1a\x00\x21\x05\x1b\x00\x21\x05\x1c\x00\x21\x05\
\\x1e\x00\x21\x05\x1f\x00\x21\x05\x20\x00\x21\x05\x24\x00\x21\x05\
\\x2c\x00\x21\x05\x2f\x00\x21\x05\x31\x00\x21\x05\x32\x00\x21\x05\
\\x34\x00\x21\x05\x35\x00\x21\x05\x36\x00\x21\x05\x38\x00\x21\x05\
\\x39\x00\x21\x05\x3a\x00\x21\x05\x3c\x00\x21\x05\x3d\x00\x21\x05\
\\x3e\x00\x21\x05\x3f\x00\x21\x05\x40\x00\x21\x05\x41\x00\x21\x05\
\\x42\x00\x21\x05\x43\x00\x21\x05\x44\x00\x21\x05\x45\x00\x21\x05\
\\x46\x00\x21\x05\x47\x00\x21\x05\x48\x00\x21\x05\x4a\x00\x21\x05\
\\x4b\x00\x21\x05\x4c\x00\x21\x05\x4e\x00\x21\x05\x4f\x00\x21\x05\
\\x50\x00\x21\x05\x52\x00\x21\x05\x53\x00\x21\x05\x54\x00\x21\x05\
\\x56\x00\x21\x05\x57\x00\x21\x05\x58\x00\x21\x05\x5a\x00\x21\x05\
\\x5b\x00\x21\x05\x5c\x00\x21\x05\x5e\x00\x21\x05\x5f\x00\x21\x05\
\\x60\x00\x21\x05\x62\x00\x21\x05\x63\x00\x21\x05\x64\x00\x21\x05\
\\x67\x00\x21\x05\x69\x00\x21\x05\x6a\x00\x21\x05\x6b\x00\x21\x05\
\\x6d\x00\x21\x05\x6e\x00\x21\x05\x6f\x00\x21\x05\x71\x00\x21\x05\
\\x72\x00\x21\x05\x73\x00\x21\x05\x75\x00\x21\x05\x76\x00\x21\x05\
\\x77\x00\x21\x05\x79\x00\x21\x05\x7a\x00\x21\x05\x7b\x00\x21\x05\
\\x7d\x00\x21\x05\x7e\x00\x21\x05\x7f\x00\x21\x05\x81\x00\x21\x05\
\\x82\x00\x21\x05\x84\x00\x21\x05\x85\x00\x21\x05\x86\x00\x21\x05\
\\x87\x00\x21\x05\x88\x00\x21\x05\x89\x00\x21\x05\x8a\x00\x21\x05\
\\x8b\x00\x21\x05\x8d\x00\x21\x05\x8e\x00\x21\x05\x8f\x00\x21\x05\
\\x90\x00\x21\x05\x91\x00\x21\x05\x92\x00\x21\x05\x93\x00\x21\x05\
\\x94\x00\x21\x05\x95\x00\x21\x05\x96\x00\x21\x05\x97\x00\x21\x05\
\\x98\x00\x21\x05\x99\x00\x21\x05\x9b\x00\x21\x05\x9d\x00\x21\x05\
\\x9e\x00\x21\x05\x9f\x00\x21\x05\xa0\x00\x21\x05\xa1\x00\x21\x05\
\\xa2\x00\x21\x05\xa4\x00\x21\x05\xa7\x00\x21\x05\xa8\x00\x21\x05\
\\xa9\x00\x21\x05\xaa\x00\x21\x05\xab\x00\x21\x05\xac\x00\x21\x05\
\\xad\x00\x21\x05\xae\x00\x21\x05\xaf\x00\x21\x05\xb0\x00\x21\x05\
\\xb1\x00\x21\x05\xb2\x00\x21\x05\xb5\x00\x21\x05\x00\x00\
\\x01\x00\x02\x00\x21\x05\x03\x00\x21\x05\x04\x00\x21\x05\x05\x00\x21\x05\
\\x08\x00\x21\x05\x09\x00\x21\x05\x0a\x00\x21\x05\x0b\x00\x21\x05\
\\x0c\x00\x21\x05\x0d\x00\x21\x05\x0e\x00\x21\x05\x11\x00\x21\x05\
\\x12\x00\x21\x05\x13\x00\x21\x05\x14\x00\x21\x05\x15\x00\x21\x05\
\\x16\x00\x21\x05\x17\x00\x21\x05\x18\x00\x21\x05\x19\x00\x21\x05\
\\x1a\x00\x21\x05\x1b\x00\x21\x05\x1c\x00\x21\x05\x1e\x00\x21\x05\
\\x1f\x00\x21\x05\x22\x00\x21\x05\x24\x00\x21\x05\x2b\x00\x6c\x01\
\\x2c\x00\x21\x05\x32\x00\x21\x05\x34\x00\x21\x05\x36\x00\x21\x05\
\\x38\x00\x21\x05\x39\x00\x21\x05\x3a\x00\x21\x05\x3c\x00\x21\x05\
\\x3d\x00\x21\x05\x3e\x00\x21\x05\x3f\x00\x21\x05\x41\x00\x21\x05\
\\x42\x00\x21\x05\x45\x00\x21\x05\x46\x00\x21\x05\x47\x00\x21\x05\
\\x48\x00\x21\x05\x4a\x00\x21\x05\x4b\x00\x21\x05\x4c\x00\x21\x05\
\\x4e\x00\x21\x05\x4f\x00\x21\x05\x50\x00\x21\x05\x52\x00\x21\x05\
\\x53\x00\x21\x05\x54\x00\x21\x05\x56\x00\x21\x05\x58\x00\x21\x05\
\\x5a\x00\x21\x05\x5b\x00\x21\x05\x5c\x00\x21\x05\x5e\x00\x21\x05\
\\x5f\x00\x21\x05\x60\x00\x21\x05\x62\x00\x21\x05\x63\x00\x21\x05\
\\x64\x00\x21\x05\x67\x00\x21\x05\x69\x00\x21\x05\x6b\x00\x21\x05\
\\x6d\x00\x21\x05\x6e\x00\x21\x05\x6f\x00\x21\x05\x71\x00\x21\x05\
\\x72\x00\x21\x05\x73\x00\x21\x05\x75\x00\x21\x05\x76\x00\x21\x05\
\\x77\x00\x21\x05\x7a\x00\x21\x05\x7b\x00\x21\x05\x7d\x00\x21\x05\
\\x7e\x00\x21\x05\x7f\x00\x21\x05\x81\x00\x21\x05\x82\x00\x21\x05\
\\x84\x00\x21\x05\x85\x00\x21\x05\x88\x00\x21\x05\x89\x00\x21\x05\
\\x8a\x00\x21\x05\x8b\x00\x21\x05\x8d\x00\x21\x05\x8e\x00\x21\x05\
\\x8f\x00\x21\x05\x90\x00\x21\x05\x91\x00\x21\x05\x93\x00\x21\x05\
\\x94\x00\x21\x05\x96\x00\x21\x05\x97\x00\x21\x05\x98\x00\x21\x05\
\\x99\x00\x21\x05\x9b\x00\x21\x05\x9d\x00\x21\x05\x9f\x00\x21\x05\
\\xa0\x00\x21\x05\xa1\x00\x21\x05\xa4\x00\x21\x05\xa8\x00\x21\x05\
\\xa9\x00\x21\x05\xab\x00\x21\x05\xac\x00\x21\x05\xaf\x00\x21\x05\
\\xb0\x00\x21\x05\xb1\x00\x21\x05\xb2\x00\x21\x05\xb5\x00\x21\x05\x00\x00\
\\x01\x00\x02\x00\x1e\x06\xa1\x00\x58\x06\x00\x00\
\\x01\x00\x02\x00\x81\x00\x00\x00\
\\x01\x00\x02\x00\xa9\x01\x00\x00\
\\x01\x00\x02\x00\xf3\x01\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\
\\x0c\x00\xdb\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\
\\x24\x00\x66\x00\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\
\\x39\x00\x5d\x00\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\
\\x3f\x00\xd6\x00\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\
\\x47\x00\xd5\x00\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\
\\x4f\x00\xd1\x00\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\
\\x58\x00\xcd\x00\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\
\\x60\x00\xc9\x00\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\
\\x6e\x00\xc6\x00\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\
\\x76\x00\x3f\x00\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\
\\x7e\x00\xbf\x00\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\x38\x00\
\\x86\x00\x37\x00\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\
\\x8d\x00\x32\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x27\x00\x99\x00\x87\x00\x9b\x00\x25\x00\
\\x9d\x00\x23\x00\xab\x00\x21\x00\xac\x00\x20\x00\xae\x00\xf2\x01\
\\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x02\x00\x36\x02\x00\x00\
\\x01\x00\x02\x00\x6b\x02\x00\x00\
\\x01\x00\x02\x00\x76\x02\x00\x00\
\\x01\x00\x02\x00\x79\x02\x00\x00\
\\x01\x00\x02\x00\x29\x03\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\
\\xa8\x00\xf5\x00\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x02\x00\x36\x03\x00\x00\
\\x01\x00\x02\x00\x76\x03\x00\x00\
\\x01\x00\x02\x00\xa2\x03\x00\x00\
\\x01\x00\x02\x00\xac\x03\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\
\\xa8\x00\xf5\x00\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x02\x00\x44\x04\xae\x00\x43\x04\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1d\x00\x6a\x00\x1e\x00\x69\x00\
\\x1f\x00\x68\x00\x21\x00\x67\x00\x24\x00\x66\x00\x25\x00\x65\x00\
\\x26\x00\x64\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\x55\x00\
\\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\x4f\x00\x51\x00\
\\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\x5f\x00\x49\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\x72\x00\x41\x00\
\\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\x7a\x00\x3d\x00\
\\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\
\\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\x88\x00\x35\x00\
\\x8a\x00\x34\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\
\\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\
\\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\x9b\x00\x25\x00\
\\x9c\x00\x24\x00\x9d\x00\x23\x00\x9e\x00\x22\x00\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\
\\x24\x00\x66\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\x55\x00\
\\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\x4f\x00\x51\x00\
\\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\x5f\x00\x49\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\x72\x00\x41\x00\
\\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\x7a\x00\x3d\x00\
\\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\
\\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\x88\x00\x35\x00\
\\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\
\\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\
\\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\x9b\x00\x25\x00\
\\x9d\x00\x23\x00\x9e\x00\x16\x01\xab\x00\x21\x00\xac\x00\x20\x00\
\\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x5d\x01\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\
\\x24\x00\x66\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x43\x00\x5c\x01\x45\x00\x56\x00\
\\x47\x00\x55\x00\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\
\\x4f\x00\x51\x00\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\
\\x57\x00\x4d\x00\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\
\\x5f\x00\x49\x00\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\
\\x6a\x00\x45\x00\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\
\\x72\x00\x41\x00\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\
\\x7a\x00\x3d\x00\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\
\\x84\x00\x39\x00\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\
\\x92\x00\x2d\x00\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\
\\x96\x00\x29\x00\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\
\\x9b\x00\x25\x00\x9d\x00\x23\x00\x9e\x00\x16\x01\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\x38\x00\x86\x00\x37\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x27\x00\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xad\x00\x0d\x01\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\x38\x00\x86\x00\x37\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x27\x00\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xad\x00\x56\x01\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\x38\x00\x86\x00\x37\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x27\x00\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xae\x00\x10\x01\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\x38\x00\x86\x00\x37\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x27\x00\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\xbd\x00\x88\x00\x35\x00\
\\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\
\\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x34\x01\
\\x3a\x00\x5c\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\x42\x00\x57\x00\
\\x45\x00\x56\x00\x47\x00\xd5\x00\x48\x00\xd4\x00\x4b\x00\xd3\x00\
\\x4c\x00\xd2\x00\x4f\x00\xd1\x00\x50\x00\xd0\x00\x53\x00\xcf\x00\
\\x54\x00\xce\x00\x58\x00\xcd\x00\x5b\x00\xcc\x00\x5c\x00\xcb\x00\
\\x5f\x00\xca\x00\x60\x00\xc9\x00\x63\x00\x47\x00\x67\x00\xc8\x00\
\\x6b\x00\xc7\x00\x6e\x00\xc6\x00\x6f\x00\xc5\x00\x72\x00\xc4\x00\
\\x73\x00\xc3\x00\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\
\\x7e\x00\xbf\x00\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\xbd\x00\
\\x88\x00\x35\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\x14\x00\x73\x00\
\\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\x18\x00\x6f\x00\
\\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\x1c\x00\x6b\x00\
\\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\x2c\x00\xda\x00\
\\x32\x00\xd9\x00\x36\x00\xd8\x00\x3a\x00\x5c\x00\x3e\x00\xd7\x00\
\\x3f\x00\xd6\x00\x42\x00\x57\x00\x45\x00\x56\x00\x48\x00\xd4\x00\
\\x4c\x00\xd2\x00\x50\x00\xd0\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5c\x00\xcb\x00\x60\x00\xc9\x00\x63\x00\x47\x00\x67\x00\xc8\x00\
\\x6b\x00\xc7\x00\x6f\x00\xc5\x00\x73\x00\xc3\x00\x77\x00\xc2\x00\
\\x7b\x00\xc0\x00\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\xbd\x00\
\\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\
\\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x22\x00\x1f\x02\x2c\x00\xae\x00\x32\x00\xad\x00\
\\x36\x00\xac\x00\x39\x00\xee\x01\x3a\x00\x5c\x00\x3d\x00\xed\x01\
\\x3e\x00\xab\x00\x3f\x00\xaa\x00\x41\x00\xec\x01\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x76\x00\xeb\x01\x77\x00\x96\x00\
\\x7a\x00\x3d\x00\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\
\\xa2\x00\x30\x01\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x92\x00\x31\x01\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\
\\xa2\x00\x30\x01\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xad\x00\xc6\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xad\x00\xcb\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xae\x00\xc8\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\xee\x01\x3a\x00\x5c\x00\x3d\x00\xed\x01\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x41\x00\xec\x01\x42\x00\x33\x01\x45\x00\x32\x01\
\\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\x4c\x00\xa6\x00\
\\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\x54\x00\xa2\x00\
\\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\x5c\x00\x9f\x00\
\\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\x6a\x00\x45\x00\
\\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\x72\x00\x41\x00\
\\x73\x00\x97\x00\x76\x00\xeb\x01\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x0a\x00\xb0\x00\x0b\x00\x79\x00\
\\x0c\x00\x36\x04\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x3e\x00\xab\x00\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\
\\x4b\x00\xa7\x00\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\
\\x53\x00\xa3\x00\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\
\\x5b\x00\xa0\x00\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\
\\x67\x00\x9c\x00\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\
\\x6f\x00\x99\x00\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\
\\x7a\x00\x95\x00\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x9c\x00\xf1\x02\x9e\x00\xf0\x02\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x9e\x00\x9e\x03\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\
\\x11\x00\x51\x01\x27\x00\xd2\x01\x42\x00\x8c\x01\x43\x00\xd1\x01\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\
\\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\
\\x11\x00\x51\x01\x27\x00\xd2\x01\x42\x00\x8c\x01\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\
\\x11\x00\x51\x01\x42\x00\x8c\x01\x43\x00\x28\x02\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\
\\x11\x00\x51\x01\x42\x00\x8c\x01\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x08\x00\xb1\x00\x0a\x00\xb0\x00\x0c\x00\xaf\x00\
\\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\
\\x3e\x00\xab\x00\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\
\\x4b\x00\xa7\x00\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\
\\x53\x00\xa3\x00\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\
\\x5b\x00\xa0\x00\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\
\\x67\x00\x9c\x00\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\
\\x6f\x00\x99\x00\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\
\\x7a\x00\x95\x00\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x0a\x00\xb0\x00\x0c\x00\xba\x01\x2c\x00\xae\x00\
\\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\x4b\x00\xa7\x00\
\\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\x53\x00\xa3\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\xa0\x00\
\\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\x6f\x00\x99\x00\
\\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x95\x00\
\\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x92\x00\xb9\x01\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x0a\x00\xb0\x00\x0c\x00\xbd\x01\x2c\x00\xae\x00\
\\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\x4b\x00\xa7\x00\
\\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\x53\x00\xa3\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\xa0\x00\
\\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\x6f\x00\x99\x00\
\\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x95\x00\
\\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x0a\x00\xb0\x00\x0c\x00\x45\x02\x2c\x00\xae\x00\
\\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\x4b\x00\xa7\x00\
\\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\x53\x00\xa3\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\xa0\x00\
\\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\x6f\x00\x99\x00\
\\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x95\x00\
\\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x0a\x00\xc6\x02\x0c\x00\xc5\x02\x2c\x00\xc2\x02\
\\x32\x00\xbf\x02\x36\x00\xbe\x02\x3a\x00\xbd\x02\x3e\x00\xbc\x02\
\\x3f\x00\xbb\x02\x47\x00\xba\x02\x48\x00\xb9\x02\x4b\x00\xb8\x02\
\\x4c\x00\xb7\x02\x4f\x00\xb6\x02\x50\x00\xb5\x02\x53\x00\xb4\x02\
\\x54\x00\xb3\x02\x57\x00\xb2\x02\x58\x00\xb1\x02\x5b\x00\xb0\x02\
\\x5c\x00\xaf\x02\x5f\x00\xae\x02\x60\x00\xad\x02\x67\x00\xac\x02\
\\x6a\x00\xab\x02\x6b\x00\xaa\x02\x6e\x00\xa9\x02\x6f\x00\xa8\x02\
\\x73\x00\xa7\x02\x77\x00\xa6\x02\x7a\x00\xa5\x02\x7b\x00\xa4\x02\
\\x7e\x00\xa3\x02\x7f\x00\xa2\x02\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x11\x00\x51\x01\x22\x00\x1f\x02\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x11\x00\x51\x01\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x11\x00\x85\x02\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x22\x00\x1f\x02\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x42\x00\x83\x03\x84\x00\x91\x00\x8a\x00\x90\x00\
\\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\
\\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\
\\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x01\x00\x04\x00\x7f\x00\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\
\\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\
\\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\x00\x00\
\\x01\x00\x05\x00\x7e\x00\x09\x00\x7b\x00\x0b\x00\x79\x00\x0c\x00\xa3\x01\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\x14\x00\x73\x00\
\\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\x18\x00\x6f\x00\
\\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\x1c\x00\x6b\x00\
\\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\x42\x00\x57\x00\
\\x45\x00\x56\x00\x63\x00\x47\x00\x85\x00\xbd\x00\x8b\x00\x33\x00\
\\x8d\x00\x32\x00\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x01\x00\x06\x00\x3c\x01\x00\x00\
\\x01\x00\x06\x00\x6b\x01\x00\x00\
\\x01\x00\x06\x00\x74\x01\x00\x00\
\\x01\x00\x06\x00\x76\x01\x92\x00\x2d\x00\x00\x00\
\\x01\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x00\x00\
\\x01\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x08\x00\xcd\x02\x10\x00\x8d\x01\
\\x42\x00\x8c\x01\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\x42\x00\x8c\x01\
\\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x06\x00\xe2\x01\x00\x00\
\\x01\x00\x06\x00\x3e\x02\x21\x00\x3d\x02\x00\x00\
\\x01\x00\x06\x00\x94\x02\x00\x00\
\\x01\x00\x06\x00\x11\x03\x00\x00\
\\x01\x00\x06\x00\x12\x03\x00\x00\
\\x01\x00\x06\x00\x13\x03\x00\x00\
\\x01\x00\x06\x00\x65\x03\x00\x00\
\\x01\x00\x06\x00\xbe\x03\x21\x00\x3d\x02\x00\x00\
\\x01\x00\x06\x00\x11\x04\x07\x00\x8e\x01\x10\x00\x8d\x01\x21\x00\x3d\x02\
\\x42\x00\x8c\x01\xac\x00\x8b\x01\x00\x00\
\\x01\x00\x06\x00\x48\x04\x00\x00\
\\x01\x00\x08\x00\x64\x01\x00\x00\
\\x01\x00\x08\x00\x8b\x02\x09\x00\x7b\x00\x00\x00\
\\x01\x00\x08\x00\xcd\x02\x00\x00\
\\x01\x00\x08\x00\x63\x03\x00\x00\
\\x01\x00\x0c\x00\xd1\x04\x22\x00\x2e\x05\x2a\x00\xd1\x04\x64\x00\x2e\x05\
\\x89\x00\x2e\x05\xa4\x00\xd1\x04\xa5\x00\xd1\x04\xa6\x00\xd1\x04\
\\xac\x00\xd1\x04\xae\x00\xd1\x04\x00\x00\
\\x01\x00\x0c\x00\xd2\x04\x22\x00\x68\x04\x2a\x00\xd2\x04\x2b\x00\xa1\x04\
\\x49\x00\x06\x01\x4d\x00\x05\x01\x51\x00\x04\x01\x55\x00\x03\x01\
\\x59\x00\x02\x01\x61\x00\x01\x01\x64\x00\x68\x04\x65\x00\x00\x01\
\\x6c\x00\xff\x00\x70\x00\xfe\x00\x74\x00\xfd\x00\x78\x00\xfc\x00\
\\x7c\x00\xfb\x00\x80\x00\xfa\x00\x89\x00\x68\x04\xa4\x00\xd2\x04\
\\xa5\x00\xd2\x04\xa6\x00\xd2\x04\xac\x00\xd2\x04\xae\x00\xd2\x04\x00\x00\
\\x01\x00\x0e\x00\x83\x04\x2b\x00\xb7\x05\x30\x00\xb7\x05\x34\x00\x83\x04\
\\x38\x00\x83\x04\x3c\x00\x83\x04\x40\x00\x83\x04\x44\x00\xb7\x05\
\\x4a\x00\x83\x04\x4e\x00\x83\x04\x52\x00\x83\x04\x56\x00\x83\x04\
\\x5a\x00\x83\x04\x5e\x00\x83\x04\x62\x00\x83\x04\x69\x00\x83\x04\
\\x6d\x00\x83\x04\x71\x00\x83\x04\x75\x00\x83\x04\x79\x00\xb7\x05\
\\x7d\x00\x83\x04\x81\x00\x83\x04\xa4\x00\xb7\x05\x00\x00\
\\x01\x00\x0e\x00\x83\x04\x2b\x00\xba\x05\x30\x00\xba\x05\x34\x00\x83\x04\
\\x38\x00\x83\x04\x3c\x00\x83\x04\x40\x00\x83\x04\x44\x00\xba\x05\
\\x4a\x00\x83\x04\x4e\x00\x83\x04\x52\x00\x83\x04\x56\x00\x83\x04\
\\x5a\x00\x83\x04\x5e\x00\x83\x04\x62\x00\x83\x04\x69\x00\x83\x04\
\\x6d\x00\x83\x04\x71\x00\x83\x04\x75\x00\x83\x04\x79\x00\xba\x05\
\\x7d\x00\x83\x04\x81\x00\x83\x04\xa4\x00\xba\x05\x00\x00\
\\x01\x00\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x44\x00\x20\x03\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\
\\x56\x00\xe8\x00\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\
\\x69\x00\xe4\x00\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\x00\x00\
\\x01\x00\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\x56\x00\xe8\x00\
\\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\x69\x00\xe4\x00\
\\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\x79\x00\x1f\x03\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\x00\x00\
\\x01\x00\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\x22\x03\
\\x40\x00\x21\x03\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\
\\x56\x00\xe8\x00\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\
\\x69\x00\xe4\x00\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\x00\x00\
\\x01\x00\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\x24\x03\
\\x40\x00\x23\x03\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\
\\x56\x00\xe8\x00\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\
\\x69\x00\xe4\x00\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\x00\x00\
\\x01\x00\x10\x00\x18\x02\x00\x00\
\\x01\x00\x11\x00\x41\x01\x00\x00\
\\x01\x00\x1e\x00\x19\x01\x00\x00\
\\x01\x00\x1e\x00\x1c\x01\x00\x00\
\\x01\x00\x1e\x00\xe3\x01\x64\x00\xb6\x00\x89\x00\xb5\x00\x00\x00\
\\x01\x00\x1e\x00\x2e\x02\x63\x00\x2d\x02\x64\x00\x2c\x02\x00\x00\
\\x01\x00\x22\x00\xb7\x00\x64\x00\xb6\x00\x89\x00\xb5\x00\x00\x00\
\\x01\x00\x22\x00\x1f\x02\x2b\x00\x8d\x03\x70\x00\x8c\x03\x00\x00\
\\x01\x00\x22\x00\x1f\x02\x2b\x00\x8f\x03\x70\x00\x8e\x03\x00\x00\
\\x01\x00\x22\x00\x1f\x02\xaa\x00\xd7\x02\xae\x00\xd6\x02\x00\x00\
\\x01\x00\x22\x00\x1f\x02\xaa\x00\x6e\x03\xae\x00\xd6\x02\x00\x00\
\\x01\x00\x23\x00\xc3\x01\x2b\x00\xc2\x01\xa4\x00\xc1\x01\x00\x00\
\\x01\x00\x23\x00\xc3\x01\x2b\x00\xf5\x01\x30\x00\xf4\x01\xa4\x00\xc1\x01\x00\x00\
\\x01\x00\x23\x00\xc3\x01\x2b\x00\x52\x02\xa4\x00\xc1\x01\x00\x00\
\\x01\x00\x23\x00\xc3\x01\x30\x00\xf4\x01\xa4\x00\xc1\x01\x00\x00\
\\x01\x00\x23\x00\xc3\x01\x3a\x00\x51\x02\xa4\x00\xc1\x01\xaa\x00\x50\x02\
\\xae\x00\x4f\x02\x00\x00\
\\x01\x00\x23\x00\xc3\x01\xa4\x00\xc1\x01\xaa\x00\xab\x03\xad\x00\xaa\x03\x00\x00\
\\x01\x00\x23\x00\x59\x02\x30\x00\xd8\x04\x43\x00\x87\x05\xa4\x00\x58\x02\
\\xaa\x00\x87\x05\x00\x00\
\\x01\x00\x28\x00\x61\x02\x29\x00\x60\x02\x83\x00\x5f\x02\x00\x00\
\\x01\x00\x2a\x00\xf7\x01\x00\x00\
\\x01\x00\x2a\x00\x1d\x02\x00\x00\
\\x01\x00\x2a\x00\x2f\x02\x00\x00\
\\x01\x00\x2a\x00\xe4\x02\x00\x00\
\\x01\x00\x2a\x00\x73\x03\x00\x00\
\\x01\x00\x2a\x00\xa4\x03\x00\x00\
\\x01\x00\x2a\x00\xe9\x03\x00\x00\
\\x01\x00\x2a\x00\x49\x04\x00\x00\
\\x01\x00\x2a\x00\x4d\x04\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\x00\x00\
\\x01\x00\x2a\x00\x5d\x04\x00\x00\
\\x01\x00\x2b\x00\xf9\x00\x00\x00\
\\x01\x00\x2b\x00\x13\x02\x00\x00\
\\x01\x00\x2b\x00\x13\x02\x42\x00\x12\x02\x00\x00\
\\x01\x00\x2b\x00\x16\x02\x2c\x00\x15\x02\x00\x00\
\\x01\x00\x2b\x00\x3b\x02\x42\x00\x3a\x02\x00\x00\
\\x01\x00\x2b\x00\x5d\x02\x2c\x00\x5c\x02\x00\x00\
\\x01\x00\x2b\x00\x77\x02\x00\x00\
\\x01\x00\x2b\x00\x8e\x02\x42\x00\x8d\x02\x00\x00\
\\x01\x00\x2b\x00\x91\x02\x42\x00\x90\x02\x00\x00\
\\x01\x00\x2b\x00\xd0\x02\x00\x00\
\\x01\x00\x2b\x00\xd1\x02\x2c\x00\x15\x02\x00\x00\
\\x01\x00\x2b\x00\xf5\x02\x00\x00\
\\x01\x00\x2b\x00\xf9\x02\x00\x00\
\\x01\x00\x2b\x00\x0d\x03\x00\x00\
\\x01\x00\x2b\x00\x15\x03\x00\x00\
\\x01\x00\x2b\x00\x1a\x03\x30\x00\x19\x03\x00\x00\
\\x01\x00\x2b\x00\x89\x03\x00\x00\
\\x01\x00\x2b\x00\x8a\x03\x00\x00\
\\x01\x00\x2b\x00\x9b\x03\x42\x00\x9a\x03\x00\x00\
\\x01\x00\x2c\x00\xbb\x03\x00\x00\
\\x01\x00\x2c\x00\xbc\x03\x00\x00\
\\x01\x00\x2c\x00\xfa\x03\x00\x00\
\\x01\x00\x2c\x00\x2f\x04\x00\x00\
\\x01\x00\x2e\x00\x92\x02\x00\x00\
\\x01\x00\x30\x00\x57\x02\x00\x00\
\\x01\x00\x30\x00\x19\x03\x00\x00\
\\x01\x00\x3c\x00\x06\x02\x40\x00\x05\x02\x00\x00\
\\x01\x00\x3c\x00\x08\x02\x40\x00\x07\x02\x00\x00\
\\x01\x00\x42\x00\xf3\x02\x00\x00\
\\x01\x00\x42\x00\x83\x03\x00\x00\
\\x01\x00\x43\x00\xaa\x01\x00\x00\
\\x01\x00\x43\x00\xff\x01\x00\x00\
\\x01\x00\x43\x00\x00\x02\x00\x00\
\\x01\x00\x43\x00\x54\x02\x00\x00\
\\x01\x00\x43\x00\xda\x02\x00\x00\
\\x01\x00\x43\x00\x37\x03\x00\x00\
\\x01\x00\x43\x00\x75\x03\x00\x00\
\\x01\x00\x43\x00\xb1\x03\x00\x00\
\\x01\x00\x43\x00\xb2\x03\x00\x00\
\\x01\x00\x43\x00\xfb\x03\x00\x00\
\\x01\x00\x43\x00\x2d\x04\x00\x00\
\\x01\x00\x43\x00\x3f\x04\x00\x00\
\\x01\x00\x44\x00\x04\x02\x00\x00\
\\x01\x00\x77\x00\x90\x01\x00\x00\
\\x01\x00\x77\x00\xdd\x02\x00\x00\
\\x01\x00\x79\x00\xfa\x01\x00\x00\
\\x01\x00\x82\x00\xf5\x04\x86\x00\x26\x05\x9f\x00\xf5\x04\xa4\x00\xf5\x04\
\\xa8\x00\xf5\x04\xaa\x00\xf5\x04\xad\x00\xf5\x04\xaf\x00\xf5\x04\
\\xb0\x00\xf5\x04\x00\x00\
\\x01\x00\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaa\x00\xa8\x01\xae\x00\xa7\x01\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaa\x00\xa8\x01\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xae\x00\x75\x02\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xae\x00\x5e\x04\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x00\x83\x00\x99\x03\x00\x00\
\\x01\x00\x86\x00\xfd\x01\x00\x00\
\\x01\x00\x87\x00\x1d\x03\x93\x00\x1c\x03\x94\x00\x1b\x03\x00\x00\
\\x01\x00\x87\x00\x96\x03\x93\x00\x95\x03\x94\x00\x94\x03\x00\x00\
\\x01\x00\x87\x00\xa7\x03\x00\x00\
\\x01\x00\x87\x00\xa8\x03\x00\x00\
\\x01\x00\x87\x00\x04\x04\x00\x00\
\\x01\x00\x87\x00\x05\x04\x00\x00\
\\x01\x00\x87\x00\x09\x04\x93\x00\x08\x04\x94\x00\x07\x04\x00\x00\
\\x01\x00\x87\x00\x3c\x04\x00\x00\
\\x01\x00\x87\x00\x3d\x04\x00\x00\
\\x01\x00\x8c\x00\xb1\x01\x00\x00\
\\x01\x00\x8c\x00\x35\x02\x00\x00\
\\x01\x00\x8c\x00\xe3\x02\x00\x00\
\\x01\x00\x8c\x00\xeb\x03\x00\x00\
\\x01\x00\x8c\x00\xf6\x03\x00\x00\
\\x01\x00\x8c\x00\x40\x04\x00\x00\
\\x01\x00\x8c\x00\x4c\x04\x00\x00\
\\x01\x00\x8e\x00\x2f\x03\x00\x00\
\\x01\x00\xa4\x00\x47\x02\x00\x00\
\\x01\x00\xa4\x00\x48\x02\x00\x00\
\\x01\x00\xa4\x00\xdc\x02\x00\x00\
\\x01\x00\xa4\x00\x3b\x03\x00\x00\
\\x01\x00\xa4\x00\x44\x03\x00\x00\
\\x01\x00\xa4\x00\x45\x03\x00\x00\
\\x01\x00\xa4\x00\x46\x03\x00\x00\
\\x01\x00\xa4\x00\x47\x03\x00\x00\
\\x01\x00\xa4\x00\x48\x03\x00\x00\
\\x01\x00\xa4\x00\x49\x03\x00\x00\
\\x01\x00\xa4\x00\x4a\x03\x00\x00\
\\x01\x00\xa4\x00\x4b\x03\x00\x00\
\\x01\x00\xa4\x00\x4c\x03\x00\x00\
\\x01\x00\xa4\x00\x4d\x03\x00\x00\
\\x01\x00\xa4\x00\x4e\x03\x00\x00\
\\x01\x00\xa4\x00\x4f\x03\x00\x00\
\\x01\x00\xa4\x00\x50\x03\x00\x00\
\\x01\x00\xa4\x00\x51\x03\x00\x00\
\\x01\x00\xa4\x00\x52\x03\x00\x00\
\\x01\x00\xa4\x00\x53\x03\x00\x00\
\\x01\x00\xa4\x00\x54\x03\x00\x00\
\\x01\x00\xa4\x00\x55\x03\x00\x00\
\\x01\x00\xa4\x00\x56\x03\x00\x00\
\\x01\x00\xa4\x00\x57\x03\x00\x00\
\\x01\x00\xa4\x00\x58\x03\x00\x00\
\\x01\x00\xa4\x00\x59\x03\x00\x00\
\\x01\x00\xa4\x00\x5a\x03\x00\x00\
\\x01\x00\xa4\x00\x5b\x03\x00\x00\
\\x01\x00\xa4\x00\x5c\x03\x00\x00\
\\x01\x00\xa4\x00\x5d\x03\x00\x00\
\\x01\x00\xa4\x00\x5e\x03\x00\x00\
\\x01\x00\xa4\x00\x5f\x03\x00\x00\
\\x01\x00\xa4\x00\x60\x03\x00\x00\
\\x01\x00\xa4\x00\x61\x03\x00\x00\
\\x01\x00\xa4\x00\x66\x03\x00\x00\
\\x01\x00\xa4\x00\x67\x03\x00\x00\
\\x01\x00\xa4\x00\x68\x03\x00\x00\
\\x01\x00\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\xae\x00\x2a\x04\x00\x00\
\\x01\x00\xa4\x00\xa0\x03\x00\x00\
\\x01\x00\xa4\x00\xb8\x03\x00\x00\
\\x01\x00\xa4\x00\x24\x04\xac\x00\x65\x02\x00\x00\
\\x01\x00\xa4\x00\x47\x04\x00\x00\
\\x01\x00\xa7\x00\x1e\x02\x00\x00\
\\x01\x00\xac\x00\x48\x01\x00\x00\
\\x01\x00\xac\x00\x65\x02\x00\x00\
\\x01\x00\xac\x00\xfe\x03\x00\x00\
\\x01\x00\xac\x00\xff\x03\x00\x00\
\\x01\x00\xac\x00\x00\x04\x00\x00\
\\x01\x00\xac\x00\x01\x04\x00\x00\
\\x01\x00\xad\x00\xa4\x01\x00\x00\
\\x01\x00\xad\x00\xfb\x01\x00\x00\
\\x01\x00\xad\x00\xfe\x01\x00\x00\
\\x01\x00\xad\x00\x1b\x02\x00\x00\
\\x01\x00\xad\x00\x4d\x02\x00\x00\
\\x01\x00\xad\x00\x53\x02\x00\x00\
\\x01\x00\xad\x00\x41\x04\x00\x00\
\\x01\x00\xae\x00\xa6\x01\x00\x00\
\\x01\x00\xae\x00\xce\x02\x00\x00\
\\x01\x00\xae\x00\xd8\x02\x00\x00\
\\x01\x00\xae\x00\x28\x03\x00\x00\
\\x01\x00\xae\x00\x6d\x03\x00\x00\
\\x01\x00\xae\x00\x90\x03\x00\x00\
\\x01\x00\xae\x00\x91\x03\x00\x00\
\\x01\x00\xae\x00\x9f\x03\x00\x00\
\\x01\x00\xae\x00\x29\x04\x00\x00\
\\x01\x00\xae\x00\x50\x04\x00\x00\
\\x01\x00\xae\x00\x51\x04\x00\x00\
\\x01\x00\xae\x00\x52\x04\x00\x00\
\\x01\x00\xae\x00\x53\x04\x00\x00\
\\x01\x00\xb3\x00\x0a\x01\xb4\x00\x09\x01\x00\x00\
\\x01\x00\xb3\x00\xa1\x01\x00\x00\
\\x61\x04\x00\x00\
\\x62\x04\x00\x00\
\\x63\x04\x00\x00\
\\x64\x04\x00\x00\
\\x65\x04\x00\x00\
\\x66\x04\x00\x00\
\\x67\x04\x00\x00\
\\x68\x04\x00\x00\
\\x68\x04\x2b\x00\x77\x02\x00\x00\
\\x69\x04\x00\x00\
\\x6a\x04\x00\x00\
\\x6b\x04\x00\x00\
\\x6c\x04\x00\x00\
\\x6d\x04\x00\x00\
\\x6e\x04\x00\x00\
\\x6f\x04\x00\x00\
\\x70\x04\x00\x00\
\\x71\x04\x00\x00\
\\x72\x04\x00\x00\
\\x73\x04\x00\x00\
\\x74\x04\x00\x00\
\\x75\x04\x00\x00\
\\x76\x04\x00\x00\
\\x77\x04\x00\x00\
\\x78\x04\x00\x00\
\\x79\x04\x00\x00\
\\x7a\x04\x00\x00\
\\x7b\x04\x00\x00\
\\x7c\x04\x00\x00\
\\x7d\x04\x00\x00\
\\x7e\x04\x00\x00\
\\x7f\x04\x00\x00\
\\x80\x04\x00\x00\
\\x81\x04\x00\x00\
\\x82\x04\x00\x00\
\\x83\x04\x00\x00\
\\x84\x04\x00\x00\
\\x85\x04\x00\x00\
\\x86\x04\x00\x00\
\\x87\x04\x00\x00\
\\x88\x04\x00\x00\
\\x89\x04\x00\x00\
\\x8a\x04\x00\x00\
\\x8b\x04\x00\x00\
\\x8c\x04\x00\x00\
\\x8d\x04\x00\x00\
\\x8e\x04\x00\x00\
\\x8f\x04\x00\x00\
\\x90\x04\x00\x00\
\\x91\x04\x00\x00\
\\x92\x04\x00\x00\
\\x93\x04\x00\x00\
\\x94\x04\x00\x00\
\\x94\x04\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\xee\x01\x3a\x00\x5c\x00\x3d\x00\xed\x01\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x41\x00\xec\x01\x42\x00\x33\x01\x45\x00\x32\x01\
\\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\x4c\x00\xa6\x00\
\\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\x54\x00\xa2\x00\
\\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\x5c\x00\x9f\x00\
\\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\x6a\x00\x45\x00\
\\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\x72\x00\x41\x00\
\\x73\x00\x97\x00\x76\x00\xeb\x01\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x95\x04\x00\x00\
\\x96\x04\x00\x00\
\\x97\x04\x00\x00\
\\x98\x04\x00\x00\
\\x99\x04\x00\x00\
\\x9a\x04\x00\x00\
\\x9b\x04\x00\x00\
\\x9c\x04\x00\x00\
\\x9d\x04\x00\x00\
\\x9e\x04\x00\x00\
\\x9f\x04\x00\x00\
\\xa0\x04\x00\x00\
\\xa1\x04\x00\x00\
\\xa2\x04\x00\x00\
\\xa3\x04\x00\x00\
\\xa4\x04\x00\x00\
\\xa4\x04\x95\x00\x4d\x01\x00\x00\
\\xa5\x04\x00\x00\
\\xa5\x04\x21\x00\x43\x01\x9c\x00\x42\x01\x00\x00\
\\xa5\x04\x9c\x00\x43\x03\x00\x00\
\\xa5\x04\x9c\x00\x79\x03\x00\x00\
\\xa6\x04\x00\x00\
\\xa7\x04\x00\x00\
\\xa7\x04\x21\x00\x42\x03\x00\x00\
\\xa7\x04\x9c\x00\x3f\x01\x00\x00\
\\xa8\x04\x00\x00\
\\xa8\x04\x95\x00\x3d\x01\x00\x00\
\\xa9\x04\x00\x00\
\\xa9\x04\x95\x00\x3e\x01\x00\x00\
\\xaa\x04\x00\x00\
\\xaa\x04\x87\x00\x3b\x01\x00\x00\
\\xab\x04\x00\x00\
\\xab\x04\x87\x00\x3a\x01\x00\x00\
\\xac\x04\x00\x00\
\\xac\x04\x95\x00\x20\x01\x00\x00\
\\xad\x04\x00\x00\
\\xad\x04\x95\x00\x1f\x01\x00\x00\
\\xae\x04\x00\x00\
\\xae\x04\x2f\x00\x1e\x01\x00\x00\
\\xaf\x04\x00\x00\
\\xaf\x04\x95\x00\x1d\x01\x00\x00\
\\xb0\x04\x00\x00\
\\xb1\x04\x00\x00\
\\xb2\x04\x00\x00\
\\xb3\x04\x00\x00\
\\xb4\x04\x00\x00\
\\xb5\x04\x00\x00\
\\xb6\x04\x00\x00\
\\xb7\x04\x00\x00\
\\xb8\x04\x00\x00\
\\xb9\x04\x00\x00\
\\xba\x04\x00\x00\
\\xbb\x04\x00\x00\
\\xbc\x04\x00\x00\
\\xbd\x04\x00\x00\
\\xbe\x04\x00\x00\
\\xbf\x04\x00\x00\
\\xc0\x04\x00\x00\
\\xc1\x04\x00\x00\
\\xc2\x04\x00\x00\
\\xc3\x04\x00\x00\
\\xc4\x04\x00\x00\
\\xc5\x04\x00\x00\
\\xc6\x04\x00\x00\
\\xc7\x04\x00\x00\
\\xc8\x04\x00\x00\
\\xc9\x04\x00\x00\
\\xca\x04\x00\x00\
\\xcb\x04\x00\x00\
\\xcc\x04\x00\x00\
\\xcd\x04\x00\x00\
\\xce\x04\x00\x00\
\\xcf\x04\x00\x00\
\\xd0\x04\x00\x00\
\\xd1\x04\x00\x00\
\\xd2\x04\x00\x00\
\\xd3\x04\x00\x00\
\\xd4\x04\x00\x00\
\\xd5\x04\x00\x00\
\\xd6\x04\x00\x00\
\\xd7\x04\x00\x00\
\\xd8\x04\x00\x00\
\\xd8\x04\x30\x00\x02\x02\x00\x00\
\\xd9\x04\x00\x00\
\\xd9\x04\x30\x00\x03\x02\x00\x00\
\\xda\x04\x22\x00\x1f\x02\x00\x00\
\\xdb\x04\x00\x00\
\\xdc\x04\x00\x00\
\\xdd\x04\xaa\x00\xdb\x02\x00\x00\
\\xde\x04\x00\x00\
\\xdf\x04\x00\x00\
\\xe0\x04\x00\x00\
\\xe1\x04\x00\x00\
\\xe2\x04\x00\x00\
\\xe3\x04\x00\x00\
\\xe4\x04\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\x42\x00\x8c\x01\
\\xac\x00\x21\x02\x00\x00\
\\xe5\x04\x00\x00\
\\xe6\x04\x22\x00\x1f\x02\xaa\x00\xd7\x02\x00\x00\
\\xe7\x04\x00\x00\
\\xe8\x04\x22\x00\x1f\x02\x00\x00\
\\xe9\x04\x00\x00\
\\xea\x04\x22\x00\x1f\x02\xaa\x00\x6e\x03\x00\x00\
\\xeb\x04\x00\x00\
\\xec\x04\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xed\x04\x00\x00\
\\xee\x04\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\xef\x04\x00\x00\
\\xf0\x04\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf1\x04\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf2\x04\x00\x00\
\\xf3\x04\x00\x00\
\\xf4\x04\xaa\x00\x01\x02\x00\x00\
\\xf5\x04\x00\x00\
\\xf6\x04\x22\x00\x1f\x02\x00\x00\
\\xf7\x04\xa4\x00\xf6\x00\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf8\x04\xa4\x00\xf6\x00\xb0\x00\xf3\x00\x00\x00\
\\xf9\x04\x00\x00\
\\xfa\x04\x00\x00\
\\xfb\x04\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xfc\x04\x00\x00\
\\xfd\x04\x00\x00\
\\xfe\x04\x00\x00\
\\xff\x04\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x00\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x01\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x02\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x03\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x04\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x05\x05\x00\x00\
\\x06\x05\x00\x00\
\\x07\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaa\x00\xad\x03\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x08\x05\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\x32\x00\x60\x00\
\\x35\x00\x5f\x00\x36\x00\x5e\x00\x3a\x00\x5c\x00\x3e\x00\x5a\x00\
\\x3f\x00\x59\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xa9\x00\
\\x48\x00\x54\x00\x4b\x00\xa7\x00\x4c\x00\x52\x00\x4f\x00\xa5\x00\
\\x50\x00\x50\x00\x53\x00\xa3\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\xa0\x00\x5c\x00\x4a\x00\x5f\x00\x9e\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x9a\x00\x6f\x00\x42\x00\x72\x00\x98\x00\
\\x73\x00\x40\x00\x77\x00\x3e\x00\x7a\x00\x95\x00\x7b\x00\x3c\x00\
\\x7e\x00\x93\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\x85\x00\xbd\x00\
\\x87\x00\x36\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\
\\x92\x00\x2d\x00\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\
\\x96\x00\x29\x00\x97\x00\x28\x00\x98\x00\x88\x00\x99\x00\x26\x00\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x09\x05\xaa\x00\x42\x04\x00\x00\
\\x0a\x05\x00\x00\
\\x0b\x05\xa0\x00\xf2\x00\x00\x00\
\\x0c\x05\x00\x00\
\\x0d\x05\x00\x00\
\\x0d\x05\xa1\x00\xf1\x00\x00\x00\
\\x0d\x05\xa1\x00\xf1\x00\xad\x00\x1c\x02\x00\x00\
\\x0e\x05\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x7c\x00\
\\x09\x00\x7b\x00\x0a\x00\xdc\x00\x0b\x00\x79\x00\x0c\x00\xdb\x00\
\\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\xda\x00\x32\x00\xd9\x00\x36\x00\xd8\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\xd7\x00\x3f\x00\xd6\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xd5\x00\
\\x48\x00\xd4\x00\x4b\x00\xd3\x00\x4c\x00\xd2\x00\x4f\x00\xd1\x00\
\\x50\x00\xd0\x00\x53\x00\xcf\x00\x54\x00\xce\x00\x58\x00\xcd\x00\
\\x5b\x00\xcc\x00\x5c\x00\xcb\x00\x5f\x00\xca\x00\x60\x00\xc9\x00\
\\x63\x00\x47\x00\x67\x00\xc8\x00\x6b\x00\xc7\x00\x6e\x00\xc6\x00\
\\x6f\x00\xc5\x00\x72\x00\xc4\x00\x73\x00\xc3\x00\x76\x00\x3f\x00\
\\x77\x00\xc2\x00\x7a\x00\xc1\x00\x7b\x00\xc0\x00\x7e\x00\xbf\x00\
\\x7f\x00\xbe\x00\x84\x00\x91\x00\x85\x00\xbd\x00\x88\x00\x35\x00\
\\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x8f\x00\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\
\\x94\x00\x8b\x00\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\x9b\x00\x25\x00\x9d\x00\x23\x00\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x0f\x05\x00\x00\
\\x10\x05\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x46\x00\xec\x00\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\
\\x56\x00\xe8\x00\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\
\\x69\x00\xe4\x00\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\x00\x00\
\\x10\x05\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x46\x00\xec\x00\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\
\\x56\x00\xe8\x00\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\
\\x69\x00\xe4\x00\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\
\\x7d\x00\xe0\x00\x81\x00\xdf\x00\xa9\x00\xde\x00\x00\x00\
\\x11\x05\x00\x00\
\\x12\x05\x00\x00\
\\x13\x05\x00\x00\
\\x14\x05\x00\x00\
\\x15\x05\x00\x00\
\\x16\x05\x00\x00\
\\x17\x05\x00\x00\
\\x18\x05\x00\x00\
\\x19\x05\x00\x00\
\\x1a\x05\x22\x00\xb7\x00\x64\x00\xb6\x00\x89\x00\xb5\x00\x00\x00\
\\x1a\x05\x64\x00\xb6\x00\x89\x00\xb5\x00\x00\x00\
\\x1b\x05\x00\x00\
\\x1c\x05\x00\x00\
\\x1d\x05\x00\x00\
\\x1e\x05\x64\x00\xb6\x00\x89\x00\xb5\x00\x00\x00\
\\x1f\x05\x00\x00\
\\x20\x05\x00\x00\
\\x22\x05\x00\x00\
\\x23\x05\x00\x00\
\\x24\x05\x00\x00\
\\x25\x05\x00\x00\
\\x27\x05\x00\x00\
\\x28\x05\x00\x00\
\\x29\x05\x86\x00\xfd\x01\xa1\x00\x81\x02\x00\x00\
\\x2a\x05\x00\x00\
\\x2b\x05\x00\x00\
\\x2c\x05\x00\x00\
\\x2d\x05\x00\x00\
\\x2e\x05\x00\x00\
\\x2f\x05\x00\x00\
\\x30\x05\x00\x00\
\\x31\x05\x00\x00\
\\x32\x05\x00\x00\
\\x33\x05\x00\x00\
\\x34\x05\x00\x00\
\\x35\x05\x00\x00\
\\x36\x05\x00\x00\
\\x37\x05\x00\x00\
\\x38\x05\x00\x00\
\\x39\x05\x00\x00\
\\x3a\x05\x00\x00\
\\x3b\x05\x00\x00\
\\x3c\x05\x00\x00\
\\x3d\x05\x00\x00\
\\x3e\x05\x00\x00\
\\x3f\x05\x00\x00\
\\x40\x05\x00\x00\
\\x41\x05\x00\x00\
\\x42\x05\x00\x00\
\\x43\x05\x00\x00\
\\x44\x05\x00\x00\
\\x45\x05\x00\x00\
\\x46\x05\x00\x00\
\\x47\x05\x00\x00\
\\x48\x05\x00\x00\
\\x49\x05\x00\x00\
\\x4a\x05\x00\x00\
\\x4b\x05\x00\x00\
\\x4c\x05\x00\x00\
\\x4d\x05\x00\x00\
\\x4e\x05\x00\x00\
\\x4f\x05\x00\x00\
\\x50\x05\x00\x00\
\\x51\x05\x00\x00\
\\x52\x05\x00\x00\
\\x53\x05\x00\x00\
\\x54\x05\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\
\\x24\x00\x66\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\x55\x00\
\\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\x4f\x00\x51\x00\
\\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\x5f\x00\x49\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\x72\x00\x41\x00\
\\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\x7a\x00\x3d\x00\
\\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\
\\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\x88\x00\x35\x00\
\\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\
\\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\
\\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\x9b\x00\x25\x00\
\\x9d\x00\x23\x00\x9e\x00\x16\x01\xab\x00\x21\x00\xac\x00\x20\x00\
\\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x55\x05\x00\x00\
\\x56\x05\x1e\x00\x2e\x02\x63\x00\x2d\x02\x64\x00\x2c\x02\x00\x00\
\\x57\x05\x00\x00\
\\x58\x05\x7a\x00\xdf\x02\x7b\x00\xde\x02\x00\x00\
\\x59\x05\x00\x00\
\\x5a\x05\x00\x00\
\\x5b\x05\x00\x00\
\\x5c\x05\x00\x00\
\\x5d\x05\x00\x00\
\\x5e\x05\x00\x00\
\\x5f\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x60\x05\x00\x00\
\\x61\x05\x00\x00\
\\x62\x05\x00\x00\
\\x63\x05\xb4\x00\x09\x01\x00\x00\
\\x64\x05\x00\x00\
\\x65\x05\x00\x00\
\\x66\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaa\x00\xa8\x01\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x67\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaa\x00\xa5\x01\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x68\x05\x00\x00\
\\x69\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\x00\x00\
\\x6a\x05\x22\x00\x1f\x02\x00\x00\
\\x6b\x05\x00\x00\
\\x6c\x05\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\x34\x01\x3e\x00\xab\x00\x3f\x00\xaa\x00\x42\x00\x33\x01\
\\x45\x00\x32\x01\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\
\\x4c\x00\xa6\x00\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\
\\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\
\\x5c\x00\x9f\x00\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\
\\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\
\\x72\x00\x41\x00\x73\x00\x97\x00\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\x6d\x05\x00\x00\
\\x6e\x05\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\x56\x00\xe8\x00\
\\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\x69\x00\xe4\x00\
\\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\x7d\x00\xe0\x00\
\\x81\x00\xdf\x00\x00\x00\
\\x6f\x05\x00\x00\
\\x70\x05\x00\x00\
\\x71\x05\x00\x00\
\\x72\x05\x00\x00\
\\x73\x05\x00\x00\
\\x74\x05\x00\x00\
\\x75\x05\x00\x00\
\\x76\x05\x00\x00\
\\x77\x05\x00\x00\
\\x78\x05\x00\x00\
\\x79\x05\x00\x00\
\\x7a\x05\x00\x00\
\\x7b\x05\x00\x00\
\\x7c\x05\x00\x00\
\\x7d\x05\x00\x00\
\\x7e\x05\x00\x00\
\\x7f\x05\x00\x00\
\\x80\x05\x00\x00\
\\x81\x05\x00\x00\
\\x82\x05\x00\x00\
\\x83\x05\x00\x00\
\\x84\x05\x00\x00\
\\x85\x05\x00\x00\
\\x86\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\x00\x00\
\\x88\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\x00\x00\
\\x89\x05\x22\x00\x1f\x02\x23\x00\x93\x03\x00\x00\
\\x8a\x05\x00\x00\
\\x8b\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\x00\x00\
\\x8c\x05\xaa\x00\x55\x02\x00\x00\
\\x8d\x05\x00\x00\
\\x8e\x05\x00\x00\
\\x8f\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\xaa\x00\x4e\x02\x00\x00\
\\x90\x05\x00\x00\
\\x91\x05\x23\x00\xc3\x01\x3a\x00\x92\x03\xa4\x00\xc1\x01\x00\x00\
\\x92\x05\x00\x00\
\\x93\x05\x20\x00\xbe\x01\x00\x00\
\\x94\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x95\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x96\x05\x20\x00\x7c\x02\x00\x00\
\\x97\x05\x2b\x00\x2b\x03\x00\x00\
\\x98\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x99\x05\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\x56\x00\xe8\x00\
\\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\x69\x00\xe4\x00\
\\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\x7d\x00\xe0\x00\
\\x81\x00\xdf\x00\xa4\x00\x43\x02\x00\x00\
\\x99\x05\xa4\x00\x43\x02\x00\x00\
\\x9a\x05\x22\x00\x1f\x02\x00\x00\
\\x9b\x05\x20\x00\x41\x02\x00\x00\
\\x9c\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x9d\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x9e\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\x9f\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xa0\x05\x00\x00\
\\xa1\x05\x00\x00\
\\xa2\x05\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\xee\x01\x3a\x00\x5c\x00\x3d\x00\xed\x01\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x41\x00\xec\x01\x42\x00\x33\x01\x45\x00\x32\x01\
\\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\x4c\x00\xa6\x00\
\\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\x54\x00\xa2\x00\
\\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\x5c\x00\x9f\x00\
\\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\x6a\x00\x45\x00\
\\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\x72\x00\x41\x00\
\\x73\x00\x97\x00\x76\x00\xeb\x01\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\xa3\x05\x00\x00\
\\xa4\x05\x92\x00\x47\x01\x00\x00\
\\xa5\x05\x00\x00\
\\xa6\x05\x20\x00\x6e\x02\x00\x00\
\\xa7\x05\x00\x00\
\\xa8\x05\x00\x00\
\\xa9\x05\x00\x00\
\\xaa\x05\x20\x00\x05\x03\x00\x00\
\\xab\x05\x00\x00\
\\xac\x05\x00\x00\
\\xad\x05\x00\x00\
\\xae\x05\x20\x00\x97\x03\x00\x00\
\\xaf\x05\x00\x00\
\\xb0\x05\x00\x00\
\\xb1\x05\x00\x00\
\\xb2\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xb3\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xb4\x05\x04\x00\x7f\x00\x05\x00\x7e\x00\x08\x00\x39\x01\x09\x00\x7b\x00\
\\x0a\x00\xb0\x00\x0b\x00\x79\x00\x0c\x00\x38\x01\x0d\x00\x77\x00\
\\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x37\x01\x1e\x00\x36\x01\
\\x1f\x00\x35\x01\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\
\\x39\x00\xee\x01\x3a\x00\x5c\x00\x3d\x00\xed\x01\x3e\x00\xab\x00\
\\x3f\x00\xaa\x00\x41\x00\xec\x01\x42\x00\x33\x01\x45\x00\x32\x01\
\\x47\x00\x55\x00\x48\x00\xa8\x00\x4b\x00\x53\x00\x4c\x00\xa6\x00\
\\x4f\x00\x51\x00\x50\x00\xa4\x00\x53\x00\x4f\x00\x54\x00\xa2\x00\
\\x57\x00\x4d\x00\x58\x00\xa1\x00\x5b\x00\x4b\x00\x5c\x00\x9f\x00\
\\x5f\x00\x49\x00\x60\x00\x9d\x00\x67\x00\x9c\x00\x6a\x00\x45\x00\
\\x6b\x00\x9b\x00\x6e\x00\x43\x00\x6f\x00\x99\x00\x72\x00\x41\x00\
\\x73\x00\x97\x00\x76\x00\xeb\x01\x77\x00\x96\x00\x7a\x00\x3d\x00\
\\x7b\x00\x94\x00\x7e\x00\x3b\x00\x7f\x00\x92\x00\x84\x00\x91\x00\
\\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\x96\x00\x8a\x00\
\\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\xa2\x00\x30\x01\
\\xac\x00\x2f\x01\xb1\x00\x2e\x01\x00\x00\
\\xb5\x05\x0e\x00\xf0\x00\x34\x00\xef\x00\x38\x00\xee\x00\x3c\x00\xed\x00\
\\x4a\x00\xeb\x00\x4e\x00\xea\x00\x52\x00\xe9\x00\x56\x00\xe8\x00\
\\x5a\x00\xe7\x00\x5e\x00\xe6\x00\x62\x00\xe5\x00\x69\x00\xe4\x00\
\\x6d\x00\xe3\x00\x71\x00\xe2\x00\x75\x00\xe1\x00\x7d\x00\xe0\x00\
\\x81\x00\xdf\x00\x00\x00\
\\xb6\x05\x00\x00\
\\xb8\x05\x00\x00\
\\xb9\x05\x00\x00\
\\xbb\x05\x00\x00\
\\xbc\x05\x00\x00\
\\xbd\x05\x00\x00\
\\xbe\x05\x00\x00\
\\xbf\x05\x46\x00\x6f\x02\x00\x00\
\\xc0\x05\x00\x00\
\\xc1\x05\x20\x00\xb4\x00\x00\x00\
\\xc2\x05\x22\x00\x1f\x02\x00\x00\
\\xc3\x05\x00\x00\
\\xc4\x05\x10\x00\x6f\x01\xac\x00\x6e\x01\x00\x00\
\\xc5\x05\x00\x00\
\\xc6\x05\xaa\x00\xcf\x02\x00\x00\
\\xc7\x05\x00\x00\
\\xc8\x05\x20\x00\xb3\x00\x00\x00\
\\xc9\x05\x00\x00\
\\xca\x05\x00\x00\
\\xcb\x05\x00\x00\
\\xcc\x05\x00\x00\
\\xcd\x05\x3a\x00\x6a\x03\x00\x00\
\\xce\x05\x00\x00\
\\xcf\x05\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\x42\x00\x8c\x01\
\\xac\x00\x8b\x01\x00\x00\
\\xd0\x05\x22\x00\x1f\x02\x00\x00\
\\xd1\x05\x20\x00\x09\x02\x00\x00\
\\xd2\x05\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\x2b\x00\x0b\x02\
\\x42\x00\x8c\x01\xac\x00\x8b\x01\x00\x00\
\\xd3\x05\x22\x00\x1f\x02\x00\x00\
\\xd4\x05\x00\x00\
\\xd5\x05\x00\x00\
\\xd6\x05\x11\x00\x76\x00\x12\x00\x75\x00\x00\x00\
\\xd7\x05\x00\x00\
\\xd8\x05\x11\x00\x76\x00\x12\x00\x75\x00\x00\x00\
\\xd9\x05\x00\x00\
\\xda\x05\x00\x00\
\\xdb\x05\x20\x00\xbe\x01\x00\x00\
\\xdc\x05\x23\x00\xc3\x01\xa4\x00\xc1\x01\x00\x00\
\\xdd\x05\x20\x00\x7c\x02\x00\x00\
\\xde\x05\x20\x00\x41\x02\x00\x00\
\\xdf\x05\x00\x00\
\\xe0\x05\x00\x00\
\\xe1\x05\x00\x00\
\\xe2\x05\x20\x00\xb4\x00\x00\x00\
\\xe3\x05\x20\x00\xb3\x00\xa3\x00\xb2\x00\x00\x00\
\\xe4\x05\x20\x00\xb4\x00\x00\x00\
\\xe5\x05\x20\x00\x09\x02\x00\x00\
\\xe6\x05\x00\x00\
\\xe7\x05\x00\x00\
\\xe8\x05\x00\x00\
\\xe9\x05\x00\x00\
\\xea\x05\x00\x00\
\\xeb\x05\x00\x00\
\\xec\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xed\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xee\x05\x00\x00\
\\xef\x05\x00\x00\
\\xf0\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf1\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf2\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf3\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf4\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf5\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf6\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf7\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf8\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xf9\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xfa\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xfb\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xfc\x05\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xfd\x05\xaa\x00\x4f\x04\x00\x00\
\\xfe\x05\x00\x00\
\\xff\x05\x00\x00\
\\x00\x06\x00\x00\
\\x01\x06\x00\x00\
\\x02\x06\x00\x00\
\\x03\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\x32\x00\x60\x00\
\\x35\x00\x5f\x00\x36\x00\x5e\x00\x3a\x00\x5c\x00\x3e\x00\x5a\x00\
\\x3f\x00\x59\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xa9\x00\
\\x48\x00\x54\x00\x4b\x00\xa7\x00\x4c\x00\x52\x00\x4f\x00\xa5\x00\
\\x50\x00\x50\x00\x53\x00\xa3\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\xa0\x00\x5c\x00\x4a\x00\x5f\x00\x9e\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x9a\x00\x6f\x00\x42\x00\x72\x00\x98\x00\
\\x73\x00\x40\x00\x77\x00\x3e\x00\x7a\x00\x95\x00\x7b\x00\x3c\x00\
\\x7e\x00\x93\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\x85\x00\xbd\x00\
\\x87\x00\x36\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\
\\x92\x00\x2d\x00\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\
\\x96\x00\x29\x00\x97\x00\x28\x00\x98\x00\x88\x00\x99\x00\x26\x00\
\\x9e\x00\xb0\x01\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x04\x06\x00\x00\
\\x05\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\x32\x00\x60\x00\
\\x35\x00\x5f\x00\x36\x00\x5e\x00\x3a\x00\x5c\x00\x3e\x00\x5a\x00\
\\x3f\x00\x59\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\xa9\x00\
\\x48\x00\x54\x00\x4b\x00\xa7\x00\x4c\x00\x52\x00\x4f\x00\xa5\x00\
\\x50\x00\x50\x00\x53\x00\xa3\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\xa0\x00\x5c\x00\x4a\x00\x5f\x00\x9e\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x9a\x00\x6f\x00\x42\x00\x72\x00\x98\x00\
\\x73\x00\x40\x00\x77\x00\x3e\x00\x7a\x00\x95\x00\x7b\x00\x3c\x00\
\\x7e\x00\x93\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\x85\x00\xbd\x00\
\\x87\x00\x36\x00\x8a\x00\x90\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\
\\x8e\x00\x31\x00\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\
\\x92\x00\x2d\x00\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\
\\x96\x00\x29\x00\x97\x00\x28\x00\x98\x00\x88\x00\x99\x00\x26\x00\
\\x9e\x00\xb0\x01\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\
\\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x06\x06\x00\x00\
\\x07\x06\x00\x00\
\\x08\x06\x00\x00\
\\x09\x06\x04\x00\x7f\x00\x08\x00\xb1\x00\x0a\x00\xb0\x00\x0c\x00\xaf\x00\
\\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\
\\x3e\x00\xab\x00\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\
\\x4b\x00\xa7\x00\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\
\\x53\x00\xa3\x00\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\
\\x5b\x00\xa0\x00\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\
\\x67\x00\x9c\x00\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\
\\x6f\x00\x99\x00\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\
\\x7a\x00\x95\x00\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x0a\x06\x04\x00\x7f\x00\x08\x00\xb1\x00\x0a\x00\xb0\x00\x0c\x00\xaf\x00\
\\x2c\x00\xae\x00\x32\x00\xad\x00\x36\x00\xac\x00\x3a\x00\x5c\x00\
\\x3e\x00\xab\x00\x3f\x00\xaa\x00\x47\x00\xa9\x00\x48\x00\xa8\x00\
\\x4b\x00\xa7\x00\x4c\x00\xa6\x00\x4f\x00\xa5\x00\x50\x00\xa4\x00\
\\x53\x00\xa3\x00\x54\x00\xa2\x00\x57\x00\x4d\x00\x58\x00\xa1\x00\
\\x5b\x00\xa0\x00\x5c\x00\x9f\x00\x5f\x00\x9e\x00\x60\x00\x9d\x00\
\\x67\x00\x9c\x00\x6a\x00\x45\x00\x6b\x00\x9b\x00\x6e\x00\x9a\x00\
\\x6f\x00\x99\x00\x72\x00\x98\x00\x73\x00\x97\x00\x77\x00\x96\x00\
\\x7a\x00\x95\x00\x7b\x00\x94\x00\x7e\x00\x93\x00\x7f\x00\x92\x00\
\\x84\x00\x91\x00\x8a\x00\x90\x00\x8e\x00\x31\x00\x8f\x00\x8f\x00\
\\x90\x00\x8e\x00\x91\x00\x8d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\x99\x00\x87\x00\x00\x00\
\\x0b\x06\x00\x00\
\\x0c\x06\x00\x00\
\\x0d\x06\x00\x00\
\\x0e\x06\x00\x00\
\\x0f\x06\x00\x00\
\\x10\x06\x04\x00\x7f\x00\x06\x00\xc7\x02\x0a\x00\xc6\x02\x0c\x00\xc5\x02\
\\x25\x00\xc4\x02\x26\x00\xc3\x02\x2c\x00\xc2\x02\x2d\x00\xc1\x02\
\\x2f\x00\xc0\x02\x32\x00\xbf\x02\x36\x00\xbe\x02\x3a\x00\xbd\x02\
\\x3e\x00\xbc\x02\x3f\x00\xbb\x02\x47\x00\xba\x02\x48\x00\xb9\x02\
\\x4b\x00\xb8\x02\x4c\x00\xb7\x02\x4f\x00\xb6\x02\x50\x00\xb5\x02\
\\x53\x00\xb4\x02\x54\x00\xb3\x02\x57\x00\xb2\x02\x58\x00\xb1\x02\
\\x5b\x00\xb0\x02\x5c\x00\xaf\x02\x5f\x00\xae\x02\x60\x00\xad\x02\
\\x67\x00\xac\x02\x6a\x00\xab\x02\x6b\x00\xaa\x02\x6e\x00\xa9\x02\
\\x6f\x00\xa8\x02\x73\x00\xa7\x02\x77\x00\xa6\x02\x7a\x00\xa5\x02\
\\x7b\x00\xa4\x02\x7e\x00\xa3\x02\x7f\x00\xa2\x02\x84\x00\x91\x00\
\\x8a\x00\xa1\x02\x8e\x00\x31\x00\x8f\x00\xa0\x02\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x92\x00\x2d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x95\x00\x9f\x02\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\x9a\x00\x9e\x02\x9c\x00\x9d\x02\x00\x00\
\\x11\x06\x00\x00\
\\x12\x06\x04\x00\x7f\x00\x06\x00\xc7\x02\x0a\x00\xc6\x02\x0c\x00\xc5\x02\
\\x25\x00\xc4\x02\x26\x00\xc3\x02\x2c\x00\xc2\x02\x2d\x00\xc1\x02\
\\x2f\x00\xc0\x02\x32\x00\xbf\x02\x36\x00\xbe\x02\x3a\x00\xbd\x02\
\\x3e\x00\xbc\x02\x3f\x00\xbb\x02\x47\x00\xba\x02\x48\x00\xb9\x02\
\\x4b\x00\xb8\x02\x4c\x00\xb7\x02\x4f\x00\xb6\x02\x50\x00\xb5\x02\
\\x53\x00\xb4\x02\x54\x00\xb3\x02\x57\x00\xb2\x02\x58\x00\xb1\x02\
\\x5b\x00\xb0\x02\x5c\x00\xaf\x02\x5f\x00\xae\x02\x60\x00\xad\x02\
\\x67\x00\xac\x02\x6a\x00\xab\x02\x6b\x00\xaa\x02\x6e\x00\xa9\x02\
\\x6f\x00\xa8\x02\x73\x00\xa7\x02\x77\x00\xa6\x02\x7a\x00\xa5\x02\
\\x7b\x00\xa4\x02\x7e\x00\xa3\x02\x7f\x00\xa2\x02\x84\x00\x91\x00\
\\x8a\x00\xa1\x02\x8e\x00\x31\x00\x8f\x00\xa0\x02\x90\x00\x8e\x00\
\\x91\x00\x8d\x00\x92\x00\x2d\x00\x93\x00\x8c\x00\x94\x00\x8b\x00\
\\x95\x00\x9f\x02\x96\x00\x8a\x00\x97\x00\x89\x00\x98\x00\x88\x00\
\\x99\x00\x87\x00\x9a\x00\x9e\x02\x9c\x00\x9d\x02\x00\x00\
\\x13\x06\x00\x00\
\\x14\x06\x20\x00\xb7\x03\x00\x00\
\\x15\x06\x20\x00\x21\x04\x00\x00\
\\x16\x06\x20\x00\xb3\x00\xa3\x00\x38\x03\x00\x00\
\\x17\x06\x20\x00\xb4\x00\x00\x00\
\\x18\x06\x20\x00\x35\x03\x00\x00\
\\x19\x06\x20\x00\x35\x03\x00\x00\
\\x1a\x06\x20\x00\x34\x03\x00\x00\
\\x1b\x06\x20\x00\x34\x03\x00\x00\
\\x1c\x06\x20\x00\xdf\x03\x00\x00\
\\x1d\x06\xa1\x00\xf2\x02\x00\x00\
\\x1f\x06\x20\x00\xba\x03\x00\x00\
\\x20\x06\x20\x00\xb7\x03\x00\x00\
\\x21\x06\x2b\x00\x45\x04\xa1\x00\xf2\x02\x00\x00\
\\x22\x06\x00\x00\
\\x23\x06\x20\x00\x21\x04\x00\x00\
\\x24\x06\x00\x00\
\\x25\x06\x20\x00\x35\x03\x00\x00\
\\x26\x06\x2b\x00\xe5\x03\x2c\x00\x15\x02\x00\x00\
\\x26\x06\x2b\x00\x26\x04\x00\x00\
\\x27\x06\x22\x00\x1f\x02\x00\x00\
\\x28\x06\x20\x00\x34\x03\x00\x00\
\\x29\x06\x22\x00\x1f\x02\x00\x00\
\\x2a\x06\x22\x00\x1f\x02\x00\x00\
\\x2b\x06\x22\x00\x1f\x02\x00\x00\
\\x2c\x06\x22\x00\x1f\x02\x00\x00\
\\x2d\x06\x22\x00\x1f\x02\x00\x00\
\\x2e\x06\x22\x00\x1f\x02\x00\x00\
\\x2f\x06\x22\x00\x1f\x02\x00\x00\
\\x30\x06\x22\x00\x1f\x02\x00\x00\
\\x31\x06\x22\x00\x1f\x02\x00\x00\
\\x32\x06\x22\x00\x1f\x02\x00\x00\
\\x33\x06\x22\x00\x1f\x02\x00\x00\
\\x34\x06\x22\x00\x1f\x02\x00\x00\
\\x35\x06\x22\x00\x1f\x02\x00\x00\
\\x36\x06\x22\x00\x1f\x02\x00\x00\
\\x37\x06\x22\x00\x1f\x02\x00\x00\
\\x38\x06\x22\x00\x1f\x02\x00\x00\
\\x39\x06\x22\x00\x1f\x02\x00\x00\
\\x3a\x06\x22\x00\x1f\x02\x00\x00\
\\x3b\x06\x22\x00\x1f\x02\x00\x00\
\\x3c\x06\x22\x00\x1f\x02\x00\x00\
\\x3d\x06\x22\x00\x1f\x02\x00\x00\
\\x3e\x06\x22\x00\x1f\x02\x00\x00\
\\x3f\x06\x22\x00\x1f\x02\x00\x00\
\\x40\x06\x22\x00\x1f\x02\x00\x00\
\\x41\x06\x22\x00\x1f\x02\x00\x00\
\\x42\x06\x22\x00\x1f\x02\x00\x00\
\\x43\x06\x22\x00\x1f\x02\x00\x00\
\\x44\x06\x22\x00\x1f\x02\x00\x00\
\\x45\x06\x22\x00\x1f\x02\x00\x00\
\\x46\x06\x22\x00\x1f\x02\x00\x00\
\\x47\x06\x22\x00\x1f\x02\x00\x00\
\\x48\x06\x22\x00\x1f\x02\x00\x00\
\\x49\x06\x22\x00\x1f\x02\x00\x00\
\\x4a\x06\x22\x00\x1f\x02\x00\x00\
\\x4b\x06\x20\x00\xdf\x03\x00\x00\
\\x4c\x06\x06\x00\x8f\x01\x07\x00\x8e\x01\x10\x00\x8d\x01\x42\x00\x8c\x01\
\\xac\x00\x8b\x01\x00\x00\
\\x4d\x06\x22\x00\x1f\x02\x00\x00\
\\x4e\x06\x20\x00\xba\x03\x00\x00\
\\x4f\x06\x00\x00\
\\x50\x06\x00\x00\
\\x51\x06\x2c\x00\xbb\x03\x00\x00\
\\x52\x06\x00\x00\
\\x53\x06\x2c\x00\xbc\x03\x00\x00\
\\x54\x06\x00\x00\
\\x55\x06\x20\x00\xf8\x03\x00\x00\
\\x56\x06\x00\x00\
\\x57\x06\x22\x00\x1f\x02\x00\x00\
\\x58\x06\x00\x00\
\\x59\x06\x00\x00\
\\x5a\x06\x20\x00\xf8\x03\x00\x00\
\\x5b\x06\xa4\x00\xb6\x01\xa5\x00\xb5\x01\xa6\x00\xb4\x01\x00\x00\
\\x5c\x06\xa1\x00\xf2\x02\x00\x00\
\\x5d\x06\xa1\x00\xf2\x02\x00\x00\
\\x5e\x06\xa1\x00\xf2\x02\x00\x00\
\\x5f\x06\xa4\x00\x68\x02\xa5\x00\x67\x02\xa6\x00\x66\x02\xac\x00\x65\x02\x00\x00\
\\x60\x06\x00\x00\
\\x61\x06\x00\x00\
\\x62\x06\x00\x00\
\\x63\x06\x20\x00\x11\x02\x00\x00\
\\x64\x06\xa1\x00\xf2\x02\x00\x00\
\\x65\x06\x20\x00\x69\x02\x00\x00\
\\x66\x06\xa1\x00\xf2\x02\x00\x00\
\\x67\x06\x00\x00\
\\x68\x06\xa1\x00\xf2\x02\x00\x00\
\\x69\x06\x0c\x00\x81\x03\xac\x00\x80\x03\x00\x00\
\\x6a\x06\x00\x00\
\\x6b\x06\x00\x00\
\\x6c\x06\x00\x00\
\\x6d\x06\xa1\x00\xf2\x02\x00\x00\
\\x6e\x06\xa1\x00\xf2\x02\x00\x00\
\\x6f\x06\xa1\x00\xf2\x02\x00\x00\
\\x70\x06\x0c\x00\x81\x03\xac\x00\x80\x03\x00\x00\
\\x71\x06\x00\x00\
\\x72\x06\x0c\x00\x81\x03\xac\x00\x80\x03\x00\x00\
\\x73\x06\x00\x00\
\\x74\x06\x00\x00\
\\x75\x06\x00\x00\
\\x76\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x25\x00\xed\x02\x26\x00\xec\x02\x2c\x00\x63\x00\x2f\x00\x62\x00\
\\x31\x00\x61\x00\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\
\\x3a\x00\x5c\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\x42\x00\x57\x00\
\\x45\x00\x56\x00\x47\x00\xa9\x00\x48\x00\x54\x00\x4b\x00\xa7\x00\
\\x4c\x00\x52\x00\x4f\x00\xa5\x00\x50\x00\x50\x00\x53\x00\xa3\x00\
\\x54\x00\x4e\x00\x57\x00\x4d\x00\x58\x00\x4c\x00\x5b\x00\xa0\x00\
\\x5c\x00\x4a\x00\x5f\x00\x9e\x00\x60\x00\x48\x00\x63\x00\x47\x00\
\\x67\x00\x46\x00\x6a\x00\x45\x00\x6b\x00\x44\x00\x6e\x00\x9a\x00\
\\x6f\x00\x42\x00\x72\x00\x98\x00\x73\x00\x40\x00\x77\x00\x3e\x00\
\\x7a\x00\x95\x00\x7b\x00\x3c\x00\x7e\x00\x93\x00\x7f\x00\x3a\x00\
\\x84\x00\x39\x00\x85\x00\xbd\x00\x87\x00\x36\x00\x8a\x00\xeb\x02\
\\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\x8f\x00\x30\x00\
\\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\x93\x00\x2c\x00\
\\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\x97\x00\x28\x00\
\\x98\x00\x88\x00\x99\x00\x26\x00\x9c\x00\xea\x02\x9e\x00\xe9\x02\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x76\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x25\x00\xed\x02\x26\x00\xec\x02\x2c\x00\x63\x00\x2f\x00\x62\x00\
\\x31\x00\x61\x00\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\
\\x3a\x00\x5c\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\x42\x00\x57\x00\
\\x45\x00\x56\x00\x47\x00\xa9\x00\x48\x00\x54\x00\x4b\x00\xa7\x00\
\\x4c\x00\x52\x00\x4f\x00\xa5\x00\x50\x00\x50\x00\x53\x00\xa3\x00\
\\x54\x00\x4e\x00\x57\x00\x4d\x00\x58\x00\x4c\x00\x5b\x00\xa0\x00\
\\x5c\x00\x4a\x00\x5f\x00\x9e\x00\x60\x00\x48\x00\x63\x00\x47\x00\
\\x67\x00\x46\x00\x6a\x00\x45\x00\x6b\x00\x44\x00\x6e\x00\x9a\x00\
\\x6f\x00\x42\x00\x72\x00\x98\x00\x73\x00\x40\x00\x77\x00\x3e\x00\
\\x7a\x00\x95\x00\x7b\x00\x3c\x00\x7e\x00\x93\x00\x7f\x00\x3a\x00\
\\x84\x00\x39\x00\x85\x00\xbd\x00\x87\x00\x36\x00\x8a\x00\xeb\x02\
\\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\x8f\x00\x30\x00\
\\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\x93\x00\x2c\x00\
\\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\x97\x00\x28\x00\
\\x98\x00\x88\x00\x99\x00\x26\x00\x9c\x00\xf5\x03\x9e\x00\xf4\x03\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x77\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x11\x00\x76\x00\x12\x00\x75\x00\x13\x00\x74\x00\
\\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\x17\x00\x70\x00\
\\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\x1b\x00\x6c\x00\
\\x1c\x00\x6b\x00\x1e\x00\x69\x00\x1f\x00\x68\x00\x24\x00\x66\x00\
\\x25\x00\xed\x02\x26\x00\xec\x02\x2c\x00\x63\x00\x2f\x00\x62\x00\
\\x31\x00\x61\x00\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\
\\x3a\x00\x5c\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\x42\x00\x57\x00\
\\x45\x00\x56\x00\x47\x00\xa9\x00\x48\x00\x54\x00\x4b\x00\xa7\x00\
\\x4c\x00\x52\x00\x4f\x00\xa5\x00\x50\x00\x50\x00\x53\x00\xa3\x00\
\\x54\x00\x4e\x00\x57\x00\x4d\x00\x58\x00\x4c\x00\x5b\x00\xa0\x00\
\\x5c\x00\x4a\x00\x5f\x00\x9e\x00\x60\x00\x48\x00\x63\x00\x47\x00\
\\x67\x00\x46\x00\x6a\x00\x45\x00\x6b\x00\x44\x00\x6e\x00\x9a\x00\
\\x6f\x00\x42\x00\x72\x00\x98\x00\x73\x00\x40\x00\x77\x00\x3e\x00\
\\x7a\x00\x95\x00\x7b\x00\x3c\x00\x7e\x00\x93\x00\x7f\x00\x3a\x00\
\\x84\x00\x39\x00\x85\x00\xbd\x00\x87\x00\x36\x00\x8a\x00\xeb\x02\
\\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\x8f\x00\x30\x00\
\\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\x93\x00\x2c\x00\
\\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\x97\x00\x28\x00\
\\x98\x00\x88\x00\x99\x00\x26\x00\x9c\x00\xea\x02\x9e\x00\xe9\x02\
\\xab\x00\x21\x00\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\
\\xb5\x00\x1d\x00\x00\x00\
\\x78\x06\x00\x00\
\\x79\x06\x20\x00\xb2\x01\x00\x00\
\\x7a\x06\x20\x00\x0e\x02\x00\x00\
\\x7b\x06\x20\x00\x0c\x02\x00\x00\
\\x7c\x06\x20\x00\x62\x02\x00\x00\
\\x7d\x06\x00\x00\
\\x7e\x06\x00\x00\
\\x7f\x06\x20\x00\xb2\x01\x00\x00\
\\x80\x06\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\x00\x00\
\\x81\x06\x00\x00\
\\x82\x06\x20\x00\x0e\x02\x00\x00\
\\x83\x06\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\x00\x00\
\\x84\x06\x00\x00\
\\x85\x06\x20\x00\x0c\x02\x00\x00\
\\x86\x06\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\x00\x00\
\\x87\x06\x00\x00\
\\x88\x06\xa1\x00\xf2\x02\x00\x00\
\\x89\x06\x00\x00\
\\x8a\x06\xac\x00\x65\x02\x00\x00\
\\x8b\x06\x00\x00\
\\x8c\x06\xa4\x00\x7e\x03\xa5\x00\x7d\x03\xa6\x00\x7c\x03\x00\x00\
\\x8d\x06\x00\x00\
\\x8e\x06\x00\x00\
\\x8f\x06\x20\x00\x62\x02\x00\x00\
\\x90\x06\x0c\x00\x81\x03\xac\x00\x80\x03\x00\x00\
\\x91\x06\x00\x00\
\\x92\x06\x00\x00\
\\x93\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1d\x00\x6a\x00\x1e\x00\x69\x00\
\\x1f\x00\x68\x00\x21\x00\x67\x00\x24\x00\x66\x00\x25\x00\x65\x00\
\\x26\x00\x64\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\x55\x00\
\\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\x4f\x00\x51\x00\
\\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\x5f\x00\x49\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\x72\x00\x41\x00\
\\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\x7a\x00\x3d\x00\
\\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\
\\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\x88\x00\x35\x00\
\\x8a\x00\x34\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\
\\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\
\\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\x9b\x00\x25\x00\
\\x9c\x00\x24\x00\x9d\x00\x23\x00\x9e\x00\x22\x00\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\x94\x06\x00\x00\
\\x95\x06\x20\x00\xb2\x01\x00\x00\
\\x96\x06\x20\x00\x0e\x02\x00\x00\
\\x97\x06\x20\x00\x0c\x02\x00\x00\
\\x98\x06\x20\x00\x11\x02\x00\x00\
\\x99\x06\x00\x00\
\\x9a\x06\x20\x00\x69\x02\x00\x00\
\\x9b\x06\x20\x00\x62\x02\x00\x00\
\\x9c\x06\x00\x00\
\\x9d\x06\x00\x00\
\\x9e\x06\x00\x00\
\\x9f\x06\x82\x00\xf8\x00\x9f\x00\xf7\x00\xa4\x00\xf6\x00\xa8\x00\xf5\x00\
\\xaf\x00\xf4\x00\xb0\x00\xf3\x00\x00\x00\
\\xa0\x06\x03\x00\x80\x00\x04\x00\x7f\x00\x05\x00\x7e\x00\x06\x00\x7d\x00\
\\x08\x00\x7c\x00\x09\x00\x7b\x00\x0a\x00\x7a\x00\x0b\x00\x79\x00\
\\x0c\x00\x78\x00\x0d\x00\x77\x00\x11\x00\x76\x00\x12\x00\x75\x00\
\\x13\x00\x74\x00\x14\x00\x73\x00\x15\x00\x72\x00\x16\x00\x71\x00\
\\x17\x00\x70\x00\x18\x00\x6f\x00\x19\x00\x6e\x00\x1a\x00\x6d\x00\
\\x1b\x00\x6c\x00\x1c\x00\x6b\x00\x1d\x00\x6a\x00\x1e\x00\x69\x00\
\\x1f\x00\x68\x00\x21\x00\x67\x00\x24\x00\x66\x00\x25\x00\x65\x00\
\\x26\x00\x64\x00\x2c\x00\x63\x00\x2f\x00\x62\x00\x31\x00\x61\x00\
\\x32\x00\x60\x00\x35\x00\x5f\x00\x36\x00\x5e\x00\x39\x00\x5d\x00\
\\x3a\x00\x5c\x00\x3d\x00\x5b\x00\x3e\x00\x5a\x00\x3f\x00\x59\x00\
\\x41\x00\x58\x00\x42\x00\x57\x00\x45\x00\x56\x00\x47\x00\x55\x00\
\\x48\x00\x54\x00\x4b\x00\x53\x00\x4c\x00\x52\x00\x4f\x00\x51\x00\
\\x50\x00\x50\x00\x53\x00\x4f\x00\x54\x00\x4e\x00\x57\x00\x4d\x00\
\\x58\x00\x4c\x00\x5b\x00\x4b\x00\x5c\x00\x4a\x00\x5f\x00\x49\x00\
\\x60\x00\x48\x00\x63\x00\x47\x00\x67\x00\x46\x00\x6a\x00\x45\x00\
\\x6b\x00\x44\x00\x6e\x00\x43\x00\x6f\x00\x42\x00\x72\x00\x41\x00\
\\x73\x00\x40\x00\x76\x00\x3f\x00\x77\x00\x3e\x00\x7a\x00\x3d\x00\
\\x7b\x00\x3c\x00\x7e\x00\x3b\x00\x7f\x00\x3a\x00\x84\x00\x39\x00\
\\x85\x00\x38\x00\x86\x00\x37\x00\x87\x00\x36\x00\x88\x00\x35\x00\
\\x8a\x00\x34\x00\x8b\x00\x33\x00\x8d\x00\x32\x00\x8e\x00\x31\x00\
\\x8f\x00\x30\x00\x90\x00\x2f\x00\x91\x00\x2e\x00\x92\x00\x2d\x00\
\\x93\x00\x2c\x00\x94\x00\x2b\x00\x95\x00\x2a\x00\x96\x00\x29\x00\
\\x97\x00\x28\x00\x98\x00\x27\x00\x99\x00\x26\x00\x9b\x00\x25\x00\
\\x9c\x00\x24\x00\x9d\x00\x23\x00\x9e\x00\x22\x00\xab\x00\x21\x00\
\\xac\x00\x20\x00\xb1\x00\x1f\x00\xb2\x00\x1e\x00\xb5\x00\x1d\x00\x00\x00\
\\xa1\x06\x00\x00\
\\xa2\x06\x00\x00\
\";
    action_row_numbers =
"\x34\x00\x75\x03\x27\x00\x6f\x03\
\\x4e\x00\xb5\x02\xb4\x02\x17\x02\
\\xf7\x01\xef\x01\xe2\x01\xe5\x01\
\\xe0\x01\xdd\x01\xc7\x01\x72\x03\
\\x03\x02\x02\x02\x01\x02\x04\x02\
\\x04\x00\x64\x01\x94\x00\x03\x00\
\\x61\x01\x3d\x00\xf5\x01\x16\x02\
\\x1f\x01\x37\x00\x39\x00\x35\x00\
\\x66\x03\x79\x00\x58\x00\x7a\x00\
\\x7f\x01\x7d\x01\x7b\x01\x79\x01\
\\x40\x00\x77\x01\x75\x01\x5a\x00\
\\x71\x01\x73\x01\x6f\x01\x6c\x01\
\\x3c\x00\x78\x00\x69\x01\x3d\x00\
\\x78\x02\x05\x01\x44\x00\x67\x01\
\\x12\x00\x22\x00\x11\x00\x21\x00\
\\x10\x00\x3c\x00\x0f\x00\x20\x00\
\\x0e\x00\x1f\x00\x0d\x00\x9b\x01\
\\x18\x00\x54\x00\x0c\x00\x1e\x00\
\\x0b\x00\x1d\x00\x0a\x00\x98\x01\
\\x09\x00\x1c\x00\x08\x00\x1b\x00\
\\x07\x00\x1a\x00\x06\x00\x19\x00\
\\x38\x00\x36\x00\x3c\x00\x14\x00\
\\x13\x00\x3c\x00\xa0\x01\x3c\x00\
\\x17\x00\x58\x00\x16\x00\x58\x00\
\\x6b\x00\x15\x00\x58\x00\x58\x00\
\\x3c\x00\x5b\x00\x08\x02\x07\x02\
\\x71\x03\x22\x02\x21\x02\x20\x02\
\\x1f\x02\x1e\x02\x1d\x02\x1c\x02\
\\x1b\x02\x06\x02\x05\x02\x26\x01\
\\x25\x01\x50\x01\x25\x00\x24\x01\
\\x05\x00\x21\x01\x27\x01\x96\x02\
\\x23\x01\x65\x01\xf6\x01\x73\x03\
\\xb9\x02\x62\x01\x5e\x01\x63\x01\
\\xdb\x02\x7e\x01\x7c\x01\x7a\x01\
\\x78\x01\x76\x01\x74\x01\x70\x01\
\\x72\x01\x6d\x01\x68\x01\x66\x01\
\\x8d\x01\x9f\x01\x8c\x01\x9e\x01\
\\x8b\x01\x8a\x01\x9d\x01\x89\x01\
\\x9c\x01\x88\x01\x93\x01\x87\x01\
\\x9a\x01\x86\x01\x99\x01\x85\x01\
\\x84\x01\x97\x01\x83\x01\x96\x01\
\\x82\x01\x95\x01\x81\x01\x94\x01\
\\x8f\x01\x8e\x01\x91\x01\x92\x01\
\\x90\x01\xdc\x02\x80\x01\x5d\x01\
\\x5c\x00\x5d\x00\x5c\x00\x54\x00\
\\x54\x00\x44\x00\xf0\x01\xe4\x01\
\\xe3\x01\x2a\x01\x28\x01\x44\x00\
\\x38\x01\x5c\x01\x37\x01\x5b\x01\
\\x36\x01\x35\x01\x5a\x01\x34\x01\
\\x59\x01\x33\x01\x3e\x01\x32\x01\
\\x58\x01\x31\x01\x57\x01\x30\x01\
\\x2f\x01\x54\x01\x2e\x01\x53\x01\
\\x2d\x01\x52\x01\x2c\x01\x51\x01\
\\x3a\x01\x39\x01\x3d\x01\x3c\x01\
\\x3b\x01\x24\x00\x2b\x01\xe6\x01\
\\x3a\x00\x4c\x01\x4b\x01\x4a\x01\
\\x49\x01\x48\x01\x4f\x01\x47\x01\
\\x46\x01\x45\x01\x43\x01\x42\x01\
\\x41\x01\x40\x01\x3a\x00\x44\x01\
\\x4d\x01\x4e\x01\x3f\x01\x35\x00\
\\x3b\x00\x3a\x00\x3a\x00\x3c\x00\
\\x60\x00\xbf\x00\x44\x00\x3a\x00\
\\x3a\x00\x3a\x00\x3a\x00\x3a\x00\
\\x3a\x00\x3a\x00\x3a\x00\x3a\x00\
\\x3a\x00\x3a\x00\x3a\x00\x3a\x00\
\\x3a\x00\xf4\x01\x20\x01\x59\x00\
\\x35\x02\x0b\x01\x3b\x02\x15\x02\
\\x12\x01\xc3\x00\x0d\x02\x32\x02\
\\x28\x00\x27\x02\xb2\x00\x33\x02\
\\xd5\x02\x67\x03\xd2\x00\xf1\x01\
\\x68\x03\x2d\x03\xf2\x01\x4f\x00\
\\x3a\x00\x50\x00\xac\x02\x3f\x02\
\\xad\x02\x40\x02\x44\x02\x42\x02\
\\x82\x00\x4e\x02\x4d\x02\x4c\x02\
\\x4f\x02\x60\x01\x48\x02\x46\x02\
\\x41\x00\x43\x00\x53\x02\x44\x00\
\\x42\x00\x4a\x00\x55\x01\x52\x02\
\\x51\x02\x50\x02\x47\x02\x5f\x01\
\\x78\x02\x78\x02\x96\x02\xaa\x02\
\\xa8\x02\x47\x00\x35\x00\x0a\x02\
\\x58\x00\x61\x00\x7b\x00\x45\x00\
\\xb1\x02\x79\x02\x29\x00\x83\x00\
\\xc0\x01\xcf\x01\x8a\x00\x60\x00\
\\xc1\x00\x09\x02\xa8\x01\xaa\x01\
\\x0c\x01\xc8\x00\x0d\x01\xc2\x00\
\\x12\x02\xb3\x00\xb4\x00\xc6\x01\
\\xc4\x01\x02\x00\x0c\x02\x01\x00\
\\xbe\x00\xae\x00\xaf\x00\xc1\x02\
\\xc0\x02\xb7\x02\xa4\x02\x6a\x03\
\\x2d\x03\x69\x03\x2d\x03\x44\x00\
\\x6b\x03\x96\x00\x3a\x00\x97\x00\
\\x77\x00\x97\x02\x74\x03\xdd\x02\
\\xde\x02\xb6\x02\x96\x02\x9a\x02\
\\x96\x02\x93\x02\xf9\x01\xf8\x01\
\\xae\x02\x85\x00\xcd\x01\x0e\x01\
\\xe1\x01\xc4\x00\x8b\x00\xdf\x01\
\\x04\x01\xca\x01\xc9\x01\xce\x01\
\\xc8\x01\xbb\x01\xb6\x01\xa7\x01\
\\xa3\x01\x60\x00\x4c\x00\xb2\x01\
\\x22\x01\xa4\x01\x7c\x00\xcb\x01\
\\x8c\x00\xbe\x02\xcd\x02\xc3\x02\
\\xc5\x02\xcc\x02\xc2\x02\xc6\x02\
\\xce\x02\xc4\x02\xc7\x02\xc8\x02\
\\xc9\x02\xcb\x02\xca\x02\x36\x02\
\\x37\x02\x00\x02\x14\x02\x3a\x00\
\\x10\x02\x0e\x02\x3a\x00\x28\x02\
\\x23\x02\xd6\x02\xd3\x00\x2a\x00\
\\xd9\x02\x7d\x00\xd5\x02\x66\x03\
\\x58\x00\x98\x00\x62\x00\x62\x00\
\\x62\x00\xb0\x02\x6d\x02\x51\x00\
\\x6d\x02\xd6\x01\xda\x00\xdb\x00\
\\x40\x00\x41\x02\x43\x02\x60\x00\
\\x3a\x00\x44\x00\x0f\x01\x62\x02\
\\x56\x02\x86\x00\x49\x02\x84\x00\
\\x10\x01\x54\x02\xb5\x00\x5f\x02\
\\x56\x00\xac\x00\x88\x00\x58\x02\
\\x60\x02\xb2\x02\x45\x00\xb3\x02\
\\x60\x00\x99\x00\xab\x02\xa9\x02\
\\xb8\x02\xa7\x02\xa1\x01\xa2\x01\
\\x89\x00\x6e\x03\x31\x03\x6d\x03\
\\x06\x01\xf3\x01\x2b\x00\x74\x02\
\\x6c\x02\x7a\x02\x91\x02\x88\x02\
\\x92\x02\x45\x00\x45\x00\x45\x00\
\\x56\x01\xc5\x00\x2c\x00\x29\x01\
\\x3a\x00\x2d\x00\x3a\x00\x3a\x00\
\\xc1\x01\x18\x02\xaf\x02\x56\x00\
\\xe7\x01\x11\x02\xfd\x01\x44\x00\
\\x13\x02\x0f\x02\x0b\x02\x55\x00\
\\x3a\x00\x3a\x00\xec\x01\xe9\x01\
\\xea\x01\xeb\x01\xe8\x01\x6b\x00\
\\xa5\x02\x6c\x00\x58\x00\x9b\x00\
\\x58\x00\x9c\x00\xab\x00\x63\x00\
\\xe2\x02\x62\x00\xbf\x02\x5e\x00\
\\x5f\x00\x13\x01\x98\x02\x9d\x00\
\\x9e\x00\xee\x01\xed\x01\xd0\x01\
\\x3b\x00\x60\x00\xb5\x01\x60\x00\
\\x80\x00\x14\x01\x53\x00\xb6\x00\
\\xaf\x01\xdc\x00\xb0\x01\xc0\x00\
\\x2c\x02\x2a\x02\x31\x02\x30\x02\
\\x2f\x02\xcc\x01\x38\x02\x3c\x02\
\\x39\x02\x3a\x02\x29\x02\xd5\x02\
\\xd7\x02\xd4\x00\x8d\x00\x52\x03\
\\x48\x03\x48\x00\x2f\x03\xb0\x00\
\\x2a\x03\x2e\x03\x30\x03\x4f\x00\
\\x9f\x00\x60\x00\x6d\x02\x6d\x02\
\\xa0\x00\x60\x00\x60\x00\x66\x02\
\\x3e\x02\x68\x02\x3d\x02\x57\x02\
\\x44\x00\x45\x02\x44\x00\x44\x00\
\\x3a\x00\x55\x02\x59\x02\x4b\x00\
\\x5d\x02\x44\x00\x60\x00\x44\x00\
\\x7e\x02\x3f\x00\x5e\x00\x6d\x00\
\\x1a\x02\x24\x02\x3c\x00\x35\x00\
\\x58\x00\x2d\x03\xa1\x00\xe2\x02\
\\x64\x00\x65\x00\x66\x00\x61\x00\
\\xa2\x00\x45\x00\xa3\x00\x8a\x02\
\\xc9\x00\x44\x00\x89\x02\x74\x00\
\\x73\x00\x75\x00\x76\x00\x3a\x00\
\\x3a\x00\x3a\x00\xd2\x01\x15\x01\
\\x2e\x00\xbe\x01\x60\x00\x6a\x02\
\\xfa\x01\xfd\x01\xfd\x01\x3b\x00\
\\xd9\x00\xc5\x01\xa9\x01\xab\x01\
\\xc3\x01\xc2\x01\xa3\x02\xa6\x02\
\\xa5\x01\xa6\x01\x58\x03\x48\x03\
\\x48\x00\x55\x03\x48\x03\x48\x00\
\\x19\x02\x35\x03\x95\x00\xed\x02\
\\xea\x02\x2f\x00\xb7\x00\xe3\x02\
\\xe8\x02\x58\x00\xdd\x00\xdf\x02\
\\x3e\x00\x52\x00\x6e\x01\x6a\x01\
\\xde\x00\xdf\x00\xe0\x00\xe1\x00\
\\xe2\x00\xe3\x00\xe4\x00\xe5\x00\
\\xe6\x00\xe7\x00\xe8\x00\xe9\x00\
\\xea\x00\xeb\x00\xec\x00\xed\x00\
\\xee\x00\xef\x00\xf0\x00\xf1\x00\
\\xf2\x00\xf3\x00\xf4\x00\xf5\x00\
\\xf6\x00\xf7\x00\xf8\x00\xf9\x00\
\\xfa\x00\xfb\x00\x6e\x00\x67\x00\
\\xfc\x00\xe1\x02\xe0\x02\xfd\x00\
\\xfe\x00\x96\x02\x36\x03\x9c\x02\
\\x9f\x02\x9b\x02\x94\x02\xa1\x02\
\\x95\x02\x77\x00\x60\x00\x6d\x00\
\\xde\x01\xba\x01\x16\x01\x81\x00\
\\xb1\x01\x60\x00\xb9\x01\xad\x01\
\\xb3\x01\x4d\x00\x60\x00\xd7\x01\
\\x2d\x02\x2e\x02\x2b\x02\x8e\x00\
\\xd8\x02\xd5\x02\x70\x03\xb8\x00\
\\x47\x03\x30\x00\x50\x03\x48\x03\
\\x58\x00\x6b\x01\x58\x00\x58\x00\
\\x53\x03\x3b\x03\x48\x03\xb1\x00\
\\x3e\x00\xe2\x02\x6f\x02\x3a\x00\
\\x6e\x02\xa4\x00\xa5\x00\x3a\x00\
\\x7e\x00\x7f\x00\x63\x02\x17\x01\
\\x18\x01\x64\x02\x67\x02\x61\x02\
\\x5a\x02\x5c\x02\x5b\x02\xca\x00\
\\x82\x02\x9e\x02\x9d\x02\x35\x00\
\\xc7\x00\x62\x03\xa6\x00\x49\x00\
\\x19\x01\x5c\x03\x00\x01\x33\x03\
\\x32\x03\x34\x03\x37\x03\x62\x00\
\\x31\x00\x6c\x02\x8f\x00\x3a\x00\
\\x3a\x00\xcb\x00\xcc\x00\x78\x02\
\\x87\x00\x8b\x02\x8e\x02\x8c\x02\
\\x72\x00\x8d\x02\x71\x00\xd1\x01\
\\x32\x00\xd9\x01\x3a\x00\xbf\x01\
\\x69\x02\x3a\x00\xfe\x01\xff\x01\
\\xfc\x01\x3b\x00\xb9\x00\x59\x03\
\\xba\x00\x56\x03\x52\x00\x67\x00\
\\xe4\x02\x6c\x03\x5c\x00\xe6\x02\
\\x01\x01\x60\x00\x21\x03\x22\x03\
\\xf0\x02\xa7\x00\xa8\x00\xec\x02\
\\x68\x00\x58\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\x60\x00\x60\x00\x60\x00\x60\x00\
\\xee\x02\x1e\x03\xeb\x02\x96\x02\
\\x60\x00\x60\x00\x60\x00\xf7\x02\
\\x6d\x00\xa2\x02\x99\x02\xb4\x01\
\\x60\x00\xb8\x01\xb7\x01\xae\x01\
\\xac\x01\x34\x02\x90\x00\x54\x03\
\\x4a\x03\xd5\x00\x4c\x03\x58\x00\
\\x4e\x03\x4d\x03\x62\x00\x62\x00\
\\x62\x00\x3d\x03\x49\x03\x43\x03\
\\xd6\x00\x48\x03\x2c\x03\x96\x02\
\\xa9\x00\xbb\x00\x70\x02\x3a\x00\
\\x3a\x00\x71\x02\x07\x01\x08\x01\
\\x09\x01\x0a\x01\x4a\x02\x4b\x02\
\\x44\x00\x44\x00\xcd\x00\xce\x00\
\\x78\x02\xcf\x00\x89\x00\x25\x02\
\\x48\x03\x48\x00\x61\x03\x63\x03\
\\x48\x03\x5d\x03\x69\x00\x38\x03\
\\x76\x02\xad\x00\x75\x02\x87\x02\
\\x86\x02\x78\x02\x78\x02\x7b\x02\
\\x8f\x02\x44\x00\xda\x01\x58\x00\
\\xd3\x01\x6b\x02\xfb\x01\x5a\x03\
\\x57\x03\xfa\x02\xf6\x02\xe5\x02\
\\xe9\x02\x58\x00\x62\x00\xfb\x02\
\\x3e\x00\x5e\x00\x47\x00\xef\x02\
\\x26\x00\xe7\x02\x02\x01\x0b\x03\
\\x1c\x03\x0a\x03\x1b\x03\x09\x03\
\\x08\x03\x07\x03\x1a\x03\x06\x03\
\\x19\x03\x0e\x03\x05\x03\x18\x03\
\\x04\x03\x17\x03\x03\x03\x16\x03\
\\x02\x03\x15\x03\x00\x03\x14\x03\
\\xff\x02\x13\x03\xfe\x02\x12\x03\
\\x10\x03\x0f\x03\x01\x03\x0c\x03\
\\x0d\x03\x6e\x00\x1f\x03\xf8\x02\
\\x11\x03\xfd\x02\xfc\x02\x5f\x00\
\\xa0\x02\xbd\x01\xbc\x01\xda\x02\
\\x4b\x03\x48\x03\x4f\x03\x40\x03\
\\x3f\x03\x41\x03\x1a\x01\xff\x00\
\\x6f\x00\x70\x00\x48\x03\x57\x00\
\\x48\x00\xbc\x00\x3e\x00\xaa\x00\
\\x47\x00\x2b\x03\x72\x02\x73\x02\
\\x46\x00\x46\x00\x46\x00\x46\x00\
\\x65\x02\x5e\x02\x78\x02\x78\x02\
\\x7f\x02\xd0\x00\xd1\x00\x78\x02\
\\x26\x02\xbd\x00\x5f\x03\x64\x03\
\\xd7\x00\x5e\x03\x5b\x03\x23\x00\
\\x77\x02\x7c\x02\x7d\x02\x11\x01\
\\xdb\x01\x33\x00\xd8\x01\x9a\x00\
\\xf1\x02\xf2\x02\x20\x03\x24\x03\
\\x23\x03\x26\x03\x25\x03\x58\x00\
\\x03\x01\xf5\x02\x6a\x00\x1d\x03\
\\x60\x00\xf9\x02\x91\x00\x44\x03\
\\x42\x03\xd8\x00\x92\x00\x3c\x03\
\\x27\x03\x60\x00\x28\x03\xcf\x02\
\\x1b\x01\xd2\x02\xd1\x02\xd4\x02\
\\xd3\x02\x1c\x01\x1d\x01\x1e\x01\
\\x80\x02\x81\x02\x78\x02\x78\x02\
\\x83\x02\x60\x03\x49\x00\x90\x02\
\\xda\x01\x3a\x00\x3a\x00\x47\x00\
\\xf4\x02\x62\x00\x39\x03\x51\x03\
\\x46\x03\x45\x03\x49\x03\x3e\x03\
\\x29\x03\x46\x00\xbb\x02\xba\x02\
\\xbd\x02\xbc\x02\x84\x02\x85\x02\
\\x93\x00\xdc\x01\xd4\x01\xc6\x00\
\\xf3\x02\x3a\x03\xd0\x02\x65\x03\
\\x3a\x00\xd5\x01\x00\x00";
   goto_table =
"\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x0f\x00\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\x2f\x00\x0b\x00\
\\x30\x00\x0a\x00\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\
\\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x03\x00\
\\x7d\x00\x5e\x04\x7e\x00\x02\x00\x80\x00\x01\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x02\x00\x84\x00\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\x82\x00\
\\x09\x00\x15\x00\x0a\x00\x81\x00\x65\x00\x80\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2e\x00\xb8\x00\x2f\x00\xb7\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x05\x00\xdb\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\x05\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x3c\x00\x06\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x0a\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x39\x00\x09\x01\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x0d\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3a\x00\x0c\x01\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2b\x00\x12\x01\x2c\x00\x11\x01\
\\x2d\x00\x10\x01\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\
\\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\
\\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x0f\x00\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\x2f\x00\x0b\x00\
\\x30\x00\x0a\x00\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\
\\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x03\x00\
\\x7e\x00\x02\x00\x7f\x00\x16\x01\x80\x00\x15\x01\x00\x00\
\\x00\x00\
\\x07\x00\x19\x01\x81\x00\x18\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x24\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x47\x00\x20\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x3e\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\x42\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x4d\x00\x44\x01\x4e\x00\x43\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x1e\x00\x4a\x01\x1f\x00\x49\x01\x20\x00\x48\x01\
\\x3d\x00\x47\x01\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\
\\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x4c\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x4e\x01\x15\x00\x4d\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x0a\x01\x26\x00\x53\x01\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x33\x00\x52\x01\x34\x00\x51\x01\x39\x00\x50\x01\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x59\x01\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x15\x00\x58\x01\
\\x21\x00\x57\x01\x22\x00\x56\x01\x25\x00\x13\x01\x26\x00\x0e\x00\
\\x27\x00\x0d\x00\x2b\x00\x55\x01\x2c\x00\x11\x01\x2d\x00\x10\x01\
\\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\x09\x00\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x5c\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x5d\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x5e\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x07\x00\x5f\x01\x00\x00\
\\x00\x00\
\\x07\x00\x60\x01\x00\x00\
\\x5c\x00\x61\x01\x00\x00\
\\x00\x00\
\\x07\x00\x64\x01\x83\x00\x63\x01\x00\x00\
\\x07\x00\x66\x01\x82\x00\x65\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x67\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x75\x00\x68\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x56\x00\x6b\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x0f\x00\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\x2f\x00\x0b\x00\
\\x30\x00\x0a\x00\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\
\\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x03\x00\
\\x7e\x00\x02\x00\x80\x00\x6e\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x02\x00\x84\x00\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\x82\x00\
\\x09\x00\x15\x00\x0a\x00\x81\x00\x65\x00\x6f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x02\x00\x84\x00\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\x82\x00\
\\x09\x00\x15\x00\x0a\x00\x81\x00\x65\x00\x70\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x55\x00\x71\x01\x00\x00\
\\x59\x00\x73\x01\x00\x00\
\\x55\x00\x75\x01\x00\x00\
\\x07\x00\x4e\x01\x15\x00\x76\x01\x00\x00\
\\x07\x00\x4e\x01\x15\x00\x77\x01\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x78\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x05\x00\xdb\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x1e\x00\x4a\x01\x20\x00\x48\x01\x3d\x00\x79\x01\
\\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x7a\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x7d\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x7c\x01\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3a\x00\x7b\x01\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2c\x00\x7e\x01\x2d\x00\x10\x01\
\\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\x09\x00\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x27\x00\x80\x01\x2e\x00\x7f\x01\x2f\x00\xb7\x00\x30\x00\x0a\x00\
\\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x81\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x82\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x83\x01\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x84\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x1e\x00\x90\x01\x1f\x00\x8f\x01\x20\x00\x48\x01\
\\x3d\x00\x47\x01\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\
\\x51\x00\x1f\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x91\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x92\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x93\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x94\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x95\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x96\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x97\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x98\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x99\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x9a\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x9b\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x9c\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x9d\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x9e\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x32\x00\xa0\x01\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xac\x01\x60\x00\xab\x01\x63\x00\xaa\x01\x64\x00\xa9\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x73\x00\xb1\x01\x00\x00\
\\x00\x00\
\\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\xb6\x01\x09\x00\x15\x00\
\\x0a\x00\x81\x00\x4a\x00\xb5\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xb9\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\xba\x01\x09\x00\x15\x00\
\\x0a\x00\x81\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\
\\x51\x00\xbd\x01\x00\x00\
\\x00\x00\
\\x05\x00\xbe\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc3\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x45\x00\xc2\x01\x51\x00\x1f\x01\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc5\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc7\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc3\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x45\x00\xc8\x01\x51\x00\x1f\x01\x00\x00\
\\x07\x00\xce\x01\x0e\x00\x88\x01\x12\x00\x87\x01\x15\x00\xcd\x01\
\\x16\x00\x86\x01\x19\x00\x85\x01\x1b\x00\xcc\x01\x42\x00\xcb\x01\
\\x43\x00\xca\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4e\x00\xd2\x01\x4f\x00\xd1\x01\x00\x00\
\\x4e\x00\xd4\x01\x50\x00\xd3\x01\x00\x00\
\\x56\x00\xd5\x01\x00\x00\
\\x0c\x00\xd6\x01\x00\x00\
\\x0c\x00\xd7\x01\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xd9\x01\x5d\x00\xd8\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2b\x00\xdc\x01\x2c\x00\x11\x01\
\\x2d\x00\x10\x01\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\
\\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\
\\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x00\x00\
\\x07\x00\xde\x01\x86\x00\xdd\x01\x00\x00\
\\x76\x00\xdf\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x4b\x00\xe5\x01\x52\x00\xe4\x01\x53\x00\xe3\x01\
\\x54\x00\xe2\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xef\x01\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x23\x00\xee\x01\x25\x00\xed\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\
\\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x1e\x00\xf4\x01\x20\x00\x48\x01\x3d\x00\x79\x01\
\\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xf7\x01\x48\x00\xf6\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x35\x00\xfa\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x08\x02\x00\x00\
\\x00\x00\
\\x73\x00\x0b\x02\x00\x00\
\\x00\x00\
\\x73\x00\x0d\x02\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x1e\x00\x0e\x02\x20\x00\x48\x01\x3d\x00\x79\x01\
\\x3f\x00\x23\x01\x40\x00\x22\x01\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x12\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x58\x00\x15\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x56\x00\x17\x02\x00\x00\
\\x00\x00\
\\x56\x00\x18\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x1e\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1a\x00\x21\x02\x1b\x00\x20\x02\x00\x00\
\\x07\x00\x4e\x01\x0e\x00\x88\x01\x12\x00\x87\x01\x15\x00\x25\x02\
\\x16\x00\x86\x01\x17\x00\x24\x02\x18\x00\x23\x02\x19\x00\x85\x01\
\\x1b\x00\x22\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x28\x00\x29\x02\x29\x00\x28\x02\x2a\x00\x27\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x3c\x00\x2e\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x0a\x01\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x39\x00\x2f\x02\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x31\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3a\x00\x30\x02\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2c\x00\x32\x02\x2d\x00\x10\x01\
\\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\x09\x00\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xac\x01\x60\x00\xab\x01\x63\x00\x35\x02\x64\x00\xa9\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x0f\x00\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\x2f\x00\x0b\x00\
\\x30\x00\x0a\x00\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\
\\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x03\x00\
\\x7e\x00\x02\x00\x7f\x00\x36\x02\x80\x00\x15\x01\x00\x00\
\\x07\x00\x19\x01\x81\x00\x37\x02\x00\x00\
\\x00\x00\
\\x72\x00\x3a\x02\x00\x00\
\\x72\x00\x3d\x02\x00\x00\
\\x72\x00\x3e\x02\x00\x00\
\\x00\x00\
\\x49\x00\x40\x02\x00\x00\
\\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\x42\x02\x09\x00\x15\x00\
\\x0a\x00\x81\x00\x00\x00\
\\x49\x00\x44\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x24\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x47\x00\x47\x02\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x48\x02\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x49\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x4a\x02\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x54\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x4b\x00\x58\x02\x52\x00\xe4\x01\x53\x00\xe3\x01\
\\x54\x00\xe2\x01\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x59\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x38\x00\x5c\x02\x00\x00\
\\x00\x00\
\\x74\x00\x62\x02\x85\x00\x61\x02\x00\x00\
\\x00\x00\
\\x85\x00\x68\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x05\x00\x6b\x02\x49\x00\x6a\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x52\x00\x6e\x02\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x52\x00\x6f\x02\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x52\x00\x70\x02\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x52\x00\x71\x02\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x52\x00\x72\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x76\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x78\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x79\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x7b\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x35\x00\x7e\x02\x36\x00\x7d\x02\x37\x00\x7c\x02\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3f\x00\x80\x02\x40\x00\x22\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x82\x02\x15\x00\x58\x01\x21\x00\x57\x01\x22\x00\x81\x02\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x84\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x85\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x5c\x00\x86\x02\x00\x00\
\\x00\x00\
\\x0d\x00\x88\x02\x13\x00\x87\x02\x00\x00\
\\x07\x00\x64\x01\x83\x00\x8a\x02\x00\x00\
\\x00\x00\
\\x07\x00\x66\x01\x82\x00\x8d\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x75\x00\x91\x02\x00\x00\
\\x07\x00\x9a\x02\x0b\x00\x99\x02\x59\x00\x98\x02\x66\x00\x97\x02\
\\x67\x00\x96\x02\x68\x00\x95\x02\x6b\x00\x94\x02\x6c\x00\x93\x02\x00\x00\
\\x72\x00\xc6\x02\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\xc7\x02\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xca\x02\x5a\x00\xc9\x02\x5b\x00\xc8\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x27\x00\xd0\x02\x2e\x00\x7f\x01\x2f\x00\xb7\x00\x30\x00\x0a\x00\
\\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd1\x02\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd3\x02\x1c\x00\xd2\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x4e\x01\x15\x00\xd7\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x28\x00\x29\x02\x29\x00\x28\x02\x2a\x00\xde\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xac\x01\x60\x00\xab\x01\x63\x00\xdf\x02\x64\x00\xa9\x01\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xac\x01\x60\x00\xab\x01\x64\x00\xe0\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\xe3\x02\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xed\x02\x78\x00\xec\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x06\x00\x18\x00\x07\x00\x83\x00\x08\x00\xb6\x01\x09\x00\x15\x00\
\\x0a\x00\x81\x00\x4a\x00\xf2\x02\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xf4\x02\x00\x00\
\\x49\x00\xf5\x02\x00\x00\
\\x49\x00\xf6\x02\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xf8\x02\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xf9\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc3\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x45\x00\xfa\x02\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc3\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x45\x00\xfb\x02\x51\x00\x1f\x01\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xfd\x02\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x46\x00\xfc\x02\x51\x00\x1f\x01\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xfe\x02\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xce\x01\x0e\x00\x88\x01\x12\x00\x87\x01\x15\x00\xcd\x01\
\\x16\x00\x86\x01\x19\x00\x85\x01\x1b\x00\xcc\x01\x42\x00\xcb\x01\
\\x43\x00\xff\x02\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x00\x03\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x01\x03\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x02\x03\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x4b\x00\x04\x03\x52\x00\xe4\x01\x53\x00\xe3\x01\
\\x54\x00\xe2\x01\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x05\x03\x00\x00\
\\x5a\x00\x06\x03\x5b\x00\xc8\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x2f\x00\x07\x03\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2b\x00\x08\x03\x2c\x00\x11\x01\
\\x2d\x00\x10\x01\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\
\\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\
\\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x07\x00\xde\x01\x86\x00\x09\x03\x00\x00\
\\x73\x00\x0a\x03\x00\x00\
\\x00\x00\
\\x07\x00\x0e\x03\x0b\x00\x99\x02\x59\x00\x98\x02\x66\x00\x97\x02\
\\x67\x00\x0d\x03\x68\x00\x95\x02\x6b\x00\x94\x02\x6c\x00\x93\x02\
\\x84\x00\x0c\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x76\x00\x12\x03\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x4c\x00\x16\x03\x52\x00\x15\x03\x54\x00\x14\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x1c\x03\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x05\x00\x6b\x02\x00\x00\
\\x05\x00\x6b\x02\x00\x00\
\\x05\x00\x6b\x02\x00\x00\
\\x05\x00\x6b\x02\x00\x00\
\\x05\x00\x6b\x02\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x23\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x24\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x25\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xf7\x01\x48\x00\x28\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x35\x00\x7e\x02\x36\x00\x7d\x02\x37\x00\x2a\x03\x00\x00\
\\x35\x00\x7e\x02\x36\x00\x7d\x02\x37\x00\x2b\x03\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x26\x00\x2c\x03\x27\x00\x0d\x00\x2e\x00\x7f\x01\x2f\x00\xb7\x00\
\\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x2e\x03\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xed\x02\x78\x00\x2f\x03\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x30\x03\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xed\x02\x78\x00\x31\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x38\x03\x69\x00\x37\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0e\x00\x88\x01\x0f\x00\xda\x01\x11\x00\x3e\x03\
\\x12\x00\x3d\x03\x6e\x00\x3c\x03\x6f\x00\x3b\x03\x70\x00\x3a\x03\x00\x00\
\\x07\x00\x9a\x02\x6c\x00\x3f\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x6d\x00\x60\x03\x00\x00\
\\x6b\x00\x62\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x56\x00\x67\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x69\x03\x00\x00\
\\x00\x00\
\\x58\x00\x6a\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xca\x02\x00\x00\
\\x5a\x00\xc9\x02\x5b\x00\xc8\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1a\x00\x6e\x03\x1b\x00\x6d\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x4e\x01\x0e\x00\x88\x01\x12\x00\x87\x01\x15\x00\x25\x02\
\\x16\x00\x86\x01\x17\x00\x24\x02\x18\x00\x6f\x03\x19\x00\x85\x01\
\\x1b\x00\x22\x02\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x70\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xac\x01\x60\x00\xab\x01\x63\x00\x72\x03\x64\x00\xa9\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x75\x03\x00\x00\
\\x07\x00\x19\x01\x81\x00\x76\x03\x00\x00\
\\x00\x00\
\\x07\x00\x64\x01\x83\x00\x78\x03\x00\x00\
\\x07\x00\x66\x01\x82\x00\x79\x03\x00\x00\
\\x00\x00\
\\x79\x00\x7d\x03\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x80\x03\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0e\x00\x88\x01\x0f\x00\xda\x01\x11\x00\x84\x03\
\\x12\x00\x83\x03\x71\x00\x82\x03\x00\x00\
\\x07\x00\x9a\x02\x0b\x00\x99\x02\x59\x00\x98\x02\x66\x00\x97\x02\
\\x67\x00\x85\x03\x68\x00\x95\x02\x6b\x00\x94\x02\x6c\x00\x93\x02\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x86\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x89\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x06\x00\x18\x00\x07\x00\x17\x00\
\\x08\x00\x16\x00\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\
\\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\x25\x00\x13\x01\
\\x26\x00\x0e\x00\x27\x00\x0d\x00\x2b\x00\x96\x03\x2c\x00\x11\x01\
\\x2d\x00\x10\x01\x2e\x00\x0c\x00\x2f\x00\x0b\x00\x30\x00\x0a\x00\
\\x31\x00\x09\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\
\\x59\x00\x05\x00\x5e\x00\x04\x00\x5f\x00\x0f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\x9b\x03\x87\x00\x9a\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x72\x00\x9f\x03\x00\x00\
\\x00\x00\
\\x05\x00\x6b\x02\x49\x00\xa1\x03\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xa3\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xa4\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4d\x00\xa7\x03\x4e\x00\x43\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xac\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xad\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x26\x00\xae\x03\x27\x00\x0d\x00\x2e\x00\x7f\x01\x2f\x00\xb7\x00\
\\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x9a\x02\x6c\x00\xb1\x03\x00\x00\
\\x6b\x00\xb2\x03\x00\x00\
\\x07\x00\x9a\x02\x0b\x00\x99\x02\x59\x00\x98\x02\x66\x00\xb3\x03\
\\x68\x00\x95\x02\x6b\x00\x94\x02\x6c\x00\x93\x02\x00\x00\
\\x00\x00\
\\x55\x00\xb4\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xb7\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x72\x00\xbb\x03\x00\x00\
\\x07\x00\xbe\x03\x6a\x00\xbd\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xbf\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc0\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc1\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc2\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc3\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc4\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc5\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc6\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc7\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc8\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xc9\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xca\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xcb\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xcc\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xcd\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xce\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xcf\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd0\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd1\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd2\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd3\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd4\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd5\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd6\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd7\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd8\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xd9\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xda\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xdb\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xdc\x03\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xde\x03\x00\x00\
\\x00\x00\
\\x56\x00\xdf\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xe0\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xe1\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xe2\x03\x00\x00\
\\x00\x00\
\\x5a\x00\xe4\x03\x5b\x00\xc8\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xe6\x03\x1c\x00\xe5\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe8\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xde\x01\x86\x00\xea\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x72\x00\xeb\x03\x00\x00\
\\x72\x00\xec\x03\x00\x00\
\\x72\x00\xed\x03\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\xf1\x03\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\xf0\x03\x10\x00\x10\x00\x11\x00\xed\x02\x31\x00\xad\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\xe6\x02\x78\x00\xef\x03\x7a\x00\xe5\x02\
\\x7b\x00\xe4\x02\x7c\x00\xee\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\xf5\x03\x00\x00\
\\x00\x00\
\\x56\x00\xf7\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xfa\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\xfb\x03\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xfd\x02\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x46\x00\x00\x04\x51\x00\x1f\x01\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\x01\x04\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x51\x00\x1f\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4d\x00\x04\x04\x4e\x00\x43\x01\x00\x00\
\\x00\x00\
\\x38\x00\x08\x04\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x09\x04\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xed\x02\x78\x00\x0a\x04\x00\x00\
\\x00\x00\
\\x79\x00\x0b\x04\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x0c\x04\x00\x00\
\\x85\x00\x0d\x04\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\xb7\x03\x72\x00\x0e\x04\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0a\x00\xe8\x01\x0c\x00\x28\x01\x0d\x00\x27\x01\
\\x0f\x00\x26\x01\x10\x00\x25\x01\x3e\x00\xe7\x01\x3f\x00\xe6\x01\
\\x40\x00\x22\x01\x4c\x00\x10\x04\x52\x00\x15\x03\x54\x00\x14\x03\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4e\x00\xd2\x01\x4f\x00\x11\x04\x00\x00\
\\x4e\x00\xd4\x01\x50\x00\x12\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x01\x00\x2b\x01\x04\x00\x2a\x01\x06\x00\x29\x01\x07\x00\x83\x00\
\\x09\x00\x15\x00\x0c\x00\x28\x01\x0d\x00\x27\x01\x0f\x00\x26\x01\
\\x10\x00\x25\x01\x3d\x00\xc3\x01\x3f\x00\x23\x01\x40\x00\x22\x01\
\\x41\x00\x21\x01\x45\x00\x13\x04\x51\x00\x1f\x01\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x24\x00\x15\x04\x31\x00\xad\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\x14\x04\x00\x00\
\\x07\x00\x17\x04\x23\x00\x16\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\x38\x03\x69\x00\x18\x04\x00\x00\
\\x72\x00\x19\x04\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0e\x00\x88\x01\x0f\x00\xda\x01\x11\x00\x3e\x03\
\\x12\x00\x3d\x03\x6e\x00\x1a\x04\x6f\x00\x3b\x03\x70\x00\x3a\x03\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x1c\x04\x70\x00\x1b\x04\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\x1e\x04\x6f\x00\x1d\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x77\x00\x21\x04\x85\x00\x20\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x6d\x00\x23\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x25\x04\x5a\x00\xc9\x02\x5b\x00\xc8\x02\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x26\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x31\x00\xad\x01\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\x5e\x00\x04\x00\
\\x5f\x00\xe6\x02\x7a\x00\xe5\x02\x7b\x00\xe4\x02\x7c\x00\x29\x04\x00\x00\
\\x07\x00\x19\x01\x81\x00\x76\x03\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\xed\x02\x78\x00\x2a\x04\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0e\x00\x88\x01\x0f\x00\xda\x01\x11\x00\x84\x03\
\\x12\x00\x83\x03\x71\x00\x2c\x04\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\x2e\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x06\x00\x33\x04\x07\x00\x83\x00\x09\x00\x15\x00\x0f\x00\x32\x04\
\\x10\x00\x31\x04\x61\x00\x30\x04\x62\x00\x2f\x04\x00\x00\
\\x06\x00\x33\x04\x07\x00\x83\x00\x09\x00\x15\x00\x0f\x00\x32\x04\
\\x10\x00\x31\x04\x61\x00\x35\x04\x62\x00\x2f\x04\x00\x00\
\\x06\x00\x33\x04\x07\x00\x83\x00\x09\x00\x15\x00\x0f\x00\x32\x04\
\\x10\x00\x31\x04\x61\x00\x36\x04\x62\x00\x2f\x04\x00\x00\
\\x06\x00\x33\x04\x07\x00\x83\x00\x09\x00\x15\x00\x0f\x00\x32\x04\
\\x10\x00\x31\x04\x61\x00\x37\x04\x62\x00\x2f\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4e\x00\xd2\x01\x4f\x00\x38\x04\x00\x00\
\\x4e\x00\xd4\x01\x50\x00\x39\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4d\x00\x3c\x04\x4e\x00\x43\x01\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xbe\x03\x6a\x00\x44\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x25\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x79\x00\x48\x04\x00\x00\
\\x79\x00\x49\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x0e\x00\x88\x01\x12\x00\x87\x01\x16\x00\x86\x01\x19\x00\x85\x01\
\\x1b\x00\x4c\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x4e\x00\xd2\x01\x4f\x00\x52\x04\x00\x00\
\\x4e\x00\xd4\x01\x50\x00\x53\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\x9b\x03\x87\x00\x54\x04\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\x17\x00\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\x11\x00\x10\x00\x10\x00\x24\x00\x55\x04\x31\x00\xad\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\x14\x04\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x56\x04\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x57\x04\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x07\x00\xdb\x01\x0f\x00\xda\x01\x11\x00\x58\x04\x00\x00\
\\x00\x00\
\\x72\x00\x59\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x06\x00\x18\x00\x07\x00\xf1\x03\x08\x00\x16\x00\
\\x09\x00\x15\x00\x0a\x00\x14\x00\x0c\x00\x13\x00\x0d\x00\x12\x00\
\\x0f\x00\xf0\x03\x10\x00\x10\x00\x11\x00\xed\x02\x31\x00\xad\x01\
\\x32\x00\x08\x00\x3b\x00\x07\x00\x55\x00\x06\x00\x59\x00\x05\x00\
\\x5e\x00\x04\x00\x5f\x00\xe6\x02\x78\x00\x2a\x04\x7a\x00\xe5\x02\
\\x7b\x00\xe4\x02\x7c\x00\x26\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x06\x00\x33\x04\x07\x00\x83\x00\x09\x00\x15\x00\x0f\x00\x32\x04\
\\x10\x00\x31\x04\x61\x00\x5a\x04\x62\x00\x2f\x04\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x00\x00\
\\x03\x00\x1a\x00\x04\x00\x19\x00\x07\x00\xba\x00\x0a\x00\xb9\x00\
\\x0c\x00\x13\x00\x0d\x00\x12\x00\x0f\x00\x11\x00\x10\x00\x10\x00\
\\x25\x00\x5d\x04\x26\x00\x0e\x00\x27\x00\x0d\x00\x2e\x00\x0c\x00\
\\x2f\x00\x0b\x00\x30\x00\x0a\x00\x31\x00\xb6\x00\x32\x00\x08\x00\
\\x3b\x00\x07\x00\x00\x00\
\\x00\x00\
\\x00\x00\
\";
   numstates = 1119;
   numrules = 578;
 s = REF "";  index = REF 0;
    string_to_int = \\ () = 
    {    i = *index;
         index := i+2;
         string::get_byte(*s, i) + string::get_byte(*s, i+1) * 256;
    };

    string_to_list = \\ s' =
    {   len = string::length_in_bytes s';
        fun f () =
           if (*index < len)
           string_to_int() ! f();
           else NIL; fi;
        index := 0;
        s := s';
        f ();
   };

   string_to_pairlist =   \\ (conv_key, conv_entry) =   f
   where 
         fun f ()
             =
             case (string_to_int ())
                 0 => EMPTY;
                 n => PAIR (conv_key (n - 1), conv_entry (string_to_int()), f());
             esac;
   end;

   string_to_pairlist_default =   \\ (conv_key, conv_entry) =
    {   conv_row = string_to_pairlist (conv_key, conv_entry);
       \\ () =
       {   default = conv_entry (string_to_int());
           row = conv_row();
          (row, default);
       };
   };

    string_to_table = \\ (convert_row, s') =
    {   len = string::length_in_bytes s';
        fun f ()
            =
           if (*index < len)
              convert_row() ! f();
           else NIL; fi;
        s := s';
        index := 0;
        f ();
     };

stipulate
  memo = rw_vector::make_rw_vector (numstates+numrules, ERROR);
  my _ ={   fun g i
                =
                {   rw_vector::set (memo, i, REDUCE (i-numstates));
                    g (i+1);
                };

            fun f i
                =
                if   (i == numstates)
                     g i;
                else    rw_vector::set (memo, i, SHIFT (STATE i));
                         f (i+1);
                fi;

            f 0
            except
                INDEX_OUT_OF_BOUNDS =  ();
        };
herein
    entry_to_action
        =
        \\ 0 =>  ACCEPT;
           1 =>  ERROR;
           j =>  rw_vector::get (memo, (j - 2));
        end;
end;

   goto_table = rw_vector::from_list (string_to_table (string_to_pairlist (NONTERM, STATE), goto_table));
   action_rows = string_to_table (string_to_pairlist_default (TERM, entry_to_action), action_rows);
   action_row_numbers = string_to_list action_row_numbers;
   action_table
    =
    {   action_row_lookup
            =
            {   a=rw_vector::from_list (action_rows);

                \\ i =   rw_vector::get (a, i);
            };

        rw_vector::from_list (map action_row_lookup action_row_numbers);
    };

    lr_table::make_lr_table {
        actions => action_table,
        gotos   => goto_table,
        rule_count   => numrules,
        state_count  => numstates,
        initial_state => STATE 0   };
};
end;
stipulate include package   header; herein
Source_Position = Int;
Arg = ((Source_Position, Source_Position) -> error_message::Plaint_Sink);
package values { 
Semantic_Value = TM_VOID | NT_VOID  Void -> Void | ANTIQUOTE_ID Void ->  (fast_symbol::Raw_Symbol) | CHUNKL Void ->  (String) | ENDQ Void ->  (String) | CHAR Void ->  (String)
 | STRING Void ->  (String) | PRE_COMPILE_CODE Void ->  (String) | DOT_HASHETS Void ->  (String) | DOT_SLASHETS Void ->  (String) | DOT_BARETS Void ->  (String) | DOT_BROKETS Void ->  (String)
 | DOT_QUOTES Void ->  (String) | DOT_QQUOTES Void ->  (String) | DOT_BACKTICKS Void ->  (String) | BACKTICKS Void ->  (String) | FLOAT Void ->  (String) | UNT Void ->  (multiword_int::Int)
 | INT0 Void ->  (multiword_int::Int) | INT Void ->  (multiword_int::Int) | TYVAR Void ->  (fast_symbol::Raw_Symbol) | BOGUSCASE_ID Void ->  (fast_symbol::Raw_Symbol)
 | POSTFIX_OP_ID Void ->  (fast_symbol::Raw_Symbol) | PREFIX_OP_ID Void ->  (fast_symbol::Raw_Symbol) | PASSIVEOP_ID Void ->  (fast_symbol::Raw_Symbol)
 | OPERATORS_PATH Void ->  (fast_symbol::Raw_Symbol) | OPERATORS_ID Void ->  (fast_symbol::Raw_Symbol) | UPPERCASE_PATH Void ->  (fast_symbol::Raw_Symbol)
 | UPPERCASE_ID Void ->  (fast_symbol::Raw_Symbol) | MIXEDCASE_PATH Void ->  (fast_symbol::Raw_Symbol) | MIXEDCASE_ID Void ->  (fast_symbol::Raw_Symbol)
 | LOWERCASE_PATH Void ->  (fast_symbol::Raw_Symbol) | LOWERCASE_ID Void ->  (fast_symbol::Raw_Symbol) | IMPLICIT_THUNK_PARAMETER Void ->  (fast_symbol::Raw_Symbol)
 | QQ_GENERIC_EXPRESSION Void ->  (Package_Cast Generic_Api_Expression -> Generic_Expression ) | QQ_GENERIC_NAMING Void ->  (List Named_Generic )
 | QQ_GENERIC_PARAMETER_LIST Void ->  (List ( (Null_Or Symbol, Api_Expression) ) ) | QQ_GENERIC_PARAMETER Void ->  ((Null_Or Symbol, Api_Expression)) | QQ_NAMED_CLASS2ES Void ->  (List Named_Package )
 | QQ_NAMED_CLASSES Void ->  (List Named_Package ) | QQ_NAMED_PACKAGES Void ->  (List Named_Package ) | QQ_TOPLEVEL_DECLARATIONS Void ->  (Declaration)
 | QQ_MAYBE_TOPLEVEL_DECLARATIONS Void ->  (Declaration) | QQ_TOPLEVEL_DECLARATION Void ->  (Declaration) | QQ_TOPLEVEL Void ->  (Declaration) | QQ_MAYBE_PKG_ELEMENTS Void ->  (Declaration)
 | QQ_PKG_ELEMENTS Void ->  (Declaration) | QQ_PKG_ELEMENT Void ->  (Declaration) | QQ_GENERIC_ARG Void ->  (List ( (Package_Expression, Bool) ) ) | QQ_A_PACKAGE Void ->  (Package_Expression)
 | QQ_FSIG Void ->  (Generic_Api_Expression) | QQ_GENERIC_API_NAMING Void ->  (List Named_Generic_Api ) | QQ_API_NAMING Void ->  (List Named_Api )
 | QQ_MAYBE_GENERIC_API_CONSTRAINT_OP Void ->  (Package_Cast Generic_Api_Expression ) | QQ_MAYBE_API_CONSTRAINT_OP Void ->  (Package_Cast Api_Expression ) | QQ_AN_API Void ->  (Api_Expression)
 | QQ_WHERE_SPEC Void ->  (List Where_Spec ) | QQ_TYPEPATHEQN Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List List Symbol  )
 | QQ_PATHEQN Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List List Symbol  ) | QQ_SHARESPEC Void ->  (List Api_Element ) | QQ_EXCEPTION_IN_API Void ->  (List ( (Symbol, Null_Or Any_Type) ) )
 | QQ_VALUE_IN_API Void ->  (List ( (Symbol, Any_Type) ) ) | QQ_TYPE_IN_API Void ->  (List ( (Symbol, List Typevar, Null_Or Any_Type) ) )
 | QQ_GENERIC_IN_API Void ->  (List ( (Symbol, Generic_Api_Expression) ) ) | QQ_PACKAGE_IN_API Void ->  (List ( (Symbol, Api_Expression, Null_Or Path) ) ) | QQ_API_ELEMENT Void ->  (List Api_Element )
 | QQ_MAYBE_API_ELEMENTS Void ->  (List Api_Element ) | QQ_API_ELEMENTS Void ->  (List Api_Element ) | QQ_OPS Void ->  (List Symbol ) | QQ_DECLARATIONS Void ->  (Declaration)
 | QQ_MAYBE_DECLARATIONS Void ->  (Declaration) | QQ_OVERLOADED_EXPRESSION Void ->  (Raw_Expression) | QQ_OVERLOADED_EXPRESSIONS Void ->  (List Raw_Expression )
 | QQ_DECLARATION_OR_LOCAL Void ->  (Declaration) | QQ_DECLARATION Void ->  (Declaration) | QQ_FIXITY Void ->  (Fixity) | QQ_PACKAGE_IN_IMPORT Void ->  (List List symbol::Symbol  )
 | QQ_EB Void ->  (List Named_Exception ) | QQ_CONSTRUCTOR Void ->  ((Symbol, Null_Or Any_Type)) | QQ_CONSTRUCTORS Void ->  (List ( (Symbol, Null_Or Any_Type )) )
 | QQ_SUMTYPES Void ->  (List Sumtype ) | QQ_TYVAR_PC Void ->  (List Typevar ) | QQ_TYVARSEQ Void ->  (List Typevar ) | QQ_TYPEVARS Void ->  (List Typevar )
 | QQ_NAMED_TYPES Void ->  (List Named_Type ) | QQ_DARROW_CLAUSE Void ->  (Pattern_Clause) | QQ_EQ_CLAUSE Void ->  (Pattern_Clause) | QQ_FUN_APATS Void ->  (List Fixity_Item Case_Pattern  )
 | QQ_APATS Void ->  (List Fixity_Item Case_Pattern  ) | QQ_MESSAGE_DECLS Void ->  (List Named_Function ) | QQ_METHOD_DECLS Void ->  (List Named_Function ) | QQ_MAYBE_LAZY Void ->  (Bool)
 | QQ_FUN_DECLS Void ->  (List Named_Function ) | QQ_DARROW_CLAUSES Void ->  (List Pattern_Clause ) | QQ_FUN_CLAUSES Void ->  (List Pattern_Clause ) | QQ_RVB Void ->  (List Named_Recursive_Value )
 | QQ_CONSTRAINT Void ->  (Null_Or Any_Type ) | QQ_FIELDS Void ->  (List Named_Field ) | QQ_VB Void ->  (List Named_Value ) | QQ_OR_PAT_LIST Void ->  (List Case_Pattern )
 | QQ_PAT_LIST Void ->  (List Case_Pattern ) | QQ_PAT_2C Void ->  (List Case_Pattern ) | QQ_PLABELS Void ->  ((List ((Symbol, Case_Pattern)), Bool)) | QQ_PLABEL Void ->  ((Symbol, Case_Pattern))
 | QQ_POSTFIX_PAT Void ->  (Fixity_Item Case_Pattern ) | QQ_APAT' Void ->  (Case_Pattern) | QQ_APAT Void ->  (Fixity_Item Case_Pattern ) | QQ_FUN_APAT Void ->  (Fixity_Item Case_Pattern )
 | QQ_PATTERN Void ->  (Case_Pattern) | QQ_OT_LIST Void ->  (List Raw_Expression ) | QQ_QUOTE Void ->  (List Raw_Expression ) | QQ_EXPRESSIONS_2_N Void ->  (List Raw_Expression )
 | QQ_EXPRESSIONS_1_N Void ->  (List Raw_Expression ) | QQ_ELIFS Void ->  (Raw_Expression) | QQ_LIST_COMPREHENSION_CLAUSES Void ->  (List ( elc::List_Comprehension_Clause ) )
 | QQ_LIST_COMPREHENSION_WHERE_CLAUSE Void ->  (elc::List_Comprehension_Clause) | QQ_LIST_COMPREHENSION_FOR_CLAUSE Void ->  (elc::List_Comprehension_Clause)
 | QQ_LIST_COMPREHENSION_RESULT_CLAUSE Void ->  (elc::List_Comprehension_Clause) | QQ_LIST_COMPREHENSION Void ->  (Raw_Expression) | QQ_ATOMIC_EXP Void ->  (Raw_Expression)
 | QQ_DOT_EXP Void ->  (List Fixity_Item Raw_Expression  ) | QQ_POSTFIX_EXP Void ->  (List Fixity_Item Raw_Expression  ) | QQ_PREFIX_EXP Void ->  (List Fixity_Item Raw_Expression  )
 | QQ_APP_EXP Void ->  (List Fixity_Item Raw_Expression  ) | QQ_DECLARATION_OR_EXPRESSION Void ->  (Declaration) | QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS Void ->  (List Declaration )
 | QQ_BLOCK_CONTENTS Void ->  (Raw_Expression) | QQ_REGULAR_EXPRESSIONS Void ->  (List ( Regular_Expression ) ) | QQ_REGULAR_EXPRESSION Void ->  (Regular_Expression)
 | QQ_MODIFIED_REGULAR_EXPRESSION Void ->  (Regular_Expression) | QQ_EXPRESSIONC Void ->  (Raw_Expression) | QQ_EXPRESSIONB Void ->  (Raw_Expression) | QQ_EXPRESSION Void ->  (Raw_Expression)
 | QQ_LOOP_DECLARATIONS Void ->  (List ( (Declaration, Int, Int) ) ) | QQ_INIT_EXPRESSIONS Void ->  (List ( ((Raw_Symbol, Int, Int), (Raw_Expression, Int, Int))) )
 | QQ_RECORD_ELEMENTS Void ->  (List ( (Symbol, Raw_Expression)) ) | QQ_RECORD_ELEMENT Void ->  ((Symbol, Raw_Expression)) | QQ_DARROW_RULE Void ->  (Case_Rule) | QQ_EQ_RULE Void ->  (Case_Rule)
 | QQ_DARROW_RULES Void ->  (List Case_Rule ) | QQ_CASE_MATCH Void ->  (List Case_Rule ) | QQ_TY0_PC Void ->  (List Any_Type ) | QQ_ANYTYPE Void ->  (Any_Type) | QQ_TUPLE_TY Void ->  (List Any_Type )
 | QQ_ANYTYPE' Void ->  (Any_Type) | QQ_TYPED_SELECTORS Void ->  (List ( (Symbol, Any_Type) ) ) | QQ_TYPED_SELECTOR Void ->  ((Symbol, Any_Type)) | QQ_TYPE Void ->  (List Symbol )
 | QQ_SELECTOR Void ->  (Symbol) | QQ_VALUE_PATH Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol ) | QQ_UPPERCASE Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol )
 | QQ_MIXEDCASE Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol ) | QQ_LOWERCASE Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol )
 | QQ_OPERATORS_PATH Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol ) | QQ_LOWERCASE_PATH Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol )
 | QQ_MIXEDCASE_PATH Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol ) | QQ_UPPERCASE_PATH Void ->  ((fast_symbol::Raw_Symbol -> Symbol) -> List Symbol )
 | QQ_INT Void ->  (multiword_int::Int) | QQ_PACKAGE Void ->  (Void) | QQ_BAR Void ->  (fast_symbol::Raw_Symbol) | QQ_OPERATORS_ID Void ->  (fast_symbol::Raw_Symbol)
 | QQ_LVALUE_OR_BAR Void ->  (fast_symbol::Raw_Symbol) | QQ_LOWERCASE_ID Void ->  (fast_symbol::Raw_Symbol) | QQ_LVALUE_ID Void ->  (fast_symbol::Raw_Symbol)
 | QQ_POSTFIX_OP Void ->  (fast_symbol::Raw_Symbol) | QQ_PREFIX_OP Void ->  (fast_symbol::Raw_Symbol) | QQ_NONPREFIX_VALUE_OR_BAR Void ->  (fast_symbol::Raw_Symbol)
 | QQ_VALUE_OR_BAR Void ->  (fast_symbol::Raw_Symbol) | QQ_VALUE_ID Void ->  (fast_symbol::Raw_Symbol);
};
Semantic_Value = values::Semantic_Value;
Result = Declaration;
end;
package error_recovery{
include package lr_table;
infix my 60 @@;
fun x @@ y = y ! x;
is_keyword =
\\ (TERM 31) => TRUE; (TERM 34) => TRUE; (TERM 35) => TRUE; (TERM 36) => TRUE; (TERM 37) => TRUE; (TERM 38) => TRUE; (TERM 39) => TRUE; (TERM 40) => TRUE; (TERM 41) => TRUE; (TERM 44) => TRUE; (TERM 
46) => TRUE; (TERM 47) => TRUE; (TERM 131) => TRUE; (TERM 132) => TRUE; (TERM 133) => TRUE; (TERM 134) => TRUE; (TERM 137) => TRUE; (TERM 129) => TRUE; (TERM 139) => TRUE; (TERM 140) => TRUE; (TERM 
142) => TRUE; (TERM 143) => TRUE; (TERM 144) => TRUE; (TERM 145) => TRUE; (TERM 147) => TRUE; (TERM 148) => TRUE; (TERM 149) => TRUE; (TERM 151) => TRUE; (TERM 153) => TRUE; (TERM 32) => TRUE; (TERM 
155) => TRUE; (TERM 157) => TRUE; (TERM 160) => TRUE; (TERM 162) => TRUE; (TERM 174) => TRUE; (TERM 175) => TRUE; _ => FALSE; end;
my preferred_change:   List( (List( Terminal ), List( Terminal )) ) = 
(NIL
, NIL
 @@ (TERM 148)) ! 
(NIL
, NIL
 @@ (TERM 39)) ! 
(NIL
, NIL
 @@ (TERM 171)) ! 
(NIL
, NIL
 @@ (TERM 1)) ! 
(NIL
 @@ (TERM 47), NIL
 @@ (TERM 42)) ! 
(NIL
 @@ (TERM 42), NIL
 @@ (TERM 47)) ! 
(NIL
 @@ (TERM 31), NIL
 @@ (TERM 175)) ! 
(NIL
 @@ (TERM 1), NIL
 @@ (TERM 169)) ! 
(NIL
 @@ (TERM 169), NIL
 @@ (TERM 1)) ! 
(NIL
, NIL
 @@ (TERM 3) @@ (TERM 39)) ! 
NIL;
no_shift = 
\\ (TERM 0) => TRUE; _ => FALSE; end;
show_terminal =
\\ (TERM 0) => "EOF"
; (TERM 1) => "SEMI"
; (TERM 2) => "IMPLICIT_THUNK_PARAMETER"
; (TERM 3) => "LOWERCASE_ID"
; (TERM 4) => "LOWERCASE_PATH"
; (TERM 5) => "MIXEDCASE_ID"
; (TERM 6) => "MIXEDCASE_PATH"
; (TERM 7) => "UPPERCASE_ID"
; (TERM 8) => "UPPERCASE_PATH"
; (TERM 9) => "OPERATORS_ID"
; (TERM 10) => "OPERATORS_PATH"
; (TERM 11) => "PASSIVEOP_ID"
; (TERM 12) => "PREFIX_OP_ID"
; (TERM 13) => "POSTFIX_OP_ID"
; (TERM 14) => "BOGUSCASE_ID"
; (TERM 15) => "TYVAR"
; (TERM 16) => "INT"
; (TERM 17) => "INT0"
; (TERM 18) => "UNT"
; (TERM 19) => "FLOAT"
; (TERM 20) => "BACKTICKS"
; (TERM 21) => "DOT_BACKTICKS"
; (TERM 22) => "DOT_QQUOTES"
; (TERM 23) => "DOT_QUOTES"
; (TERM 24) => "DOT_BROKETS"
; (TERM 25) => "DOT_BARETS"
; (TERM 26) => "DOT_SLASHETS"
; (TERM 27) => "DOT_HASHETS"
; (TERM 28) => "PRE_COMPILE_CODE"
; (TERM 29) => "STRING"
; (TERM 30) => "CHAR"
; (TERM 31) => "ALSO_T"
; (TERM 32) => "API_T"
; (TERM 33) => "ARROW"
; (TERM 34) => "AS_T"
; (TERM 35) => "CASE_T"
; (TERM 36) => "CLASS_T"
; (TERM 37) => "CLASS2_T"
; (TERM 38) => "DOTDOTDOT"
; (TERM 39) => "ELSE_T"
; (TERM 40) => "ELIF_T"
; (TERM 41) => "END_T"
; (TERM 42) => "EQUAL_OP"
; (TERM 43) => "EQEQ_OP"
; (TERM 44) => "EQTYPE_T"
; (TERM 45) => "ESAC_T"
; (TERM 46) => "EXCEPTION_T"
; (TERM 47) => "DARROW"
; (TERM 48) => "PRE_PLUSPLUS"
; (TERM 49) => "PLUS_PLUS"
; (TERM 50) => "PLUSPLUS_EQ"
; (TERM 51) => "POST_PLUSPLUS"
; (TERM 52) => "PRE_DASHDASH"
; (TERM 53) => "DASH_DASH"
; (TERM 54) => "DASHDASH_EQ"
; (TERM 55) => "POST_DASHDASH"
; (TERM 56) => "PRE_BAR"
; (TERM 57) => "BAR"
; (TERM 58) => "BAR_EQ"
; (TERM 59) => "POST_BAR"
; (TERM 60) => "PRE_LANGLE"
; (TERM 61) => "LANGLE"
; (TERM 62) => "RANGLE"
; (TERM 63) => "POST_RANGLE"
; (TERM 64) => "PRE_LBRACE"
; (TERM 65) => "LBRACE"
; (TERM 66) => "RBRACE"
; (TERM 67) => "POST_RBRACE"
; (TERM 68) => "LBRACKET"
; (TERM 69) => "POST_LBRACKET"
; (TERM 70) => "PRE_AMPER"
; (TERM 71) => "AMPER"
; (TERM 72) => "AMPER_EQ"
; (TERM 73) => "POST_AMPER"
; (TERM 74) => "PRE_ATSIGN"
; (TERM 75) => "ATSIGN"
; (TERM 76) => "ATSIGN_EQ"
; (TERM 77) => "POST_ATSIGN"
; (TERM 78) => "PRE_BACK"
; (TERM 79) => "BACK"
; (TERM 80) => "BACK_EQ"
; (TERM 81) => "POST_BACK"
; (TERM 82) => "PRE_BANG"
; (TERM 83) => "BANG"
; (TERM 84) => "BANG_EQ"
; (TERM 85) => "POST_BANG"
; (TERM 86) => "PRE_BUCK"
; (TERM 87) => "BUCK"
; (TERM 88) => "BUCK_EQ"
; (TERM 89) => "POST_BUCK"
; (TERM 90) => "PRE_CARET"
; (TERM 91) => "CARET"
; (TERM 92) => "CARET_EQ"
; (TERM 93) => "POST_CARET"
; (TERM 94) => "PRE_DASH"
; (TERM 95) => "DASH"
; (TERM 96) => "DASH_EQ"
; (TERM 97) => "POST_DASH"
; (TERM 98) => "PRE_DOT"
; (TERM 99) => "DOT"
; (TERM 100) => "DOT_EQ"
; (TERM 101) => "PRE_DOTDOT"
; (TERM 102) => "DOTDOT"
; (TERM 103) => "DOTDOT_EQ"
; (TERM 104) => "POST_DOTDOT"
; (TERM 105) => "PRE_PERCNT"
; (TERM 106) => "PERCNT"
; (TERM 107) => "PERCNT_EQ"
; (TERM 108) => "POST_PERCNT"
; (TERM 109) => "PRE_PLUS"
; (TERM 110) => "PLUS"
; (TERM 111) => "PLUS_EQ"
; (TERM 112) => "POST_PLUS"
; (TERM 113) => "PRE_QMARK"
; (TERM 114) => "QMARK"
; (TERM 115) => "QMARK_EQ"
; (TERM 116) => "POST_QMARK"
; (TERM 117) => "PRE_SLASH"
; (TERM 118) => "SLASH"
; (TERM 119) => "SLASH_EQ"
; (TERM 120) => "POST_SLASH"
; (TERM 121) => "PRE_STAR"
; (TERM 122) => "STAR"
; (TERM 123) => "STAR_EQ"
; (TERM 124) => "POST_STAR"
; (TERM 125) => "PRE_TILDA"
; (TERM 126) => "TILDA"
; (TERM 127) => "TILDA_EQ"
; (TERM 128) => "POST_TILDA"
; (TERM 129) => "EXCEPT_T"
; (TERM 130) => "FI_T"
; (TERM 131) => "FIELD_T"
; (TERM 132) => "FN_T"
; (TERM 133) => "FOR_T"
; (TERM 134) => "FUN_T"
; (TERM 135) => "FPRINTF_T"
; (TERM 136) => "POSTFIX_ARROW"
; (TERM 137) => "GENERIC_T"
; (TERM 138) => "HASH"
; (TERM 139) => "HEREIN_T"
; (TERM 140) => "IF_T"
; (TERM 141) => "IN_T"
; (TERM 142) => "INCLUDE_T"
; (TERM 143) => "INFIX_T"
; (TERM 144) => "INFIXR_T"
; (TERM 145) => "LAZY_T"
; (TERM 146) => "MESSAGE_T"
; (TERM 147) => "METHOD_T"
; (TERM 148) => "MY_T"
; (TERM 149) => "NONFIX_T"
; (TERM 150) => "OVERLOADED_T"
; (TERM 151) => "RAISE_T"
; (TERM 152) => "RECURSIVE_T"
; (TERM 153) => "SHARING_T"
; (TERM 154) => "SPRINTF_T"
; (TERM 155) => "PACKAGE_T"
; (TERM 156) => "PRINTF_T"
; (TERM 157) => "STIPULATE_T"
; (TERM 158) => "TILDA_TILDA"
; (TERM 159) => "WHAT_WHAT"
; (TERM 160) => "WHERE_T"
; (TERM 161) => "WILD"
; (TERM 162) => "WITHTYPE_T"
; (TERM 163) => "COLON"
; (TERM 164) => "WEAK_PACKAGE_CAST"
; (TERM 165) => "PARTIAL_PACKAGE_CAST"
; (TERM 166) => "COLON_COLON"
; (TERM 167) => "COLON_WHAT"
; (TERM 168) => "WHAT_COLON"
; (TERM 169) => "COMMA"
; (TERM 170) => "LBRACE_DOT"
; (TERM 171) => "LPAREN"
; (TERM 172) => "RBRACKET"
; (TERM 173) => "RPAREN"
; (TERM 174) => "OR_T"
; (TERM 175) => "AND_T"
; (TERM 176) => "VECTORSTART"
; (TERM 177) => "BEGINQ"
; (TERM 178) => "ENDQ"
; (TERM 179) => "CHUNKL"
; (TERM 180) => "ANTIQUOTE_ID"
; _ => "bogus-term"; end;
stipulate include package   header; herein
errtermvalue=
\\ (TERM 4) => values::LOWERCASE_PATH(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 6) => values::MIXEDCASE_PATH(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 8) => values::UPPERCASE_PATH(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 10) => values::OPERATORS_PATH(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 3) => values::LOWERCASE_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 5) => values::MIXEDCASE_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 7) => values::UPPERCASE_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 14) => values::BOGUSCASE_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 9) => values::OPERATORS_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 11) => values::PASSIVEOP_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 12) => values::PREFIX_OP_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 13) => values::POSTFIX_OP_ID(\\ () = (raw_symbol (bogus_hash, bogus_string))); 
(TERM 15) => values::TYVAR(\\ () = (raw_symbol (dollar_bogus_hash, dollar_bogus_string))); 
(TERM 16) => values::INT(\\ () = (multiword_int::from_int 1)); 
(TERM 17) => values::INT0(\\ () = (multiword_int::from_int 0)); 
(TERM 18) => values::UNT(\\ () = (multiword_int::from_int 0)); 
(TERM 19) => values::FLOAT(\\ () = ("0.0")); 
(TERM 29) => values::STRING(\\ () = ("")); 
(TERM 30) => values::CHAR(\\ () = ("a")); 
_ => values::TM_VOID;
 end; end;
my terms:  List( Terminal ) = NIL
 @@ (TERM 177) @@ (TERM 176) @@ (TERM 175) @@ (TERM 174) @@ (TERM 173) @@ (TERM 172) @@ (TERM 171) @@ (TERM 170) @@ (TERM 169) @@ (TERM 168) @@ (TERM 167) @@ (TERM 166) @@ (TERM 165) @@ (TERM 164) @@ 
(TERM 163) @@ (TERM 162) @@ (TERM 161) @@ (TERM 160) @@ (TERM 159) @@ (TERM 158) @@ (TERM 157) @@ (TERM 156) @@ (TERM 155) @@ (TERM 154) @@ (TERM 153) @@ (TERM 152) @@ (TERM 151) @@ (TERM 150) @@ 
(TERM 149) @@ (TERM 148) @@ (TERM 147) @@ (TERM 146) @@ (TERM 145) @@ (TERM 144) @@ (TERM 143) @@ (TERM 142) @@ (TERM 141) @@ (TERM 140) @@ (TERM 139) @@ (TERM 138) @@ (TERM 137) @@ (TERM 136) @@ 
(TERM 135) @@ (TERM 134) @@ (TERM 133) @@ (TERM 132) @@ (TERM 131) @@ (TERM 130) @@ (TERM 129) @@ (TERM 128) @@ (TERM 127) @@ (TERM 126) @@ (TERM 125) @@ (TERM 124) @@ (TERM 123) @@ (TERM 122) @@ 
(TERM 121) @@ (TERM 120) @@ (TERM 119) @@ (TERM 118) @@ (TERM 117) @@ (TERM 116) @@ (TERM 115) @@ (TERM 114) @@ (TERM 113) @@ (TERM 112) @@ (TERM 111) @@ (TERM 110) @@ (TERM 109) @@ (TERM 108) @@ 
(TERM 107) @@ (TERM 106) @@ (TERM 105) @@ (TERM 104) @@ (TERM 103) @@ (TERM 102) @@ (TERM 101) @@ (TERM 100) @@ (TERM 99) @@ (TERM 98) @@ (TERM 97) @@ (TERM 96) @@ (TERM 95) @@ (TERM 94) @@ (TERM 93)
 @@ (TERM 92) @@ (TERM 91) @@ (TERM 90) @@ (TERM 89) @@ (TERM 88) @@ (TERM 87) @@ (TERM 86) @@ (TERM 85) @@ (TERM 84) @@ (TERM 83) @@ (TERM 82) @@ (TERM 81) @@ (TERM 80) @@ (TERM 79) @@ (TERM 78) @@ 
(TERM 77) @@ (TERM 76) @@ (TERM 75) @@ (TERM 74) @@ (TERM 73) @@ (TERM 72) @@ (TERM 71) @@ (TERM 70) @@ (TERM 69) @@ (TERM 68) @@ (TERM 67) @@ (TERM 66) @@ (TERM 65) @@ (TERM 64) @@ (TERM 63) @@ 
(TERM 62) @@ (TERM 61) @@ (TERM 60) @@ (TERM 59) @@ (TERM 58) @@ (TERM 57) @@ (TERM 56) @@ (TERM 55) @@ (TERM 54) @@ (TERM 53) @@ (TERM 52) @@ (TERM 51) @@ (TERM 50) @@ (TERM 49) @@ (TERM 48) @@ 
(TERM 47) @@ (TERM 46) @@ (TERM 45) @@ (TERM 44) @@ (TERM 43) @@ (TERM 42) @@ (TERM 41) @@ (TERM 40) @@ (TERM 39) @@ (TERM 38) @@ (TERM 37) @@ (TERM 36) @@ (TERM 35) @@ (TERM 34) @@ (TERM 33) @@ 
(TERM 32) @@ (TERM 31) @@ (TERM 1) @@ (TERM 0);
};
package actions {
exception MLY_ACTION Int;
stipulate include package   header; herein
actions = 
\\ (i392, default_position, stack, 
    (error): Arg) = 
case (i392, stack)
  ( 0,  ( ( _,  ( values::UPPERCASE_PATH uppercase_path1,  uppercase_path1left,  uppercase_path1right)) !  rest671)) => {  my  result = values::QQ_UPPERCASE_PATH (\\  _ =  {  my  (uppercase_path as 
uppercase_path1) = uppercase_path1 ();
 (
   # Handle a string like "foo::bar::ZOT".
                                            # This needs to become a string of typed symbols
                                            # [foo, bar, ZOT], but we don't know what kind
                                            # to make the last symbol yet, so we return
                                            # a closure that will generate the desired list
                                            # once supplied with the proper symbol-making
                                            # function ('kind'):
					    #
                                            {   convert tokens
						where
						    uppercase_path ->   RAWSYM( word, string );		# String will be "foo::bar::ZOT" or such.

						    tokens = string::tokens
								 (\\ c =  c == ':')		# Break string into tokens at ':' boundaries.
								 string;

						    fun convert []
							    =>
							    {   exception IMPOSSIBLE;
								raise exception IMPOSSIBLE;		# XXX BUGGO FIXME Should use some standard global exception here
							    };

							convert [a]
							    =>
							    (\\ kind =  [kind (RAWSYM(hs::hash_string a, a))]);

							 convert (first ! rest)
							     =>
							     {   rest = convert rest;

								 (\\ kind =  make_package_symbol (RAWSYM(hs::hash_string first, first))
									     !
									     rest kind);
							     };
						    end;
						end;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 12,  ( result,  uppercase_path1left,  uppercase_path1right),  rest671);
 } 
;  ( 1,  ( ( _,  ( values::MIXEDCASE_PATH mixedcase_path1,  mixedcase_path1left,  mixedcase_path1right)) !  rest671)) => {  my  result = values::QQ_MIXEDCASE_PATH (\\  _ =  {  my  (mixedcase_path as 
mixedcase_path1) = mixedcase_path1 ();
 (
   # Handle a string like "foo::bar::Zot".
                                            # This needs to become a string of typed symbols
                                            # [foo, bar, Zot], but we don't know what kind
                                            # to make the last symbol yet, so we return
                                            # a closure that will generate the desired list
                                            # once supplied with the proper symbol-making
                                            # function ('kind'):
					    #
                                            {   convert tokens
						where
						    mixedcase_path ->   RAWSYM( word, string );	# String will be "foo::bar::Zot" or such.

						    tokens = string::tokens
								 (\\ c =   c == ':')		# Break string into tokens at ':' boundaries.
								 string;

						    fun convert []
							    =>
							    {   exception IMPOSSIBLE;
								raise exception IMPOSSIBLE;		# XXX BUGGO FIXME Should use some standard global exception here
							    };

							convert [a]
							    =>
							    (\\ kind =  [kind (RAWSYM(hs::hash_string a, a))]);

							 convert (first ! rest)
							     =>
							     {   rest = convert rest;

								 (\\ kind =  make_package_symbol (RAWSYM(hs::hash_string first, first))
									     !
									     rest kind);
							     };
						    end;
						end;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 13,  ( result,  mixedcase_path1left,  mixedcase_path1right),  rest671);
 } 
;  ( 2,  ( ( _,  ( values::LOWERCASE_PATH lowercase_path1,  lowercase_path1left,  lowercase_path1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_PATH (\\  _ =  {  my  (lowercase_path as 
lowercase_path1) = lowercase_path1 ();
 (
   # Handle a string like "foo::bar::zot".
                                            # This needs to become a list of typed symbols
                                            # [foo, bar, zot], but we don't know what kind
                                            # to make the last symbol yet, so we return
                                            # a closure that will generate the desired list
                                            # once supplied with the proper symbol-making
                                            # function ('kind'):
					    #
					    {   convert tokens
						where
                                                    lowercase_path ->   RAWSYM( _, path_string );			# String will be "foo::bar::zot" or such.

						    tokens = string::tokens
								 (\\ c =   c == ':')		# Break string into tokens at ':' boundaries.
								 path_string;

						    fun convert []
							    =>
							    {   exception IMPOSSIBLE;
								raise exception IMPOSSIBLE;		# XXX BUGGO FIXME Should use some standard global exception here
							    };

							convert [a]
							    =>
							    (\\ kind =  [kind (RAWSYM(hs::hash_string a, a))]);

							 convert (first ! rest)
							     =>
							     {   rest = convert rest;

								 (\\ kind =  make_package_symbol (RAWSYM(hs::hash_string first, first))
									     !
									     rest kind);
							     };
						    end;
						end;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 14,  ( result,  lowercase_path1left,  lowercase_path1right),  rest671);
 } 
;  ( 3,  ( ( _,  ( values::OPERATORS_PATH operators_path1,  operators_path1left,  operators_path1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_PATH (\\  _ =  {  my  (operators_path as 
operators_path1) = operators_path1 ();
 (
   # Handle a string like "foo::bar::(++)".
                                            # This needs to become a string of typed symbols
                                            # [foo, bar, ++], but we don't know what kind
                                            # to make the last symbol yet, so we return
                                            # a closure that will generate the desired list
                                            # once supplied with the proper symbol-making
                                            # function ('kind'):
					    #
					    {   convert tokens
						where
                                                    operators_path ->   RAWSYM( word, string );		# 'string' will be "foo::bar::(++)" or such.

						    tokens = explode_path string;			# Convert "foo::bar::(++)" to ["foo", "bar", "(++)"]

						    fun convert []
							    =>
							    {   exception IMPOSSIBLE;
								raise exception IMPOSSIBLE;		# XXX BUGGO FIXME Should use some standard global exception here
							    };

							convert [a]		# 'a' will be `(++)` or such.
							    =>
							    {   a = substring::from_string  a;		# Convert `(++)` from String to Substring.
								a = substring::drop_first 1 a;		# Drop left  paren.
								a = substring::drop_last  1 a;		# Drop right paren.
								a = substring::to_string    a;		# Convert back to a string.
								#
								(\\ kind =  [kind (RAWSYM(hs::hash_string a, a))]);
							    };

							 convert (first ! rest)
							     =>
							     {   rest = convert rest;

								 (\\ kind =  make_package_symbol (RAWSYM(hs::hash_string first, first))
									     !
									     rest kind);
							     };
						    end;
						end;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 15,  ( result,  operators_path1left,  operators_path1right),  rest671);
 } 
;  ( 4,  ( ( _,  ( values::INT int1,  int1left,  int1right)) !  rest671)) => {  my  result = values::QQ_INT (\\  _ =  {  my  (int as int1) = int1 ();
 (int);
 } );
 ( lr_table::NONTERM 11,  ( result, 
 int1left,  int1right),  rest671);
 } 
;  ( 5,  ( ( _,  ( values::INT0 int01,  int01left,  int01right)) !  rest671)) => {  my  result = values::QQ_INT (\\  _ =  {  my  (int0 as int01) = int01 ();
 (int0);
 } );
 ( lr_table::NONTERM 11,  ( 
result,  int01left,  int01right),  rest671);
 } 
;  ( 6,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  {  my  (uppercase_id as 
uppercase_id1) = uppercase_id1 ();
 (uppercase_id);
 } );
 ( lr_table::NONTERM 2,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 7,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 (lowercase_id);
 } );
 ( lr_table::NONTERM 2,  ( result,  lowercase_id1left,  lowercase_id1right),  rest671);
 } 
;  ( 8,  ( ( _,  ( values::QQ_BAR bar1,  bar1left,  bar1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  {  my  (bar as bar1) = bar1 ();
 (bar);
 } );
 ( 
lr_table::NONTERM 2,  ( result,  bar1left,  bar1right),  rest671);
 } 
;  ( 9,  ( ( _,  ( values::OPERATORS_ID operators_id1,  operators_id1left,  operators_id1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  {  my  (operators_id as 
operators_id1) = operators_id1 ();
 (operators_id);
 } );
 ( lr_table::NONTERM 2,  ( result,  operators_id1left,  operators_id1right),  rest671);
 } 
;  ( 10,  ( ( _,  ( _,  amper1left,  amper1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (amper_hash,    amper_string)));
 ( lr_table::NONTERM 2,  ( 
result,  amper1left,  amper1right),  rest671);
 } 
;  ( 11,  ( ( _,  ( _,  atsign1left,  atsign1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (atsign_hash,   atsign_string)));
 ( lr_table::NONTERM 2,  
( result,  atsign1left,  atsign1right),  rest671);
 } 
;  ( 12,  ( ( _,  ( _,  back1left,  back1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (back_hash,     back_string)));
 ( lr_table::NONTERM 2,  ( 
result,  back1left,  back1right),  rest671);
 } 
;  ( 13,  ( ( _,  ( _,  bang1left,  bang1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (bang_hash,     bang_string)));
 ( lr_table::NONTERM 2,  ( 
result,  bang1left,  bang1right),  rest671);
 } 
;  ( 14,  ( ( _,  ( _,  buck1left,  buck1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (buck_hash,     buck_string)));
 ( lr_table::NONTERM 2,  ( 
result,  buck1left,  buck1right),  rest671);
 } 
;  ( 15,  ( ( _,  ( _,  caret1left,  caret1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (caret_hash,    caret_string)));
 ( lr_table::NONTERM 2,  ( 
result,  caret1left,  caret1right),  rest671);
 } 
;  ( 16,  ( ( _,  ( _,  dash1left,  dash1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (dash_hash,     dash_string)));
 ( lr_table::NONTERM 2,  ( 
result,  dash1left,  dash1right),  rest671);
 } 
;  ( 17,  ( ( _,  ( _,  percnt1left,  percnt1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (percnt_hash,   percnt_string)));
 ( lr_table::NONTERM 2,  
( result,  percnt1left,  percnt1right),  rest671);
 } 
;  ( 18,  ( ( _,  ( _,  plus1left,  plus1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (plus_hash,     plus_string)));
 ( lr_table::NONTERM 2,  ( 
result,  plus1left,  plus1right),  rest671);
 } 
;  ( 19,  ( ( _,  ( _,  qmark1left,  qmark1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (qmark_hash,    qmark_string)));
 ( lr_table::NONTERM 2,  ( 
result,  qmark1left,  qmark1right),  rest671);
 } 
;  ( 20,  ( ( _,  ( _,  slash1left,  slash1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (slash_hash,    slash_string)));
 ( lr_table::NONTERM 2,  ( 
result,  slash1left,  slash1right),  rest671);
 } 
;  ( 21,  ( ( _,  ( _,  star1left,  star1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (star_hash,     star_string)));
 ( lr_table::NONTERM 2,  ( 
result,  star1left,  star1right),  rest671);
 } 
;  ( 22,  ( ( _,  ( _,  tilda1left,  tilda1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (tilda_hash,    tilda_string)));
 ( lr_table::NONTERM 2,  ( 
result,  tilda1left,  tilda1right),  rest671);
 } 
;  ( 23,  ( ( _,  ( _,  langle1left,  langle1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (langle_hash,   langle_string)));
 ( lr_table::NONTERM 2,  
( result,  langle1left,  langle1right),  rest671);
 } 
;  ( 24,  ( ( _,  ( _,  rangle1left,  rangle1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (rangle_hash,   rangle_string)));
 ( lr_table::NONTERM 2,  
( result,  rangle1left,  rangle1right),  rest671);
 } 
;  ( 25,  ( ( _,  ( _,  eqeq_op1left,  eqeq_op1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (eqeq_hash,     eqeq_string)));
 ( lr_table::NONTERM 2,  
( result,  eqeq_op1left,  eqeq_op1right),  rest671);
 } 
;  ( 26,  ( ( _,  ( _,  plus_plus1left,  plus_plus1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (plusplus_hash, plusplus_string)));
 ( 
lr_table::NONTERM 2,  ( result,  plus_plus1left,  plus_plus1right),  rest671);
 } 
;  ( 27,  ( ( _,  ( _,  dash_dash1left,  dash_dash1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (dashdash_hash, dashdash_string)));
 ( 
lr_table::NONTERM 2,  ( result,  dash_dash1left,  dash_dash1right),  rest671);
 } 
;  ( 28,  ( ( _,  ( _,  dotdot1left,  dotdot1right)) !  rest671)) => {  my  result = values::QQ_NONPREFIX_VALUE_OR_BAR (\\  _ =  (raw_symbol (dotdot_hash,   dotdot_string)));
 ( lr_table::NONTERM 2,  
( result,  dotdot1left,  dotdot1right),  rest671);
 } 
;  ( 29,  ( ( _,  ( values::POSTFIX_OP_ID postfix_op_id1,  postfix_op_id1left,  postfix_op_id1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  {  my  (postfix_op_id as 
postfix_op_id1) = postfix_op_id1 ();
 (postfix_op_id);
 } );
 ( lr_table::NONTERM 4,  ( result,  postfix_op_id1left,  postfix_op_id1right),  rest671);
 } 
;  ( 30,  ( ( _,  ( _,  post_amper1left,  post_amper1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postamper_hash,  postamper_string)));
 ( lr_table::NONTERM 4, 
 ( result,  post_amper1left,  post_amper1right),  rest671);
 } 
;  ( 31,  ( ( _,  ( _,  post_atsign1left,  post_atsign1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postatsign_hash, postatsign_string)));
 ( lr_table::NONTERM 
4,  ( result,  post_atsign1left,  post_atsign1right),  rest671);
 } 
;  ( 32,  ( ( _,  ( _,  post_back1left,  post_back1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postback_hash,   postback_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_back1left,  post_back1right),  rest671);
 } 
;  ( 33,  ( ( _,  ( _,  post_bang1left,  post_bang1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postbang_hash,   postbang_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_bang1left,  post_bang1right),  rest671);
 } 
;  ( 34,  ( ( _,  ( _,  post_bar1left,  post_bar1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postbar_hash,    postbar_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_bar1left,  post_bar1right),  rest671);
 } 
;  ( 35,  ( ( _,  ( _,  post_buck1left,  post_buck1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postbuck_hash,   postbuck_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_buck1left,  post_buck1right),  rest671);
 } 
;  ( 36,  ( ( _,  ( _,  post_caret1left,  post_caret1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postcaret_hash,  postcaret_string)));
 ( lr_table::NONTERM 4, 
 ( result,  post_caret1left,  post_caret1right),  rest671);
 } 
;  ( 37,  ( ( _,  ( _,  post_dash1left,  post_dash1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postdash_hash,   postdash_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_dash1left,  post_dash1right),  rest671);
 } 
;  ( 38,  ( ( _,  ( _,  post_percnt1left,  post_percnt1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postpercnt_hash, postpercnt_string)));
 ( lr_table::NONTERM 
4,  ( result,  post_percnt1left,  post_percnt1right),  rest671);
 } 
;  ( 39,  ( ( _,  ( _,  post_plus1left,  post_plus1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postplus_hash,   postplus_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_plus1left,  post_plus1right),  rest671);
 } 
;  ( 40,  ( ( _,  ( _,  post_qmark1left,  post_qmark1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (postqmark_hash,  postqmark_string)));
 ( lr_table::NONTERM 4, 
 ( result,  post_qmark1left,  post_qmark1right),  rest671);
 } 
;  ( 41,  ( ( _,  ( _,  post_star1left,  post_star1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (poststar_hash,   poststar_string)));
 ( lr_table::NONTERM 4,  ( 
result,  post_star1left,  post_star1right),  rest671);
 } 
;  ( 42,  ( ( _,  ( _,  post_tilda1left,  post_tilda1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (posttilda_hash,  posttilda_string)));
 ( lr_table::NONTERM 4, 
 ( result,  post_tilda1left,  post_tilda1right),  rest671);
 } 
;  ( 43,  ( ( _,  ( _,  post_dashdash1left,  post_dashdash1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (post_dashdash_hash,  post_dashdash_string)));
 ( 
lr_table::NONTERM 4,  ( result,  post_dashdash1left,  post_dashdash1right),  rest671);
 } 
;  ( 44,  ( ( _,  ( _,  post_plusplus1left,  post_plusplus1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (post_plusplus_hash,  post_plusplus_string)));
 ( 
lr_table::NONTERM 4,  ( result,  post_plusplus1left,  post_plusplus1right),  rest671);
 } 
;  ( 45,  ( ( _,  ( _,  post_dotdot1left,  post_dotdot1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_OP (\\  _ =  (raw_symbol (post_dotdot_hash,  post_dotdot_string)));
 ( 
lr_table::NONTERM 4,  ( result,  post_dotdot1left,  post_dotdot1right),  rest671);
 } 
;  ( 46,  ( ( _,  ( values::PREFIX_OP_ID prefix_op_id1,  prefix_op_id1left,  prefix_op_id1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  {  my  (prefix_op_id as prefix_op_id1)
 = prefix_op_id1 ();
 (prefix_op_id);
 } );
 ( lr_table::NONTERM 3,  ( result,  prefix_op_id1left,  prefix_op_id1right),  rest671);
 } 
;  ( 47,  ( ( _,  ( _,  pre_amper1left,  pre_amper1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (preamper_hash,  preamper_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_amper1left,  pre_amper1right),  rest671);
 } 
;  ( 48,  ( ( _,  ( _,  pre_atsign1left,  pre_atsign1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (preatsign_hash, preatsign_string)));
 ( lr_table::NONTERM 3,  (
 result,  pre_atsign1left,  pre_atsign1right),  rest671);
 } 
;  ( 49,  ( ( _,  ( _,  pre_back1left,  pre_back1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (preback_hash,   preback_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_back1left,  pre_back1right),  rest671);
 } 
;  ( 50,  ( ( _,  ( _,  pre_bang1left,  pre_bang1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (prebang_hash,   prebang_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_bang1left,  pre_bang1right),  rest671);
 } 
;  ( 51,  ( ( _,  ( _,  pre_bar1left,  pre_bar1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (prebar_hash,    prebar_string)));
 ( lr_table::NONTERM 3,  ( result, 
 pre_bar1left,  pre_bar1right),  rest671);
 } 
;  ( 52,  ( ( _,  ( _,  pre_caret1left,  pre_caret1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (precaret_hash,  precaret_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_caret1left,  pre_caret1right),  rest671);
 } 
;  ( 53,  ( ( _,  ( _,  pre_dash1left,  pre_dash1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (predash_hash,   predash_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_dash1left,  pre_dash1right),  rest671);
 } 
;  ( 54,  ( ( _,  ( _,  pre_plus1left,  pre_plus1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (preplus_hash,   preplus_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_plus1left,  pre_plus1right),  rest671);
 } 
;  ( 55,  ( ( _,  ( _,  pre_qmark1left,  pre_qmark1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (preqmark_hash,  preqmark_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_qmark1left,  pre_qmark1right),  rest671);
 } 
;  ( 56,  ( ( _,  ( _,  pre_star1left,  pre_star1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (prestar_hash,   prestar_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_star1left,  pre_star1right),  rest671);
 } 
;  ( 57,  ( ( _,  ( _,  pre_tilda1left,  pre_tilda1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_OP (\\  _ =  (raw_symbol (pretilda_hash,  pretilda_string)));
 ( lr_table::NONTERM 3,  ( 
result,  pre_tilda1left,  pre_tilda1right),  rest671);
 } 
;  ( 58,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_VALUE_OR_BAR (\\  _ =  {  my  (uppercase_id as 
uppercase_id1) = uppercase_id1 ();
 (uppercase_id);
 } );
 ( lr_table::NONTERM 1,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 59,  ( ( _,  ( values::QQ_LVALUE_OR_BAR lvalue_or_bar1,  lvalue_or_bar1left,  lvalue_or_bar1right)) !  rest671)) => {  my  result = values::QQ_VALUE_OR_BAR (\\  _ =  {  my  (lvalue_or_bar as 
lvalue_or_bar1) = lvalue_or_bar1 ();
 (lvalue_or_bar);
 } );
 ( lr_table::NONTERM 1,  ( result,  lvalue_or_bar1left,  lvalue_or_bar1right),  rest671);
 } 
;  ( 60,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_VALUE_ID (\\  _ =  {  my  (uppercase_id as uppercase_id1) =
 uppercase_id1 ();
 (uppercase_id);
 } );
 ( lr_table::NONTERM 0,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 61,  ( ( _,  ( values::QQ_LVALUE_ID lvalue_id1,  lvalue_id1left,  lvalue_id1right)) !  rest671)) => {  my  result = values::QQ_VALUE_ID (\\  _ =  {  my  (lvalue_id as lvalue_id1) = lvalue_id1 ()
;
 (lvalue_id);
 } );
 ( lr_table::NONTERM 0,  ( result,  lvalue_id1left,  lvalue_id1right),  rest671);
 } 
;  ( 62,  ( ( _,  ( values::QQ_LVALUE_ID lvalue_id1,  lvalue_id1left,  lvalue_id1right)) !  rest671)) => {  my  result = values::QQ_LVALUE_OR_BAR (\\  _ =  {  my  (lvalue_id as lvalue_id1) = 
lvalue_id1 ();
 (lvalue_id);
 } );
 ( lr_table::NONTERM 7,  ( result,  lvalue_id1left,  lvalue_id1right),  rest671);
 } 
;  ( 63,  ( ( _,  ( values::QQ_BAR bar1,  bar1left,  bar1right)) !  rest671)) => {  my  result = values::QQ_LVALUE_OR_BAR (\\  _ =  {  my  (bar as bar1) = bar1 ();
 (bar);
 } );
 ( lr_table::NONTERM 7
,  ( result,  bar1left,  bar1right),  rest671);
 } 
;  ( 64,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_LVALUE_ID (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 (lowercase_id);
 } );
 ( lr_table::NONTERM 5,  ( result,  lowercase_id1left,  lowercase_id1right),  rest671);
 } 
;  ( 65,  ( ( _,  ( values::QQ_OPERATORS_ID operators_id1,  operators_id1left,  operators_id1right)) !  rest671)) => {  my  result = values::QQ_LVALUE_ID (\\  _ =  {  my  (operators_id as 
operators_id1) = operators_id1 ();
 (operators_id);
 } );
 ( lr_table::NONTERM 5,  ( result,  operators_id1left,  operators_id1right),  rest671);
 } 
;  ( 66,  ( ( _,  ( values::LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 (lowercase_id);
 } );
 ( lr_table::NONTERM 6,  ( result,  lowercase_id1left,  lowercase_id1right),  rest671);
 } 
;  ( 67,  ( ( _,  ( _,  field_t1left,  field_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (     field_hash,       field_string)));
 ( lr_table::NONTERM 6,  (
 result,  field_t1left,  field_t1right),  rest671);
 } 
;  ( 68,  ( ( _,  ( _,  generic_t1left,  generic_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (   generic_hash,     generic_string)));
 ( lr_table::NONTERM 6
,  ( result,  generic_t1left,  generic_t1right),  rest671);
 } 
;  ( 69,  ( ( _,  ( _,  in_t1left,  in_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (        in_hash,          in_string)));
 ( lr_table::NONTERM 6,  ( 
result,  in_t1left,  in_t1right),  rest671);
 } 
;  ( 70,  ( ( _,  ( _,  include_t1left,  include_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (   include_hash,     include_string)));
 ( lr_table::NONTERM 6
,  ( result,  include_t1left,  include_t1right),  rest671);
 } 
;  ( 71,  ( ( _,  ( _,  infixr_t1left,  infixr_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (    infixr_hash,      infixr_string)));
 ( lr_table::NONTERM 6, 
 ( result,  infixr_t1left,  infixr_t1right),  rest671);
 } 
;  ( 72,  ( ( _,  ( _,  infix_t1left,  infix_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (     infix_hash,       infix_string)));
 ( lr_table::NONTERM 6,  (
 result,  infix_t1left,  infix_t1right),  rest671);
 } 
;  ( 73,  ( ( _,  ( _,  message_t1left,  message_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (   message_hash,     message_string)));
 ( lr_table::NONTERM 6
,  ( result,  message_t1left,  message_t1right),  rest671);
 } 
;  ( 74,  ( ( _,  ( _,  method_t1left,  method_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (    method_hash,      method_string)));
 ( lr_table::NONTERM 6, 
 ( result,  method_t1left,  method_t1right),  rest671);
 } 
;  ( 75,  ( ( _,  ( _,  nonfix_t1left,  nonfix_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (    nonfix_hash,      nonfix_string)));
 ( lr_table::NONTERM 6, 
 ( result,  nonfix_t1left,  nonfix_t1right),  rest671);
 } 
;  ( 76,  ( ( _,  ( _,  overloaded_t1left,  overloaded_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (overloaded_hash,  overloaded_string)));
 ( 
lr_table::NONTERM 6,  ( result,  overloaded_t1left,  overloaded_t1right),  rest671);
 } 
;  ( 77,  ( ( _,  ( _,  raise_t1left,  raise_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol (     raise_hash,       raise_string)));
 ( lr_table::NONTERM 6,  (
 result,  raise_t1left,  raise_t1right),  rest671);
 } 
;  ( 78,  ( ( _,  ( _,  recursive_t1left,  recursive_t1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE_ID (\\  _ =  (raw_symbol ( recursive_hash,   recursive_string)));
 ( 
lr_table::NONTERM 6,  ( result,  recursive_t1left,  recursive_t1right),  rest671);
 } 
;  ( 79,  ( ( _,  ( values::OPERATORS_ID operators_id1,  operators_id1left,  operators_id1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  {  my  (operators_id as 
operators_id1) = operators_id1 ();
 (operators_id);
 } );
 ( lr_table::NONTERM 8,  ( result,  operators_id1left,  operators_id1right),  rest671);
 } 
;  ( 80,  ( ( _,  ( _,  amper1left,  amper1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (amper_hash,    amper_string)));
 ( lr_table::NONTERM 8,  ( result,  
amper1left,  amper1right),  rest671);
 } 
;  ( 81,  ( ( _,  ( _,  atsign1left,  atsign1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (atsign_hash,   atsign_string)));
 ( lr_table::NONTERM 8,  ( result, 
 atsign1left,  atsign1right),  rest671);
 } 
;  ( 82,  ( ( _,  ( _,  back1left,  back1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (back_hash,     back_string)));
 ( lr_table::NONTERM 8,  ( result,  
back1left,  back1right),  rest671);
 } 
;  ( 83,  ( ( _,  ( _,  bang1left,  bang1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (bang_hash,     bang_string)));
 ( lr_table::NONTERM 8,  ( result,  
bang1left,  bang1right),  rest671);
 } 
;  ( 84,  ( ( _,  ( _,  buck1left,  buck1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (buck_hash,     buck_string)));
 ( lr_table::NONTERM 8,  ( result,  
buck1left,  buck1right),  rest671);
 } 
;  ( 85,  ( ( _,  ( _,  caret1left,  caret1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (caret_hash,    caret_string)));
 ( lr_table::NONTERM 8,  ( result,  
caret1left,  caret1right),  rest671);
 } 
;  ( 86,  ( ( _,  ( _,  dash1left,  dash1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (dash_hash,     dash_string)));
 ( lr_table::NONTERM 8,  ( result,  
dash1left,  dash1right),  rest671);
 } 
;  ( 87,  ( ( _,  ( _,  percnt1left,  percnt1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (percnt_hash,   percnt_string)));
 ( lr_table::NONTERM 8,  ( result, 
 percnt1left,  percnt1right),  rest671);
 } 
;  ( 88,  ( ( _,  ( _,  plus1left,  plus1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (plus_hash,     plus_string)));
 ( lr_table::NONTERM 8,  ( result,  
plus1left,  plus1right),  rest671);
 } 
;  ( 89,  ( ( _,  ( _,  qmark1left,  qmark1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (qmark_hash,    qmark_string)));
 ( lr_table::NONTERM 8,  ( result,  
qmark1left,  qmark1right),  rest671);
 } 
;  ( 90,  ( ( _,  ( _,  slash1left,  slash1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (slash_hash,    slash_string)));
 ( lr_table::NONTERM 8,  ( result,  
slash1left,  slash1right),  rest671);
 } 
;  ( 91,  ( ( _,  ( _,  star1left,  star1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (star_hash,     star_string)));
 ( lr_table::NONTERM 8,  ( result,  
star1left,  star1right),  rest671);
 } 
;  ( 92,  ( ( _,  ( _,  tilda1left,  tilda1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (tilda_hash,    tilda_string)));
 ( lr_table::NONTERM 8,  ( result,  
tilda1left,  tilda1right),  rest671);
 } 
;  ( 93,  ( ( _,  ( _,  langle1left,  langle1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (langle_hash,   langle_string)));
 ( lr_table::NONTERM 8,  ( result, 
 langle1left,  langle1right),  rest671);
 } 
;  ( 94,  ( ( _,  ( _,  rangle1left,  rangle1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (rangle_hash,   rangle_string)));
 ( lr_table::NONTERM 8,  ( result, 
 rangle1left,  rangle1right),  rest671);
 } 
;  ( 95,  ( ( _,  ( _,  eqeq_op1left,  eqeq_op1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (eqeq_hash,     eqeq_string)));
 ( lr_table::NONTERM 8,  ( result, 
 eqeq_op1left,  eqeq_op1right),  rest671);
 } 
;  ( 96,  ( ( _,  ( _,  dash_dash1left,  dash_dash1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (dashdash_hash,  dashdash_string)));
 ( lr_table::NONTERM 8,  (
 result,  dash_dash1left,  dash_dash1right),  rest671);
 } 
;  ( 97,  ( ( _,  ( _,  plus_plus1left,  plus_plus1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (plusplus_hash,  plusplus_string)));
 ( lr_table::NONTERM 8,  (
 result,  plus_plus1left,  plus_plus1right),  rest671);
 } 
;  ( 98,  ( ( _,  ( _,  dotdot1left,  dotdot1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (dotdot_hash,    dotdot_string)));
 ( lr_table::NONTERM 8,  ( result
,  dotdot1left,  dotdot1right),  rest671);
 } 
;  ( 99,  ( ( _,  ( _,  pre_amper1left,  pre_amper1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (preamper_hash,  preamper_string)));
 ( lr_table::NONTERM 8,  (
 result,  pre_amper1left,  pre_amper1right),  rest671);
 } 
;  ( 100,  ( ( _,  ( _,  pre_atsign1left,  pre_atsign1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (preatsign_hash, preatsign_string)));
 ( lr_table::NONTERM 8
,  ( result,  pre_atsign1left,  pre_atsign1right),  rest671);
 } 
;  ( 101,  ( ( _,  ( _,  pre_back1left,  pre_back1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (preback_hash,   preback_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_back1left,  pre_back1right),  rest671);
 } 
;  ( 102,  ( ( _,  ( _,  pre_bang1left,  pre_bang1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (prebang_hash,   prebang_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_bang1left,  pre_bang1right),  rest671);
 } 
;  ( 103,  ( ( _,  ( _,  pre_buck1left,  pre_buck1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (prebuck_hash,   prebuck_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_buck1left,  pre_buck1right),  rest671);
 } 
;  ( 104,  ( ( _,  ( _,  pre_caret1left,  pre_caret1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (precaret_hash,  precaret_string)));
 ( lr_table::NONTERM 8,  
( result,  pre_caret1left,  pre_caret1right),  rest671);
 } 
;  ( 105,  ( ( _,  ( _,  pre_dash1left,  pre_dash1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (predash_hash,   predash_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_dash1left,  pre_dash1right),  rest671);
 } 
;  ( 106,  ( ( _,  ( _,  pre_percnt1left,  pre_percnt1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (prepercnt_hash, prepercnt_string)));
 ( lr_table::NONTERM 8
,  ( result,  pre_percnt1left,  pre_percnt1right),  rest671);
 } 
;  ( 107,  ( ( _,  ( _,  pre_plus1left,  pre_plus1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (preplus_hash,   preplus_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_plus1left,  pre_plus1right),  rest671);
 } 
;  ( 108,  ( ( _,  ( _,  pre_qmark1left,  pre_qmark1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (preqmark_hash,  preqmark_string)));
 ( lr_table::NONTERM 8,  
( result,  pre_qmark1left,  pre_qmark1right),  rest671);
 } 
;  ( 109,  ( ( _,  ( _,  pre_star1left,  pre_star1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (prestar_hash,   prestar_string)));
 ( lr_table::NONTERM 8,  ( 
result,  pre_star1left,  pre_star1right),  rest671);
 } 
;  ( 110,  ( ( _,  ( _,  pre_tilda1left,  pre_tilda1right)) !  rest671)) => {  my  result = values::QQ_OPERATORS_ID (\\  _ =  (raw_symbol (pretilda_hash,  pretilda_string)));
 ( lr_table::NONTERM 8,  
( result,  pre_tilda1left,  pre_tilda1right),  rest671);
 } 
;  ( 111,  ( ( _,  ( _,  bar1left,  bar1right)) !  rest671)) => {  my  result = values::QQ_BAR (\\  _ =  (raw_symbol (bar_hash,     bar_string)));
 ( lr_table::NONTERM 9,  ( result,  bar1left,  
bar1right),  rest671);
 } 
;  ( 112,  ( ( _,  ( values::QQ_LOWERCASE_PATH lowercase_path1,  lowercase_path1left,  lowercase_path1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE (\\  _ =  {  my  (lowercase_path as 
lowercase_path1) = lowercase_path1 ();
 (\\ kind =  lowercase_path kind);
 } );
 ( lr_table::NONTERM 16,  ( result,  lowercase_path1left,  lowercase_path1right),  rest671);
 } 
;  ( 113,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_LOWERCASE (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 (\\ kind =  [kind lowercase_id]);
 } );
 ( lr_table::NONTERM 16,  ( result,  lowercase_id1left,  lowercase_id1right),  rest671);
 } 
;  ( 114,  ( ( _,  ( values::QQ_MIXEDCASE_PATH mixedcase_path1,  mixedcase_path1left,  mixedcase_path1right)) !  rest671)) => {  my  result = values::QQ_MIXEDCASE (\\  _ =  {  my  (mixedcase_path as 
mixedcase_path1) = mixedcase_path1 ();
 (\\ kind =  mixedcase_path kind);
 } );
 ( lr_table::NONTERM 17,  ( result,  mixedcase_path1left,  mixedcase_path1right),  rest671);
 } 
;  ( 115,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  mixedcase_id1left,  mixedcase_id1right)) !  rest671)) => {  my  result = values::QQ_MIXEDCASE (\\  _ =  {  my  (mixedcase_id as mixedcase_id1)
 = mixedcase_id1 ();
 (\\ kind =  [kind mixedcase_id]);
 } );
 ( lr_table::NONTERM 17,  ( result,  mixedcase_id1left,  mixedcase_id1right),  rest671);
 } 
;  ( 116,  ( ( _,  ( values::QQ_UPPERCASE_PATH uppercase_path1,  uppercase_path1left,  uppercase_path1right)) !  rest671)) => {  my  result = values::QQ_UPPERCASE (\\  _ =  {  my  (uppercase_path as 
uppercase_path1) = uppercase_path1 ();
 (\\ kind =  uppercase_path kind);
 } );
 ( lr_table::NONTERM 18,  ( result,  uppercase_path1left,  uppercase_path1right),  rest671);
 } 
;  ( 117,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_UPPERCASE (\\  _ =  {  my  (uppercase_id as uppercase_id1)
 = uppercase_id1 ();
 (\\ kind =  [kind uppercase_id]);
 } );
 ( lr_table::NONTERM 18,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 118,  ( ( _,  ( values::QQ_MIXEDCASE mixedcase1,  mixedcase1left,  mixedcase1right)) !  rest671)) => {  my  result = values::QQ_TYPE (\\  _ =  {  my  (mixedcase as mixedcase1) = mixedcase1 ();
 (
mixedcase make_type_symbol);
 } );
 ( lr_table::NONTERM 21,  ( result,  mixedcase1left,  mixedcase1right),  rest671);
 } 
;  ( 119,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_SELECTOR (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 (make_label_symbol lowercase_id);
 } );
 ( lr_table::NONTERM 20,  ( result,  lowercase_id1left,  lowercase_id1right),  rest671);
 } 
;  ( 120,  ( ( _,  ( values::INT int1,  int1left,  int1right)) !  rest671)) => {  my  result = values::QQ_SELECTOR (\\  _ =  {  my  (int as int1) = int1 ();
 (
symbol::make_label_symbol (multiword_int::to_string int));
 } );
 ( lr_table::NONTERM 20,  ( result,  int1left,  int1right),  rest671);
 } 
;  ( 121,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_SELECTOR selector1,  selector1left,  _)) !  rest671)) => {  my  result = values::QQ_TYPED_SELECTOR
 (\\  _ =  {  my  (selector as selector1) = selector1 ();
 my  (anytype as anytype1) = anytype1 ();
 (selector, anytype );
 } );
 ( lr_table::NONTERM 22,  ( result,  selector1left,  anytype1right),  
rest671);
 } 
;  ( 122,  ( ( _,  ( values::QQ_SELECTOR selector1,  _,  selector1right)) !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_TYPED_SELECTOR (\\  _
 =  {  my  (anytype as anytype1) = anytype1 ();
 my  (selector as selector1) = selector1 ();
 (selector, anytype );
 } );
 ( lr_table::NONTERM 22,  ( result,  anytype1left,  selector1right),  rest671)
;
 } 
;  ( 123,  ( ( _,  ( values::QQ_TYPED_SELECTORS typed_selectors1,  _,  typed_selectors1right)) !  _ !  ( _,  ( values::QQ_TYPED_SELECTOR typed_selector1,  typed_selector1left,  _)) !  rest671)) => { 
 my  result = values::QQ_TYPED_SELECTORS (\\  _ =  {  my  (typed_selector as typed_selector1) = typed_selector1 ();
 my  (typed_selectors as typed_selectors1) = typed_selectors1 ();
 (
typed_selector ! typed_selectors);
 } );
 ( lr_table::NONTERM 23,  ( result,  typed_selector1left,  typed_selectors1right),  rest671);
 } 
;  ( 124,  ( ( _,  ( values::QQ_TYPED_SELECTOR typed_selector1,  typed_selector1left,  typed_selector1right)) !  rest671)) => {  my  result = values::QQ_TYPED_SELECTORS (\\  _ =  {  my  (
typed_selector as typed_selector1) = typed_selector1 ();
 ([typed_selector]);
 } );
 ( lr_table::NONTERM 23,  ( result,  typed_selector1left,  typed_selector1right),  rest671);
 } 
;  ( 125,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( _,  lbrace1left,  _)) !  rest671)) => {  my  result = values::QQ_ANYTYPE' (\\  _ =  (RECORD_TYPE []));
 ( lr_table::NONTERM 24,  ( result,  
lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 126,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_ANYTYPE' (\\  _ =  {  my  (
anytype as anytype1) = anytype1 ();
 (anytype);
 } );
 ( lr_table::NONTERM 24,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 127,  ( ( _,  ( values::TYVAR tyvar1,  (tyvarleft as tyvar1left),  (tyvarright as tyvar1right))) !  rest671)) => {  my  result = values::QQ_ANYTYPE' (\\  _ =  {  my  (tyvar as tyvar1) = tyvar1 ()
;
 (
   SOURCE_CODE_REGION_FOR_TYPE (
                                                TYPEVAR_TYPE   (TYPEVAR (make_typevar_symbol tyvar)),
				                (tyvarleft, tyvarright)
                                        )   
);
 } );
 ( lr_table::NONTERM 24,  ( result,  tyvar1left,  tyvar1right),  rest671);
 } 
;  ( 128,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_TYPED_SELECTORS typed_selectors1,  _,  _)) !  ( _,  ( _,  (lbraceleft as lbrace1left),  _)) !  rest671)) => {  my  
result = values::QQ_ANYTYPE' (\\  _ =  {  my  (typed_selectors as typed_selectors1) = typed_selectors1 ();
 (
    SOURCE_CODE_REGION_FOR_TYPE (
                                                 RECORD_TYPE typed_selectors,
                                                 (lbraceleft, rbraceright)
                                        )    
);
 } );
 ( lr_table::NONTERM 24,  ( result,  lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 129,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_TY0_PC ty0_pc1,  _,  _)) !  _ !  ( _,  ( values::QQ_TYPE type1,  (typeleft as type1left),  typeright)) !  rest671)) => {  my  result =
 values::QQ_ANYTYPE' (\\  _ =  {  my  (type as type1) = type1 ();
 my  (ty0_pc as ty0_pc1) = ty0_pc1 ();
 (
    SOURCE_CODE_REGION_FOR_TYPE (
                                                 TYPE_TYPE (type, ty0_pc),
                                                 (typeleft, typeright)
                                        )    
);
 } );
 ( lr_table::NONTERM 24,  ( result,  type1left,  rparen1right),  rest671);
 } 
;  ( 130,  ( ( _,  ( values::QQ_ANYTYPE' anytype'1,  _,  anytype'1right)) !  ( _,  ( values::QQ_TYPE type1,  (typeleft as type1left),  typeright)) !  rest671)) => {  my  result = values::QQ_ANYTYPE'
 (\\  _ =  {  my  (type as type1) = type1 ();
 my  (anytype' as anytype'1) = anytype'1 ();
 (
    SOURCE_CODE_REGION_FOR_TYPE (
						TYPE_TYPE (type, [anytype']),
						(typeleft, typeright)
					)    );
 } );
 ( lr_table::NONTERM 24,  ( result,  type1left,  anytype'1right),  rest671);
 } 
;  ( 131,  ( ( _,  ( values::QQ_TYPE type1,  (typeleft as type1left),  (typeright as type1right))) !  rest671)) => {  my  result = values::QQ_ANYTYPE' (\\  _ =  {  my  (type as type1) = type1 ();
 (
    SOURCE_CODE_REGION_FOR_TYPE (
						TYPE_TYPE (type, []),
						(typeleft, typeright)
					)    );
 } );
 ( lr_table::NONTERM 24,  ( result,  type1left,  type1right),  rest671);
 } 
;  ( 132,  ( ( _,  ( values::QQ_TUPLE_TY tuple_ty1,  _,  tuple_ty1right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_TUPLE_TY (\\  _ = 
 {  my  (anytype as anytype1) = anytype1 ();
 my  (tuple_ty as tuple_ty1) = tuple_ty1 ();
 (anytype ! tuple_ty);
 } );
 ( lr_table::NONTERM 25,  ( result,  anytype1left,  tuple_ty1right),  rest671)
;
 } 
;  ( 133,  ( ( _,  ( values::QQ_ANYTYPE anytype2,  _,  anytype2right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_TUPLE_TY (\\  _ =  { 
 my  anytype1 = anytype1 ();
 my  anytype2 = anytype2 ();
 ( [ anytype1, anytype2 ] );
 } );
 ( lr_table::NONTERM 25,  ( result,  anytype1left,  anytype2right),  rest671);
 } 
;  ( 134,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_TUPLE_TY tuple_ty1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_ANYTYPE (\\  _ =  {  my  (
tuple_ty as tuple_ty1) = tuple_ty1 ();
 (TUPLE_TYPE tuple_ty);
 } );
 ( lr_table::NONTERM 26,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 135,  ( ( _,  ( values::QQ_ANYTYPE anytype2,  _,  anytype2right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_ANYTYPE (\\  _ =  { 
 my  anytype1 = anytype1 ();
 my  anytype2 = anytype2 ();
 (TYPE_TYPE ( [arrow_type], [anytype1, anytype2]));
 } );
 ( lr_table::NONTERM 26,  ( result,  anytype1left,  anytype2right),  rest671);
 } 
;  ( 136,  ( ( _,  ( values::QQ_ANYTYPE' anytype'1,  anytype'1left,  anytype'1right)) !  rest671)) => {  my  result = values::QQ_ANYTYPE (\\  _ =  {  my  (anytype' as anytype'1) = anytype'1 ();
 (
anytype');
 } );
 ( lr_table::NONTERM 26,  ( result,  anytype'1left,  anytype'1right),  rest671);
 } 
;  ( 137,  ( ( _,  ( values::QQ_ANYTYPE anytype2,  _,  anytype2right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_TY0_PC (\\  _ =  { 
 my  anytype1 = anytype1 ();
 my  anytype2 = anytype2 ();
 ( [anytype1, anytype2] );
 } );
 ( lr_table::NONTERM 27,  ( result,  anytype1left,  anytype2right),  rest671);
 } 
;  ( 138,  ( ( _,  ( values::QQ_TY0_PC ty0_pc1,  _,  ty0_pc1right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_TY0_PC (\\  _ =  {  my 
 (anytype as anytype1) = anytype1 ();
 my  (ty0_pc as ty0_pc1) = ty0_pc1 ();
 (  anytype ! ty0_pc    );
 } );
 ( lr_table::NONTERM 27,  ( result,  anytype1left,  ty0_pc1right),  rest671);
 } 
;  ( 139,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)) => { 
 my  result = values::QQ_EQ_RULE (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (expression as expression1) = expression1 ();
 (
   CASE_RULE {
                                                pattern, 
				                expression => mark_expression (   expression,
                                                                                  expressionleft,
                                                                                  expressionright
                                                                              )
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 30,  ( result,  pattern1left,  expression1right),  rest671);
 } 
;  ( 140,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  expressionright)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)
) => {  my  result = values::QQ_DARROW_RULE (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (expression as expression1) = expression1 ();
 (
   CASE_RULE {
                                                pattern, 
				                expression => mark_expression (   expression,
                                                                                  expressionleft,
                                                                                  expressionright
                                                                              )
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 31,  ( result,  pattern1left,  semi1right),  rest671);
 } 
;  ( 141,  ( ( _,  ( values::QQ_DARROW_RULE darrow_rule1,  darrow_rule1left,  darrow_rule1right)) !  rest671)) => {  my  result = values::QQ_DARROW_RULES (\\  _ =  {  my  (darrow_rule as darrow_rule1)
 = darrow_rule1 ();
 ( [darrow_rule] );
 } );
 ( lr_table::NONTERM 29,  ( result,  darrow_rule1left,  darrow_rule1right),  rest671);
 } 
;  ( 142,  ( ( _,  ( values::QQ_DARROW_RULES darrow_rules1,  _,  darrow_rules1right)) !  ( _,  ( values::QQ_DARROW_RULE darrow_rule1,  darrow_rule1left,  _)) !  rest671)) => {  my  result = 
values::QQ_DARROW_RULES (\\  _ =  {  my  (darrow_rule as darrow_rule1) = darrow_rule1 ();
 my  (darrow_rules as darrow_rules1) = darrow_rules1 ();
 (darrow_rule ! darrow_rules);
 } );
 ( 
lr_table::NONTERM 29,  ( result,  darrow_rule1left,  darrow_rules1right),  rest671);
 } 
;  ( 143,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  expression1right)) !  _ !  ( _,  ( values::INT int1,  int1left,  _)) !  rest671)) => {  my  result = values::QQ_RECORD_ELEMENT (\\  _ =  { 
 my  (int as int1) = int1 ();
 my  (expression as expression1) = expression1 ();
 ((symbol::make_label_symbol (multiword_int::to_string int)), expression);
 } );
 ( lr_table::NONTERM 32,  ( result,  
int1left,  expression1right),  rest671);
 } 
;  ( 144,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  expression1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_RECORD_ELEMENT (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (expression as expression1) = expression1 ();
 ((make_label_symbol lowercase_id), expression);
 } )
;
 ( lr_table::NONTERM 32,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 145,  ( ( _,  ( values::QQ_SELECTOR selector1,  selector1left,  selector1right)) !  rest671)) => {  my  result = values::QQ_RECORD_ELEMENT (\\  _ =  {  my  (selector as selector1) = selector1 ()
;
 (selector, VARIABLE_IN_EXPRESSION [ symbol::make_value_symbol (symbol::name selector) ]);
 } );
 ( lr_table::NONTERM 32,  ( result,  selector1left,  selector1right),  rest671);
 } 
;  ( 146,  ( ( _,  ( values::QQ_RECORD_ELEMENTS record_elements1,  _,  record_elements1right)) !  _ !  ( _,  ( values::QQ_RECORD_ELEMENT record_element1,  record_element1left,  _)) !  rest671)) => { 
 my  result = values::QQ_RECORD_ELEMENTS (\\  _ =  {  my  (record_element as record_element1) = record_element1 ();
 my  (record_elements as record_elements1) = record_elements1 ();
 (
record_element ! record_elements);
 } );
 ( lr_table::NONTERM 33,  ( result,  record_element1left,  record_elements1right),  rest671);
 } 
;  ( 147,  ( ( _,  ( values::QQ_RECORD_ELEMENT record_element1,  record_element1left,  record_element1right)) !  rest671)) => {  my  result = values::QQ_RECORD_ELEMENTS (\\  _ =  {  my  (
record_element as record_element1) = record_element1 ();
 ([record_element]);
 } );
 ( lr_table::NONTERM 33,  ( result,  record_element1left,  record_element1right),  rest671);
 } 
;  ( 148,  ( ( _,  ( values::QQ_EXPRESSIONB expressionb1,  expressionb1left,  expressionb1right)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (expressionb as expressionb1) =
 expressionb1 ();
 (expressionb);
 } );
 ( lr_table::NONTERM 36,  ( result,  expressionb1left,  expressionb1right),  rest671);
 } 
;  ( 149,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSION
 (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (anytype as anytype1) = anytype1 ();
 (TYPE_CONSTRAINT_EXPRESSION { expression, constraint => anytype } );
 } );
 ( 
lr_table::NONTERM 36,  ( result,  expression1left,  anytype1right),  rest671);
 } 
;  ( 150,  ( ( _,  ( values::QQ_EXPRESSION expression2,  expression2left,  expression2right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  rest671)) =>
 {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  expression1 = expression1 ();
 my  expression2 = expression2 ();
 (
OR_EXPRESSION (
                                            mark_expression (expression1, expression1left, expression1right),
					    mark_expression (expression2, expression2left, expression2right)
                                        ) 
);
 } );
 ( lr_table::NONTERM 36,  ( result,  expression1left,  expression2right),  rest671);
 } 
;  ( 151,  ( ( _,  ( values::QQ_EXPRESSION expression2,  expression2left,  expression2right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  rest671)) =>
 {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  expression1 = expression1 ();
 my  expression2 = expression2 ();
 (
AND_EXPRESSION (
                                            mark_expression (expression1, expression1left, expression1right),
					    mark_expression (expression2, expression2left, expression2right)
                                        ) 
);
 } );
 ( lr_table::NONTERM 36,  ( result,  expression1left,  expression2right),  rest671);
 } 
;  ( 152,  ( ( _,  ( values::QQ_EQ_RULE eq_rule1,  _,  eq_rule1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSION
 (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (eq_rule as eq_rule1) = eq_rule1 ();
 (EXCEPT_EXPRESSION { expression, rules =>[eq_rule]});
 } );
 ( lr_table::NONTERM 36,  ( 
result,  expression1left,  eq_rule1right),  rest671);
 } 
;  ( 153,  ( ( _,  ( _,  _,  end_t1right)) !  ( _,  ( values::QQ_DARROW_RULES darrow_rules1,  _,  _)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  
result = values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (darrow_rules as darrow_rules1) = darrow_rules1 ();
 (
EXCEPT_EXPRESSION { expression, rules => darrow_rules });
 } );
 ( lr_table::NONTERM 36,  ( result,  expression1left,  end_t1right),  rest671);
 } 
;  ( 154,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  prefix_exp1left,  _)) !  rest671))
 => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  (expression as expression1) = expression1 ();
 (
   {   IF_EXPRESSION
						    { test_case => PRE_FIXITY_EXPRESSION prefix_exp,
						      then_case => mark_expression (expression, expressionleft, expressionright),
						      else_case => void_expression
						    };
                                            }
					
);
 } );
 ( lr_table::NONTERM 36,  ( result,  prefix_exp1left,  expression1right),  rest671);
 } 
;  ( 155,  ( ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  prefix_exp1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  (expressionleft as expression1left),  expressionright)) !  rest671))
 => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   IF_EXPRESSION
						    { test_case => PRE_FIXITY_EXPRESSION prefix_exp,
						      then_case => mark_expression (expression, expressionleft, expressionright),
						      else_case => void_expression
						    };
                                            }
					
);
 } );
 ( lr_table::NONTERM 36,  ( result,  expression1left,  prefix_exp1right),  rest671);
 } 
;  ( 156,  ( ( _,  ( values::QQ_EQ_RULE eq_rule1,  _,  (eq_ruleright as eq_rule1right))) !  ( _,  ( _,  (fn_tleft as fn_t1left),  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  { 
 my  (eq_rule as eq_rule1) = eq_rule1 ();
 (mark_expression (FN_EXPRESSION [eq_rule], fn_tleft, eq_ruleright));
 } );
 ( lr_table::NONTERM 36,  ( result,  fn_t1left,  eq_rule1right),  rest671);
 } 
;  ( 157,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS block_declarations_and_expressions1,  _,  _)) !  _ !  ( _,  ( values::QQ_APP_EXP 
app_exp1,  (app_expleft as app_exp1left),  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (app_exp as app_exp1) = app_exp1 ();
 my  (block_declarations_and_expressions as 
block_declarations_and_expressions1) = block_declarations_and_expressions1 ();
 (
   # Convert the 'where' expression to a block,
                                            # and thence to a LET_EXPRESSION:
                                            {
                                                app_exp_as_expression
                                                    =
                                                    PRE_FIXITY_EXPRESSION ( app_exp );

                                                expression_as_declaration
                                                    =
                                                    mark_declaration (
							VALUE_DECLARATIONS (
							    [   NAMED_VALUE {
								    expression => app_exp_as_expression,
								    pattern    => WILDCARD_PATTERN,
								    is_lazy    => FALSE
								}
							    ],
							    NIL
							),
                                                        app_expleft,
                                                        end_tright
                                                    );

                                                declaration_list
                                                    = 
                                                    expression_as_declaration 
                                                    !
                                                    block_declarations_and_expressions;

                                                raw_syntax_junk::block_to_let  declaration_list;	# NB: List is in reverse order.
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 36,  ( result,  app_exp1left,  end_t1right),  rest671);
 } 
;  ( 158,  ( ( _,  ( values::QQ_EXPRESSION expression2,  expression2left,  expression2right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  _ !  ( _,  ( _
,  for_t1left,  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  expression2 = expression2 ();
 (
WHILE_EXPRESSION
					    {   test       => mark_expression (expression1, expression1left, expression1right),
						expression => mark_expression (expression2, expression2left, expression2right)
                                            }
					
);
 } );
 ( lr_table::NONTERM 36,  ( result,  for_t1left,  expression2right),  rest671);
 } 
;  ( 159,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  _ !  ( _,  ( _,  for_t1left,  _)) !  rest671)) => {  my  result = 
values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 (
WHILE_EXPRESSION
					    {   test       => VARIABLE_IN_EXPRESSION [ fast_symbol::make_value_symbol' "TRUE" ],
						expression => mark_expression (expression, expressionleft, expressionright)
                                            }
					
);
 } );
 ( lr_table::NONTERM 36,  ( result,  for_t1left,  expression1right),  rest671);
 } 
;  ( 160,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  _ !  _ !  _ !  ( _,  ( _,  for_t1left,  _)) !  rest671)) => {  my  result = 
values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 (
WHILE_EXPRESSION
					    {   test       => VARIABLE_IN_EXPRESSION [ fast_symbol::make_value_symbol' "TRUE" ],
						expression => mark_expression (expression, expressionleft, expressionright)
                                            }
					
);
 } );
 ( lr_table::NONTERM 36,  ( result,  for_t1left,  expression1right),  rest671);
 } 
;  ( 161,  ( ( _,  ( values::QQ_EXPRESSION expression2,  expression2left,  expression2right)) !  ( _,  ( _,  rparenleft,  _)) !  ( _,  ( values::QQ_LOOP_DECLARATIONS loop_declarations1,  _,  _)) !  _
 !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_INIT_EXPRESSIONS init_expressions1,  _,  _)) !  _ !  ( _,  (
 _,  (for_tleft as for_t1left),  for_tright)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (init_expressions as init_expressions1) = init_expressions1 ();
 my  expression1 = 
expression1 ();
 my  (loop_declarations as loop_declarations1) = loop_declarations1 ();
 my  expression2 = expression2 ();
 (
make_raw_syntax::for_loop
					     ( (for_tleft,       for_tright),
					       init_expressions,
                                               (expression1,     expression1left,  expression1right),
                                               loop_declarations,
                                               (void_expression, semi1right,       rparenleft),
                                               (expression2,     expression2left,  expression2right)
                                        )    
);
 } );
 ( lr_table::NONTERM 36,  ( result,  for_t1left,  expression2right),  rest671);
 } 
;  ( 162,  ( ( _,  ( values::QQ_EXPRESSION expression3,  expression3left,  expression3right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression2,  expression2left,  expression2right)) !  _ !  ( _,  ( 
values::QQ_LOOP_DECLARATIONS loop_declarations1,  _,  _)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  _ !  ( _,  ( values::QQ_INIT_EXPRESSIONS 
init_expressions1,  _,  _)) !  _ !  ( _,  ( _,  (for_tleft as for_t1left),  for_tright)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (init_expressions as init_expressions1)
 = init_expressions1 ();
 my  expression1 = expression1 ();
 my  (loop_declarations as loop_declarations1) = loop_declarations1 ();
 my  expression2 = expression2 ();
 my  expression3 = expression3 ()
;
 (
make_raw_syntax::for_loop
					     ( (for_tleft,       for_tright),
					       init_expressions,
                                               (expression1,     expression1left,  expression1right),
                                               loop_declarations,
                                               (expression2,     expression2left,  expression2right),
                                               (expression3,     expression3left,  expression3right)
                                        )    
);
 } );
 ( lr_table::NONTERM 36,  ( result,  for_t1left,  expression3right),  rest671);
 } 
;  ( 163,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( _,  (raise_tleft as raise_t1left),  _)) !  rest671)) => {  my  result
 = values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 (
mark_expression (
					    mark_expression (RAISE_EXPRESSION expression, expressionleft, expressionright),
				            raise_tleft, expressionright
					) );
 } );
 ( lr_table::NONTERM 36,  ( 
result,  raise_t1left,  expression1right),  rest671);
 } 
;  ( 164,  ( ( _,  ( _,  _,  slash2right)) !  ( _,  ( values::QQ_REGULAR_EXPRESSIONS regular_expressions1,  _,  regular_expressionsright)) !  _ !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  (
expressionleft as expression1left),  expressionright)) !  rest671)) => {  my  result = values::QQ_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (regular_expressions
 as regular_expressions1) = regular_expressions1 ();
 (
    regex_to_raw_syntax (
                                                 expression,
                                                 regular_expressions,
                                                 expressionleft,
                                                 expressionright,
                                                 regular_expressionsright
                                             )
                                        
);
 } );
 ( lr_table::NONTERM 36,  ( result,  expression1left,  slash2right),  rest671);
 } 
;  ( 165,  ( ( _,  ( values::QQ_INIT_EXPRESSIONS init_expressions1,  _,  init_expressions1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  expressionright)) !  _ !  ( _,  (
 values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_INIT_EXPRESSIONS (\\  _ =  {  my  (lowercase_id as 
lowercase_id1) = lowercase_id1 ();
 my  (expression as expression1) = expression1 ();
 my  (init_expressions as init_expressions1) = init_expressions1 ();
 (
  ( (lowercase_id, lowercase_idleft, lowercase_idright),
                                                     (expression,   expressionleft,   expressionright)
                                                   )
                                                   !
                                                   init_expressions
                                                
);
 } );
 ( lr_table::NONTERM 34,  ( result,  lowercase_id1left,  init_expressions1right),  rest671);
 } 
;  ( 166,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as 
lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_INIT_EXPRESSIONS (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (expression as 
expression1) = expression1 ();
 (
 [ ( (lowercase_id, lowercase_idleft, lowercase_idright),
                                                      (expression,   expressionleft,   expressionright)
                                                    )
                                                  ]
                                                
);
 } );
 ( lr_table::NONTERM 34,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 167,  ( rest671)) => {  my  result = values::QQ_LOOP_DECLARATIONS (\\  _ =  ([]));
 ( lr_table::NONTERM 35,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 168,  ( ( _,  ( values::QQ_DECLARATION declaration1,  (declarationleft as declaration1left),  (declarationright as declaration1right))) !  rest671)) => {  my  result = 
values::QQ_LOOP_DECLARATIONS (\\  _ =  {  my  (declaration as declaration1) = declaration1 ();
 ( [ (declaration, declarationleft, declarationright) ] );
 } );
 ( lr_table::NONTERM 35,  ( result,  
declaration1left,  declaration1right),  rest671);
 } 
;  ( 169,  ( ( _,  ( values::QQ_LOOP_DECLARATIONS loop_declarations1,  _,  loop_declarations1right)) !  _ !  ( _,  ( values::QQ_DECLARATION declaration1,  (declarationleft as declaration1left),  
declarationright)) !  rest671)) => {  my  result = values::QQ_LOOP_DECLARATIONS (\\  _ =  {  my  (declaration as declaration1) = declaration1 ();
 my  (loop_declarations as loop_declarations1) = 
loop_declarations1 ();
 (
   (declaration, declarationleft, declarationright)
                                                    !
                                                    loop_declarations
                                                
);
 } );
 ( lr_table::NONTERM 35,  ( result,  declaration1left,  loop_declarations1right),  rest671);
 } 
;  ( 170,  ( ( _,  ( values::QQ_EXPRESSIONC expressionc1,  expressionc1left,  expressionc1right)) !  rest671)) => {  my  result = values::QQ_EXPRESSIONB (\\  _ =  {  my  (expressionc as expressionc1)
 = expressionc1 ();
 (expressionc);
 } );
 ( lr_table::NONTERM 37,  ( result,  expressionc1left,  expressionc1right),  rest671);
 } 
;  ( 171,  ( ( _,  ( values::QQ_EXPRESSIONC expressionc3,  expressionc3left,  expressionc3right)) !  _ !  ( _,  ( values::QQ_EXPRESSIONC expressionc2,  expressionc2left,  expressionc2right)) !  _ !  (
 _,  ( values::QQ_EXPRESSIONC expressionc1,  expressionc1left,  _)) !  rest671)) => {  my  result = values::QQ_EXPRESSIONB (\\  _ =  {  my  expressionc1 = expressionc1 ();
 my  expressionc2 = 
expressionc2 ();
 my  expressionc3 = expressionc3 ();
 (
  {   IF_EXPRESSION
						    { test_case => expressionc1,
						      then_case => mark_expression (expressionc2, expressionc2left, expressionc2right),
						      else_case => mark_expression (expressionc3, expressionc3left, expressionc3right)
						    };
                                            }
					
);
 } );
 ( lr_table::NONTERM 37,  ( result,  expressionc1left,  expressionc3right),  rest671);
 } 
;  ( 172,  ( ( _,  ( values::QQ_APP_EXP app_exp1,  app_exp1left,  app_exp1right)) !  rest671)) => {  my  result = values::QQ_EXPRESSIONC (\\  _ =  {  my  (app_exp as app_exp1) = app_exp1 ();
 (
PRE_FIXITY_EXPRESSION app_exp);
 } );
 ( lr_table::NONTERM 38,  ( result,  app_exp1left,  app_exp1right),  rest671);
 } 
;  ( 173,  ( ( _,  ( values::QQ_POSTFIX_EXP postfix_exp1,  postfix_exp1left,  postfix_exp1right)) !  rest671)) => {  my  result = values::QQ_APP_EXP (\\  _ =  {  my  (postfix_exp as postfix_exp1) = 
postfix_exp1 ();
 (postfix_exp);
 } );
 ( lr_table::NONTERM 45,  ( result,  postfix_exp1left,  postfix_exp1right),  rest671);
 } 
;  ( 174,  ( ( _,  ( values::QQ_APP_EXP app_exp1,  _,  app_exp1right)) !  ( _,  ( values::QQ_POSTFIX_EXP postfix_exp1,  postfix_exp1left,  _)) !  rest671)) => {  my  result = values::QQ_APP_EXP (\\  _
 =  {  my  (postfix_exp as postfix_exp1) = postfix_exp1 ();
 my  (app_exp as app_exp1) = app_exp1 ();
 (postfix_exp @ app_exp);
 } );
 ( lr_table::NONTERM 45,  ( result,  postfix_exp1left,  
app_exp1right),  rest671);
 } 
;  ( 175,  ( ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  prefix_exp1left,  prefix_exp1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = 
prefix_exp1 ();
 (prefix_exp);
 } );
 ( lr_table::NONTERM 47,  ( result,  prefix_exp1left,  prefix_exp1right),  rest671);
 } 
;  ( 176,  ( ( _,  ( values::QQ_POSTFIX_OP postfix_op1,  postfix_opleft,  (postfix_opright as postfix_op1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  (prefix_expleft as prefix_exp1left),  _
)) !  rest671)) => {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  (postfix_op as postfix_op1) = postfix_op1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  postfix_op;

                                               postfix_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], postfix_opleft, postfix_opright),
						     source_code_region => (postfix_opleft, postfix_opright),
						     fixity		=> THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( postfix_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, prefix_expleft, postfix_opright),
						      source_code_region => (prefix_expleft, postfix_opright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  prefix_exp1left,  postfix_op1right),  rest671);
 } 
;  ( 177,  ( ( _,  ( _,  _,  (post_slashright as post_slash1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_slashleft as pre_slash1left),  _)) !  rest671)) => { 
 my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "/_/");

                                               slashens_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_slashleft, post_slashright),
						     source_code_region => (pre_slashleft, post_slashright),
						     fixity		 => THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( slashens_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_slashleft, post_slashright),
						      source_code_region => (pre_slashleft, post_slashright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_slash1left,  post_slash1right),  rest671);
 } 
;  ( 178,  ( ( _,  ( _,  _,  (post_barright as post_bar1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_barleft as pre_bar1left),  _)) !  rest671)) => {  my  result
 = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "|_|");

                                               barens_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_barleft, post_barright),
						     source_code_region => (pre_barleft, post_barright),
						     fixity		=> THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( barens_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_barleft, post_barright),
						      source_code_region => (pre_barleft, post_barright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_bar1left,  post_bar1right),  rest671);
 } 
;  ( 179,  ( ( _,  ( _,  _,  (post_rangleright as post_rangle1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_langleleft as pre_langle1left),  _)) !  rest671)) =>
 {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "<_>");

                                               anglens_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_langleleft, post_rangleright),
						     source_code_region => (pre_langleleft, post_rangleright),
						     fixity             => THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( anglens_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_langleleft, post_rangleright),
						      source_code_region => (pre_langleleft, post_rangleright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_langle1left,  post_rangle1right),  rest671);
 } 
;  ( 180,  ( ( _,  ( _,  _,  (post_barright as post_bar1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_langleleft as pre_langle1left),  _)) !  rest671)) => {  my  
result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "<_|");

                                               angbar_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_langleleft, post_barright),
						     source_code_region => (pre_langleleft, post_barright),
						     fixity             => THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( angbar_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_langleleft, post_barright),
						      source_code_region => (pre_langleleft, post_barright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_langle1left,  post_bar1right),  rest671);
 } 
;  ( 181,  ( ( _,  ( _,  _,  (post_rangleright as post_rangle1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_barleft as pre_bar1left),  _)) !  rest671)) => {  my  
result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "|_>");

                                               barang_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_barleft, post_rangleright),
						     source_code_region => (pre_barleft, post_rangleright),
						     fixity             => THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( barang_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_barleft, post_rangleright),
						      source_code_region => (pre_barleft, post_rangleright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_bar1left,  post_rangle1right),  rest671);
 } 
;  ( 182,  ( ( _,  ( _,  _,  (post_rbraceright as post_rbrace1right))) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (pre_lbraceleft as pre_lbrace1left),  _)) !  rest671)) =>
 {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "{_}");

                                               bracens_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_lbraceleft, post_rbraceright),
						     source_code_region => (pre_lbraceleft, post_rbraceright),
						     fixity	        => THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( bracens_op_item ! prefix_exp );

						[   { item               => mark_expression (expression, pre_lbraceleft, post_rbraceright),
						      source_code_region => (pre_lbraceleft, post_rbraceright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  pre_lbrace1left,  post_rbrace1right),  rest671);
 } 
;  ( 183,  ( ( _,  ( _,  _,  (rbracketright as rbracket1right))) !  ( _,  ( values::QQ_APP_EXP app_exp1,  _,  _)) !  ( _,  ( _,  post_lbracketleft,  _)) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1, 
 (prefix_expleft as prefix_exp1left),  _)) !  rest671)) => {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  (app_exp as app_exp1) = app_exp1
 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "_[]");

                                               expressions
						   =
                                                   [ PRE_FIXITY_EXPRESSION  prefix_exp,
                                                     PRE_FIXITY_EXPRESSION  app_exp
                                                   ];

                                               atomic_exp
                                                   =
                                                   TUPLE_EXPRESSION  expressions;

                                               dot_exp
						   =
						   [   {   item               =>  mark_expression (atomic_exp, prefix_expleft, rbracketright),
							   source_code_region =>  (prefix_expleft, rbracketright),
							   fixity             =>  NULL
						       }
						   ];

                                               sub_op_item
                                                   =
                                                   { item               =>  mark_expression (VARIABLE_IN_EXPRESSION [v], post_lbracketleft, rbracketright),
						     source_code_region =>  (post_lbracketleft, rbracketright),
						     fixity		=>  THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( sub_op_item ! dot_exp );

						[   { item               =>  mark_expression (expression, prefix_expleft, rbracketright),
						      source_code_region =>  (prefix_expleft, rbracketright),
						      fixity             =>  NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  prefix_exp1left,  rbracket1right),  rest671);
 } 
;  ( 184,  ( ( _,  ( _,  _,  (rbracketright as rbracket1right))) !  ( _,  ( values::QQ_EXPRESSIONS_2_N expressions_2_n1,  _,  _)) !  ( _,  ( _,  post_lbracketleft,  _)) !  ( _,  ( 
values::QQ_PREFIX_EXP prefix_exp1,  (prefix_expleft as prefix_exp1left),  _)) !  rest671)) => {  my  result = values::QQ_POSTFIX_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my 
 (expressions_2_n as expressions_2_n1) = expressions_2_n1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  (make_raw_symbol "_[]");

                                               indices
						   =
						   [   {   item               =>  mark_expression ((TUPLE_EXPRESSION expressions_2_n), post_lbracketleft, rbracketright),
							   source_code_region =>  (post_lbracketleft, rbracketright),
							   fixity             =>  NULL
						       }
						   ];

                                               expressions
						   =
                                                   [ PRE_FIXITY_EXPRESSION  prefix_exp,
                                                     PRE_FIXITY_EXPRESSION  indices
                                                   ];

                                               atomic_exp
                                                   =
                                                   TUPLE_EXPRESSION  expressions;

                                               dot_exp
						   =
						   [   {   item               =>  mark_expression (atomic_exp, prefix_expleft, rbracketright),
							   source_code_region =>  (prefix_expleft, rbracketright),
							   fixity             =>  NULL
						       }
						   ];

                                               sub_op_item
                                                   =
                                                   { item               =>  mark_expression (VARIABLE_IN_EXPRESSION [v], post_lbracketleft, rbracketright),
						     source_code_region =>  (post_lbracketleft, rbracketright),
						     fixity		=>  THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( sub_op_item ! dot_exp );

						[   { item               =>  mark_expression (expression, prefix_expleft, rbracketright),
						      source_code_region =>  (prefix_expleft, rbracketright),
						      fixity             =>  NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 47,  ( result,  prefix_exp1left,  rbracket1right),  rest671);
 } 
;  ( 185,  ( ( _,  ( values::QQ_DOT_EXP dot_exp1,  dot_exp1left,  dot_exp1right)) !  rest671)) => {  my  result = values::QQ_PREFIX_EXP (\\  _ =  {  my  (dot_exp as dot_exp1) = dot_exp1 ();
 (dot_exp)
;
 } );
 ( lr_table::NONTERM 46,  ( result,  dot_exp1left,  dot_exp1right),  rest671);
 } 
;  ( 186,  ( ( _,  ( values::STRING string1,  stringleft,  (stringright as string1right))) !  ( _,  ( _,  (printf_tleft as printf_t1left),  _)) !  rest671)) => {  my  result = values::QQ_PREFIX_EXP
 (\\  _ =  {  my  (string as string1) = string1 ();
 (
printf_format_string_to_raw_syntax::make_anonymous_curried_function
                                            ( NULL,		# Only fprintf has an fd arg.
                                              string,		# "%d %6.2f %-15s\n" or such.
					      error,
                                              printf_tleft,
                                              stringleft,
                                              stringright,
                                              printf_format_string_to_raw_syntax::PRINTF
                                            )
                                        
);
 } );
 ( lr_table::NONTERM 46,  ( result,  printf_t1left,  string1right),  rest671);
 } 
;  ( 187,  ( ( _,  ( values::STRING string1,  stringleft,  (stringright as string1right))) !  ( _,  ( _,  (sprintf_tleft as sprintf_t1left),  _)) !  rest671)) => {  my  result = values::QQ_PREFIX_EXP
 (\\  _ =  {  my  (string as string1) = string1 ();
 (
printf_format_string_to_raw_syntax::make_anonymous_curried_function
                                            ( NULL,		# Only fprintf has an fd arg.
                                              string,		# "%d %6.2f %-15s\n" or such.
					      error,
                                              sprintf_tleft,
                                              stringleft,
                                              stringright,
                                              printf_format_string_to_raw_syntax::SPRINTF
                                            )
                                        
);
 } );
 ( lr_table::NONTERM 46,  ( result,  sprintf_t1left,  string1right),  rest671);
 } 
;  ( 188,  ( ( _,  ( values::STRING string1,  stringleft,  (stringright as string1right))) !  ( _,  ( values::QQ_DOT_EXP dot_exp1,  _,  _)) !  ( _,  ( _,  (fprintf_tleft as fprintf_t1left),  _)) !  
rest671)) => {  my  result = values::QQ_PREFIX_EXP (\\  _ =  {  my  (dot_exp as dot_exp1) = dot_exp1 ();
 my  (string as string1) = string1 ();
 (
printf_format_string_to_raw_syntax::make_anonymous_curried_function
                                            ( THE dot_exp,	# Only fprintf has an fd arg.
                                              string,		# "%d %6.2f %-15s\n" or such.
					      error,
                                              fprintf_tleft,
                                              stringleft,
                                              stringright,
                                              printf_format_string_to_raw_syntax::FPRINTF
                                            )
                                        
);
 } );
 ( lr_table::NONTERM 46,  ( result,  fprintf_t1left,  string1right),  rest671);
 } 
;  ( 189,  ( ( _,  ( values::QQ_DOT_EXP dot_exp1,  _,  (dot_expright as dot_exp1right))) !  ( _,  ( values::QQ_PREFIX_OP prefix_op1,  (prefix_opleft as prefix_op1left),  prefix_opright)) !  rest671))
 => {  my  result = values::QQ_PREFIX_EXP (\\  _ =  {  my  (prefix_op as prefix_op1) = prefix_op1 ();
 my  (dot_exp as dot_exp1) = dot_exp1 ();
 (
   {   my (v, f)
                                                   =
                                                   make_value_and_fixity_symbols  prefix_op;

                                               prefix_op_item
                                                   =
                                                   { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], prefix_opleft, prefix_opright),
						     source_code_region => (prefix_opleft, prefix_opright),
						     fixity		=> THE f
                                                   };

                                               expression
                                                   =
                                                   PRE_FIXITY_EXPRESSION ( prefix_op_item ! dot_exp );

						[   { item               => mark_expression (expression, prefix_opleft, dot_expright),
						      source_code_region => (prefix_opleft, dot_expright),
						      fixity             => NULL
						    }
						];
                                           }
                                       
);
 } );
 ( lr_table::NONTERM 46,  ( result,  prefix_op1left,  dot_exp1right),  rest671);
 } 
;  ( 190,  ( ( _,  ( values::QQ_NONPREFIX_VALUE_OR_BAR nonprefix_value_or_bar1,  (nonprefix_value_or_barleft as nonprefix_value_or_bar1left),  (nonprefix_value_or_barright as 
nonprefix_value_or_bar1right))) !  rest671)) => {  my  result = values::QQ_DOT_EXP (\\  _ =  {  my  (nonprefix_value_or_bar as nonprefix_value_or_bar1) = nonprefix_value_or_bar1 ();
 (
   [   {   my (v, f)
                                                        =
                                                        make_value_and_fixity_symbols  nonprefix_value_or_bar;

                                                    {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], nonprefix_value_or_barleft, nonprefix_value_or_barright),
							source_code_region => (nonprefix_value_or_barleft, nonprefix_value_or_barright),
							fixity		   => THE f
                                                    };
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  nonprefix_value_or_bar1left,  nonprefix_value_or_bar1right),  rest671);
 } 
;  ( 191,  ( ( _,  ( values::IMPLICIT_THUNK_PARAMETER implicit_thunk_parameter1,  (implicit_thunk_parameterleft as implicit_thunk_parameter1left),  (implicit_thunk_parameterright as 
implicit_thunk_parameter1right))) !  rest671)) => {  my  result = values::QQ_DOT_EXP (\\  _ =  {  my  (implicit_thunk_parameter as implicit_thunk_parameter1) = implicit_thunk_parameter1 ();
 (
   [   {   my (v, f)
                                                        =
                                                        make_value_and_fixity_symbols  implicit_thunk_parameter;

                                                    {   item               => mark_expression (IMPLICIT_THUNK_PARAMETER [v], implicit_thunk_parameterleft, implicit_thunk_parameterright),
							source_code_region => (implicit_thunk_parameterleft, implicit_thunk_parameterright),
							fixity		   => THE f
                                                    };
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  implicit_thunk_parameter1left,  implicit_thunk_parameter1right),  rest671);
 } 
;  ( 192,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  (passiveop_idleft as passiveop_id1left),  (passiveop_idright as passiveop_id1right))) !  rest671)) => {  my  result = values::QQ_DOT_EXP (\\ 
 _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 (
   [   {   {   item               => mark_expression (VARIABLE_IN_EXPRESSION [make_value_symbol passiveop_id], passiveop_idleft, passiveop_idright),
							source_code_region => (passiveop_idleft, passiveop_idright),
							fixity		   => NULL
                                                    };
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  passiveop_id1left,  passiveop_id1right),  rest671);
 } 
;  ( 193,  ( ( _,  ( values::QQ_ATOMIC_EXP atomic_exp1,  (atomic_expleft as atomic_exp1left),  (atomic_expright as atomic_exp1right))) !  rest671)) => {  my  result = values::QQ_DOT_EXP (\\  _ =  { 
 my  (atomic_exp as atomic_exp1) = atomic_exp1 ();
 (
   [   {   item               => mark_expression (atomic_exp, atomic_expleft, atomic_expright),
						    source_code_region => (atomic_expleft, atomic_expright),
						    fixity             => NULL
                                                }
                                            ]
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  atomic_exp1left,  atomic_exp1right),  rest671);
 } 
;  ( 194,  ( ( _,  ( values::QQ_SELECTOR selector1,  selectorleft,  (selectorright as selector1right))) !  _ !  ( _,  ( values::QQ_DOT_EXP dot_exp1,  (dot_expleft as dot_exp1left),  _)) !  rest671))
 => {  my  result = values::QQ_DOT_EXP (\\  _ =  {  my  (dot_exp as dot_exp1) = dot_exp1 ();
 my  (selector as selector1) = selector1 ();
 (
  # We want 'a.b' to be exactly the same as '.b a'
					   # so here we just build the value that the latter
					   # would have produced:

                                           {    selector_exp
                                                    =
                                                    (mark_expression (RECORD_SELECTOR_EXPRESSION selector, selectorleft, selectorright));

                                                selector_exp'
                                                    = 
						    [   {   item               => selector_exp,
							    source_code_region => (selectorleft, selectorright),
							    fixity             => NULL
							}
						    ];

                                                app_exp
                                                   =
                                                   selector_exp' @ dot_exp;

                                                expression
                                                   =   
                                                   PRE_FIXITY_EXPRESSION app_exp;

						[   {   item               => mark_expression (expression, dot_expleft, selectorright),
							source_code_region => (dot_expleft, selectorright),
							fixity             => NULL
						    }
						];
                                            }
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  dot_exp1left,  selector1right),  rest671);
 } 
;  ( 195,  ( ( _,  ( values::QQ_SELECTOR selector1,  _,  (selectorright as selector1right))) !  _ !  ( _,  ( values::QQ_DOT_EXP dot_exp1,  (dot_expleft as dot_exp1left),  _)) !  rest671)) => {  my  
result = values::QQ_DOT_EXP (\\  _ =  {  my  (dot_exp as dot_exp1) = dot_exp1 ();
 my  (selector as selector1) = selector1 ();
 (
  # We defer until  src/lib/compiler/front/typer/main/oop-rewrite-declaration.pkg
					   # the expansion of this oop code into vanilla code:
					   #
					   {   expression
                                                   =
						    OBJECT_FIELD_EXPRESSION
                                                     { object =>  PRE_FIXITY_EXPRESSION dot_exp,
                                                       field  =>  selector
                                                     };

  						[   {   item               => mark_expression (expression, dot_expleft, selectorright),
							source_code_region => (dot_expleft, selectorright),
							fixity             => NULL
						    }
						];
					   }
					
);
 } );
 ( lr_table::NONTERM 48,  ( result,  dot_exp1left,  selector1right),  rest671);
 } 
;  ( 196,  ( ( _,  ( values::QQ_LIST_COMPREHENSION_CLAUSES list_comprehension_clauses1,  _,  list_comprehension_clauses1right)) !  ( _,  ( values::QQ_LIST_COMPREHENSION_FOR_CLAUSE 
list_comprehension_for_clause1,  _,  _)) !  ( _,  ( values::QQ_LIST_COMPREHENSION_RESULT_CLAUSE list_comprehension_result_clause1,  list_comprehension_result_clause1left,  _)) !  rest671)) => {  my  
result = values::QQ_LIST_COMPREHENSION (\\  _ =  {  my  (list_comprehension_result_clause as list_comprehension_result_clause1) = list_comprehension_result_clause1 ();
 my  (
list_comprehension_for_clause as list_comprehension_for_clause1) = list_comprehension_for_clause1 ();
 my  (list_comprehension_clauses as list_comprehension_clauses1) = list_comprehension_clauses1 ()
;
 (
 elc::expand_list_comprehension_syntax
					    (
					      ( list_comprehension_for_clause
					      ! list_comprehension_clauses
					      )
					      @
					      [ list_comprehension_result_clause ]
					    )
					
);
 } );
 ( lr_table::NONTERM 50,  ( result,  list_comprehension_result_clause1left,  list_comprehension_clauses1right),  rest671);
 } 
;  ( 197,  ( ( _,  ( values::QQ_EXPRESSIONB expressionb1,  (expressionbleft as expressionb1left),  (expressionbright as expressionb1right))) !  rest671)) => {  my  result = 
values::QQ_LIST_COMPREHENSION_RESULT_CLAUSE (\\  _ =  {  my  (expressionb as expressionb1) = expressionb1 ();
 (
 elc::LIST_COMPREHENSION_RESULT_CLAUSE (SOURCE_CODE_REGION_FOR_EXPRESSION (expressionb, (expressionbleft, expressionbright )) ));
 } );
 ( lr_table::NONTERM 51,  ( result,  expressionb1left,  
expressionb1right),  rest671);
 } 
;  ( 198,  ( ( _,  ( values::QQ_EXPRESSIONB expressionb1,  expressionbleft,  (expressionbright as expressionb1right))) !  _ !  ( _,  ( values::QQ_APAT apat1,  apatleft,  apatright)) !  ( _,  ( _,  
for_t1left,  _)) !  rest671)) => {  my  result = values::QQ_LIST_COMPREHENSION_FOR_CLAUSE (\\  _ =  {  my  (apat as apat1) = apat1 ();
 my  (expressionb as expressionb1) = expressionb1 ();
 (
   {   my { item => apat, ... } =   apat;
						
						elc::LIST_COMPREHENSION_FOR_CLAUSE 
						  { pattern    => SOURCE_CODE_REGION_FOR_PATTERN    (apat, (apatleft, apatright)),
						    expression => SOURCE_CODE_REGION_FOR_EXPRESSION (expressionb, (expressionbleft, expressionbright))
						  };
					    }
                                        
);
 } );
 ( lr_table::NONTERM 52,  ( result,  for_t1left,  expressionb1right),  rest671);
 } 
;  ( 199,  ( ( _,  ( values::QQ_EXPRESSIONB expressionb1,  expressionbleft,  (expressionbright as expressionb1right))) !  ( _,  ( _,  where_t1left,  _)) !  rest671)) => {  my  result = 
values::QQ_LIST_COMPREHENSION_WHERE_CLAUSE (\\  _ =  {  my  (expressionb as expressionb1) = expressionb1 ();
 (
   elc::LIST_COMPREHENSION_WHERE_CLAUSE  (SOURCE_CODE_REGION_FOR_EXPRESSION (expressionb, (expressionbleft, expressionbright)) ));
 } );
 ( lr_table::NONTERM 53,  ( result,  where_t1left,  
expressionb1right),  rest671);
 } 
;  ( 200,  ( rest671)) => {  my  result = values::QQ_LIST_COMPREHENSION_CLAUSES (\\  _ =  (  [] ));
 ( lr_table::NONTERM 54,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 201,  ( ( _,  ( values::QQ_LIST_COMPREHENSION_CLAUSES list_comprehension_clauses1,  _,  list_comprehension_clauses1right)) !  ( _,  ( values::QQ_LIST_COMPREHENSION_WHERE_CLAUSE 
list_comprehension_where_clause1,  list_comprehension_where_clause1left,  _)) !  rest671)) => {  my  result = values::QQ_LIST_COMPREHENSION_CLAUSES (\\  _ =  {  my  (list_comprehension_where_clause
 as list_comprehension_where_clause1) = list_comprehension_where_clause1 ();
 my  (list_comprehension_clauses as list_comprehension_clauses1) = list_comprehension_clauses1 ();
 (
 list_comprehension_where_clause ! list_comprehension_clauses );
 } );
 ( lr_table::NONTERM 54,  ( result,  list_comprehension_where_clause1left,  list_comprehension_clauses1right),  rest671);
 } 
;  ( 202,  ( ( _,  ( values::QQ_LIST_COMPREHENSION_CLAUSES list_comprehension_clauses1,  _,  list_comprehension_clauses1right)) !  ( _,  ( values::QQ_LIST_COMPREHENSION_FOR_CLAUSE 
list_comprehension_for_clause1,  list_comprehension_for_clause1left,  _)) !  rest671)) => {  my  result = values::QQ_LIST_COMPREHENSION_CLAUSES (\\  _ =  {  my  (list_comprehension_for_clause as 
list_comprehension_for_clause1) = list_comprehension_for_clause1 ();
 my  (list_comprehension_clauses as list_comprehension_clauses1) = list_comprehension_clauses1 ();
 (
 list_comprehension_for_clause   ! list_comprehension_clauses );
 } );
 ( lr_table::NONTERM 54,  ( result,  list_comprehension_for_clause1left,  list_comprehension_clauses1right),  rest671);
 } 
;  ( 203,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  passiveop_id1left,  passiveop_id1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (passiveop_id as passiveop_id1
) = passiveop_id1 ();
 (VARIABLE_IN_EXPRESSION [make_value_symbol passiveop_id]);
 } );
 ( lr_table::NONTERM 49,  ( result,  passiveop_id1left,  passiveop_id1right),  rest671);
 } 
;  ( 204,  ( ( _,  ( values::QQ_UPPERCASE_PATH uppercase_path1,  uppercase_path1left,  uppercase_path1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (uppercase_path as 
uppercase_path1) = uppercase_path1 ();
 (VARIABLE_IN_EXPRESSION (uppercase_path make_value_symbol));
 } );
 ( lr_table::NONTERM 49,  ( result,  uppercase_path1left,  uppercase_path1right),  rest671)
;
 } 
;  ( 205,  ( ( _,  ( values::QQ_LOWERCASE_PATH lowercase_path1,  lowercase_path1left,  lowercase_path1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (lowercase_path as 
lowercase_path1) = lowercase_path1 ();
 (VARIABLE_IN_EXPRESSION (lowercase_path make_value_symbol));
 } );
 ( lr_table::NONTERM 49,  ( result,  lowercase_path1left,  lowercase_path1right),  rest671)
;
 } 
;  ( 206,  ( ( _,  ( values::QQ_OPERATORS_PATH operators_path1,  operators_path1left,  operators_path1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (operators_path as 
operators_path1) = operators_path1 ();
 (VARIABLE_IN_EXPRESSION (operators_path make_value_symbol));
 } );
 ( lr_table::NONTERM 49,  ( result,  operators_path1left,  operators_path1right),  rest671)
;
 } 
;  ( 207,  ( ( _,  ( values::QQ_INT int1,  int1left,  int1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (int as int1) = int1 ();
 (INT_CONSTANT_IN_EXPRESSION int);
 } 
);
 ( lr_table::NONTERM 49,  ( result,  int1left,  int1right),  rest671);
 } 
;  ( 208,  ( ( _,  ( values::UNT unt1,  unt1left,  unt1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (unt as unt1) = unt1 ();
 (UNT_CONSTANT_IN_EXPRESSION unt);
 } );

 ( lr_table::NONTERM 49,  ( result,  unt1left,  unt1right),  rest671);
 } 
;  ( 209,  ( ( _,  ( values::FLOAT float1,  float1left,  float1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (float as float1) = float1 ();
 (
FLOAT_CONSTANT_IN_EXPRESSION float);
 } );
 ( lr_table::NONTERM 49,  ( result,  float1left,  float1right),  rest671);
 } 
;  ( 210,  ( ( _,  ( values::STRING string1,  string1left,  string1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (string as string1) = string1 ();
 (
STRING_CONSTANT_IN_EXPRESSION string);
 } );
 ( lr_table::NONTERM 49,  ( result,  string1left,  string1right),  rest671);
 } 
;  ( 211,  ( ( _,  ( values::CHAR char1,  char1left,  char1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (char as char1) = char1 ();
 (CHAR_CONSTANT_IN_EXPRESSION char
);
 } );
 ( lr_table::NONTERM 49,  ( result,  char1left,  char1right),  rest671);
 } 
;  ( 212,  ( ( _,  ( values::QQ_SELECTOR selector1,  _,  (selectorright as selector1right))) !  ( _,  ( _,  (pre_dotleft as pre_dot1left),  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP
 (\\  _ =  {  my  (selector as selector1) = selector1 ();
 (mark_expression (RECORD_SELECTOR_EXPRESSION selector, pre_dotleft,  selectorright));
 } );
 ( lr_table::NONTERM 49,  ( result,  pre_dot1left
,  selector1right),  rest671);
 } 
;  ( 213,  ( ( _,  ( values::INT int1,  _,  (intright as int1right))) !  ( _,  ( _,  (hashleft as hash1left),  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (int as int1)
 = int1 ();
 (mark_expression (RECORD_SELECTOR_EXPRESSION (symbol::make_label_symbol (multiword_int::to_string int)), hashleft, intright));
 } );
 ( lr_table::NONTERM 49,  ( result,  hash1left,  
int1right),  rest671);
 } 
;  ( 214,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_RECORD_ELEMENTS record_elements1,  _,  _)) !  ( _,  ( _,  (lbraceleft as lbrace1left),  _)) !  rest671)) => {  my  
result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (record_elements as record_elements1) = record_elements1 ();
 (mark_expression (RECORD_IN_EXPRESSION record_elements, lbraceleft, rbraceright));
 } );
 
( lr_table::NONTERM 49,  ( result,  lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 215,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( _,  lbrace1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  (RECORD_IN_EXPRESSION NIL));
 ( lr_table::NONTERM 49,  ( 
result,  lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 216,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  (void_expression));
 ( lr_table::NONTERM 49,  ( result,  
lparen1left,  rparen1right),  rest671);
 } 
;  ( 217,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_EXPRESSION expression1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  { 
 my  (expression as expression1) = expression1 ();
 (expression);
 } );
 ( lr_table::NONTERM 49,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 218,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( values::QQ_BLOCK_CONTENTS block_contents1,  _,  _)) !  ( _,  ( _,  lbrace1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _
 =  {  my  (block_contents as block_contents1) = block_contents1 ();
 (block_contents);
 } );
 ( lr_table::NONTERM 49,  ( result,  lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 219,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_EXPRESSIONS_2_N expressions_2_n1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\ 
 _ =  {  my  (expressions_2_n as expressions_2_n1) = expressions_2_n1 ();
 (TUPLE_EXPRESSION    expressions_2_n);
 } );
 ( lr_table::NONTERM 49,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 220,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( values::QQ_EXPRESSIONS_1_N expressions_1_n1,  _,  _)) !  ( _,  ( _,  lbracket1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP
 (\\  _ =  {  my  (expressions_1_n as expressions_1_n1) = expressions_1_n1 ();
 (LIST_EXPRESSION     expressions_1_n);
 } );
 ( lr_table::NONTERM 49,  ( result,  lbracket1left,  rbracket1right),  
rest671);
 } 
;  ( 221,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( _,  lbracket1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  (LIST_EXPRESSION     NIL));
 ( lr_table::NONTERM 49,  (
 result,  lbracket1left,  rbracket1right),  rest671);
 } 
;  ( 222,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( values::QQ_LIST_COMPREHENSION list_comprehension1,  _,  _)) !  ( _,  ( _,  lbracket1left,  _)) !  rest671)) => {  my  result = 
values::QQ_ATOMIC_EXP (\\  _ =  {  my  (list_comprehension as list_comprehension1) = list_comprehension1 ();
 (list_comprehension);
 } );
 ( lr_table::NONTERM 49,  ( result,  lbracket1left,  
rbracket1right),  rest671);
 } 
;  ( 223,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( values::QQ_EXPRESSIONS_1_N expressions_1_n1,  _,  _)) !  ( _,  ( _,  vectorstart1left,  _)) !  rest671)) => {  my  result = 
values::QQ_ATOMIC_EXP (\\  _ =  {  my  (expressions_1_n as expressions_1_n1) = expressions_1_n1 ();
 (VECTOR_IN_EXPRESSION   expressions_1_n);
 } );
 ( lr_table::NONTERM 49,  ( result,  
vectorstart1left,  rbracket1right),  rest671);
 } 
;  ( 224,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( _,  vectorstart1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  (VECTOR_IN_EXPRESSION   NIL));
 ( lr_table::NONTERM 
49,  ( result,  vectorstart1left,  rbracket1right),  rest671);
 } 
;  ( 225,  ( ( _,  ( values::ANTIQUOTE_ID antiquote_id1,  antiquote_id1left,  antiquote_id1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (antiquote_id as antiquote_id1
) = antiquote_id1 ();
 (VARIABLE_IN_EXPRESSION ( [ make_value_symbol antiquote_id ] ) );
 } );
 ( lr_table::NONTERM 49,  ( result,  antiquote_id1left,  antiquote_id1right),  rest671);
 } 
;  ( 226,  ( ( _,  ( values::QQ_QUOTE quote1,  quote1left,  quote1right)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (quote as quote1) = quote1 ();
 (LIST_EXPRESSION quote)
;
 } );
 ( lr_table::NONTERM 49,  ( result,  quote1left,  quote1right),  rest671);
 } 
;  ( 227,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_DARROW_RULES darrow_rules1,  _,  _)) !  ( _,  ( _,  (fn_tleft as fn_t1left),  _)) !  rest671)) => {  my  result = 
values::QQ_ATOMIC_EXP (\\  _ =  {  my  (darrow_rules as darrow_rules1) = darrow_rules1 ();
 (mark_expression (FN_EXPRESSION  darrow_rules,  fn_tleft, end_tright));
 } );
 ( lr_table::NONTERM 49,  ( 
result,  fn_t1left,  end_t1right),  rest671);
 } 
;  ( 228,  ( ( _,  ( _,  _,  (esac_tright as esac_t1right))) !  ( _,  ( values::QQ_DARROW_RULES darrow_rules1,  _,  _)) !  ( _,  ( values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  (
case_tleft as case_t1left),  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  (darrow_rules as darrow_rules1) = 
darrow_rules1 ();
 (
    {   expression =  PRE_FIXITY_EXPRESSION prefix_exp;
 
						 mark_expression (
						    CASE_EXPRESSION { expression, rules => darrow_rules },
						    case_tleft, esac_tright
						 );
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  case_t1left,  esac_t1right),  rest671);
 } 
;  ( 229,  ( ( _,  ( values::QQ_ELIFS elifs1,  elifsleft,  (elifsright as elifs1right))) !  ( _,  ( values::QQ_BLOCK_CONTENTS block_contents1,  block_contents1left,  block_contents1right)) !  ( _,  ( 
values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  if_t1left,  _)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  
block_contents1 = block_contents1 ();
 my  (elifs as elifs1) = elifs1 ();
 (
   {   IF_EXPRESSION
						    { test_case => PRE_FIXITY_EXPRESSION prefix_exp,
						      then_case => mark_expression (block_contents1, block_contents1left, block_contents1right),
						      else_case => mark_expression (elifs,           elifsleft,           elifsright          )
						    };
                                            }
					
);
 } );
 ( lr_table::NONTERM 49,  ( result,  if_t1left,  elifs1right),  rest671);
 } 
;  ( 230,  ( ( _,  ( values::BACKTICKS backticks1,  (backticksleft as backticks1left),  (backticksright as backticks1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (
backticks as backticks1) = backticks1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "backticks__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], backticksleft, backticksright),
						       source_code_region => (backticksleft, backticksright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION backticks, backticksleft, backticksright),
						       source_code_region => (backticksleft, backticksright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  backticks1left,  backticks1right),  rest671);
 } 
;  ( 231,  ( ( _,  ( values::DOT_BACKTICKS dot_backticks1,  (dot_backticksleft as dot_backticks1left),  (dot_backticksright as dot_backticks1right))) !  rest671)) => {  my  result = 
values::QQ_ATOMIC_EXP (\\  _ =  {  my  (dot_backticks as dot_backticks1) = dot_backticks1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotbackticks__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_backticksleft, dot_backticksright),
						       source_code_region => (dot_backticksleft, dot_backticksright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_backticks, dot_backticksleft, dot_backticksright),
						       source_code_region => (dot_backticksleft, dot_backticksright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_backticks1left,  dot_backticks1right),  rest671);
 } 
;  ( 232,  ( ( _,  ( values::DOT_QQUOTES dot_qquotes1,  (dot_qquotesleft as dot_qquotes1left),  (dot_qquotesright as dot_qquotes1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _
 =  {  my  (dot_qquotes as dot_qquotes1) = dot_qquotes1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotqquotes__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_qquotesleft, dot_qquotesright),
						       source_code_region => (dot_qquotesleft, dot_qquotesright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_qquotes, dot_qquotesleft, dot_qquotesright),
						       source_code_region => (dot_qquotesleft, dot_qquotesright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_qquotes1left,  dot_qquotes1right),  rest671);
 } 
;  ( 233,  ( ( _,  ( values::DOT_QUOTES dot_quotes1,  (dot_quotesleft as dot_quotes1left),  (dot_quotesright as dot_quotes1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  { 
 my  (dot_quotes as dot_quotes1) = dot_quotes1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotquotes__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_quotesleft, dot_quotesright),
						       source_code_region => (dot_quotesleft, dot_quotesright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_quotes, dot_quotesleft, dot_quotesright),
						       source_code_region => (dot_quotesleft, dot_quotesright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_quotes1left,  dot_quotes1right),  rest671);
 } 
;  ( 234,  ( ( _,  ( values::DOT_BROKETS dot_brokets1,  (dot_broketsleft as dot_brokets1left),  (dot_broketsright as dot_brokets1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _
 =  {  my  (dot_brokets as dot_brokets1) = dot_brokets1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotbrokets__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_broketsleft, dot_broketsright),
						       source_code_region => (dot_broketsleft, dot_broketsright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_brokets, dot_broketsleft, dot_broketsright),
						       source_code_region => (dot_broketsleft, dot_broketsright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_brokets1left,  dot_brokets1right),  rest671);
 } 
;  ( 235,  ( ( _,  ( values::DOT_BARETS dot_barets1,  (dot_baretsleft as dot_barets1left),  (dot_baretsright as dot_barets1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  { 
 my  (dot_barets as dot_barets1) = dot_barets1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotbarets__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_baretsleft, dot_baretsright),
						       source_code_region => (dot_baretsleft, dot_baretsright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_barets, dot_baretsleft, dot_baretsright),
						       source_code_region => (dot_baretsleft, dot_baretsright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_barets1left,  dot_barets1right),  rest671);
 } 
;  ( 236,  ( ( _,  ( values::DOT_SLASHETS dot_slashets1,  (dot_slashetsleft as dot_slashets1left),  (dot_slashetsright as dot_slashets1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP
 (\\  _ =  {  my  (dot_slashets as dot_slashets1) = dot_slashets1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dotslashets__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_slashetsleft, dot_slashetsright),
						       source_code_region => (dot_slashetsleft, dot_slashetsright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_slashets, dot_slashetsleft, dot_slashetsright),
						       source_code_region => (dot_slashetsleft, dot_slashetsright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_slashets1left,  dot_slashets1right),  rest671);
 } 
;  ( 237,  ( ( _,  ( values::DOT_HASHETS dot_hashets1,  (dot_hashetsleft as dot_hashets1left),  (dot_hashetsright as dot_hashets1right))) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _
 =  {  my  (dot_hashets as dot_hashets1) = dot_hashets1 ();
 (
    {
                                                 my (v, f)
                                                     =
                                                     make_value_and_fixity_symbols  (make_raw_symbol "dothashets__op");

						 fun_item
						     =
						     { item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_hashetsleft, dot_hashetsright),
						       source_code_region => (dot_hashetsleft, dot_hashetsright),
						       fixity		  => THE f
						     };

						 string_item
						     =
						     { item               => mark_expression (STRING_CONSTANT_IN_EXPRESSION dot_hashets, dot_hashetsleft, dot_hashetsright),
						       source_code_region => (dot_hashetsleft, dot_hashetsright),
						       fixity		  => THE f
						     };

                                                 PRE_FIXITY_EXPRESSION [ fun_item, string_item ];
                                             }
                                        
);
 } );
 ( lr_table::NONTERM 49,  ( result,  dot_hashets1left,  dot_hashets1right),  rest671);
 } 
;  ( 238,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_BLOCK_CONTENTS block_contents1,  block_contentsleft,  block_contentsright)) !  ( _,  ( _,  (lbrace_dotleft as 
lbrace_dot1left),  lbrace_dotright)) !  rest671)) => {  my  result = values::QQ_ATOMIC_EXP (\\  _ =  {  my  (block_contents as block_contents1) = block_contents1 ();
 (
make_raw_syntax::thunk
					     ( lbrace_dotleft,
					       lbrace_dotright,
					       block_contents,
					       block_contentsleft,
					       block_contentsright,
					       rbraceright
                                        )     
);
 } );
 ( lr_table::NONTERM 49,  ( result,  lbrace_dot1left,  rbrace1right),  rest671);
 } 
;  ( 239,  ( ( _,  ( _,  fi_t1left,  fi_t1right)) !  rest671)) => {  my  result = values::QQ_ELIFS (\\  _ =  (void_expression));
 ( lr_table::NONTERM 55,  ( result,  fi_t1left,  fi_t1right),  rest671)
;
 } 
;  ( 240,  ( ( _,  ( _,  _,  fi_t1right)) !  ( _,  ( values::QQ_BLOCK_CONTENTS block_contents1,  _,  _)) !  ( _,  ( _,  else_t1left,  _)) !  rest671)) => {  my  result = values::QQ_ELIFS (\\  _ =  { 
 my  (block_contents as block_contents1) = block_contents1 ();
 (block_contents);
 } );
 ( lr_table::NONTERM 55,  ( result,  else_t1left,  fi_t1right),  rest671);
 } 
;  ( 241,  ( ( _,  ( values::QQ_ELIFS elifs1,  elifsleft,  (elifsright as elifs1right))) !  ( _,  ( values::QQ_BLOCK_CONTENTS block_contents1,  block_contentsleft,  block_contentsright)) !  ( _,  ( 
values::QQ_PREFIX_EXP prefix_exp1,  _,  _)) !  ( _,  ( _,  elif_t1left,  _)) !  rest671)) => {  my  result = values::QQ_ELIFS (\\  _ =  {  my  (prefix_exp as prefix_exp1) = prefix_exp1 ();
 my  (
block_contents as block_contents1) = block_contents1 ();
 my  (elifs as elifs1) = elifs1 ();
 (
   {
                          		        IF_EXPRESSION
						    { test_case => PRE_FIXITY_EXPRESSION prefix_exp,
						      then_case => mark_expression (block_contents, block_contentsleft, block_contentsright),
						      else_case => mark_expression (elifs,          elifsleft,          elifsright         )
						    };
                                            }
					
);
 } );
 ( lr_table::NONTERM 55,  ( result,  elif_t1left,  elifs1right),  rest671);
 } 
;  ( 242,  ( ( _,  ( values::QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS block_declarations_and_expressions1,  block_declarations_and_expressions1left,  block_declarations_and_expressions1right)) !  rest671
)) => {  my  result = values::QQ_BLOCK_CONTENTS (\\  _ =  {  my  (block_declarations_and_expressions as block_declarations_and_expressions1) = block_declarations_and_expressions1 ();
 (
raw_syntax_junk::block_to_let  block_declarations_and_expressions);
 } );
 ( lr_table::NONTERM 42,  ( result,  block_declarations_and_expressions1left,  block_declarations_and_expressions1right),  
rest671);
 } 
;  ( 243,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_DECLARATION_OR_EXPRESSION declaration_or_expression1,  declaration_or_expression1left,  _)) !  rest671)) => {  my  result = 
values::QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS (\\  _ =  {  my  (declaration_or_expression as declaration_or_expression1) = declaration_or_expression1 ();
 ([ declaration_or_expression ]);
 } );
 ( 
lr_table::NONTERM 43,  ( result,  declaration_or_expression1left,  semi1right),  rest671);
 } 
;  ( 244,  ( ( _,  ( values::QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS block_declarations_and_expressions1,  _,  block_declarations_and_expressions1right)) !  _ !  ( _,  ( 
values::QQ_DECLARATION_OR_EXPRESSION declaration_or_expression1,  declaration_or_expression1left,  _)) !  rest671)) => {  my  result = values::QQ_BLOCK_DECLARATIONS_AND_EXPRESSIONS (\\  _ =  {  my  (
declaration_or_expression as declaration_or_expression1) = declaration_or_expression1 ();
 my  (block_declarations_and_expressions as block_declarations_and_expressions1) = 
block_declarations_and_expressions1 ();
 (block_declarations_and_expressions @ [declaration_or_expression]);
 } );
 ( lr_table::NONTERM 43,  ( result,  declaration_or_expression1left,  
block_declarations_and_expressions1right),  rest671);
 } 
;  ( 245,  ( ( _,  ( values::QQ_MODIFIED_REGULAR_EXPRESSION modified_regular_expression1,  modified_regular_expression1left,  modified_regular_expression1right)) !  rest671)) => {  my  result = 
values::QQ_REGULAR_EXPRESSIONS (\\  _ =  {  my  (modified_regular_expression as modified_regular_expression1) = modified_regular_expression1 ();
 ( [ modified_regular_expression ] );
 } );
 ( 
lr_table::NONTERM 41,  ( result,  modified_regular_expression1left,  modified_regular_expression1right),  rest671);
 } 
;  ( 246,  ( ( _,  ( values::QQ_REGULAR_EXPRESSIONS regular_expressions1,  _,  regular_expressions1right)) !  ( _,  ( values::QQ_MODIFIED_REGULAR_EXPRESSION modified_regular_expression1,  
modified_regular_expression1left,  _)) !  rest671)) => {  my  result = values::QQ_REGULAR_EXPRESSIONS (\\  _ =  {  my  (modified_regular_expression as modified_regular_expression1) = 
modified_regular_expression1 ();
 my  (regular_expressions as regular_expressions1) = regular_expressions1 ();
 (modified_regular_expression ! regular_expressions);
 } );
 ( lr_table::NONTERM 41,  ( 
result,  modified_regular_expression1left,  regular_expressions1right),  rest671);
 } 
;  ( 247,  ( ( _,  ( values::QQ_REGULAR_EXPRESSION regular_expression1,  regular_expression1left,  regular_expression1right)) !  rest671)) => {  my  result = values::QQ_MODIFIED_REGULAR_EXPRESSION
 (\\  _ =  {  my  (regular_expression as regular_expression1) = regular_expression1 ();
 (regular_expression);
 } );
 ( lr_table::NONTERM 39,  ( result,  regular_expression1left,  
regular_expression1right),  rest671);
 } 
;  ( 248,  ( ( _,  ( _,  _,  star1right)) !  ( _,  ( values::QQ_REGULAR_EXPRESSION regular_expression1,  regular_expression1left,  _)) !  rest671)) => {  my  result = 
values::QQ_MODIFIED_REGULAR_EXPRESSION (\\  _ =  {  my  (regular_expression as regular_expression1) = regular_expression1 ();
 (REGEX_STAR regular_expression);
 } );
 ( lr_table::NONTERM 39,  ( result
,  regular_expression1left,  star1right),  rest671);
 } 
;  ( 249,  ( ( _,  ( _,  _,  pre_star1right)) !  ( _,  ( values::QQ_REGULAR_EXPRESSION regular_expression1,  regular_expression1left,  _)) !  rest671)) => {  my  result = 
values::QQ_MODIFIED_REGULAR_EXPRESSION (\\  _ =  {  my  (regular_expression as regular_expression1) = regular_expression1 ();
 (REGEX_STAR regular_expression);
 } );
 ( lr_table::NONTERM 39,  ( result
,  regular_expression1left,  pre_star1right),  rest671);
 } 
;  ( 250,  ( ( _,  ( values::STRING string1,  string1left,  string1right)) !  rest671)) => {  my  result = values::QQ_REGULAR_EXPRESSION (\\  _ =  {  my  (string as string1) = string1 ();
 (
REGEX_STRING string);
 } );
 ( lr_table::NONTERM 40,  ( result,  string1left,  string1right),  rest671);
 } 
;  ( 251,  ( ( _,  ( _,  pre_dot1left,  pre_dot1right)) !  rest671)) => {  my  result = values::QQ_REGULAR_EXPRESSION (\\  _ =  (REGEX_DOT));
 ( lr_table::NONTERM 40,  ( result,  pre_dot1left,  
pre_dot1right),  rest671);
 } 
;  ( 252,  ( ( _,  ( _,  dot1left,  dot1right)) !  rest671)) => {  my  result = values::QQ_REGULAR_EXPRESSION (\\  _ =  (REGEX_DOT));
 ( lr_table::NONTERM 40,  ( result,  dot1left,  dot1right),  
rest671);
 } 
;  ( 253,  ( ( _,  ( values::QQ_DECLARATION declaration1,  declaration1left,  declaration1right)) !  rest671)) => {  my  result = values::QQ_DECLARATION_OR_EXPRESSION (\\  _ =  {  my  (declaration as 
declaration1) = declaration1 ();
 (declaration);
 } );
 ( lr_table::NONTERM 44,  ( result,  declaration1left,  declaration1right),  rest671);
 } 
;  ( 254,  ( ( _,  ( values::QQ_EXPRESSION expression1,  (expressionleft as expression1left),  (expressionright as expression1right))) !  rest671)) => {  my  result = 
values::QQ_DECLARATION_OR_EXPRESSION (\\  _ =  {  my  (expression as expression1) = expression1 ();
 (expression_to_declaration( expression, expressionleft, expressionright ));
 } );
 ( 
lr_table::NONTERM 44,  ( result,  expression1left,  expression1right),  rest671);
 } 
;  ( 255,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_MAYBE_DECLARATIONS maybe_declarations2,  maybe_declarations2left,  maybe_declarations2right)) !  _ !  ( _,  ( 
values::QQ_MAYBE_DECLARATIONS maybe_declarations1,  maybe_declarations1left,  maybe_declarations1right)) !  ( _,  ( _,  (stipulate_tleft as stipulate_t1left),  _)) !  rest671)) => {  my  result = 
values::QQ_DECLARATION_OR_EXPRESSION (\\  _ =  {  my  maybe_declarations1 = maybe_declarations1 ();
 my  maybe_declarations2 = maybe_declarations2 ();
 (
   mark_declaration (
						LOCAL_DECLARATIONS (
						    mark_declaration (maybe_declarations1, maybe_declarations1left, maybe_declarations1right),
						    mark_declaration (maybe_declarations2, maybe_declarations2left, maybe_declarations2right)
						),
						stipulate_tleft,
						end_tright
					    )
					
);
 } );
 ( lr_table::NONTERM 44,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 256,  ( ( _,  ( values::ENDQ endq1,  _,  endq1right)) !  ( _,  ( _,  beginq1left,  _)) !  rest671)) => {  my  result = values::QQ_QUOTE (\\  _ =  {  my  (endq as endq1) = endq1 ();
 (
 [ quote_expression endq ] );
 } );
 ( lr_table::NONTERM 58,  ( result,  beginq1left,  endq1right),  rest671);
 } 
;  ( 257,  ( ( _,  ( values::ENDQ endq1,  _,  endq1right)) !  ( _,  ( values::QQ_OT_LIST ot_list1,  _,  _)) !  ( _,  ( _,  beginq1left,  _)) !  rest671)) => {  my  result = values::QQ_QUOTE (\\  _ = 
 {  my  (ot_list as ot_list1) = ot_list1 ();
 my  (endq as endq1) = endq1 ();
 (ot_list @ [ quote_expression endq ] );
 } );
 ( lr_table::NONTERM 58,  ( result,  beginq1left,  endq1right),  rest671)
;
 } 
;  ( 258,  ( ( _,  ( values::QQ_ATOMIC_EXP atomic_exp1,  _,  atomic_exp1right)) !  ( _,  ( values::CHUNKL chunkl1,  chunkl1left,  _)) !  rest671)) => {  my  result = values::QQ_OT_LIST (\\  _ =  { 
 my  (chunkl as chunkl1) = chunkl1 ();
 my  (atomic_exp as atomic_exp1) = atomic_exp1 ();
 ( [ quote_expression chunkl,   antiquote_expression  atomic_exp ] );
 } );
 ( lr_table::NONTERM 59,  ( result
,  chunkl1left,  atomic_exp1right),  rest671);
 } 
;  ( 259,  ( ( _,  ( values::QQ_OT_LIST ot_list1,  _,  ot_list1right)) !  ( _,  ( values::QQ_ATOMIC_EXP atomic_exp1,  _,  _)) !  ( _,  ( values::CHUNKL chunkl1,  chunkl1left,  _)) !  rest671)) => { 
 my  result = values::QQ_OT_LIST (\\  _ =  {  my  (chunkl as chunkl1) = chunkl1 ();
 my  (atomic_exp as atomic_exp1) = atomic_exp1 ();
 my  (ot_list as ot_list1) = ot_list1 ();
 (
   quote_expression chunkl ! antiquote_expression atomic_exp ! ot_list);
 } );
 ( lr_table::NONTERM 59,  ( result,  chunkl1left,  ot_list1right),  rest671);
 } 
;  ( 260,  ( ( _,  ( values::QQ_EXPRESSIONS_2_N expressions_2_n1,  _,  expressions_2_n1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  result =
 values::QQ_EXPRESSIONS_2_N (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (expressions_2_n as expressions_2_n1) = expressions_2_n1 ();
 (expression ! expressions_2_n);
 } );
 ( 
lr_table::NONTERM 57,  ( result,  expression1left,  expressions_2_n1right),  rest671);
 } 
;  ( 261,  ( ( _,  ( values::QQ_EXPRESSION expression2,  _,  expression2right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  result = 
values::QQ_EXPRESSIONS_2_N (\\  _ =  {  my  expression1 = expression1 ();
 my  expression2 = expression2 ();
 ( [ expression1, expression2 ] );
 } );
 ( lr_table::NONTERM 57,  ( result,  
expression1left,  expression2right),  rest671);
 } 
;  ( 262,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  expression1right)) !  rest671)) => {  my  result = values::QQ_EXPRESSIONS_1_N (\\  _ =  {  my  (expression as expression1) = 
expression1 ();
 ( [ expression ] );
 } );
 ( lr_table::NONTERM 56,  ( result,  expression1left,  expression1right),  rest671);
 } 
;  ( 263,  ( ( _,  ( values::QQ_EXPRESSIONS_1_N expressions_1_n1,  _,  expressions_1_n1right)) !  _ !  ( _,  ( values::QQ_EXPRESSION expression1,  expression1left,  _)) !  rest671)) => {  my  result =
 values::QQ_EXPRESSIONS_1_N (\\  _ =  {  my  (expression as expression1) = expression1 ();
 my  (expressions_1_n as expressions_1_n1) = expressions_1_n1 ();
 (expression ! expressions_1_n);
 } );
 ( 
lr_table::NONTERM 56,  ( result,  expression1left,  expressions_1_n1right),  rest671);
 } 
;  ( 264,  ( ( _,  ( values::QQ_PATTERN pattern2,  _,  pattern2right)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)) => {  my  result = values::QQ_PATTERN (\\  _ =  { 
 my  pattern1 = pattern1 ();
 my  pattern2 = pattern2 ();
 (layered   (pattern1,   pattern2,   error (pattern1left, pattern2right)));
 } );
 ( lr_table::NONTERM 60,  ( result,  pattern1left,  
pattern2right),  rest671);
 } 
;  ( 265,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)) => {  my  result = values::QQ_PATTERN (\\  _ =  { 
 my  (pattern as pattern1) = pattern1 ();
 my  (anytype as anytype1) = anytype1 ();
 (TYPE_CONSTRAINT_PATTERN {   pattern,  type_constraint => anytype } );
 } );
 ( lr_table::NONTERM 60,  ( result,  
pattern1left,  anytype1right),  rest671);
 } 
;  ( 266,  ( ( _,  ( values::QQ_APATS apats1,  apats1left,  apats1right)) !  rest671)) => {  my  result = values::QQ_PATTERN (\\  _ =  {  my  (apats as apats1) = apats1 ();
 (PRE_FIXITY_PATTERN apats)
;
 } );
 ( lr_table::NONTERM 60,  ( result,  apats1left,  apats1right),  rest671);
 } 
;  ( 267,  ( ( _,  ( values::QQ_POSTFIX_PAT postfix_pat1,  postfix_pat1left,  postfix_pat1right)) !  rest671)) => {  my  result = values::QQ_APATS (\\  _ =  {  my  (postfix_pat as postfix_pat1) = 
postfix_pat1 ();
 ( [ postfix_pat ] );
 } );
 ( lr_table::NONTERM 80,  ( result,  postfix_pat1left,  postfix_pat1right),  rest671);
 } 
;  ( 268,  ( ( _,  ( values::QQ_APATS apats1,  _,  apats1right)) !  ( _,  ( values::QQ_POSTFIX_PAT postfix_pat1,  postfix_pat1left,  _)) !  rest671)) => {  my  result = values::QQ_APATS (\\  _ =  { 
 my  (postfix_pat as postfix_pat1) = postfix_pat1 ();
 my  (apats as apats1) = apats1 ();
 (   postfix_pat ! apats);
 } );
 ( lr_table::NONTERM 80,  ( result,  postfix_pat1left,  apats1right),  
rest671);
 } 
;  ( 269,  ( ( _,  ( values::QQ_APAT apat1,  apat1left,  apat1right)) !  rest671)) => {  my  result = values::QQ_POSTFIX_PAT (\\  _ =  {  my  (apat as apat1) = apat1 ();
 (apat);
 } );
 ( 
lr_table::NONTERM 64,  ( result,  apat1left,  apat1right),  rest671);
 } 
;  ( 270,  ( ( _,  ( values::QQ_POSTFIX_OP postfix_op1,  postfix_opleft,  (postfix_opright as postfix_op1right))) !  ( _,  ( values::QQ_APAT apat1,  (apatleft as apat1left),  _)) !  rest671)) => { 
 my  result = values::QQ_POSTFIX_PAT (\\  _ =  {  my  (apat as apat1) = apat1 ();
 my  (postfix_op as postfix_op1) = postfix_op1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [make_value_symbol postfix_op], 
							   source_code_region => (postfix_opleft, postfix_opright),
							   fixity	      => NULL
						       };

                                                pattern = PRE_FIXITY_PATTERN [ p_op, apat ];

						{   item               =>  pattern,
						    source_code_region =>  (apatleft, postfix_opright),
						    fixity	       =>  NULL
						};
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 64,  ( result,  apat1left,  postfix_op1right),  rest671);
 } 
;  ( 271,  ( ( _,  ( values::QQ_APAT' apat'1,  (apat'left as apat'1left),  (apat'right as apat'1right))) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  {  my  (apat' as apat'1) = apat'1 ()
;
 (   {   item               => apat',
						source_code_region => (apat'left, apat'right),
						fixity             => NULL
					     }
					);
 } );
 ( lr_table::NONTERM 62,  ( result,  apat'1left
,  apat'1right),  rest671);
 } 
;  ( 272,  ( ( _,  ( _,  _,  (rparenright as rparen1right))) !  ( _,  ( values::QQ_PATTERN pattern1,  _,  _)) !  ( _,  ( _,  (lparenleft as lparen1left),  _)) !  rest671)) => {  my  result = 
values::QQ_APAT (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 (
   {   item               => pattern,
						source_code_region => (lparenleft, rparenright),
						fixity		   => NULL
					    }
					);
 } );
 ( lr_table::NONTERM 62,  ( result,  lparen1left,  
rparen1right),  rest671);
 } 
;  ( 273,  ( ( _,  ( values::QQ_VALUE_ID value_id1,  (value_idleft as value_id1left),  (value_idright as value_id1right))) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  {  my  (value_id
 as value_id1) = value_id1 ();
 (
   {   my (v, f)
                                                    =
						    make_value_and_fixity_symbols value_id;

						{   item	       => VARIABLE_IN_PATTERN [v], 
						    source_code_region => (value_idleft, value_idright),
						    fixity	       => THE f
						};
					    }
					
);
 } );
 ( lr_table::NONTERM 62,  ( result,  value_id1left,  value_id1right),  rest671);
 } 
;  ( 274,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  (passiveop_idleft as passiveop_id1left),  (passiveop_idright as passiveop_id1right))) !  rest671)) => {  my  result = values::QQ_APAT (\\  _
 =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 (
   {   {   item	       => VARIABLE_IN_PATTERN [make_value_symbol passiveop_id], 
						    source_code_region => (passiveop_idleft, passiveop_idright),
						    fixity	       => NULL
						};
					    }
					
);
 } );
 ( lr_table::NONTERM 62,  ( result,  passiveop_id1left,  passiveop_id1right),  rest671);
 } 
;  ( 275,  ( ( _,  ( values::QQ_PREFIX_OP prefix_op1,  (prefix_opleft as prefix_op1left),  (prefix_opright as prefix_op1right))) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  {  my  (
prefix_op as prefix_op1) = prefix_op1 ();
 (
   {   {   item	       => VARIABLE_IN_PATTERN [make_value_symbol prefix_op], 
						    source_code_region => (prefix_opleft, prefix_opright),
						    fixity	       => NULL
						};
					    }
					
);
 } );
 ( lr_table::NONTERM 62,  ( result,  prefix_op1left,  prefix_op1right),  rest671);
 } 
;  ( 276,  ( ( _,  ( _,  _,  (rparenright as rparen1right))) !  ( _,  ( _,  (lparenleft as lparen1left),  _)) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  (
   {   item               => void_pattern,
						source_code_region => (lparenleft, rparenright),
						fixity             => NULL
					    }
					));
 ( lr_table::NONTERM 62,  ( result,  lparen1left
,  rparen1right),  rest671);
 } 
;  ( 277,  ( ( _,  ( _,  _,  (rparenright as rparen1right))) !  ( _,  ( values::QQ_PAT_LIST pat_list1,  _,  _)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  _,  _)) !  ( _,  ( _,  (lparenleft as 
lparen1left),  _)) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (pat_list as pat_list1) = pat_list1 ();
 (
   {   item		   => TUPLE_PATTERN ( pattern ! pat_list),
						source_code_region => (lparenleft, rparenright),
						fixity             => NULL
					    }
					);
 } );
 ( lr_table::NONTERM 62,  ( 
result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 278,  ( ( _,  ( _,  _,  (rparenright as rparen1right))) !  ( _,  ( values::QQ_OR_PAT_LIST or_pat_list1,  _,  _)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  _,  _)) !  ( _,  ( _,  (lparenleft
 as lparen1left),  _)) !  rest671)) => {  my  result = values::QQ_APAT (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (or_pat_list as or_pat_list1) = or_pat_list1 ();
 (
   {   item		   => OR_PATTERN (pattern ! or_pat_list),
						source_code_region => (lparenleft, rparenright),
						fixity		   => NULL
					    }
					);
 } );
 ( lr_table::NONTERM 62,  ( result,  
lparen1left,  rparen1right),  rest671);
 } 
;  ( 279,  ( ( _,  ( values::QQ_UPPERCASE_PATH uppercase_path1,  uppercase_path1left,  uppercase_path1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (uppercase_path as 
uppercase_path1) = uppercase_path1 ();
 (VARIABLE_IN_PATTERN (uppercase_path make_value_symbol));
 } );
 ( lr_table::NONTERM 63,  ( result,  uppercase_path1left,  uppercase_path1right),  rest671);
 } 
;  ( 280,  ( ( _,  ( values::QQ_LOWERCASE_PATH lowercase_path1,  lowercase_path1left,  lowercase_path1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (lowercase_path as 
lowercase_path1) = lowercase_path1 ();
 (VARIABLE_IN_PATTERN (lowercase_path make_value_symbol));
 } );
 ( lr_table::NONTERM 63,  ( result,  lowercase_path1left,  lowercase_path1right),  rest671);
 } 
;  ( 281,  ( ( _,  ( values::QQ_OPERATORS_PATH operators_path1,  operators_path1left,  operators_path1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (operators_path as 
operators_path1) = operators_path1 ();
 (VARIABLE_IN_PATTERN (operators_path make_value_symbol));
 } );
 ( lr_table::NONTERM 63,  ( result,  operators_path1left,  operators_path1right),  rest671);
 } 
;  ( 282,  ( ( _,  ( values::QQ_INT int1,  int1left,  int1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (int as int1) = int1 ();
 (INT_CONSTANT_IN_PATTERN       int);
 } )
;
 ( lr_table::NONTERM 63,  ( result,  int1left,  int1right),  rest671);
 } 
;  ( 283,  ( ( _,  ( values::UNT unt1,  unt1left,  unt1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (unt as unt1) = unt1 ();
 (UNT_CONSTANT_IN_PATTERN       unt);
 } );
 (
 lr_table::NONTERM 63,  ( result,  unt1left,  unt1right),  rest671);
 } 
;  ( 284,  ( ( _,  ( values::STRING string1,  string1left,  string1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (string as string1) = string1 ();
 (
STRING_CONSTANT_IN_PATTERN string);
 } );
 ( lr_table::NONTERM 63,  ( result,  string1left,  string1right),  rest671);
 } 
;  ( 285,  ( ( _,  ( values::CHAR char1,  char1left,  char1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (char as char1) = char1 ();
 (CHAR_CONSTANT_IN_PATTERN     char)
;
 } );
 ( lr_table::NONTERM 63,  ( result,  char1left,  char1right),  rest671);
 } 
;  ( 286,  ( ( _,  ( _,  wild1left,  wild1right)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  (WILDCARD_PATTERN));
 ( lr_table::NONTERM 63,  ( result,  wild1left,  wild1right),  rest671
);
 } 
;  ( 287,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( _,  lbracket1left,  _)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  (LIST_PATTERN   NIL));
 ( lr_table::NONTERM 63,  ( result,  
lbracket1left,  rbracket1right),  rest671);
 } 
;  ( 288,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( values::QQ_PAT_LIST pat_list1,  _,  _)) !  ( _,  ( _,  lbracket1left,  _)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my  (
pat_list as pat_list1) = pat_list1 ();
 (LIST_PATTERN   pat_list);
 } );
 ( lr_table::NONTERM 63,  ( result,  lbracket1left,  rbracket1right),  rest671);
 } 
;  ( 289,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( _,  vectorstart1left,  _)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  (VECTOR_PATTERN NIL));
 ( lr_table::NONTERM 63,  ( result
,  vectorstart1left,  rbracket1right),  rest671);
 } 
;  ( 290,  ( ( _,  ( _,  _,  rbracket1right)) !  ( _,  ( values::QQ_PAT_LIST pat_list1,  _,  _)) !  ( _,  ( _,  vectorstart1left,  _)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  {  my 
 (pat_list as pat_list1) = pat_list1 ();
 (VECTOR_PATTERN pat_list);
 } );
 ( lr_table::NONTERM 63,  ( result,  vectorstart1left,  rbracket1right),  rest671);
 } 
;  ( 291,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( _,  lbrace1left,  _)) !  rest671)) => {  my  result = values::QQ_APAT' (\\  _ =  (void_pattern));
 ( lr_table::NONTERM 63,  ( result,  
lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 292,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_PLABELS plabels1,  _,  _)) !  ( _,  ( _,  (lbraceleft as lbrace1left),  _)) !  rest671)) => {  my  result = 
values::QQ_APAT' (\\  _ =  {  my  (plabels as plabels1) = plabels1 ();
 (
   {   my (definition, is_incomplete) = plabels;

						SOURCE_CODE_REGION_FOR_PATTERN (
						    RECORD_PATTERN {
							definition,
							is_incomplete
						    },
						    (lbraceleft, rbraceright)
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 63,  ( result,  lbrace1left,  rbrace1right),  rest671);
 } 
;  ( 293,  ( ( _,  ( values::QQ_PATTERN pattern1,  _,  pattern1right)) !  _ !  ( _,  ( values::QQ_SELECTOR selector1,  selector1left,  _)) !  rest671)) => {  my  result = values::QQ_PLABEL (\\  _ = 
 {  my  (selector as selector1) = selector1 ();
 my  (pattern as pattern1) = pattern1 ();
 (
   {
                                                (selector, pattern);
                                            }
                                        );
 } );
 ( lr_table::NONTERM 65,  ( 
result,  selector1left,  pattern1right),  rest671);
 } 
;  ( 294,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  lowercase_id1right)) !  rest671)) => {  my  result = values::QQ_PLABEL (\\  _ =  {  my  (lowercase_id as lowercase_id1)
 = lowercase_id1 ();
 (make_label_symbol lowercase_id,   VARIABLE_IN_PATTERN [ make_value_symbol lowercase_id ] );
 } );
 ( lr_table::NONTERM 65,  ( result,  lowercase_id1left,  lowercase_id1right),  
rest671);
 } 
;  ( 295,  ( ( _,  ( values::QQ_PATTERN pattern1,  _,  pattern1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_PLABEL
 (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (pattern as pattern1) = pattern1 ();
 (
   make_label_symbol lowercase_id, 
					    AS_PATTERN {
						variable_pattern   => VARIABLE_IN_PATTERN [make_value_symbol lowercase_id], 
						expression_pattern => pattern
					    }
					);
 } )
;
 ( lr_table::NONTERM 65,  ( result,  lowercase_id1left,  pattern1right),  rest671);
 } 
;  ( 296,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_PLABEL
 (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 (
   make_label_symbol lowercase_id,
					    TYPE_CONSTRAINT_PATTERN {
						pattern        => VARIABLE_IN_PATTERN [ make_value_symbol lowercase_id ],
						type_constraint => anytype
					    }
					)
;
 } );
 ( lr_table::NONTERM 65,  ( result,  lowercase_id1left,  anytype1right),  rest671);
 } 
;  ( 297,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  _,  lowercase_id1right)) !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  _)) !  rest671)) => {  my  result = values::QQ_PLABEL (\\ 
 _ =  {  my  (anytype as anytype1) = anytype1 ();
 my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 (
   make_label_symbol lowercase_id,
					    TYPE_CONSTRAINT_PATTERN {
						pattern        => VARIABLE_IN_PATTERN [ make_value_symbol lowercase_id ],
						type_constraint => anytype
					    }
					)
;
 } );
 ( lr_table::NONTERM 65,  ( result,  anytype1left,  lowercase_id1right),  rest671);
 } 
;  ( 298,  ( ( _,  ( values::QQ_PATTERN pattern1,  _,  pattern1right)) !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left, 
 _)) !  rest671)) => {  my  result = values::QQ_PLABEL (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (pattern as pattern1) = 
pattern1 ();
 (
   make_label_symbol lowercase_id,
					    AS_PATTERN {
						variable_pattern => TYPE_CONSTRAINT_PATTERN {
								      pattern        => VARIABLE_IN_PATTERN [ make_value_symbol lowercase_id ],
								      type_constraint => anytype
								   },
						expression_pattern => pattern
					    }
					
);
 } );
 ( lr_table::NONTERM 65,  ( result,  lowercase_id1left,  pattern1right),  rest671);
 } 
;  ( 299,  ( ( _,  ( values::QQ_PLABEL plabel1,  plabel1left,  plabel1right)) !  rest671)) => {  my  result = values::QQ_PLABELS (\\  _ =  {  my  (plabel as plabel1) = plabel1 ();
 ([plabel], FALSE)
;
 } );
 ( lr_table::NONTERM 66,  ( result,  plabel1left,  plabel1right),  rest671);
 } 
;  ( 300,  ( ( _,  ( _,  dotdotdot1left,  dotdotdot1right)) !  rest671)) => {  my  result = values::QQ_PLABELS (\\  _ =  (NIL, TRUE));
 ( lr_table::NONTERM 66,  ( result,  dotdotdot1left,  
dotdotdot1right),  rest671);
 } 
;  ( 301,  ( ( _,  ( values::QQ_PLABELS plabels1,  _,  plabels1right)) !  _ !  ( _,  ( values::QQ_PLABEL plabel1,  plabel1left,  _)) !  rest671)) => {  my  result = values::QQ_PLABELS (\\  _ =  {  my 
 (plabel as plabel1) = plabel1 ();
 my  (plabels as plabels1) = plabels1 ();
 (   { my (a, (b, is_incomplete))   =   (plabel, plabels);

						 (a ! b, is_incomplete);
					    }
					);
 } );
 ( 
lr_table::NONTERM 66,  ( result,  plabel1left,  plabels1right),  rest671);
 } 
;  ( 302,  ( ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  pattern1right)) !  rest671)) => {  my  result = values::QQ_PAT_LIST (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 (
 [ pattern ] );
 } );
 ( lr_table::NONTERM 68,  ( result,  pattern1left,  pattern1right),  rest671);
 } 
;  ( 303,  ( ( _,  ( values::QQ_PAT_LIST pat_list1,  _,  pat_list1right)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)) => {  my  result = values::QQ_PAT_LIST (\\  _ = 
 {  my  (pattern as pattern1) = pattern1 ();
 my  (pat_list as pat_list1) = pat_list1 ();
 (   pattern ! pat_list);
 } );
 ( lr_table::NONTERM 68,  ( result,  pattern1left,  pat_list1right),  rest671)
;
 } 
;  ( 304,  ( ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  pattern1right)) !  rest671)) => {  my  result = values::QQ_OR_PAT_LIST (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 (
 [ pattern ] );
 } );
 ( lr_table::NONTERM 69,  ( result,  pattern1left,  pattern1right),  rest671);
 } 
;  ( 305,  ( ( _,  ( values::QQ_OR_PAT_LIST or_pat_list1,  _,  or_pat_list1right)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  pattern1left,  _)) !  rest671)) => {  my  result = 
values::QQ_OR_PAT_LIST (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (or_pat_list as or_pat_list1) = or_pat_list1 ();
 (   pattern ! or_pat_list);
 } );
 ( lr_table::NONTERM 69,  ( result
,  pattern1left,  or_pat_list1right),  rest671);
 } 
;  ( 306,  ( ( _,  ( values::QQ_VB vb2,  _,  vb2right)) !  _ !  ( _,  ( values::QQ_VB vb1,  vb1left,  _)) !  rest671)) => {  my  result = values::QQ_VB (\\  _ =  {  my  vb1 = vb1 ();
 my  vb2 = vb2 ()
;
 (vb1 @ vb2);
 } );
 ( lr_table::NONTERM 70,  ( result,  vb1left,  vb2right),  rest671);
 } 
;  ( 307,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  patternleft,  _)) !  ( _,  ( _,  lazy_t1left,  _)) ! 
 rest671)) => {  my  result = values::QQ_VB (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (expression as expression1) = expression1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_VALUE (
						    NAMED_VALUE {
							expression,
							pattern,
							is_lazy    => TRUE
						    },
						    (patternleft, expressionright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 70,  ( result,  lazy_t1left,  expression1right),  rest671);
 } 
;  ( 308,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  (patternleft as pattern1left),  _)) !  rest671)) =>
 {  my  result = values::QQ_VB (\\  _ =  {  my  (pattern as pattern1) = pattern1 ();
 my  (expression as expression1) = expression1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_VALUE (
						    NAMED_VALUE {
							expression,
							pattern,
							is_lazy    => FALSE
						    },
	                                 	    (patternleft, expressionright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 70,  ( result,  pattern1left,  expression1right),  rest671);
 } 
;  ( 309,  ( ( _,  ( values::QQ_FIELDS fields2,  _,  fields2right)) !  _ !  ( _,  ( values::QQ_FIELDS fields1,  fields1left,  _)) !  rest671)) => {  my  result = values::QQ_FIELDS (\\  _ =  {  my  
fields1 = fields1 ();
 my  fields2 = fields2 ();
 (fields1 @ fields2);
 } );
 ( lr_table::NONTERM 71,  ( result,  fields1left,  fields2right),  rest671);
 } 
;  ( 310,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_idleft,  lowercase_id1right)) !  ( _,  ( values::QQ_ANYTYPE anytype1,  anytype1left,  anytyperight)) !  rest671)) => {  my  
result = values::QQ_FIELDS (\\  _ =  {  my  (anytype as anytype1) = anytype1 ();
 my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_FIELD (
						    NAMED_FIELD
                                                      { name => make_label_symbol lowercase_id,
                                                        type => anytype,
                                                        init => NULL
                                                      },
	                                 	    (lowercase_idleft, anytyperight)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 71,  ( result,  anytype1left,  lowercase_id1right),  rest671);
 } 
;  ( 311,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  expression1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_idleft,  _)) !  ( _,  ( values::QQ_ANYTYPE anytype1,  
anytype1left,  anytyperight)) !  rest671)) => {  my  result = values::QQ_FIELDS (\\  _ =  {  my  (anytype as anytype1) = anytype1 ();
 my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (
expression as expression1) = expression1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_FIELD (
						    NAMED_FIELD
                                                      { name => make_label_symbol lowercase_id,
                                                        type => anytype,
                                                        init => THE expression
                                                      },
	                                 	    (lowercase_idleft, anytyperight)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 71,  ( result,  anytype1left,  expression1right),  rest671);
 } 
;  ( 312,  ( rest671)) => {  my  result = values::QQ_CONSTRAINT (\\  _ =  (NULL));
 ( lr_table::NONTERM 72,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 313,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  ( _,  ( _,  colon1left,  _)) !  rest671)) => {  my  result = values::QQ_CONSTRAINT (\\  _ =  {  my  (anytype as anytype1) = 
anytype1 ();
 (THE anytype);
 } );
 ( lr_table::NONTERM 72,  ( result,  colon1left,  anytype1right),  rest671);
 } 
;  ( 314,  ( ( _,  ( values::QQ_RVB rvb2,  _,  rvb2right)) !  _ !  ( _,  ( values::QQ_RVB rvb1,  rvb1left,  _)) !  rest671)) => {  my  result = values::QQ_RVB (\\  _ =  {  my  rvb1 = rvb1 ();
 my  
rvb2 = rvb2 ();
 (rvb1 @ rvb2);
 } );
 ( lr_table::NONTERM 73,  ( result,  rvb1left,  rvb2right),  rest671);
 } 
;  ( 315,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( values::QQ_LVALUE_OR_BAR 
lvalue_or_bar1,  (lvalue_or_barleft as lvalue_or_bar1left),  lvalue_or_barright)) !  rest671)) => {  my  result = values::QQ_RVB (\\  _ =  {  my  (lvalue_or_bar as lvalue_or_bar1) = lvalue_or_bar1 ()
;
 my  (constraint as constraint1) = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   {   my (variable_symbol, fixity) = make_value_and_fixity_symbols lvalue_or_bar;

						[   SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (
							NAMED_RECURSIVE_VALUE {
							    variable_symbol,
							    fixity          => THE (fixity, (lvalue_or_barleft, lvalue_or_barright)),
							    null_or_type    => constraint,
							    expression,
							    is_lazy         => FALSE
							},
							(lvalue_or_barleft, expressionright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 73,  ( result,  lvalue_or_bar1left,  expression1right),  rest671);
 } 
;  ( 316,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( values::PASSIVEOP_ID 
passiveop_id1,  (passiveop_idleft as passiveop_id1left),  _)) !  rest671)) => {  my  result = values::QQ_RVB (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 my  (constraint as 
constraint1) = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   {   [   SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (
							NAMED_RECURSIVE_VALUE {
							    variable_symbol => make_value_symbol passiveop_id,
							    fixity          => NULL,
							    null_or_type    => constraint,
							    expression,
							    is_lazy         => FALSE
							},
							(passiveop_idleft, expressionright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 73,  ( result,  passiveop_id1left,  expression1right),  rest671);
 } 
;  ( 317,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( values::QQ_LVALUE_OR_BAR 
lvalue_or_bar1,  lvalue_or_barleft,  lvalue_or_barright)) !  ( _,  ( _,  lazy_t1left,  _)) !  rest671)) => {  my  result = values::QQ_RVB (\\  _ =  {  my  (lvalue_or_bar as lvalue_or_bar1) = 
lvalue_or_bar1 ();
 my  (constraint as constraint1) = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   {   (make_value_and_fixity_symbols lvalue_or_bar)
						    ->
						    (variable_symbol, fixity);

						[   SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (
							NAMED_RECURSIVE_VALUE {
							    variable_symbol,
							    fixity          => THE (fixity, (lvalue_or_barleft, lvalue_or_barright)),
							    null_or_type    => constraint,
							    expression,
							    is_lazy         => TRUE
							},
							(lvalue_or_barleft, expressionright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 73,  ( result,  lazy_t1left,  expression1right),  rest671);
 } 
;  ( 318,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( values::PASSIVEOP_ID 
passiveop_id1,  passiveop_idleft,  _)) !  ( _,  ( _,  lazy_t1left,  _)) !  rest671)) => {  my  result = values::QQ_RVB (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 my  (
constraint as constraint1) = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   {   [   SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (
							NAMED_RECURSIVE_VALUE {
							    variable_symbol => make_value_symbol passiveop_id,
							    fixity          => NULL,
							    null_or_type    => constraint,
							    expression,
							    is_lazy         => TRUE
							},
							(passiveop_idleft, expressionright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 73,  ( result,  lazy_t1left,  expression1right),  rest671);
 } 
;  ( 319,  ( ( _,  ( values::QQ_EQ_CLAUSE eq_clause1,  eq_clause1left,  eq_clause1right)) !  rest671)) => {  my  result = values::QQ_FUN_CLAUSES (\\  _ =  {  my  (eq_clause as eq_clause1) = eq_clause1
 ();
 ([eq_clause]);
 } );
 ( lr_table::NONTERM 74,  ( result,  eq_clause1left,  eq_clause1right),  rest671);
 } 
;  ( 320,  ( ( _,  ( _,  _,  end_t1right)) !  ( _,  ( values::QQ_DARROW_CLAUSES darrow_clauses1,  _,  _)) !  _ !  ( _,  ( values::QQ_DARROW_CLAUSE darrow_clause1,  darrow_clause1left,  _)) !  rest671)
) => {  my  result = values::QQ_FUN_CLAUSES (\\  _ =  {  my  (darrow_clause as darrow_clause1) = darrow_clause1 ();
 my  (darrow_clauses as darrow_clauses1) = darrow_clauses1 ();
 (
darrow_clause ! darrow_clauses);
 } );
 ( lr_table::NONTERM 74,  ( result,  darrow_clause1left,  end_t1right),  rest671);
 } 
;  ( 321,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_DARROW_CLAUSE darrow_clause1,  darrow_clause1left,  _)) !  rest671)) => {  my  result = values::QQ_DARROW_CLAUSES (\\  _ =  {  my  (
darrow_clause as darrow_clause1) = darrow_clause1 ();
 ([darrow_clause]);
 } );
 ( lr_table::NONTERM 75,  ( result,  darrow_clause1left,  semi1right),  rest671);
 } 
;  ( 322,  ( ( _,  ( values::QQ_DARROW_CLAUSES darrow_clauses1,  _,  darrow_clauses1right)) !  _ !  ( _,  ( values::QQ_DARROW_CLAUSE darrow_clause1,  darrow_clause1left,  _)) !  rest671)) => {  my  
result = values::QQ_DARROW_CLAUSES (\\  _ =  {  my  (darrow_clause as darrow_clause1) = darrow_clause1 ();
 my  (darrow_clauses as darrow_clauses1) = darrow_clauses1 ();
 (
darrow_clause ! darrow_clauses);
 } );
 ( lr_table::NONTERM 75,  ( result,  darrow_clause1left,  darrow_clauses1right),  rest671);
 } 
;  ( 323,  ( rest671)) => {  my  result = values::QQ_MAYBE_LAZY (\\  _ =  (FALSE));
 ( lr_table::NONTERM 77,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 324,  ( ( _,  ( _,  lazy_t1left,  lazy_t1right)) !  rest671)) => {  my  result = values::QQ_MAYBE_LAZY (\\  _ =  (TRUE));
 ( lr_table::NONTERM 77,  ( result,  lazy_t1left,  lazy_t1right),  
rest671);
 } 
;  ( 325,  ( ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  (fun_clausesright as fun_clauses1right))) !  ( _,  ( values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671))
 => {  my  result = values::QQ_FUN_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 (
 [ SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>   PLAIN_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) ]              
);
 } );
 ( lr_table::NONTERM 76,  ( result,  maybe_lazy1left,  fun_clauses1right),  rest671);
 } 
;  ( 326,  ( ( _,  ( values::QQ_FUN_DECLS fun_decls1,  _,  fun_decls1right)) !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_FUN_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (fun_decls as fun_decls1) = fun_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>   PLAIN_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) !     fun_decls
);
 } );
 ( lr_table::NONTERM 76,  ( result,  maybe_lazy1left,  fun_decls1right),  rest671);
 } 
;  ( 327,  ( ( _,  ( values::QQ_METHOD_DECLS method_decls1,  _,  method_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_FUN_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (method_decls as method_decls1) = method_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>   PLAIN_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) !  method_decls
);
 } );
 ( lr_table::NONTERM 76,  ( result,  maybe_lazy1left,  method_decls1right),  rest671);
 } 
;  ( 328,  ( ( _,  ( values::QQ_MESSAGE_DECLS message_decls1,  _,  message_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  (
 values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_FUN_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (message_decls as message_decls1) = message_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>   PLAIN_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) ! message_decls
);
 } );
 ( lr_table::NONTERM 76,  ( result,  maybe_lazy1left,  message_decls1right),  rest671);
 } 
;  ( 329,  ( ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  (fun_clausesright as fun_clauses1right))) !  ( _,  ( values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671))
 => {  my  result = values::QQ_METHOD_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 (
 [ SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>  METHOD_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) ]              
);
 } );
 ( lr_table::NONTERM 78,  ( result,  maybe_lazy1left,  fun_clauses1right),  rest671);
 } 
;  ( 330,  ( ( _,  ( values::QQ_FUN_DECLS fun_decls1,  _,  fun_decls1right)) !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_METHOD_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (fun_decls as fun_decls1) = fun_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>  METHOD_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) !     fun_decls
);
 } );
 ( lr_table::NONTERM 78,  ( result,  maybe_lazy1left,  fun_decls1right),  rest671);
 } 
;  ( 331,  ( ( _,  ( values::QQ_METHOD_DECLS method_decls1,  _,  method_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_METHOD_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (method_decls as method_decls1) = method_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>  METHOD_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) !  method_decls
);
 } );
 ( lr_table::NONTERM 78,  ( result,  maybe_lazy1left,  method_decls1right),  rest671);
 } 
;  ( 332,  ( ( _,  ( values::QQ_MESSAGE_DECLS message_decls1,  _,  message_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  (
 values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_METHOD_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (fun_clauses as 
fun_clauses1) = fun_clauses1 ();
 my  (message_decls as message_decls1) = message_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind =>  METHOD_FUN, null_or_type => NULL        }, (fun_clausesleft, fun_clausesright)) ! message_decls
);
 } );
 ( lr_table::NONTERM 78,  ( result,  maybe_lazy1left,  message_decls1right),  rest671);
 } 
;  ( 333,  ( ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  (fun_clausesright as fun_clauses1right))) !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  ( _,  ( values::QQ_MAYBE_LAZY
 maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_MESSAGE_DECLS (\\  _ =  {  my  (maybe_lazy as maybe_lazy1) = maybe_lazy1 ();
 my  (anytype as anytype1) = anytype1 ();

 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 (
 [ SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind => MESSAGE_FUN, null_or_type => THE anytype }, (fun_clausesleft, fun_clausesright)) ]              
);
 } );
 ( lr_table::NONTERM 79,  ( result,  maybe_lazy1left,  fun_clauses1right),  rest671);
 } 
;  ( 334,  ( ( _,  ( values::QQ_FUN_DECLS fun_decls1,  _,  fun_decls1right)) !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_ANYTYPE anytype1,  _,  _)) !  ( _,  ( values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_MESSAGE_DECLS (\\  _ =  {  my  (maybe_lazy as 
maybe_lazy1) = maybe_lazy1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 my  (fun_decls as fun_decls1) = fun_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind => MESSAGE_FUN, null_or_type => THE anytype }, (fun_clausesleft, fun_clausesright)) !     fun_decls
);
 } );
 ( lr_table::NONTERM 79,  ( result,  maybe_lazy1left,  fun_decls1right),  rest671);
 } 
;  ( 335,  ( ( _,  ( values::QQ_METHOD_DECLS method_decls1,  _,  method_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  ( 
values::QQ_ANYTYPE anytype1,  _,  _)) !  ( _,  ( values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_MESSAGE_DECLS (\\  _ =  {  my  (maybe_lazy as 
maybe_lazy1) = maybe_lazy1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 my  (method_decls as method_decls1) = method_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind => MESSAGE_FUN, null_or_type => THE anytype }, (fun_clausesleft, fun_clausesright)) !  method_decls
);
 } );
 ( lr_table::NONTERM 79,  ( result,  maybe_lazy1left,  method_decls1right),  rest671);
 } 
;  ( 336,  ( ( _,  ( values::QQ_MESSAGE_DECLS message_decls1,  _,  message_decls1right)) !  _ !  _ !  _ !  ( _,  ( values::QQ_FUN_CLAUSES fun_clauses1,  fun_clausesleft,  fun_clausesright)) !  ( _,  (
 values::QQ_ANYTYPE anytype1,  _,  _)) !  ( _,  ( values::QQ_MAYBE_LAZY maybe_lazy1,  maybe_lazy1left,  _)) !  rest671)) => {  my  result = values::QQ_MESSAGE_DECLS (\\  _ =  {  my  (maybe_lazy as 
maybe_lazy1) = maybe_lazy1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (fun_clauses as fun_clauses1) = fun_clauses1 ();
 my  (message_decls as message_decls1) = message_decls1 ();
 (
   SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (NAMED_FUNCTION { pattern_clauses => fun_clauses, is_lazy => maybe_lazy, kind => MESSAGE_FUN, null_or_type => THE anytype }, (fun_clausesleft, fun_clausesright)) ! message_decls
);
 } );
 ( lr_table::NONTERM 79,  ( result,  maybe_lazy1left,  message_decls1right),  rest671);
 } 
;  ( 337,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( 
values::QQ_FUN_APATS fun_apats1,  fun_apats1left,  _)) !  rest671)) => {  my  result = values::QQ_EQ_CLAUSE (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 my  (constraint as constraint1)
 = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   PATTERN_CLAUSE {
						patterns    => fun_apats,
						result_type => constraint,
						expression  => mark_expression (expression, expressionleft, expressionright)
					    }
					);
 } );
 ( 
lr_table::NONTERM 82,  ( result,  fun_apats1left,  expression1right),  rest671);
 } 
;  ( 338,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_CONSTRAINT constraint1,  _,  _)) !  ( _,  ( 
values::QQ_FUN_APATS fun_apats1,  fun_apats1left,  _)) !  rest671)) => {  my  result = values::QQ_DARROW_CLAUSE (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 my  (constraint as 
constraint1) = constraint1 ();
 my  (expression as expression1) = expression1 ();
 (
   PATTERN_CLAUSE {
						patterns    => fun_apats,
						result_type => constraint,
						expression  => mark_expression (expression, expressionleft, expressionright)
					    }
					);
 } );
 ( 
lr_table::NONTERM 83,  ( result,  fun_apats1left,  expression1right),  rest671);
 } 
;  ( 339,  ( ( _,  ( values::QQ_FUN_APAT fun_apat1,  fun_apat1left,  fun_apat1right)) !  rest671)) => {  my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apat as fun_apat1) = fun_apat1 ();
 (
 [ fun_apat ] );
 } );
 ( lr_table::NONTERM 81,  ( result,  fun_apat1left,  fun_apat1right),  rest671);
 } 
;  ( 340,  ( ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  fun_apats1right)) !  ( _,  ( values::QQ_FUN_APAT fun_apat1,  fun_apat1left,  _)) !  rest671)) => {  my  result = values::QQ_FUN_APATS (\\  _
 =  {  my  (fun_apat as fun_apat1) = fun_apat1 ();
 my  (fun_apats as fun_apats1) = fun_apats1 ();
 (   fun_apat ! fun_apats);
 } );
 ( lr_table::NONTERM 81,  ( result,  fun_apat1left,  
fun_apats1right),  rest671);
 } 
;  ( 341,  ( ( _,  ( values::QQ_POSTFIX_OP postfix_op1,  postfix_opleft,  (postfix_opright as postfix_op1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  fun_apats1left,  _)) !  rest671)) => { 
 my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 my  (postfix_op as postfix_op1) = postfix_op1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [make_value_symbol postfix_op], 
							   source_code_region => (postfix_opleft, postfix_opright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  fun_apats1left,  postfix_op1right),  rest671);
 } 
;  ( 342,  ( ( _,  ( _,  _,  (post_barright as post_bar1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_barleft as pre_bar1left),  _)) !  rest671)) => {  my  result =
 values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "|_|" ], 
							   source_code_region => (pre_barleft, post_barright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_bar1left,  post_bar1right),  rest671);
 } 
;  ( 343,  ( ( _,  ( _,  _,  (post_slashright as post_slash1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_slashleft as pre_slash1left),  _)) !  rest671)) => {  my  
result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "/_/" ], 
							   source_code_region => (pre_slashleft, post_slashright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_slash1left,  post_slash1right),  rest671);
 } 
;  ( 344,  ( ( _,  ( _,  _,  (post_rangleright as post_rangle1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_langleleft as pre_langle1left),  _)) !  rest671)) => { 
 my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "<_>" ], 
							   source_code_region => (pre_langleleft, post_rangleright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_langle1left,  post_rangle1right),  rest671);
 } 
;  ( 345,  ( ( _,  ( _,  _,  (post_barright as post_bar1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_langleleft as pre_langle1left),  _)) !  rest671)) => {  my  
result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "< |" ], 
							   source_code_region => (pre_langleleft, post_barright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_langle1left,  post_bar1right),  rest671);
 } 
;  ( 346,  ( ( _,  ( _,  _,  (post_rangleright as post_rangle1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_barleft as pre_bar1left),  _)) !  rest671)) => {  my  
result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "| >" ], 
							   source_code_region => (pre_barleft, post_rangleright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_bar1left,  post_rangle1right),  rest671);
 } 
;  ( 347,  ( ( _,  ( _,  _,  (post_rbraceright as post_rbrace1right))) !  ( _,  ( values::QQ_FUN_APATS fun_apats1,  _,  _)) !  ( _,  ( _,  (pre_lbraceleft as pre_lbrace1left),  _)) !  rest671)) => { 
 my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (fun_apats as fun_apats1) = fun_apats1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "{_}" ], 
							   source_code_region => (pre_lbraceleft, post_rbraceright),
							   fixity	      => NULL
						       };

						p_op ! fun_apats;
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  pre_lbrace1left,  post_rbrace1right),  rest671);
 } 
;  ( 348,  ( ( _,  ( _,  _,  (rbracketright as rbracket1right))) !  ( _,  ( values::QQ_PATTERN pattern1,  _,  _)) !  _ !  ( _,  ( values::QQ_APAT apat1,  (apatleft as apat1left),  _)) !  rest671)) =>
 {  my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (apat as apat1) = apat1 ();
 my  (pattern as pattern1) = pattern1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "_[]" ], 
							   source_code_region => (apatleft, rbracketright),
							   fixity	      => NULL
						       };


      					        tuple = {   item	       => TUPLE_PATTERN [ PRE_FIXITY_PATTERN [ apat ], pattern ],
						            source_code_region => (apatleft, rbracketright),
						            fixity             => NULL
					                };

						[ p_op, tuple ];
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  apat1left,  rbracket1right),  rest671);
 } 
;  ( 349,  ( ( _,  ( _,  _,  (rbracketright as rbracket1right))) !  ( _,  ( values::QQ_PAT_LIST pat_list1,  _,  _)) !  _ !  ( _,  ( values::QQ_PATTERN pattern1,  _,  _)) !  _ !  ( _,  ( 
values::QQ_APAT apat1,  (apatleft as apat1left),  _)) !  rest671)) => {  my  result = values::QQ_FUN_APATS (\\  _ =  {  my  (apat as apat1) = apat1 ();
 my  (pattern as pattern1) = pattern1 ();
 my  (
pat_list as pat_list1) = pat_list1 ();
 (
   {   p_op = {   item	              => VARIABLE_IN_PATTERN [ make_value_symbol' "_[]" ], 
							   source_code_region => (apatleft, rbracketright),
							   fixity	      => NULL
						       };

						pat   = TUPLE_PATTERN ( pattern ! pat_list);

      					        tuple = {   item	       => TUPLE_PATTERN [ PRE_FIXITY_PATTERN [ apat ], pat ],
						            source_code_region => (apatleft, rbracketright),
						            fixity             => NULL
					                };

						[ p_op, tuple ];
                                            }
                                        
);
 } );
 ( lr_table::NONTERM 81,  ( result,  apat1left,  rbracket1right),  rest671);
 } 
;  ( 350,  ( ( _,  ( values::QQ_APAT apat1,  apat1left,  apat1right)) !  rest671)) => {  my  result = values::QQ_FUN_APAT (\\  _ =  {  my  (apat as apat1) = apat1 ();
 (apat);
 } );
 ( 
lr_table::NONTERM 61,  ( result,  apat1left,  apat1right),  rest671);
 } 
;  ( 351,  ( ( _,  ( values::QQ_BAR bar1,  (barleft as bar1left),  (barright as bar1right))) !  rest671)) => {  my  result = values::QQ_FUN_APAT (\\  _ =  {  my  (bar as bar1) = bar1 ();
 (
   {   my (v, f)
                                                    =
						    make_value_and_fixity_symbols bar;

						{   item	       => VARIABLE_IN_PATTERN [v], 
						    source_code_region => (barleft, barright),
						    fixity	       => THE f
						};
					    }
					
);
 } );
 ( lr_table::NONTERM 61,  ( result,  bar1left,  bar1right),  rest671);
 } 
;  ( 352,  ( ( _,  ( values::QQ_NAMED_TYPES named_types2,  _,  named_types2right)) !  _ !  ( _,  ( values::QQ_NAMED_TYPES named_types1,  named_types1left,  _)) !  rest671)) => {  my  result = 
values::QQ_NAMED_TYPES (\\  _ =  {  my  named_types1 = named_types1 ();
 my  named_types2 = named_types2 ();
 (named_types1 @ named_types2);
 } );
 ( lr_table::NONTERM 84,  ( result,  named_types1left
,  named_types2right),  rest671);
 } 
;  ( 353,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  anytypeleft,  (anytyperight as anytype1right))) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1
,  mixedcase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_NAMED_TYPES (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 my 
 (anytype as anytype1) = anytype1 ();
 (
  [   SOURCE_CODE_REGION_FOR_NAMED_TYPE (
						    NAMED_TYPE {
							typevars,
							name_symbol => make_type_symbol mixedcase_id,
							definition  => anytype
						    },
						    (anytypeleft, anytyperight)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 84,  ( result,  mixedcase_id1left,  anytype1right),  rest671);
 } 
;  ( 354,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_TYVAR_PC tyvar_pc1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_TYPEVARS (\\  _ =  {  my  (
tyvar_pc as tyvar_pc1) = tyvar_pc1 ();
 (tyvar_pc);
 } );
 ( lr_table::NONTERM 85,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 355,  ( rest671)) => {  my  result = values::QQ_TYPEVARS (\\  _ =  (NIL));
 ( lr_table::NONTERM 85,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 356,  ( ( _,  ( values::TYVAR tyvar1,  (tyvarleft as tyvar1left),  (tyvarright as tyvar1right))) !  rest671)) => {  my  result = values::QQ_TYPEVARS (\\  _ =  {  my  (tyvar as tyvar1) = tyvar1 ()
;
 (   [   SOURCE_CODE_REGION_FOR_TYPEVAR (
						    TYPEVAR (make_typevar_symbol tyvar),
						    (tyvarleft, tyvarright)
						)
					    ]
					);
 } );
 ( lr_table::NONTERM 85,  ( result,  
tyvar1left,  tyvar1right),  rest671);
 } 
;  ( 357,  ( ( _,  ( values::TYVAR tyvar1,  (tyvarleft as tyvar1left),  (tyvarright as tyvar1right))) !  rest671)) => {  my  result = values::QQ_TYVAR_PC (\\  _ =  {  my  (tyvar as tyvar1) = tyvar1 ()
;
 (   [   SOURCE_CODE_REGION_FOR_TYPEVAR (
						    TYPEVAR (make_typevar_symbol tyvar),
						    (tyvarleft, tyvarright)
						)
					    ]
					);
 } );
 ( lr_table::NONTERM 87,  ( result,  
tyvar1left,  tyvar1right),  rest671);
 } 
;  ( 358,  ( ( _,  ( values::QQ_TYVAR_PC tyvar_pc1,  _,  tyvar_pc1right)) !  _ !  ( _,  ( values::TYVAR tyvar1,  (tyvarleft as tyvar1left),  tyvarright)) !  rest671)) => {  my  result = 
values::QQ_TYVAR_PC (\\  _ =  {  my  (tyvar as tyvar1) = tyvar1 ();
 my  (tyvar_pc as tyvar_pc1) = tyvar_pc1 ();
 (
   SOURCE_CODE_REGION_FOR_TYPEVAR (
						TYPEVAR (make_typevar_symbol tyvar),
						(tyvarleft, tyvarright)
					    )
					    ! tyvar_pc
					);
 } );
 ( lr_table::NONTERM 87,  ( result,  
tyvar1left,  tyvar_pc1right),  rest671);
 } 
;  ( 359,  ( ( _,  ( values::QQ_SUMTYPES sumtypes2,  _,  sumtypes2right)) !  _ !  ( _,  ( values::QQ_SUMTYPES sumtypes1,  sumtypes1left,  _)) !  rest671)) => {  my  result = values::QQ_SUMTYPES (\\  _
 =  {  my  sumtypes1 = sumtypes1 ();
 my  sumtypes2 = sumtypes2 ();
 (sumtypes1 @ sumtypes2);
 } );
 ( lr_table::NONTERM 88,  ( result,  sumtypes1left,  sumtypes2right),  rest671);
 } 
;  ( 360,  ( ( _,  ( values::QQ_CONSTRUCTORS constructors1,  _,  constructors1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  
mixedcase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_SUMTYPES (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 my  (
constructors as constructors1) = constructors1 ();
 (
   [   raw::SUM_TYPE {
						    name_symbol      => make_type_symbol mixedcase_id,
						    typevars,
						    right_hand_side  => (VALCONS constructors),
						    is_lazy	     => FALSE
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 88,  ( result,  mixedcase_id1left,  constructors1right),  rest671);
 } 
;  ( 361,  ( ( _,  ( values::QQ_TYPE type1,  _,  type1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  mixedcase_id1left,  _)) !  rest671
)) => {  my  result = values::QQ_SUMTYPES (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 my  (type as type1) = type1 ();
 (
   [   raw::SUM_TYPE {
						    name_symbol	     => make_type_symbol mixedcase_id,
						    typevars,
						    right_hand_side  => (REPLICAS type),
						    is_lazy	     => FALSE
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 88,  ( result,  mixedcase_id1left,  type1right),  rest671);
 } 
;  ( 362,  ( ( _,  ( values::QQ_CONSTRUCTORS constructors1,  _,  constructors1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  _)) ! 
 ( _,  ( _,  lazy_t1left,  _)) !  rest671)) => {  my  result = values::QQ_SUMTYPES (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();

 my  (constructors as constructors1) = constructors1 ();
 (
   [   raw::SUM_TYPE {
						    name_symbol      => make_type_symbol mixedcase_id,
						    typevars,
						    right_hand_side  => (VALCONS constructors),
						    is_lazy          => TRUE
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 88,  ( result,  lazy_t1left,  constructors1right),  rest671);
 } 
;  ( 363,  ( ( _,  ( values::QQ_TYPE type1,  _,  type1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  _)) !  ( _,  ( _,  lazy_t1left
,  _)) !  rest671)) => {  my  result = values::QQ_SUMTYPES (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 my  (type as type1) = 
type1 ();
 (
   [   raw::SUM_TYPE {
						    name_symbol      => make_type_symbol mixedcase_id,
						    typevars,
						    right_hand_side  => (REPLICAS type),
						    is_lazy          => TRUE
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 88,  ( result,  lazy_t1left,  type1right),  rest671);
 } 
;  ( 364,  ( ( _,  ( values::QQ_CONSTRUCTOR constructor1,  constructor1left,  constructor1right)) !  rest671)) => {  my  result = values::QQ_CONSTRUCTORS (\\  _ =  {  my  (constructor as constructor1)
 = constructor1 ();
 ([constructor]);
 } );
 ( lr_table::NONTERM 89,  ( result,  constructor1left,  constructor1right),  rest671);
 } 
;  ( 365,  ( ( _,  ( values::QQ_CONSTRUCTORS constructors1,  _,  constructors1right)) !  _ !  ( _,  ( values::QQ_CONSTRUCTOR constructor1,  constructor1left,  _)) !  rest671)) => {  my  result = 
values::QQ_CONSTRUCTORS (\\  _ =  {  my  (constructor as constructor1) = constructor1 ();
 my  (constructors as constructors1) = constructors1 ();
 (constructor ! constructors);
 } );
 ( 
lr_table::NONTERM 89,  ( result,  constructor1left,  constructors1right),  rest671);
 } 
;  ( 366,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_CONSTRUCTOR (\\  _ =  {  my  (uppercase_id as 
uppercase_id1) = uppercase_id1 ();
 (make_value_symbol uppercase_id,   NULL   );
 } );
 ( lr_table::NONTERM 90,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 367,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_CONSTRUCTOR
 (\\  _ =  {  my  (uppercase_id as uppercase_id1) = uppercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 (make_value_symbol uppercase_id,   THE anytype);
 } );
 ( lr_table::NONTERM 90,  ( 
result,  uppercase_id1left,  anytype1right),  rest671);
 } 
;  ( 368,  ( ( _,  ( values::QQ_EB eb2,  _,  eb2right)) !  _ !  ( _,  ( values::QQ_EB eb1,  eb1left,  _)) !  rest671)) => {  my  result = values::QQ_EB (\\  _ =  {  my  eb1 = eb1 ();
 my  eb2 = eb2 ()
;
 (eb1 @ eb2);
 } );
 ( lr_table::NONTERM 91,  ( result,  eb1left,  eb2right),  rest671);
 } 
;  ( 369,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_EB (\\  _ =  {  my  (uppercase_id as uppercase_id1) = 
uppercase_id1 ();
 (   [   NAMED_EXCEPTION {
						    exception_symbol => (make_value_symbol uppercase_id),
						    exception_type   => NULL
						}
					    ]
					);
 } );
 ( lr_table::NONTERM 91
,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 370,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_EB (\\  _ = 
 {  my  (uppercase_id as uppercase_id1) = uppercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 (
   [   NAMED_EXCEPTION {
						    exception_symbol => (make_value_symbol uppercase_id),
						    exception_type   => THE anytype
						}
					    ]
					);
 } );
 ( lr_table::NONTERM 91,  ( result, 
 uppercase_id1left,  anytype1right),  rest671);
 } 
;  ( 371,  ( ( _,  ( values::QQ_UPPERCASE uppercase1,  _,  uppercase1right)) !  _ !  ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_EB
 (\\  _ =  {  my  (uppercase_id as uppercase_id1) = uppercase_id1 ();
 my  (uppercase as uppercase1) = uppercase1 ();
 (
   [   DUPLICATE_NAMED_EXCEPTION {
						    exception_symbol => make_value_symbol uppercase_id,
						    equal_to         => uppercase make_value_symbol
						}
					    ]
					);
 } );
 ( 
lr_table::NONTERM 91,  ( result,  uppercase_id1left,  uppercase1right),  rest671);
 } 
;  ( 372,  ( ( _,  ( values::QQ_LOWERCASE lowercase1,  lowercase1left,  lowercase1right)) !  rest671)) => {  my  result = values::QQ_PACKAGE_IN_IMPORT (\\  _ =  {  my  (lowercase as lowercase1) = 
lowercase1 ();
 ( [ lowercase make_package_symbol ] );
 } );
 ( lr_table::NONTERM 92,  ( result,  lowercase1left,  lowercase1right),  rest671);
 } 
;  ( 373,  ( ( _,  ( _,  _,  my_t1right)) !  ( _,  ( _,  infix_t1left,  _)) !  rest671)) => {  my  result = values::QQ_FIXITY (\\  _ =  (infixleft 0));
 ( lr_table::NONTERM 93,  ( result,  
infix_t1left,  my_t1right),  rest671);
 } 
;  ( 374,  ( ( _,  ( values::QQ_INT int1,  intleft,  (intright as int1right))) !  _ !  ( _,  ( _,  infix_t1left,  _)) !  rest671)) => {  my  result = values::QQ_FIXITY (\\  _ =  {  my  (int as int1) =
 int1 ();
 (infixleft  (check_fixity (multiword_int::to_int int, error (intleft, intright))));
 } );
 ( lr_table::NONTERM 93,  ( result,  infix_t1left,  int1right),  rest671);
 } 
;  ( 375,  ( ( _,  ( _,  _,  my_t1right)) !  ( _,  ( _,  infixr_t1left,  _)) !  rest671)) => {  my  result = values::QQ_FIXITY (\\  _ =  (infixright 0));
 ( lr_table::NONTERM 93,  ( result,  
infixr_t1left,  my_t1right),  rest671);
 } 
;  ( 376,  ( ( _,  ( values::QQ_INT int1,  intleft,  (intright as int1right))) !  _ !  ( _,  ( _,  infixr_t1left,  _)) !  rest671)) => {  my  result = values::QQ_FIXITY (\\  _ =  {  my  (int as int1)
 = int1 ();
 (infixright (check_fixity (multiword_int::to_int int, error (intleft, intright))));
 } );
 ( lr_table::NONTERM 93,  ( result,  infixr_t1left,  int1right),  rest671);
 } 
;  ( 377,  ( ( _,  ( _,  _,  my_t1right)) !  ( _,  ( _,  nonfix_t1left,  _)) !  rest671)) => {  my  result = values::QQ_FIXITY (\\  _ =  (NONFIX));
 ( lr_table::NONTERM 93,  ( result,  nonfix_t1left, 
 my_t1right),  rest671);
 } 
;  ( 378,  ( ( _,  ( values::QQ_VB vb1,  _,  vb1right)) !  ( _,  ( _,  my_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (vb as vb1) = vb1 ();
 (
VALUE_DECLARATIONS (vb, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  my_t1left,  vb1right),  rest671);
 } 
;  ( 379,  ( ( _,  ( values::QQ_PATTERN pattern1,  _,  (patternright as pattern1right))) !  _ !  ( _,  ( values::QQ_DOT_EXP dot_exp1,  (dot_expleft as dot_exp1left),  _)) !  rest671)) => {  my  result
 = values::QQ_DECLARATION (\\  _ =  {  my  (dot_exp as dot_exp1) = dot_exp1 ();
 my  (pattern as pattern1) = pattern1 ();
 (
VALUE_DECLARATIONS
					    ( [   SOURCE_CODE_REGION_FOR_NAMED_VALUE (
						      NAMED_VALUE {
							  expression => (PRE_FIXITY_EXPRESSION (dot_exp)),
							  pattern,
							  is_lazy    => FALSE
						      },
						      (dot_expleft, patternright)
						  )
					      ],
					      NIL 
					    )
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  dot_exp1left,  pattern1right),  rest671);
 } 
;  ( 380,  ( ( _,  ( values::QQ_FIELDS fields1,  _,  fields1right)) !  _ !  ( _,  ( _,  field_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (fields as fields1) =
 fields1 ();
 (FIELD_DECLARATIONS (fields, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  field_t1left,  fields1right),  rest671);
 } 
;  ( 381,  ( ( _,  ( values::QQ_RVB rvb1,  _,  rvb1right)) !  _ !  ( _,  ( _,  recursive_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (rvb as rvb1) = rvb1 ();

 (RECURSIVE_VALUE_DECLARATIONS (rvb, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  recursive_t1left,  rvb1right),  rest671);
 } 
;  ( 382,  ( ( _,  ( values::QQ_FUN_DECLS fun_decls1,  _,  fun_decls1right)) !  ( _,  ( _,  fun_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (fun_decls as 
fun_decls1) = fun_decls1 ();
 (FUNCTION_DECLARATIONS (    fun_decls, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  fun_t1left,  fun_decls1right),  rest671);
 } 
;  ( 383,  ( ( _,  ( values::QQ_METHOD_DECLS method_decls1,  _,  method_decls1right)) !  _ !  ( _,  ( _,  method_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (
method_decls as method_decls1) = method_decls1 ();
 (FUNCTION_DECLARATIONS ( method_decls, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  method_t1left,  method_decls1right),  rest671);
 } 
;  ( 384,  ( ( _,  ( values::QQ_MESSAGE_DECLS message_decls1,  _,  message_decls1right)) !  _ !  ( _,  ( _,  message_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  { 
 my  (message_decls as message_decls1) = message_decls1 ();
 (FUNCTION_DECLARATIONS (message_decls, NIL));
 } );
 ( lr_table::NONTERM 94,  ( result,  message_t1left,  message_decls1right),  rest671)
;
 } 
;  ( 385,  ( ( _,  ( values::QQ_NAMED_TYPES named_types1,  named_types1left,  named_types1right)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (named_types as named_types1)
 = named_types1 ();
 (TYPE_DECLARATIONS     named_types);
 } );
 ( lr_table::NONTERM 94,  ( result,  named_types1left,  named_types1right),  rest671);
 } 
;  ( 386,  ( ( _,  ( values::QQ_SUMTYPES sumtypes1,  sumtypes1left,  sumtypes1right)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (sumtypes as sumtypes1) = sumtypes1 ();
 (
SUMTYPE_DECLARATIONS { sumtypes,
								with_types => []
                                                              }
                                        );
 } );
 ( lr_table::NONTERM 94,  ( 
result,  sumtypes1left,  sumtypes1right),  rest671);
 } 
;  ( 387,  ( ( _,  ( values::QQ_NAMED_TYPES named_types1,  _,  named_types1right)) !  _ !  ( _,  ( values::QQ_SUMTYPES sumtypes1,  sumtypes1left,  _)) !  rest671)) => {  my  result = 
values::QQ_DECLARATION (\\  _ =  {  my  (sumtypes as sumtypes1) = sumtypes1 ();
 my  (named_types as named_types1) = named_types1 ();
 (
SUMTYPE_DECLARATIONS { sumtypes,
								   with_types => named_types
                                                                 }
                                        );
 } );
 ( 
lr_table::NONTERM 94,  ( result,  sumtypes1left,  named_types1right),  rest671);
 } 
;  ( 388,  ( ( _,  ( values::QQ_EB eb1,  _,  eb1right)) !  ( _,  ( _,  exception_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (eb as eb1) = eb1 ();
 (
EXCEPTION_DECLARATIONS eb);
 } );
 ( lr_table::NONTERM 94,  ( result,  exception_t1left,  eb1right),  rest671);
 } 
;  ( 389,  ( ( _,  ( values::QQ_PACKAGE_IN_IMPORT package_in_import1,  _,  package_in_import1right)) !  _ !  ( _,  ( _,  include_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION
 (\\  _ =  {  my  (package_in_import as package_in_import1) = package_in_import1 ();
 (INCLUDE_DECLARATIONS package_in_import);
 } );
 ( lr_table::NONTERM 94,  ( result,  include_t1left,  
package_in_import1right),  rest671);
 } 
;  ( 390,  ( ( _,  ( values::QQ_OPS ops1,  _,  ops1right)) !  ( _,  ( values::QQ_FIXITY fixity1,  fixity1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (fixity as 
fixity1) = fixity1 ();
 my  (ops as ops1) = ops1 ();
 (FIXITY_DECLARATIONS { fixity, ops } );
 } );
 ( lr_table::NONTERM 94,  ( result,  fixity1left,  ops1right),  rest671);
 } 
;  ( 391,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_OVERLOADED_EXPRESSIONS overloaded_expressions1,  _,  _)) !  _ !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  _ !  ( _,  ( 
values::QQ_LVALUE_OR_BAR lvalue_or_bar1,  _,  _)) !  _ !  ( _,  ( _,  overloaded_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lvalue_or_bar as lvalue_or_bar1)
 = lvalue_or_bar1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (overloaded_expressions as overloaded_expressions1) = overloaded_expressions1 ();
 (
OVERLOADED_VARIABLE_DECLARATION (make_value_symbol lvalue_or_bar, anytype, overloaded_expressions, FALSE));
 } );
 ( lr_table::NONTERM 94,  ( result,  overloaded_t1left,  rparen1right),  rest671);
 } 
;  ( 392,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_OVERLOADED_EXPRESSIONS overloaded_expressions1,  _,  _)) !  _ !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  _ !  ( _,  ( 
values::QQ_LVALUE_OR_BAR lvalue_or_bar1,  _,  _)) !  _ !  ( _,  ( _,  overloaded_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lvalue_or_bar as lvalue_or_bar1)
 = lvalue_or_bar1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (overloaded_expressions as overloaded_expressions1) = overloaded_expressions1 ();
 (
OVERLOADED_VARIABLE_DECLARATION (make_value_symbol lvalue_or_bar, anytype, overloaded_expressions, TRUE));
 } );
 ( lr_table::NONTERM 94,  ( result,  overloaded_t1left,  rparen1right),  rest671);
 } 
;  ( 393,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_OVERLOADED_EXPRESSIONS overloaded_expressions1,  _,  _)) !  _ !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  _ !  ( _,  ( 
values::PASSIVEOP_ID passiveop_id1,  _,  _)) !  _ !  ( _,  ( _,  overloaded_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (passiveop_id as passiveop_id1) = 
passiveop_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (overloaded_expressions as overloaded_expressions1) = overloaded_expressions1 ();
 (
OVERLOADED_VARIABLE_DECLARATION (make_value_symbol passiveop_id, anytype, overloaded_expressions, FALSE));
 } );
 ( lr_table::NONTERM 94,  ( result,  overloaded_t1left,  rparen1right),  rest671);
 } 
;  ( 394,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_OVERLOADED_EXPRESSIONS overloaded_expressions1,  _,  _)) !  _ !  _ !  ( _,  ( values::QQ_ANYTYPE anytype1,  _,  _)) !  _ !  ( _,  ( 
values::PASSIVEOP_ID passiveop_id1,  _,  _)) !  _ !  ( _,  ( _,  overloaded_t1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (passiveop_id as passiveop_id1) = 
passiveop_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 my  (overloaded_expressions as overloaded_expressions1) = overloaded_expressions1 ();
 (
OVERLOADED_VARIABLE_DECLARATION (make_value_symbol passiveop_id, anytype, overloaded_expressions, TRUE));
 } );
 ( lr_table::NONTERM 94,  ( result,  overloaded_t1left,  rparen1right),  rest671);
 } 
;  ( 395,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::QQ_LVALUE_OR_BAR lvalue_or_bar1,  (lvalue_or_barleft as lvalue_or_bar1left)
,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lvalue_or_bar as lvalue_or_bar1) = lvalue_or_bar1 ();
 my  (expression as expression1) = expression1 ();
 (
   mark_declaration (
						VALUE_DECLARATIONS (
						    [   NAMED_VALUE {
							    expression,
							    pattern    => VARIABLE_IN_PATTERN [make_value_symbol lvalue_or_bar],
							    is_lazy    => FALSE
							}
						    ],
						    NIL
						),
						lvalue_or_barleft,
						expressionright
					    )
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lvalue_or_bar1left,  expression1right),  rest671);
 } 
;  ( 396,  ( ( _,  ( values::QQ_EXPRESSION expression1,  _,  (expressionright as expression1right))) !  _ !  ( _,  ( values::PASSIVEOP_ID passiveop_id1,  (passiveop_idleft as passiveop_id1left),  _))
 !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 my  (expression as expression1) = expression1 ();
 (
   mark_declaration (
						VALUE_DECLARATIONS (
						    [   NAMED_VALUE {
							    expression,
							    pattern    => VARIABLE_IN_PATTERN [make_value_symbol passiveop_id],
							    is_lazy    => FALSE
							}
						    ],
						    NIL
						),
						passiveop_idleft,
						expressionright
					    )
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  passiveop_id1left,  expression1right),  rest671);
 } 
;  ( 397,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_idleft,  (lowercase_idright as lowercase_id1right))) !  ( _,  ( _,  (pre_plusplusleft as pre_plusplus1left),  pre_plusplusright))
 !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                plus       =  raw_symbol (plus_hash,    plus_string);

						plus_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  plus;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_plusplusleft, pre_plusplusright),
									  source_code_region => (pre_plusplusleft, pre_plusplusright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						one	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (INT_CONSTANT_IN_EXPRESSION 1, lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

                                                expression =  PRE_FIXITY_EXPRESSION [ var, plus_op, one ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    pre_plusplusleft,
						    lowercase_idright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  pre_plusplus1left,  lowercase_id1right),  rest671);
 } 
;  ( 398,  ( ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_idleft,  (lowercase_idright as lowercase_id1right))) !  ( _,  ( _,  (pre_dashdashleft as pre_dashdash1left),  pre_dashdashright))
 !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                dash       =  raw_symbol (dash_hash,    dash_string);

						dash_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  dash;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], pre_dashdashleft, pre_dashdashright),
									  source_code_region => (pre_dashdashleft, pre_dashdashright),
									  fixity	     => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity	     => THE f
								      };
								  };

						one	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (INT_CONSTANT_IN_EXPRESSION 1, lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity	     => THE f
								      };
								  };

                                                expression =  PRE_FIXITY_EXPRESSION [ var, dash_op, one ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    pre_dashdashleft,
						    lowercase_idright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  pre_dashdash1left,  lowercase_id1right),  rest671);
 } 
;  ( 399,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  plus_eqleft,  plus_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                plus       =  raw_symbol (plus_hash,    plus_string);

						plus_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  plus;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], plus_eqleft, plus_eqright),
									  source_code_region => (plus_eqleft, plus_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, plus_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 400,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  star_eqleft,  star_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                star       =  raw_symbol (star_hash,    star_string);

						star_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  star;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], star_eqleft, star_eqright),
									  source_code_region => (star_eqleft, star_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, star_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 401,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  dash_eqleft,  dash_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                dash       =  raw_symbol (dash_hash,    dash_string);

						dash_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  dash;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dash_eqleft, dash_eqright),
									  source_code_region => (dash_eqleft, dash_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, dash_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 402,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  slash_eqleft,  slash_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                slash       =  raw_symbol (slash_hash,    slash_string);

						slash_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  slash;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], slash_eqleft, slash_eqright),
									  source_code_region => (slash_eqleft, slash_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, slash_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 403,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  percnt_eqleft,  percnt_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                percnt       =  raw_symbol (percnt_hash,    percnt_string);

						percnt_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  percnt;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], percnt_eqleft, percnt_eqright),
									  source_code_region => (percnt_eqleft, percnt_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, percnt_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 404,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  buck_eqleft,  buck_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                buck       =  raw_symbol (buck_hash,    buck_string);

						buck_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  buck;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], buck_eqleft, buck_eqright),
									  source_code_region => (buck_eqleft, buck_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, buck_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 405,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  bang_eqleft,  bang_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                bang       =  raw_symbol (bang_hash,    bang_string);

						bang_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  bang;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], bang_eqleft, bang_eqright),
									  source_code_region => (bang_eqleft, bang_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, bang_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 406,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  back_eqleft,  back_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                back       =  raw_symbol (back_hash,    back_string);

						back_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  back;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], back_eqleft, back_eqright),
									  source_code_region => (back_eqleft, back_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, back_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 407,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  amper_eqleft,  amper_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                amper       =  raw_symbol (amper_hash,    amper_string);

						amper_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  amper;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], amper_eqleft, amper_eqright),
									  source_code_region => (amper_eqleft, amper_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, amper_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 408,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  atsign_eqleft,  atsign_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                atsign       =  raw_symbol (atsign_hash,    atsign_string);

						atsign_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  atsign;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], atsign_eqleft, atsign_eqright),
									  source_code_region => (atsign_eqleft, atsign_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, atsign_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 409,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  qmark_eqleft,  qmark_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                qmark       =  raw_symbol (qmark_hash,    qmark_string);

						qmark_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  qmark;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], qmark_eqleft, qmark_eqright),
									  source_code_region => (qmark_eqleft, qmark_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, qmark_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 410,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  tilda_eqleft,  tilda_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                tilda       =  raw_symbol (tilda_hash,    tilda_string);

						tilda_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  tilda;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], tilda_eqleft, tilda_eqright),
									  source_code_region => (tilda_eqleft, tilda_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ var, tilda_op, atomic_exp ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 411,  ( ( _,  ( values::QQ_EXPRESSION expression1,  expressionleft,  (expressionright as expression1right))) !  ( _,  ( _,  dot_eqleft,  dot_eqright)) !  ( _,  ( values::QQ_LOWERCASE_ID 
lowercase_id1,  (lowercase_idleft as lowercase_id1left),  lowercase_idright)) !  rest671)) => {  my  result = values::QQ_DECLARATION (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ()
;
 my  (expression as expression1) = expression1 ();
 (
   {   pattern    =  VARIABLE_IN_PATTERN [make_value_symbol lowercase_id];

                                                dot        =  raw_symbol (weakdot_hash,    weakdot_string);

						dot_op    =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  dot;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], dot_eqleft, dot_eqright),
									  source_code_region => (dot_eqleft, dot_eqright),
									  fixity		   => THE f
								      };
								  };

						var	   =      {   my (v, f)
									  =
									  make_value_and_fixity_symbols  lowercase_id;

								      {   item               => mark_expression (VARIABLE_IN_EXPRESSION [v], lowercase_idleft, lowercase_idright),
									  source_code_region => (lowercase_idleft, lowercase_idright),
									  fixity		   => THE f
								      };
								  };

						atomic_exp =      {   item               => mark_expression (expression, expressionleft, expressionright),
								      source_code_region => (expressionleft, expressionright),
								      fixity             => NULL
								  };



                                                expression =  PRE_FIXITY_EXPRESSION [ atomic_exp, dot_op, var ];

						mark_declaration (
						    VALUE_DECLARATIONS (
							[   NAMED_VALUE { pattern, expression, is_lazy => FALSE } ],
							NIL
						    ),
						    lowercase_idleft,
						    expressionright
						);
					    }
					
);
 } );
 ( lr_table::NONTERM 94,  ( result,  lowercase_id1left,  expression1right),  rest671);
 } 
;  ( 412,  ( ( _,  ( values::QQ_OVERLOADED_EXPRESSION overloaded_expression1,  overloaded_expression1left,  overloaded_expression1right)) !  rest671)) => {  my  result = 
values::QQ_OVERLOADED_EXPRESSIONS (\\  _ =  {  my  (overloaded_expression as overloaded_expression1) = overloaded_expression1 ();
 ( [ overloaded_expression ] );
 } );
 ( lr_table::NONTERM 96,  ( 
result,  overloaded_expression1left,  overloaded_expression1right),  rest671);
 } 
;  ( 413,  ( ( _,  ( values::QQ_OVERLOADED_EXPRESSIONS overloaded_expressions1,  _,  overloaded_expressions1right)) !  _ !  ( _,  ( values::QQ_OVERLOADED_EXPRESSION overloaded_expression1,  
overloaded_expression1left,  _)) !  rest671)) => {  my  result = values::QQ_OVERLOADED_EXPRESSIONS (\\  _ =  {  my  (overloaded_expression as overloaded_expression1) = overloaded_expression1 ();
 my 
 (overloaded_expressions as overloaded_expressions1) = overloaded_expressions1 ();
 (   overloaded_expression ! overloaded_expressions);
 } );
 ( lr_table::NONTERM 96,  ( result,  
overloaded_expression1left,  overloaded_expressions1right),  rest671);
 } 
;  ( 414,  ( ( _,  ( values::QQ_LOWERCASE_PATH lowercase_path1,  (lowercase_pathleft as lowercase_path1left),  (lowercase_pathright as lowercase_path1right))) !  rest671)) => {  my  result = 
values::QQ_OVERLOADED_EXPRESSION (\\  _ =  {  my  (lowercase_path as lowercase_path1) = lowercase_path1 ();
 (
mark_expression (VARIABLE_IN_EXPRESSION (lowercase_path make_value_symbol), lowercase_pathright, lowercase_pathleft));
 } );
 ( lr_table::NONTERM 97,  ( result,  lowercase_path1left,  
lowercase_path1right),  rest671);
 } 
;  ( 415,  ( ( _,  ( values::QQ_OPERATORS_PATH operators_path1,  (operators_pathleft as operators_path1left),  (operators_pathright as operators_path1right))) !  rest671)) => {  my  result = 
values::QQ_OVERLOADED_EXPRESSION (\\  _ =  {  my  (operators_path as operators_path1) = operators_path1 ();
 (
mark_expression (VARIABLE_IN_EXPRESSION (operators_path make_value_symbol), operators_pathright, operators_pathleft));
 } );
 ( lr_table::NONTERM 97,  ( result,  operators_path1left,  
operators_path1right),  rest671);
 } 
;  ( 416,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  (passiveop_idleft as passiveop_id1left),  (passiveop_idright as passiveop_id1right))) !  rest671)) => {  my  result = 
values::QQ_OVERLOADED_EXPRESSION (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 (
mark_expression (VARIABLE_IN_EXPRESSION [make_value_symbol passiveop_id],   passiveop_idright,   passiveop_idleft  ));
 } );
 ( lr_table::NONTERM 97,  ( result,  passiveop_id1left,  passiveop_id1right
),  rest671);
 } 
;  ( 417,  ( ( _,  ( values::QQ_LVALUE_ID lvalue_id1,  (lvalue_idleft as lvalue_id1left),  (lvalue_idright as lvalue_id1right))) !  rest671)) => {  my  result = values::QQ_OVERLOADED_EXPRESSION (\\  _
 =  {  my  (lvalue_id as lvalue_id1) = lvalue_id1 ();
 (mark_expression (VARIABLE_IN_EXPRESSION [make_value_symbol lvalue_id],      lvalue_idright,      lvalue_idleft     ));
 } );
 ( 
lr_table::NONTERM 97,  ( result,  lvalue_id1left,  lvalue_id1right),  rest671);
 } 
;  ( 418,  ( rest671)) => {  my  result = values::QQ_MAYBE_DECLARATIONS (\\  _ =  (SEQUENTIAL_DECLARATIONS NIL));
 ( lr_table::NONTERM 98,  ( result,  default_position,  default_position),  rest671)
;
 } 
;  ( 419,  ( ( _,  ( values::QQ_DECLARATIONS declarations1,  declarations1left,  declarations1right)) !  rest671)) => {  my  result = values::QQ_MAYBE_DECLARATIONS (\\  _ =  {  my  (declarations as 
declarations1) = declarations1 ();
 (declarations);
 } );
 ( lr_table::NONTERM 98,  ( result,  declarations1left,  declarations1right),  rest671);
 } 
;  ( 420,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_DECLARATION_OR_LOCAL declaration_or_local1,  declaration_or_local1left,  _)) !  rest671)) => {  my  result = values::QQ_DECLARATIONS
 (\\  _ =  {  my  (declaration_or_local as declaration_or_local1) = declaration_or_local1 ();
 (declaration_or_local);
 } );
 ( lr_table::NONTERM 99,  ( result,  declaration_or_local1left,  semi1right
),  rest671);
 } 
;  ( 421,  ( ( _,  ( values::QQ_DECLARATIONS declarations1,  _,  declarations1right)) !  _ !  ( _,  ( values::QQ_DECLARATION_OR_LOCAL declaration_or_local1,  (declaration_or_localleft as 
declaration_or_local1left),  declaration_or_localright)) !  rest671)) => {  my  result = values::QQ_DECLARATIONS (\\  _ =  {  my  (declaration_or_local as declaration_or_local1) = 
declaration_or_local1 ();
 my  (declarations as declarations1) = declarations1 ();
 (
make_declaration_sequence   (mark_declaration   (declaration_or_local, declaration_or_localleft, declaration_or_localright),   declarations));
 } );
 ( lr_table::NONTERM 99,  ( result,  
declaration_or_local1left,  declarations1right),  rest671);
 } 
;  ( 422,  ( ( _,  ( values::QQ_DECLARATION declaration1,  declaration1left,  declaration1right)) !  rest671)) => {  my  result = values::QQ_DECLARATION_OR_LOCAL (\\  _ =  {  my  (declaration as 
declaration1) = declaration1 ();
 (declaration);
 } );
 ( lr_table::NONTERM 95,  ( result,  declaration1left,  declaration1right),  rest671);
 } 
;  ( 423,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_MAYBE_DECLARATIONS maybe_declarations2,  maybe_declarations2left,  maybe_declarations2right)) !  _ !  ( _,  ( 
values::QQ_MAYBE_DECLARATIONS maybe_declarations1,  maybe_declarations1left,  maybe_declarations1right)) !  ( _,  ( _,  (stipulate_tleft as stipulate_t1left),  _)) !  rest671)) => {  my  result = 
values::QQ_DECLARATION_OR_LOCAL (\\  _ =  {  my  maybe_declarations1 = maybe_declarations1 ();
 my  maybe_declarations2 = maybe_declarations2 ();
 (
   mark_declaration (
						LOCAL_DECLARATIONS (
						    mark_declaration (maybe_declarations1, maybe_declarations1left, maybe_declarations1right),
						    mark_declaration (maybe_declarations2, maybe_declarations2left, maybe_declarations2right)
						),
						stipulate_tleft,
						end_tright
					    )
					
);
 } );
 ( lr_table::NONTERM 95,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 424,  ( ( _,  ( values::QQ_VALUE_OR_BAR value_or_bar1,  value_or_bar1left,  value_or_bar1right)) !  rest671)) => {  my  result = values::QQ_OPS (\\  _ =  {  my  (value_or_bar as value_or_bar1) = 
value_or_bar1 ();
 ( [ make_fixity_symbol value_or_bar ] );
 } );
 ( lr_table::NONTERM 100,  ( result,  value_or_bar1left,  value_or_bar1right),  rest671);
 } 
;  ( 425,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  passiveop_id1left,  passiveop_id1right)) !  rest671)) => {  my  result = values::QQ_OPS (\\  _ =  {  my  (passiveop_id as passiveop_id1) = 
passiveop_id1 ();
 ( [ make_fixity_symbol passiveop_id ] );
 } );
 ( lr_table::NONTERM 100,  ( result,  passiveop_id1left,  passiveop_id1right),  rest671);
 } 
;  ( 426,  ( ( _,  ( values::QQ_OPS ops1,  _,  ops1right)) !  ( _,  ( values::QQ_VALUE_OR_BAR value_or_bar1,  value_or_bar1left,  _)) !  rest671)) => {  my  result = values::QQ_OPS (\\  _ =  {  my  (
value_or_bar as value_or_bar1) = value_or_bar1 ();
 my  (ops as ops1) = ops1 ();
 (   make_fixity_symbol value_or_bar  !  ops);
 } );
 ( lr_table::NONTERM 100,  ( result,  value_or_bar1left,  
ops1right),  rest671);
 } 
;  ( 427,  ( ( _,  ( values::QQ_OPS ops1,  _,  ops1right)) !  ( _,  ( values::PASSIVEOP_ID passiveop_id1,  passiveop_id1left,  _)) !  rest671)) => {  my  result = values::QQ_OPS (\\  _ =  {  my  (
passiveop_id as passiveop_id1) = passiveop_id1 ();
 my  (ops as ops1) = ops1 ();
 (   make_fixity_symbol passiveop_id  !  ops);
 } );
 ( lr_table::NONTERM 100,  ( result,  passiveop_id1left,  
ops1right),  rest671);
 } 
;  ( 428,  ( ( _,  ( _,  package_t1left,  package_t1right)) !  rest671)) => {  my  result = values::QQ_PACKAGE (\\  _ =  (()));
 ( lr_table::NONTERM 10,  ( result,  package_t1left,  package_t1right), 
 rest671);
 } 
;  ( 429,  ( ( _,  ( _,  class_t1left,  class_t1right)) !  rest671)) => {  my  result = values::QQ_PACKAGE (\\  _ =  (()));
 ( lr_table::NONTERM 10,  ( result,  class_t1left,  class_t1right),  rest671
);
 } 
;  ( 430,  ( ( _,  ( _,  class2_t1left,  class2_t1right)) !  rest671)) => {  my  result = values::QQ_PACKAGE (\\  _ =  (()));
 ( lr_table::NONTERM 10,  ( result,  class2_t1left,  class2_t1right),  
rest671);
 } 
;  ( 431,  ( rest671)) => {  my  result = values::QQ_MAYBE_API_ELEMENTS (\\  _ =  ( [] ));
 ( lr_table::NONTERM 102,  ( result,  default_position,  default_position),  rest671);
 } 
;  ( 432,  ( ( _,  ( values::QQ_API_ELEMENTS api_elements1,  api_elements1left,  api_elements1right)) !  rest671)) => {  my  result = values::QQ_MAYBE_API_ELEMENTS (\\  _ =  {  my  (api_elements as 
api_elements1) = api_elements1 ();
 (api_elements);
 } );
 ( lr_table::NONTERM 102,  ( result,  api_elements1left,  api_elements1right),  rest671);
 } 
;  ( 433,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_API_ELEMENT api_element1,  api_element1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENTS (\\  _ =  {  my  (api_element
 as api_element1) = api_element1 ();
 (api_element);
 } );
 ( lr_table::NONTERM 101,  ( result,  api_element1left,  semi1right),  rest671);
 } 
;  ( 434,  ( ( _,  ( values::QQ_API_ELEMENTS api_elements1,  _,  api_elements1right)) !  _ !  ( _,  ( values::QQ_API_ELEMENT api_element1,  api_element1left,  _)) !  rest671)) => {  my  result = 
values::QQ_API_ELEMENTS (\\  _ =  {  my  (api_element as api_element1) = api_element1 ();
 my  (api_elements as api_elements1) = api_elements1 ();
 (api_element @ api_elements);
 } );
 ( 
lr_table::NONTERM 101,  ( result,  api_element1left,  api_elements1right),  rest671);
 } 
;  ( 435,  ( ( _,  ( values::QQ_PACKAGE_IN_API package_in_api1,  _,  package_in_api1right)) !  ( _,  ( values::QQ_PACKAGE package1,  package1left,  _)) !  rest671)) => {  my  result = 
values::QQ_API_ELEMENT (\\  _ =  {  my  package1 = package1 ();
 my  (package_in_api as package_in_api1) = package_in_api1 ();
 ( [ PACKAGES_IN_API package_in_api ] );
 } );
 ( lr_table::NONTERM 103, 
 ( result,  package1left,  package_in_api1right),  rest671);
 } 
;  ( 436,  ( ( _,  ( values::QQ_GENERIC_IN_API generic_in_api1,  _,  generic_in_api1right)) !  _ !  ( _,  ( _,  generic_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  { 
 my  (generic_in_api as generic_in_api1) = generic_in_api1 ();
 ( [ GENERICS_IN_API generic_in_api ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  generic_t1left,  generic_in_api1right),  rest671)
;
 } 
;  ( 437,  ( ( _,  ( values::QQ_SUMTYPES sumtypes1,  sumtypes1left,  sumtypes1right)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (sumtypes as sumtypes1) = sumtypes1 ();
 (
 [ VALCONS_IN_API { sumtypes, with_types => NIL } ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  sumtypes1left,  sumtypes1right),  rest671);
 } 
;  ( 438,  ( ( _,  ( values::QQ_NAMED_TYPES named_types1,  _,  named_types1right)) !  _ !  ( _,  ( values::QQ_SUMTYPES sumtypes1,  sumtypes1left,  _)) !  rest671)) => {  my  result = 
values::QQ_API_ELEMENT (\\  _ =  {  my  (sumtypes as sumtypes1) = sumtypes1 ();
 my  (named_types as named_types1) = named_types1 ();
 ( [ VALCONS_IN_API { sumtypes, with_types => named_types  } ] )
;
 } );
 ( lr_table::NONTERM 103,  ( result,  sumtypes1left,  named_types1right),  rest671);
 } 
;  ( 439,  ( ( _,  ( values::QQ_TYPE_IN_API type_in_api1,  type_in_api1left,  type_in_api1right)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (type_in_api as type_in_api1)
 = type_in_api1 ();
 ( [ TYPES_IN_API (type_in_api, FALSE) ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  type_in_api1left,  type_in_api1right),  rest671);
 } 
;  ( 440,  ( ( _,  ( values::QQ_TYPE_IN_API type_in_api1,  _,  type_in_api1right)) !  ( _,  ( _,  eqtype_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (
type_in_api as type_in_api1) = type_in_api1 ();
 ( [ TYPES_IN_API (type_in_api, TRUE ) ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  eqtype_t1left,  type_in_api1right),  rest671);
 } 
;  ( 441,  ( ( _,  ( values::QQ_VALUE_IN_API value_in_api1,  _,  value_in_api1right)) !  ( _,  ( _,  my_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (
value_in_api as value_in_api1) = value_in_api1 ();
 ( [ VALUES_IN_API value_in_api ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  my_t1left,  value_in_api1right),  rest671);
 } 
;  ( 442,  ( ( _,  ( values::QQ_VALUE_IN_API value_in_api1,  value_in_api1left,  value_in_api1right)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (value_in_api as 
value_in_api1) = value_in_api1 ();
 ( [ VALUES_IN_API value_in_api ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  value_in_api1left,  value_in_api1right),  rest671);
 } 
;  ( 443,  ( ( _,  ( values::QQ_EXCEPTION_IN_API exception_in_api1,  _,  exception_in_api1right)) !  ( _,  ( _,  exception_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ = 
 {  my  (exception_in_api as exception_in_api1) = exception_in_api1 ();
 ( [ EXCEPTIONS_IN_API exception_in_api ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  exception_t1left,  
exception_in_api1right),  rest671);
 } 
;  ( 444,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( _,  include_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (an_api as an_api1)
 = an_api1 ();
 ( [ IMPORT_IN_API an_api ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  include_t1left,  an_api1right),  rest671);
 } 
;  ( 445,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  mixedcase_id1right)) !  _ !  ( _,  ( _,  include_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (
mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 ( [ IMPORT_IN_API (API_BY_NAME (fast_symbol::make_api_symbol mixedcase_id)) ] );
 } );
 ( lr_table::NONTERM 103,  ( result,  include_t1left,  
mixedcase_id1right),  rest671);
 } 
;  ( 446,  ( ( _,  ( values::QQ_SHARESPEC sharespec1,  _,  sharespec1right)) !  ( _,  ( _,  sharing_t1left,  _)) !  rest671)) => {  my  result = values::QQ_API_ELEMENT (\\  _ =  {  my  (sharespec as 
sharespec1) = sharespec1 ();
 (sharespec);
 } );
 ( lr_table::NONTERM 103,  ( result,  sharing_t1left,  sharespec1right),  rest671);
 } 
;  ( 447,  ( ( _,  ( values::QQ_PACKAGE_IN_API package_in_api2,  _,  package_in_api2right)) !  _ !  ( _,  ( values::QQ_PACKAGE_IN_API package_in_api1,  package_in_api1left,  _)) !  rest671)) => {  my 
 result = values::QQ_PACKAGE_IN_API (\\  _ =  {  my  package_in_api1 = package_in_api1 ();
 my  package_in_api2 = package_in_api2 ();
 (package_in_api1 @ package_in_api2);
 } );
 ( lr_table::NONTERM 
104,  ( result,  package_in_api1left,  package_in_api2right),  rest671);
 } 
;  ( 448,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_PACKAGE_IN_API (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (an_api as an_api1) = an_api1 ();
 ( [ (make_package_symbol lowercase_id, an_api, NULL) ] );
 } );
 
( lr_table::NONTERM 104,  ( result,  lowercase_id1left,  an_api1right),  rest671);
 } 
;  ( 449,  ( ( _,  ( values::QQ_LOWERCASE lowercase1,  _,  lowercase1right)) !  _ !  ( _,  ( values::QQ_AN_API an_api1,  _,  _)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  
lowercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_PACKAGE_IN_API (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (an_api as an_api1) = an_api1 ();
 my  (
lowercase as lowercase1) = lowercase1 ();
 ( [ (make_package_symbol lowercase_id, an_api, THE (lowercase make_package_symbol)) ] );
 } );
 ( lr_table::NONTERM 104,  ( result,  lowercase_id1left,  
lowercase1right),  rest671);
 } 
;  ( 450,  ( ( _,  ( values::QQ_GENERIC_IN_API generic_in_api2,  _,  generic_in_api2right)) !  _ !  ( _,  ( values::QQ_GENERIC_IN_API generic_in_api1,  generic_in_api1left,  _)) !  rest671)) => {  my 
 result = values::QQ_GENERIC_IN_API (\\  _ =  {  my  generic_in_api1 = generic_in_api1 ();
 my  generic_in_api2 = generic_in_api2 ();
 (generic_in_api1 @ generic_in_api2);
 } );
 ( lr_table::NONTERM 
105,  ( result,  generic_in_api1left,  generic_in_api2right),  rest671);
 } 
;  ( 451,  ( ( _,  ( values::QQ_FSIG fsig1,  _,  fsig1right)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_IN_API (\\ 
 _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (fsig as fsig1) = fsig1 ();
 ( [ (make_generic_symbol lowercase_id, fsig) ] );
 } );
 ( lr_table::NONTERM 105,  ( result,  
lowercase_id1left,  fsig1right),  rest671);
 } 
;  ( 452,  ( ( _,  ( values::QQ_TYPE_IN_API type_in_api2,  _,  type_in_api2right)) !  _ !  ( _,  ( values::QQ_TYPE_IN_API type_in_api1,  type_in_api1left,  _)) !  rest671)) => {  my  result = 
values::QQ_TYPE_IN_API (\\  _ =  {  my  type_in_api1 = type_in_api1 ();
 my  type_in_api2 = type_in_api2 ();
 (type_in_api1 @ type_in_api2);
 } );
 ( lr_table::NONTERM 106,  ( result,  
type_in_api1left,  type_in_api2right),  rest671);
 } 
;  ( 453,  ( ( _,  ( values::QQ_TYPEVARS typevars1,  _,  typevars1right)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  mixedcase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_TYPE_IN_API
 (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 ( [ (make_type_symbol mixedcase_id, typevars, NULL   ) ] );
 } );
 ( 
lr_table::NONTERM 106,  ( result,  mixedcase_id1left,  typevars1right),  rest671);
 } 
;  ( 454,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  mixedcase_id1left,  _))
 !  rest671)) => {  my  result = values::QQ_TYPE_IN_API (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (typevars as typevars1) = typevars1 ();
 my  (anytype as anytype1) = 
anytype1 ();
 ( [ (make_type_symbol mixedcase_id, typevars, THE anytype) ] );
 } );
 ( lr_table::NONTERM 106,  ( result,  mixedcase_id1left,  anytype1right),  rest671);
 } 
;  ( 455,  ( ( _,  ( values::QQ_VALUE_IN_API value_in_api2,  _,  value_in_api2right)) !  _ !  ( _,  ( values::QQ_VALUE_IN_API value_in_api1,  value_in_api1left,  _)) !  rest671)) => {  my  result = 
values::QQ_VALUE_IN_API (\\  _ =  {  my  value_in_api1 = value_in_api1 ();
 my  value_in_api2 = value_in_api2 ();
 (value_in_api1 @ value_in_api2);
 } );
 ( lr_table::NONTERM 107,  ( result,  
value_in_api1left,  value_in_api2right),  rest671);
 } 
;  ( 456,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_VALUE_IN_API (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 ( [ (make_value_symbol lowercase_id, anytype) ] );
 } );
 ( 
lr_table::NONTERM 107,  ( result,  lowercase_id1left,  anytype1right),  rest671);
 } 
;  ( 457,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::OPERATORS_ID operators_id1,  operators_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_VALUE_IN_API (\\  _ =  {  my  (operators_id as operators_id1) = operators_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 ( [ (make_value_symbol operators_id, anytype) ] );
 } );
 ( 
lr_table::NONTERM 107,  ( result,  operators_id1left,  anytype1right),  rest671);
 } 
;  ( 458,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::PASSIVEOP_ID passiveop_id1,  passiveop_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_VALUE_IN_API (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 ( [ (make_value_symbol passiveop_id, anytype) ] );
 } );
 ( 
lr_table::NONTERM 107,  ( result,  passiveop_id1left,  anytype1right),  rest671);
 } 
;  ( 459,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  amper1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (amper_hash,    amper_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  amper1left,  anytype1right),  rest671);
 } 
;  ( 460,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  atsign1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (atsign_hash,   atsign_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  atsign1left,  anytype1right),  rest671);
 } 
;  ( 461,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  back1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (back_hash,     back_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  back1left,  anytype1right),  rest671);
 } 
;  ( 462,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  bar1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1)
 = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (bar_hash,      bar_string   )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  bar1left,  anytype1right),  rest671);
 } 
;  ( 463,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  bang1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (bang_hash,     bang_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  bang1left,  anytype1right),  rest671);
 } 
;  ( 464,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  buck1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (buck_hash,     buck_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  buck1left,  anytype1right),  rest671);
 } 
;  ( 465,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  caret1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (caret_hash,    caret_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  caret1left,  anytype1right),  rest671);
 } 
;  ( 466,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  dash1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (dash_hash,     dash_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  dash1left,  anytype1right),  rest671);
 } 
;  ( 467,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  percnt1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (percnt_hash,   percnt_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  percnt1left,  anytype1right),  rest671);
 } 
;  ( 468,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  plus1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (plus_hash,     plus_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  plus1left,  anytype1right),  rest671);
 } 
;  ( 469,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  qmark1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (qmark_hash,    qmark_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  qmark1left,  anytype1right),  rest671);
 } 
;  ( 470,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  slash1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (slash_hash,    slash_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  slash1left,  anytype1right),  rest671);
 } 
;  ( 471,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  star1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as anytype1
) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (star_hash,     star_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  star1left,  anytype1right),  rest671);
 } 
;  ( 472,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  tilda1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (tilda_hash,    tilda_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  tilda1left,  anytype1right),  rest671);
 } 
;  ( 473,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  dash_dash1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (dashdash_hash,  dashdash_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  dash_dash1left,  anytype1right),  rest671)
;
 } 
;  ( 474,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  plus_plus1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (plusplus_hash,  plusplus_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  plus_plus1left,  anytype1right),  rest671)
;
 } 
;  ( 475,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  dotdot1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (dotdot_hash,    dotdot_string   )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  dotdot1left,  anytype1right),  rest671);
 } 
;  ( 476,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  langle1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (langle_hash,    langle_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  langle1left,  anytype1right),  rest671);
 } 
;  ( 477,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  rangle1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (rangle_hash,    rangle_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  rangle1left,  anytype1right),  rest671);
 } 
;  ( 478,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  eqeq_op1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (eqeq_hash,      eqeq_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  eqeq_op1left,  anytype1right),  rest671);
 } 
;  ( 479,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_amper1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (preamper_hash,  preamper_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_amper1left,  anytype1right),  rest671)
;
 } 
;  ( 480,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_atsign1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (preatsign_hash, preatsign_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_atsign1left,  anytype1right),  rest671)
;
 } 
;  ( 481,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_back1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (preback_hash,   preback_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_back1left,  anytype1right),  rest671)
;
 } 
;  ( 482,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_bang1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (prebang_hash,   prebang_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_bang1left,  anytype1right),  rest671)
;
 } 
;  ( 483,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_buck1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (prebuck_hash,   prebuck_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_buck1left,  anytype1right),  rest671)
;
 } 
;  ( 484,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_caret1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (precaret_hash,  precaret_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_caret1left,  anytype1right),  rest671)
;
 } 
;  ( 485,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_dash1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (predash_hash,   predash_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_dash1left,  anytype1right),  rest671)
;
 } 
;  ( 486,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_percnt1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (prepercnt_hash, prepercnt_string)), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_percnt1left,  anytype1right),  rest671)
;
 } 
;  ( 487,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_plus1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (preplus_hash,   preplus_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_plus1left,  anytype1right),  rest671)
;
 } 
;  ( 488,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_star1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (prestar_hash,   prestar_string  )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_star1left,  anytype1right),  rest671)
;
 } 
;  ( 489,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( _,  pre_tilda1left,  _)) !  rest671)) => {  my  result = values::QQ_VALUE_IN_API (\\  _ =  {  my  (anytype as 
anytype1) = anytype1 ();
 ( [ (make_value_symbol (raw_symbol (pretilda_hash,  pretilda_string )), anytype) ] );
 } );
 ( lr_table::NONTERM 107,  ( result,  pre_tilda1left,  anytype1right),  rest671)
;
 } 
;  ( 490,  ( ( _,  ( values::QQ_EXCEPTION_IN_API exception_in_api2,  _,  exception_in_api2right)) !  _ !  ( _,  ( values::QQ_EXCEPTION_IN_API exception_in_api1,  exception_in_api1left,  _)) !  rest671
)) => {  my  result = values::QQ_EXCEPTION_IN_API (\\  _ =  {  my  exception_in_api1 = exception_in_api1 ();
 my  exception_in_api2 = exception_in_api2 ();
 (exception_in_api1 @ exception_in_api2)
;
 } );
 ( lr_table::NONTERM 108,  ( result,  exception_in_api1left,  exception_in_api2right),  rest671);
 } 
;  ( 491,  ( ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  uppercase_id1right)) !  rest671)) => {  my  result = values::QQ_EXCEPTION_IN_API (\\  _ =  {  my  (uppercase_id as 
uppercase_id1) = uppercase_id1 ();
 ( [ (make_value_symbol uppercase_id, NULL       ) ] );
 } );
 ( lr_table::NONTERM 108,  ( result,  uppercase_id1left,  uppercase_id1right),  rest671);
 } 
;  ( 492,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  ( _,  ( values::UPPERCASE_ID uppercase_id1,  uppercase_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_EXCEPTION_IN_API (\\  _ =  {  my  (uppercase_id as uppercase_id1) = uppercase_id1 ();
 my  (anytype as anytype1) = anytype1 ();
 ( [ (make_value_symbol uppercase_id, THE anytype) ] );
 } )
;
 ( lr_table::NONTERM 108,  ( result,  uppercase_id1left,  anytype1right),  rest671);
 } 
;  ( 493,  ( ( _,  ( values::QQ_SHARESPEC sharespec2,  _,  sharespec2right)) !  _ !  ( _,  ( values::QQ_SHARESPEC sharespec1,  sharespec1left,  _)) !  rest671)) => {  my  result = values::QQ_SHARESPEC
 (\\  _ =  {  my  sharespec1 = sharespec1 ();
 my  sharespec2 = sharespec2 ();
 (sharespec1 @ sharespec2);
 } );
 ( lr_table::NONTERM 109,  ( result,  sharespec1left,  sharespec2right),  rest671);
 } 
;  ( 494,  ( ( _,  ( values::QQ_TYPEPATHEQN typepatheqn1,  (typepatheqnleft as typepatheqn1left),  (typepatheqnright as typepatheqn1right))) !  rest671)) => {  my  result = values::QQ_SHARESPEC (\\  _
 =  {  my  (typepatheqn as typepatheqn1) = typepatheqn1 ();
 (
   [   SOURCE_CODE_REGION_FOR_API_ELEMENT (
						    TYPE_SHARING_IN_API (typepatheqn make_type_symbol),
						    (typepatheqnleft, typepatheqnright)
                                                )
					    ]
					
);
 } );
 ( lr_table::NONTERM 109,  ( result,  typepatheqn1left,  typepatheqn1right),  rest671);
 } 
;  ( 495,  ( ( _,  ( values::QQ_PATHEQN patheqn1,  (patheqnleft as patheqn1left),  (patheqnright as patheqn1right))) !  rest671)) => {  my  result = values::QQ_SHARESPEC (\\  _ =  {  my  (patheqn as 
patheqn1) = patheqn1 ();
 (   [   SOURCE_CODE_REGION_FOR_API_ELEMENT (
						    PACKAGE_SHARING_IN_API (patheqn make_package_symbol),
						    (patheqnleft, patheqnright)
						)
					    ]
					)
;
 } );
 ( lr_table::NONTERM 109,  ( result,  patheqn1left,  patheqn1right),  rest671);
 } 
;  ( 496,  ( ( _,  ( values::QQ_MIXEDCASE mixedcase2,  _,  mixedcase2right)) !  _ !  ( _,  ( values::QQ_MIXEDCASE mixedcase1,  mixedcase1left,  _)) !  rest671)) => {  my  result = 
values::QQ_TYPEPATHEQN (\\  _ =  {  my  mixedcase1 = mixedcase1 ();
 my  mixedcase2 = mixedcase2 ();
 (\\ kind =  [mixedcase1 kind, mixedcase2 kind]);
 } );
 ( lr_table::NONTERM 111,  ( result,  
mixedcase1left,  mixedcase2right),  rest671);
 } 
;  ( 497,  ( ( _,  ( values::QQ_TYPEPATHEQN typepatheqn1,  _,  typepatheqn1right)) !  _ !  ( _,  ( values::QQ_MIXEDCASE mixedcase1,  mixedcase1left,  _)) !  rest671)) => {  my  result = 
values::QQ_TYPEPATHEQN (\\  _ =  {  my  (mixedcase as mixedcase1) = mixedcase1 ();
 my  (typepatheqn as typepatheqn1) = typepatheqn1 ();
 (\\ kind =   mixedcase kind ! typepatheqn kind);
 } );
 ( 
lr_table::NONTERM 111,  ( result,  mixedcase1left,  typepatheqn1right),  rest671);
 } 
;  ( 498,  ( ( _,  ( values::QQ_LOWERCASE lowercase2,  _,  lowercase2right)) !  _ !  ( _,  ( values::QQ_LOWERCASE lowercase1,  lowercase1left,  _)) !  rest671)) => {  my  result = values::QQ_PATHEQN
 (\\  _ =  {  my  lowercase1 = lowercase1 ();
 my  lowercase2 = lowercase2 ();
 (\\ kind =  [lowercase1 kind, lowercase2 kind]);
 } );
 ( lr_table::NONTERM 110,  ( result,  lowercase1left,  
lowercase2right),  rest671);
 } 
;  ( 499,  ( ( _,  ( values::QQ_PATHEQN patheqn1,  _,  patheqn1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE lowercase1,  lowercase1left,  _)) !  rest671)) => {  my  result = values::QQ_PATHEQN (\\  _
 =  {  my  (lowercase as lowercase1) = lowercase1 ();
 my  (patheqn as patheqn1) = patheqn1 ();
 (\\ kind =   lowercase  kind ! patheqn kind);
 } );
 ( lr_table::NONTERM 110,  ( result,  
lowercase1left,  patheqn1right),  rest671);
 } 
;  ( 500,  ( ( _,  ( values::QQ_WHERE_SPEC where_spec2,  _,  where_spec2right)) !  _ !  ( _,  ( values::QQ_WHERE_SPEC where_spec1,  where_spec1left,  _)) !  rest671)) => {  my  result = 
values::QQ_WHERE_SPEC (\\  _ =  {  my  where_spec1 = where_spec1 ();
 my  where_spec2 = where_spec2 ();
 (where_spec1 @ where_spec2);
 } );
 ( lr_table::NONTERM 112,  ( result,  where_spec1left,  
where_spec2right),  rest671);
 } 
;  ( 501,  ( ( _,  ( values::QQ_LOWERCASE lowercase2,  _,  lowercase2right)) !  _ !  ( _,  ( values::QQ_LOWERCASE lowercase1,  lowercase1left,  _)) !  rest671)) => {  my  result = 
values::QQ_WHERE_SPEC (\\  _ =  {  my  lowercase1 = lowercase1 ();
 my  lowercase2 = lowercase2 ();
 ( [ WHERE_PACKAGE (lowercase1 make_package_symbol, lowercase2 make_package_symbol) ] );
 } );
 ( 
lr_table::NONTERM 112,  ( result,  lowercase1left,  lowercase2right),  rest671);
 } 
;  ( 502,  ( ( _,  ( values::QQ_ANYTYPE anytype1,  _,  anytype1right)) !  _ !  ( _,  ( values::QQ_TYPEVARS typevars1,  _,  _)) !  ( _,  ( values::QQ_MIXEDCASE mixedcase1,  mixedcase1left,  _)) !  
rest671)) => {  my  result = values::QQ_WHERE_SPEC (\\  _ =  {  my  (mixedcase as mixedcase1) = mixedcase1 ();
 my  (typevars as typevars1) = typevars1 ();
 my  (anytype as anytype1) = anytype1 ();
 (
 [ WHERE_TYPE      (mixedcase make_type_symbol, typevars, anytype) ] );
 } );
 ( lr_table::NONTERM 112,  ( result,  mixedcase1left,  anytype1right),  rest671);
 } 
;  ( 503,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  (mixedcase_idleft as mixedcase_id1left),  (mixedcase_idright as mixedcase_id1right))) !  rest671)) => {  my  result = values::QQ_AN_API (\\  _
 =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 (
   SOURCE_CODE_REGION_FOR_API (
						API_BY_NAME (make_api_symbol mixedcase_id),
				                (mixedcase_idleft, mixedcase_idright)
					)   );
 } );
 ( lr_table::NONTERM 113,  ( result,  
mixedcase_id1left,  mixedcase_id1right),  rest671);
 } 
;  ( 504,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( values::QQ_MAYBE_API_ELEMENTS maybe_api_elements1,  maybe_api_elementsleft,  maybe_api_elementsright)) !  _ !  ( _,  ( _,  api_t1left,  _)) !  
rest671)) => {  my  result = values::QQ_AN_API (\\  _ =  {  my  (maybe_api_elements as maybe_api_elements1) = maybe_api_elements1 ();
 (
   SOURCE_CODE_REGION_FOR_API (
						API_DEFINITION (maybe_api_elements),
						(maybe_api_elementsleft, maybe_api_elementsright)
					)   );
 } );
 ( lr_table::NONTERM 113,  ( result,  api_t1left,  
rbrace1right),  rest671);
 } 
;  ( 505,  ( ( _,  ( values::QQ_WHERE_SPEC where_spec1,  _,  (where_specright as where_spec1right))) !  _ !  ( _,  ( values::QQ_AN_API an_api1,  (an_apileft as an_api1left),  _)) !  rest671)) => { 
 my  result = values::QQ_AN_API (\\  _ =  {  my  (an_api as an_api1) = an_api1 ();
 my  (where_spec as where_spec1) = where_spec1 ();
 (
   SOURCE_CODE_REGION_FOR_API (
						API_WITH_WHERE_SPECS (an_api, where_spec),
						(an_apileft, where_specright)
					)   );
 } );
 ( lr_table::NONTERM 113,  ( result,  an_api1left,  
where_spec1right),  rest671);
 } 
;  ( 506,  ( rest671)) => {  my  result = values::QQ_MAYBE_API_CONSTRAINT_OP (\\  _ =  (     NO_PACKAGE_CAST         ));
 ( lr_table::NONTERM 114,  ( result,  default_position,  default_position),  
rest671);
 } 
;  ( 507,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  ( _,  ( _,  weak_package_cast1left,  _)) !  rest671)) => {  my  result = values::QQ_MAYBE_API_CONSTRAINT_OP (\\  _ =  {  my  (
an_api as an_api1) = an_api1 ();
 (   WEAK_PACKAGE_CAST (an_api));
 } );
 ( lr_table::NONTERM 114,  ( result,  weak_package_cast1left,  an_api1right),  rest671);
 } 
;  ( 508,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  ( _,  ( _,  partial_package_cast1left,  _)) !  rest671)) => {  my  result = values::QQ_MAYBE_API_CONSTRAINT_OP (\\  _ =  {  my  (
an_api as an_api1) = an_api1 ();
 (PARTIAL_PACKAGE_CAST (an_api));
 } );
 ( lr_table::NONTERM 114,  ( result,  partial_package_cast1left,  an_api1right),  rest671);
 } 
;  ( 509,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  ( _,  ( _,  colon1left,  _)) !  rest671)) => {  my  result = values::QQ_MAYBE_API_CONSTRAINT_OP (\\  _ =  {  my  (an_api as 
an_api1) = an_api1 ();
 ( STRONG_PACKAGE_CAST (an_api));
 } );
 ( lr_table::NONTERM 114,  ( result,  colon1left,  an_api1right),  rest671);
 } 
;  ( 510,  ( rest671)) => {  my  result = values::QQ_MAYBE_GENERIC_API_CONSTRAINT_OP (\\  _ =  (     NO_PACKAGE_CAST));
 ( lr_table::NONTERM 115,  ( result,  default_position,  default_position),  
rest671);
 } 
;  ( 511,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  mixedcase_id1right)) !  ( _,  ( _,  weak_package_cast1left,  _)) !  rest671)) => {  my  result = 
values::QQ_MAYBE_GENERIC_API_CONSTRAINT_OP (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 (   WEAK_PACKAGE_CAST (GENERIC_API_BY_NAME (make_generic_api_symbol mixedcase_id)))
;
 } );
 ( lr_table::NONTERM 115,  ( result,  weak_package_cast1left,  mixedcase_id1right),  rest671);
 } 
;  ( 512,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  mixedcase_id1right)) !  ( _,  ( _,  partial_package_cast1left,  _)) !  rest671)) => {  my  result = 
values::QQ_MAYBE_GENERIC_API_CONSTRAINT_OP (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 (PARTIAL_PACKAGE_CAST (GENERIC_API_BY_NAME (make_generic_api_symbol mixedcase_id)))
;
 } );
 ( lr_table::NONTERM 115,  ( result,  partial_package_cast1left,  mixedcase_id1right),  rest671);
 } 
;  ( 513,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  mixedcase_id1right)) !  ( _,  ( _,  colon1left,  _)) !  rest671)) => {  my  result = values::QQ_MAYBE_GENERIC_API_CONSTRAINT_OP (\\  _ = 
 {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 ( STRONG_PACKAGE_CAST (GENERIC_API_BY_NAME (make_generic_api_symbol mixedcase_id)));
 } );
 ( lr_table::NONTERM 115,  ( result,  colon1left
,  mixedcase_id1right),  rest671);
 } 
;  ( 514,  ( ( _,  ( values::QQ_API_NAMING api_naming2,  _,  api_naming2right)) !  _ !  ( _,  ( values::QQ_API_NAMING api_naming1,  api_naming1left,  _)) !  rest671)) => {  my  result = 
values::QQ_API_NAMING (\\  _ =  {  my  api_naming1 = api_naming1 ();
 my  api_naming2 = api_naming2 ();
 (api_naming1 @ api_naming2);
 } );
 ( lr_table::NONTERM 116,  ( result,  api_naming1left,  
api_naming2right),  rest671);
 } 
;  ( 515,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  mixedcase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_API_NAMING
 (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   [   NAMED_API {
						    name_symbol => make_api_symbol mixedcase_id,
						    definition  => an_api
						}
					    ]
					);
 } );
 ( lr_table::NONTERM 116,  ( result,  mixedcase_id1left,  
an_api1right),  rest671);
 } 
;  ( 516,  ( ( _,  ( values::QQ_GENERIC_API_NAMING generic_api_naming2,  _,  generic_api_naming2right)) !  _ !  ( _,  ( values::QQ_GENERIC_API_NAMING generic_api_naming1,  generic_api_naming1left,  _)
) !  rest671)) => {  my  result = values::QQ_GENERIC_API_NAMING (\\  _ =  {  my  generic_api_naming1 = generic_api_naming1 ();
 my  generic_api_naming2 = generic_api_naming2 ();
 (
generic_api_naming1 @ generic_api_naming2);
 } );
 ( lr_table::NONTERM 117,  ( result,  generic_api_naming1left,  generic_api_naming2right),  rest671);
 } 
;  ( 517,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( values::QQ_GENERIC_PARAMETER_LIST generic_parameter_list1,  _,  _)) !  ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  
mixedcase_id1left,  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_API_NAMING (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (generic_parameter_list as 
generic_parameter_list1) = generic_parameter_list1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   [   NAMED_GENERIC_API {
						    name_symbol => make_generic_api_symbol mixedcase_id,
						    definition  => GENERIC_API_DEFINITION {
								     parameter => generic_parameter_list,
								     result    => an_api
								 }
						}
					    ]
					
);
 } );
 ( lr_table::NONTERM 117,  ( result,  mixedcase_id1left,  an_api1right),  rest671);
 } 
;  ( 518,  ( ( _,  ( values::MIXEDCASE_ID mixedcase_id1,  _,  mixedcase_id1right)) !  ( _,  ( _,  colon1left,  _)) !  rest671)) => {  my  result = values::QQ_FSIG (\\  _ =  {  my  (mixedcase_id as 
mixedcase_id1) = mixedcase_id1 ();
 (GENERIC_API_BY_NAME (make_generic_api_symbol mixedcase_id));
 } );
 ( lr_table::NONTERM 118,  ( result,  colon1left,  mixedcase_id1right),  rest671);
 } 
;  ( 519,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( values::QQ_GENERIC_PARAMETER_LIST generic_parameter_list1,  generic_parameter_list1left,  _)) !  rest671)) => {  my 
 result = values::QQ_FSIG (\\  _ =  {  my  (generic_parameter_list as generic_parameter_list1) = generic_parameter_list1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   GENERIC_API_DEFINITION {
						parameter => generic_parameter_list,
						result    => an_api
					    }
					);
 } );
 ( lr_table::NONTERM 118,  ( result,  generic_parameter_list1left,  
an_api1right),  rest671);
 } 
;  ( 520,  ( ( _,  ( values::QQ_LOWERCASE lowercase1,  (lowercaseleft as lowercase1left),  (lowercaseright as lowercase1right))) !  rest671)) => {  my  result = values::QQ_A_PACKAGE (\\  _ =  {  my  (
lowercase as lowercase1) = lowercase1 ();
 (   (   SOURCE_CODE_REGION_FOR_PACKAGE (
						    PACKAGE_BY_NAME (lowercase make_package_symbol),
						    (lowercaseleft, lowercaseright)
					)   )   )
;
 } );
 ( lr_table::NONTERM 119,  ( result,  lowercase1left,  lowercase1right),  rest671);
 } 
;  ( 521,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  _ !  ( _,  ( _,  package_t1left,  _)) !  rest671)) => {  my  result = 
values::QQ_A_PACKAGE (\\  _ =  {  my  (maybe_pkg_elements as maybe_pkg_elements1) = maybe_pkg_elements1 ();
 (PACKAGE_DEFINITION maybe_pkg_elements);
 } );
 ( lr_table::NONTERM 119,  ( result,  
package_t1left,  rbrace1right),  rest671);
 } 
;  ( 522,  ( ( _,  ( values::QQ_GENERIC_ARG generic_arg1,  _,  (generic_argright as generic_arg1right))) !  ( _,  ( values::QQ_LOWERCASE lowercase1,  (lowercaseleft as lowercase1left),  _)) !  rest671
)) => {  my  result = values::QQ_A_PACKAGE (\\  _ =  {  my  (lowercase as lowercase1) = lowercase1 ();
 my  (generic_arg as generic_arg1) = generic_arg1 ();
 (
   SOURCE_CODE_REGION_FOR_PACKAGE (
						CALL_OF_GENERIC (lowercase make_generic_symbol, generic_arg),
						(lowercaseleft, generic_argright)
					)   );
 } );
 ( lr_table::NONTERM 119,  ( result,  
lowercase1left,  generic_arg1right),  rest671);
 } 
;  ( 523,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  ( _,  ( _
,  (stipulate_tleft as stipulate_t1left),  _)) !  rest671)) => {  my  result = values::QQ_A_PACKAGE (\\  _ =  {  my  (maybe_pkg_elements as maybe_pkg_elements1) = maybe_pkg_elements1 ();
 my  (
a_package as a_package1) = a_package1 ();
 (   SOURCE_CODE_REGION_FOR_PACKAGE (
						LET_IN_PACKAGE (maybe_pkg_elements, a_package),
						(stipulate_tleft, end_tright)
					)   );
 } );
 ( 
lr_table::NONTERM 119,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 524,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  (an_apiright as an_api1right))) !  _ !  ( _,  ( values::QQ_A_PACKAGE a_package1,  (a_packageleft as a_package1left),  _)) !  rest671)) => {  my  
result = values::QQ_A_PACKAGE (\\  _ =  {  my  (a_package as a_package1) = a_package1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   SOURCE_CODE_REGION_FOR_PACKAGE (
						PACKAGE_CAST (a_package, WEAK_PACKAGE_CAST an_api),
						(a_packageleft, an_apiright)
					)   );
 } );
 ( lr_table::NONTERM 119,  ( result,  a_package1left
,  an_api1right),  rest671);
 } 
;  ( 525,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  (an_apiright as an_api1right))) !  _ !  ( _,  ( values::QQ_A_PACKAGE a_package1,  (a_packageleft as a_package1left),  _)) !  rest671)) => {  my  
result = values::QQ_A_PACKAGE (\\  _ =  {  my  (a_package as a_package1) = a_package1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   SOURCE_CODE_REGION_FOR_PACKAGE (
						PACKAGE_CAST (a_package, PARTIAL_PACKAGE_CAST an_api),
						(a_packageleft, an_apiright)
					)   );
 } );
 ( lr_table::NONTERM 119,  ( result,  
a_package1left,  an_api1right),  rest671);
 } 
;  ( 526,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  (an_apiright as an_api1right))) !  _ !  ( _,  ( values::QQ_A_PACKAGE a_package1,  (a_packageleft as a_package1left),  _)) !  rest671)) => {  my  
result = values::QQ_A_PACKAGE (\\  _ =  {  my  (a_package as a_package1) = a_package1 ();
 my  (an_api as an_api1) = an_api1 ();
 (
   SOURCE_CODE_REGION_FOR_PACKAGE (
						PACKAGE_CAST (a_package, STRONG_PACKAGE_CAST an_api),
						(a_packageleft, an_apiright)
					)   );
 } );
 ( lr_table::NONTERM 119,  ( result,  
a_package1left,  an_api1right),  rest671);
 } 
;  ( 527,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_ARG (\\  _ =  { 
 my  (a_package as a_package1) = a_package1 ();
 ( [ (a_package, TRUE) ] );
 } );
 ( lr_table::NONTERM 120,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 528,  ( ( _,  ( values::PASSIVEOP_ID passiveop_id1,  (passiveop_idleft as passiveop_id1left),  (passiveop_idright as passiveop_id1right))) !  rest671)) => {  my  result = values::QQ_GENERIC_ARG
 (\\  _ =  {  my  (passiveop_id as passiveop_id1) = passiveop_id1 ();
 (
 [ ( SOURCE_CODE_REGION_FOR_PACKAGE
                                                (
						  PACKAGE_BY_NAME [make_package_symbol passiveop_id],
						  (passiveop_idleft, passiveop_idright)
					        ),
                                              TRUE
					    )
					  ]
					
);
 } );
 ( lr_table::NONTERM 120,  ( result,  passiveop_id1left,  passiveop_id1right),  rest671);
 } 
;  ( 529,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  maybe_pkg_elementsleft,  maybe_pkg_elementsright)) !  ( _,  ( _,  lparen1left,  _)) !  
rest671)) => {  my  result = values::QQ_GENERIC_ARG (\\  _ =  {  my  (maybe_pkg_elements as maybe_pkg_elements1) = maybe_pkg_elements1 ();
 (
   [   (   SOURCE_CODE_REGION_FOR_PACKAGE (
							PACKAGE_DEFINITION maybe_pkg_elements,
							(maybe_pkg_elementsleft, maybe_pkg_elementsright)
						    ),
					            FALSE
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 120,  ( result,  lparen1left,  rparen1right),  rest671);
 } 
;  ( 530,  ( ( _,  ( values::QQ_GENERIC_ARG generic_arg1,  _,  generic_arg1right)) !  _ !  ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  
result = values::QQ_GENERIC_ARG (\\  _ =  {  my  (a_package as a_package1) = a_package1 ();
 my  (generic_arg as generic_arg1) = generic_arg1 ();
 ( (a_package, TRUE) ! generic_arg);
 } );
 ( 
lr_table::NONTERM 120,  ( result,  lparen1left,  generic_arg1right),  rest671);
 } 
;  ( 531,  ( ( _,  ( values::QQ_GENERIC_ARG generic_arg1,  _,  generic_arg1right)) !  _ !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  maybe_pkg_elementsleft,  maybe_pkg_elementsright)
) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_ARG (\\  _ =  {  my  (maybe_pkg_elements as maybe_pkg_elements1) = maybe_pkg_elements1 ();
 my  (generic_arg as 
generic_arg1) = generic_arg1 ();
 (
   (   SOURCE_CODE_REGION_FOR_PACKAGE (
						    PACKAGE_DEFINITION maybe_pkg_elements,
						    (maybe_pkg_elementsleft, maybe_pkg_elementsright)
						),
					        FALSE
					    )
					    ! generic_arg
					
);
 } );
 ( lr_table::NONTERM 120,  ( result,  lparen1left,  generic_arg1right),  rest671);
 } 
;  ( 532,  ( ( _,  ( values::QQ_PKG_ELEMENTS pkg_elements1,  pkg_elements1left,  pkg_elements1right)) !  rest671)) => {  my  result = values::QQ_MAYBE_PKG_ELEMENTS (\\  _ =  {  my  (pkg_elements as 
pkg_elements1) = pkg_elements1 ();
 (pkg_elements);
 } );
 ( lr_table::NONTERM 123,  ( result,  pkg_elements1left,  pkg_elements1right),  rest671);
 } 
;  ( 533,  ( rest671)) => {  my  result = values::QQ_MAYBE_PKG_ELEMENTS (\\  _ =  (SEQUENTIAL_DECLARATIONS []));
 ( lr_table::NONTERM 123,  ( result,  default_position,  default_position),  rest671)
;
 } 
;  ( 534,  ( ( _,  ( _,  _,  semi1right)) !  ( _,  ( values::QQ_PKG_ELEMENT pkg_element1,  pkg_element1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENTS (\\  _ =  {  my  (pkg_element
 as pkg_element1) = pkg_element1 ();
 (pkg_element);
 } );
 ( lr_table::NONTERM 122,  ( result,  pkg_element1left,  semi1right),  rest671);
 } 
;  ( 535,  ( ( _,  ( values::QQ_PKG_ELEMENTS pkg_elements1,  _,  pkg_elements1right)) !  _ !  ( _,  ( values::QQ_PKG_ELEMENT pkg_element1,  (pkg_elementleft as pkg_element1left),  pkg_elementright))
 !  rest671)) => {  my  result = values::QQ_PKG_ELEMENTS (\\  _ =  {  my  (pkg_element as pkg_element1) = pkg_element1 ();
 my  (pkg_elements as pkg_elements1) = pkg_elements1 ();
 (
   make_declaration_sequence (
						mark_declaration (pkg_element, pkg_elementleft, pkg_elementright),
					        pkg_elements
					)   );
 } );
 ( lr_table::NONTERM 122,  ( result,  
pkg_element1left,  pkg_elements1right),  rest671);
 } 
;  ( 536,  ( ( _,  ( values::QQ_NAMED_PACKAGES named_packages1,  _,  named_packages1right)) !  ( _,  ( _,  package_t1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT (\\  _ =  {  my 
 (named_packages as named_packages1) = named_packages1 ();
 (PACKAGE_DECLARATIONS named_packages);
 } );
 ( lr_table::NONTERM 121,  ( result,  package_t1left,  named_packages1right),  rest671);
 } 
;  ( 537,  ( ( _,  ( values::QQ_NAMED_CLASSES named_classes1,  _,  named_classes1right)) !  ( _,  ( _,  class_t1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT (\\  _ =  {  my  (
named_classes as named_classes1) = named_classes1 ();
 (PACKAGE_DECLARATIONS named_classes);
 } );
 ( lr_table::NONTERM 121,  ( result,  class_t1left,  named_classes1right),  rest671);
 } 
;  ( 538,  ( ( _,  ( values::QQ_NAMED_CLASS2ES named_class2es1,  _,  named_class2es1right)) !  ( _,  ( _,  class2_t1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT (\\  _ =  {  my  (
named_class2es as named_class2es1) = named_class2es1 ();
 (PACKAGE_DECLARATIONS named_class2es);
 } );
 ( lr_table::NONTERM 121,  ( result,  class2_t1left,  named_class2es1right),  rest671);
 } 
;  ( 539,  ( ( _,  ( values::QQ_GENERIC_NAMING generic_naming1,  _,  generic_naming1right)) !  _ !  ( _,  ( _,  generic_t1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT (\\  _ =  { 
 my  (generic_naming as generic_naming1) = generic_naming1 ();
 (GENERIC_DECLARATIONS   generic_naming  );
 } );
 ( lr_table::NONTERM 121,  ( result,  generic_t1left,  generic_naming1right),  rest671)
;
 } 
;  ( 540,  ( ( _,  ( values::QQ_DECLARATION declaration1,  (declarationleft as declaration1left),  (declarationright as declaration1right))) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT (\\ 
 _ =  {  my  (declaration as declaration1) = declaration1 ();
 (mark_declaration (declaration, declarationleft, declarationright));
 } );
 ( lr_table::NONTERM 121,  ( result,  declaration1left,  
declaration1right),  rest671);
 } 
;  ( 541,  ( ( _,  ( _,  _,  end_t1right)) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements2,  maybe_pkg_elements2left,  maybe_pkg_elements2right)) !  _ !  ( _,  ( 
values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  maybe_pkg_elements1left,  maybe_pkg_elements1right)) !  ( _,  ( _,  stipulate_t1left,  _)) !  rest671)) => {  my  result = values::QQ_PKG_ELEMENT
 (\\  _ =  {  my  maybe_pkg_elements1 = maybe_pkg_elements1 ();
 my  maybe_pkg_elements2 = maybe_pkg_elements2 ();
 (
   LOCAL_DECLARATIONS (
						mark_declaration (maybe_pkg_elements1, maybe_pkg_elements1left, maybe_pkg_elements1right),
						mark_declaration (maybe_pkg_elements2, maybe_pkg_elements2left, maybe_pkg_elements2right)
					)   
);
 } );
 ( lr_table::NONTERM 121,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 542,  ( ( _,  ( values::QQ_NAMED_PACKAGES named_packages2,  _,  named_packages2right)) !  _ !  ( _,  ( values::QQ_NAMED_PACKAGES named_packages1,  named_packages1left,  _)) !  rest671)) => {  my 
 result = values::QQ_NAMED_PACKAGES (\\  _ =  {  my  named_packages1 = named_packages1 ();
 my  named_packages2 = named_packages2 ();
 (named_packages1 @ named_packages2);
 } );
 ( lr_table::NONTERM 
128,  ( result,  named_packages1left,  named_packages2right),  rest671);
 } 
;  ( 543,  ( ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  (a_packageright as a_package1right))) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP maybe_api_constraint_op1,  _,  _)) !  ( _,  ( 
values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_PACKAGES (\\  _ =  {  my  (lowercase_id as lowercase_id1) = 
lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (a_package as a_package1) = a_package1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
						    NAMED_PACKAGE {
							name_symbol => make_package_symbol lowercase_id,
							definition  => a_package, 
							constraint  => maybe_api_constraint_op,
							kind        => PLAIN_PACKAGE
						    },
						    (lowercase_idleft, a_packageright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 128,  ( result,  lowercase_id1left,  a_package1right),  rest671);
 } 
;  ( 544,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP 
maybe_api_constraint_op1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_PACKAGES (\\  _ = 
 {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (maybe_pkg_elements as maybe_pkg_elements1) =
 maybe_pkg_elements1 ();
 (
   {
						[   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
							NAMED_PACKAGE {
							    name_symbol => make_package_symbol lowercase_id,
							    definition  => PACKAGE_DEFINITION maybe_pkg_elements,
							    constraint  => maybe_api_constraint_op,
							    kind        => PLAIN_PACKAGE
							},
							(lowercase_idleft, rbraceright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 128,  ( result,  lowercase_id1left,  rbrace1right),  rest671);
 } 
;  ( 545,  ( ( _,  ( values::QQ_NAMED_CLASSES named_classes2,  _,  named_classes2right)) !  _ !  ( _,  ( values::QQ_NAMED_CLASSES named_classes1,  named_classes1left,  _)) !  rest671)) => {  my  
result = values::QQ_NAMED_CLASSES (\\  _ =  {  my  named_classes1 = named_classes1 ();
 my  named_classes2 = named_classes2 ();
 (named_classes1 @ named_classes2);
 } );
 ( lr_table::NONTERM 129,  ( 
result,  named_classes1left,  named_classes2right),  rest671);
 } 
;  ( 546,  ( ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  (a_packageright as a_package1right))) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP maybe_api_constraint_op1,  _,  _)) !  ( _,  ( 
values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_CLASSES (\\  _ =  {  my  (lowercase_id as lowercase_id1) = 
lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (a_package as a_package1) = a_package1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
						    NAMED_PACKAGE {
							name_symbol => make_package_symbol lowercase_id,
							definition  => a_package,
							constraint  => maybe_api_constraint_op,
							kind        => CLASS_PACKAGE
						    },
						    (lowercase_idleft, a_packageright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 129,  ( result,  lowercase_id1left,  a_package1right),  rest671);
 } 
;  ( 547,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP 
maybe_api_constraint_op1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_CLASSES (\\  _ = 
 {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (maybe_pkg_elements as maybe_pkg_elements1) =
 maybe_pkg_elements1 ();
 (
   {
						[   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
							NAMED_PACKAGE {
							    name_symbol => make_package_symbol lowercase_id,
							    definition  => PACKAGE_DEFINITION (oop_syntax_parser_transform::prepend_dummy_package_references_to_declaration  maybe_pkg_elements),
							    constraint  => maybe_api_constraint_op,
							    kind        => CLASS_PACKAGE
							},
							(lowercase_idleft, rbraceright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 129,  ( result,  lowercase_id1left,  rbrace1right),  rest671);
 } 
;  ( 548,  ( ( _,  ( values::QQ_NAMED_CLASS2ES named_class2es2,  _,  named_class2es2right)) !  _ !  ( _,  ( values::QQ_NAMED_CLASS2ES named_class2es1,  named_class2es1left,  _)) !  rest671)) => {  my 
 result = values::QQ_NAMED_CLASS2ES (\\  _ =  {  my  named_class2es1 = named_class2es1 ();
 my  named_class2es2 = named_class2es2 ();
 (named_class2es1 @ named_class2es2);
 } );
 ( lr_table::NONTERM 
130,  ( result,  named_class2es1left,  named_class2es2right),  rest671);
 } 
;  ( 549,  ( ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  (a_packageright as a_package1right))) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP maybe_api_constraint_op1,  _,  _)) !  ( _,  ( 
values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_CLASS2ES (\\  _ =  {  my  (lowercase_id as lowercase_id1) = 
lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (a_package as a_package1) = a_package1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
						    NAMED_PACKAGE {
							name_symbol => make_package_symbol lowercase_id,
							definition  => a_package,
							constraint  => maybe_api_constraint_op,
							kind        => CLASS2_PACKAGE
						    },
						    (lowercase_idleft, a_packageright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 130,  ( result,  lowercase_id1left,  a_package1right),  rest671);
 } 
;  ( 550,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP 
maybe_api_constraint_op1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_NAMED_CLASS2ES (\\  _ = 
 {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (maybe_pkg_elements as maybe_pkg_elements1) =
 maybe_pkg_elements1 ();
 (
   {
						[   SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (
							NAMED_PACKAGE {
							    name_symbol => make_package_symbol lowercase_id,
							    definition  => PACKAGE_DEFINITION (oop_syntax_parser_transform::prepend_dummy_package_references_to_declaration  maybe_pkg_elements),
							    constraint  => maybe_api_constraint_op,
							    kind        => CLASS2_PACKAGE
							},
							(lowercase_idleft, rbraceright)
						    )
						];
					    }
					
);
 } );
 ( lr_table::NONTERM 130,  ( result,  lowercase_id1left,  rbrace1right),  rest671);
 } 
;  ( 551,  ( ( _,  ( values::QQ_AN_API an_api1,  _,  an_api1right)) !  _ !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  lowercase_id1left,  _)) !  rest671)) => {  my  result = 
values::QQ_GENERIC_PARAMETER (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (an_api as an_api1) = an_api1 ();
 (   (   THE (make_package_symbol lowercase_id), an_api) );
 } 
);
 ( lr_table::NONTERM 131,  ( result,  lowercase_id1left,  an_api1right),  rest671);
 } 
;  ( 552,  ( ( _,  ( values::QQ_MAYBE_API_ELEMENTS maybe_api_elements1,  (maybe_api_elementsleft as maybe_api_elements1left),  (maybe_api_elementsright as maybe_api_elements1right))) !  rest671)) =>
 {  my  result = values::QQ_GENERIC_PARAMETER (\\  _ =  {  my  (maybe_api_elements as maybe_api_elements1) = maybe_api_elements1 ();
 (
   (   NULL,
						SOURCE_CODE_REGION_FOR_API (
						    API_DEFINITION maybe_api_elements,
						    (maybe_api_elementsleft, maybe_api_elementsright)
					)   )   );
 } );
 ( lr_table::NONTERM 131
,  ( result,  maybe_api_elements1left,  maybe_api_elements1right),  rest671);
 } 
;  ( 553,  ( ( _,  ( _,  _,  rparen1right)) !  ( _,  ( values::QQ_GENERIC_PARAMETER generic_parameter1,  _,  _)) !  ( _,  ( _,  lparen1left,  _)) !  rest671)) => {  my  result = 
values::QQ_GENERIC_PARAMETER_LIST (\\  _ =  {  my  (generic_parameter as generic_parameter1) = generic_parameter1 ();
 ( [ generic_parameter ] );
 } );
 ( lr_table::NONTERM 132,  ( result,  
lparen1left,  rparen1right),  rest671);
 } 
;  ( 554,  ( ( _,  ( values::QQ_GENERIC_PARAMETER_LIST generic_parameter_list1,  _,  generic_parameter_list1right)) !  _ !  ( _,  ( values::QQ_GENERIC_PARAMETER generic_parameter1,  _,  _)) !  ( _,  (
 _,  lparen1left,  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_PARAMETER_LIST (\\  _ =  {  my  (generic_parameter as generic_parameter1) = generic_parameter1 ();
 my  (
generic_parameter_list as generic_parameter_list1) = generic_parameter_list1 ();
 (   generic_parameter ! generic_parameter_list);
 } );
 ( lr_table::NONTERM 132,  ( result,  lparen1left,  
generic_parameter_list1right),  rest671);
 } 
;  ( 555,  ( ( _,  ( values::QQ_A_PACKAGE a_package1,  _,  (a_packageright as a_package1right))) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP maybe_api_constraint_op1,  _,  _)) !  ( _,  ( 
values::QQ_GENERIC_PARAMETER_LIST generic_parameter_list1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = 
values::QQ_GENERIC_NAMING (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (generic_parameter_list as generic_parameter_list1) = generic_parameter_list1 ();
 my  (
maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (a_package as a_package1) = a_package1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_GENERIC (
						    NAMED_GENERIC {
							name_symbol => make_generic_symbol lowercase_id,
							definition  => GENERIC_DEFINITION {
								         parameters => generic_parameter_list,
									 body       => a_package,	
									 constraint => maybe_api_constraint_op
								     }
                                                    },
			                            (lowercase_idleft, a_packageright)
                                                )
                                            ]
                                        
);
 } );
 ( lr_table::NONTERM 133,  ( result,  lowercase_id1left,  a_package1right),  rest671);
 } 
;  ( 556,  ( ( _,  ( _,  _,  (rbraceright as rbrace1right))) !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_API_CONSTRAINT_OP 
maybe_api_constraint_op1,  _,  _)) !  ( _,  ( values::QQ_GENERIC_PARAMETER_LIST generic_parameter_list1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as 
lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_NAMING (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (generic_parameter_list as 
generic_parameter_list1) = generic_parameter_list1 ();
 my  (maybe_api_constraint_op as maybe_api_constraint_op1) = maybe_api_constraint_op1 ();
 my  (maybe_pkg_elements as maybe_pkg_elements1) = 
maybe_pkg_elements1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_GENERIC (
						    NAMED_GENERIC {
							name_symbol => make_generic_symbol lowercase_id,
							definition  => GENERIC_DEFINITION {
								         parameters => generic_parameter_list,
									 body       => PACKAGE_DEFINITION maybe_pkg_elements,
									 constraint => maybe_api_constraint_op
								     }
                                                    },
			                            (lowercase_idleft, rbraceright)
                                                )
                                            ]
                                        
);
 } );
 ( lr_table::NONTERM 133,  ( result,  lowercase_id1left,  rbrace1right),  rest671);
 } 
;  ( 557,  ( ( _,  ( values::QQ_GENERIC_EXPRESSION generic_expression1,  _,  (generic_expressionright as generic_expression1right))) !  _ !  ( _,  ( values::QQ_MAYBE_GENERIC_API_CONSTRAINT_OP 
maybe_generic_api_constraint_op1,  _,  _)) !  ( _,  ( values::QQ_LOWERCASE_ID lowercase_id1,  (lowercase_idleft as lowercase_id1left),  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_NAMING
 (\\  _ =  {  my  (lowercase_id as lowercase_id1) = lowercase_id1 ();
 my  (maybe_generic_api_constraint_op as maybe_generic_api_constraint_op1) = maybe_generic_api_constraint_op1 ();
 my  (
generic_expression as generic_expression1) = generic_expression1 ();
 (
   [   SOURCE_CODE_REGION_FOR_NAMED_GENERIC (
						    NAMED_GENERIC {
							name_symbol => make_generic_symbol lowercase_id,
							definition  => generic_expression (maybe_generic_api_constraint_op)
						    },
			                            (lowercase_idleft, generic_expressionright)
						)
					    ]
					
);
 } );
 ( lr_table::NONTERM 133,  ( result,  lowercase_id1left,  generic_expression1right),  rest671);
 } 
;  ( 558,  ( ( _,  ( values::QQ_GENERIC_NAMING generic_naming2,  _,  generic_naming2right)) !  _ !  ( _,  ( values::QQ_GENERIC_NAMING generic_naming1,  generic_naming1left,  _)) !  rest671)) => {  my 
 result = values::QQ_GENERIC_NAMING (\\  _ =  {  my  generic_naming1 = generic_naming1 ();
 my  generic_naming2 = generic_naming2 ();
 (generic_naming1 @ generic_naming2);
 } );
 ( lr_table::NONTERM 
133,  ( result,  generic_naming1left,  generic_naming2right),  rest671);
 } 
;  ( 559,  ( ( _,  ( values::QQ_LOWERCASE lowercase1,  lowercase1left,  lowercase1right)) !  rest671)) => {  my  result = values::QQ_GENERIC_EXPRESSION (\\  _ =  {  my  (lowercase as lowercase1) = 
lowercase1 ();
 (\\ constraint =  GENERIC_BY_NAME (lowercase make_generic_symbol, constraint));
 } );
 ( lr_table::NONTERM 134,  ( result,  lowercase1left,  lowercase1right),  rest671);
 } 
;  ( 560,  ( ( _,  ( values::QQ_GENERIC_ARG generic_arg1,  _,  (generic_argright as generic_arg1right))) !  ( _,  ( values::QQ_LOWERCASE lowercase1,  (lowercaseleft as lowercase1left),  _)) !  rest671
)) => {  my  result = values::QQ_GENERIC_EXPRESSION (\\  _ =  {  my  (lowercase as lowercase1) = lowercase1 ();
 my  (generic_arg as generic_arg1) = generic_arg1 ();
 (
\\ constraint =  SOURCE_CODE_REGION_FOR_GENERIC (
							      CONSTRAINED_CALL_OF_GENERIC (lowercase make_generic_symbol, generic_arg, constraint),
							      (lowercaseleft, generic_argright)
					)                 
);
 } );
 ( lr_table::NONTERM 134,  ( result,  lowercase1left,  generic_arg1right),  rest671);
 } 
;  ( 561,  ( ( _,  ( _,  _,  (end_tright as end_t1right))) !  ( _,  ( values::QQ_GENERIC_EXPRESSION generic_expression1,  _,  _)) !  _ !  ( _,  ( values::QQ_MAYBE_PKG_ELEMENTS maybe_pkg_elements1,  _
,  _)) !  ( _,  ( _,  (stipulate_tleft as stipulate_t1left),  _)) !  rest671)) => {  my  result = values::QQ_GENERIC_EXPRESSION (\\  _ =  {  my  (maybe_pkg_elements as maybe_pkg_elements1) = 
maybe_pkg_elements1 ();
 my  (generic_expression as generic_expression1) = generic_expression1 ();
 (
\\ constraint =  SOURCE_CODE_REGION_FOR_GENERIC (
							      LET_IN_GENERIC (maybe_pkg_elements, generic_expression constraint),
							      (stipulate_tleft, end_tright)
					)                 )
;
 } );
 ( lr_table::NONTERM 134,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 562,  ( rest671)) => {  my  result = values::QQ_MAYBE_TOPLEVEL_DECLARATIONS (\\  _ =  (SEQUENTIAL_DECLARATIONS []));
 ( lr_table::NONTERM 126,  ( result,  default_position,  default_position),  
rest671);
 } 
;  ( 563,  ( ( _,  ( values::QQ_TOPLEVEL_DECLARATIONS toplevel_declarations1,  toplevel_declarations1left,  toplevel_declarations1right)) !  rest671)) => {  my  result = 
values::QQ_MAYBE_TOPLEVEL_DECLARATIONS (\\  _ =  {  my  (toplevel_declarations as toplevel_declarations1) = toplevel_declarations1 ();
 (toplevel_declarations);
 } );
 ( lr_table::NONTERM 126,  ( 
result,  toplevel_declarations1left,  toplevel_declarations1right),  rest671);
 } 
;  ( 564,  ( ( _,  ( values::QQ_NAMED_PACKAGES named_packages1,  _,  named_packages1right)) !  ( _,  ( _,  package_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _
 =  {  my  (named_packages as named_packages1) = named_packages1 ();
 (PACKAGE_DECLARATIONS           named_packages    );
 } );
 ( lr_table::NONTERM 125,  ( result,  package_t1left,  
named_packages1right),  rest671);
 } 
;  ( 565,  ( ( _,  ( values::QQ_NAMED_CLASSES named_classes1,  _,  named_classes1right)) !  ( _,  ( _,  class_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ =  { 
 my  (named_classes as named_classes1) = named_classes1 ();
 (PACKAGE_DECLARATIONS           named_classes     );
 } );
 ( lr_table::NONTERM 125,  ( result,  class_t1left,  named_classes1right),  
rest671);
 } 
;  ( 566,  ( ( _,  ( values::QQ_NAMED_CLASS2ES named_class2es1,  _,  named_class2es1right)) !  ( _,  ( _,  class2_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ = 
 {  my  (named_class2es as named_class2es1) = named_class2es1 ();
 (PACKAGE_DECLARATIONS           named_class2es    );
 } );
 ( lr_table::NONTERM 125,  ( result,  class2_t1left,  named_class2es1right
),  rest671);
 } 
;  ( 567,  ( ( _,  ( values::QQ_API_NAMING api_naming1,  _,  api_naming1right)) !  ( _,  ( _,  api_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  (
api_naming as api_naming1) = api_naming1 ();
 (API_DECLARATIONS               api_naming        );
 } );
 ( lr_table::NONTERM 125,  ( result,  api_t1left,  api_naming1right),  rest671);
 } 
;  ( 568,  ( ( _,  ( _,  _,  rbrace1right)) !  ( _,  ( values::QQ_MAYBE_API_ELEMENTS maybe_api_elements1,  maybe_api_elementsleft,  maybe_api_elementsright)) !  _ !  ( _,  ( values::MIXEDCASE_ID 
mixedcase_id1,  _,  _)) !  ( _,  ( _,  api_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  (mixedcase_id as mixedcase_id1) = mixedcase_id1 ();
 my  (
maybe_api_elements as maybe_api_elements1) = maybe_api_elements1 ();
 (
   {   an_api =
				                    SOURCE_CODE_REGION_FOR_API (
						        API_DEFINITION (maybe_api_elements),
						        (maybe_api_elementsleft, maybe_api_elementsright)
                                                    );

                                                API_DECLARATIONS
						    [   NAMED_API {
							    name_symbol => make_api_symbol mixedcase_id,
							    definition  => an_api
							}
						    ];
					    }
                                        
);
 } );
 ( lr_table::NONTERM 125,  ( result,  api_t1left,  rbrace1right),  rest671);
 } 
;  ( 569,  ( ( _,  ( values::QQ_GENERIC_API_NAMING generic_api_naming1,  _,  generic_api_naming1right)) !  _ !  ( _,  ( _,  generic_t1left,  _)) !  rest671)) => {  my  result = 
values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  (generic_api_naming as generic_api_naming1) = generic_api_naming1 ();
 (GENERIC_API_DECLARATIONS generic_api_naming);
 } );
 ( lr_table::NONTERM 125,  
( result,  generic_t1left,  generic_api_naming1right),  rest671);
 } 
;  ( 570,  ( ( _,  ( values::QQ_GENERIC_NAMING generic_naming1,  _,  generic_naming1right)) !  _ !  ( _,  ( _,  generic_t1left,  _)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION
 (\\  _ =  {  my  (generic_naming as generic_naming1) = generic_naming1 ();
 (GENERIC_DECLARATIONS     generic_naming          );
 } );
 ( lr_table::NONTERM 125,  ( result,  generic_t1left,  
generic_naming1right),  rest671);
 } 
;  ( 571,  ( ( _,  ( values::QQ_DECLARATION declaration1,  (declarationleft as declaration1left),  (declarationright as declaration1right))) !  rest671)) => {  my  result = 
values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  (declaration as declaration1) = declaration1 ();
 (mark_declaration (declaration, declarationleft, declarationright));
 } );
 ( lr_table::NONTERM 125, 
 ( result,  declaration1left,  declaration1right),  rest671);
 } 
;  ( 572,  ( ( _,  ( _,  _,  end_t1right)) !  ( _,  ( values::QQ_MAYBE_TOPLEVEL_DECLARATIONS maybe_toplevel_declarations2,  maybe_toplevel_declarations2left,  maybe_toplevel_declarations2right)) !  _
 !  ( _,  ( values::QQ_MAYBE_TOPLEVEL_DECLARATIONS maybe_toplevel_declarations1,  maybe_toplevel_declarations1left,  maybe_toplevel_declarations1right)) !  ( _,  ( _,  stipulate_t1left,  _)) !  
rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  maybe_toplevel_declarations1 = maybe_toplevel_declarations1 ();
 my  maybe_toplevel_declarations2 = 
maybe_toplevel_declarations2 ();
 (
   LOCAL_DECLARATIONS (
						mark_declaration (maybe_toplevel_declarations1, maybe_toplevel_declarations1left, maybe_toplevel_declarations1right),
						mark_declaration (maybe_toplevel_declarations2, maybe_toplevel_declarations2left, maybe_toplevel_declarations2right)
					)   
);
 } );
 ( lr_table::NONTERM 125,  ( result,  stipulate_t1left,  end_t1right),  rest671);
 } 
;  ( 573,  ( ( _,  ( values::PRE_COMPILE_CODE pre_compile_code1,  pre_compile_code1left,  pre_compile_code1right)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION (\\  _ =  {  my  (
pre_compile_code as pre_compile_code1) = pre_compile_code1 ();
 (   PRE_COMPILE_CODE pre_compile_code );
 } );
 ( lr_table::NONTERM 125,  ( result,  pre_compile_code1left,  pre_compile_code1right),  
rest671);
 } 
;  ( 574,  ( ( _,  ( values::QQ_EXPRESSION expression1,  (expressionleft as expression1left),  (expressionright as expression1right))) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATION
 (\\  _ =  {  my  (expression as expression1) = expression1 ();
 (
   mark_declaration (
					        VALUE_DECLARATIONS (
                                                    [   NAMED_VALUE {
							    pattern    =>  VARIABLE_IN_PATTERN it_symbol,
                                                            expression,
							    is_lazy    =>  FALSE
                                                        }
                                                    ],
                                                    NIL
                                                ),
				                expressionleft,
						expressionright
					)   
);
 } );
 ( lr_table::NONTERM 125,  ( result,  expression1left,  expression1right),  rest671);
 } 
;  ( 575,  ( ( _,  ( _,  _,  (semiright as semi1right))) !  ( _,  ( values::QQ_TOPLEVEL_DECLARATION toplevel_declaration1,  (toplevel_declarationleft as toplevel_declaration1left),  _)) !  rest671))
 => {  my  result = values::QQ_TOPLEVEL_DECLARATIONS (\\  _ =  {  my  (toplevel_declaration as toplevel_declaration1) = toplevel_declaration1 ();
 (
mark_declaration (toplevel_declaration, toplevel_declarationleft, semiright));
 } );
 ( lr_table::NONTERM 127,  ( result,  toplevel_declaration1left,  semi1right),  rest671);
 } 
;  ( 576,  ( ( _,  ( values::QQ_TOPLEVEL_DECLARATIONS toplevel_declarations1,  _,  (toplevel_declarationsright as toplevel_declarations1right))) !  _ !  ( _,  ( values::QQ_TOPLEVEL_DECLARATION 
toplevel_declaration1,  (toplevel_declarationleft as toplevel_declaration1left),  toplevel_declarationright)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL_DECLARATIONS (\\  _ =  {  my  (
toplevel_declaration as toplevel_declaration1) = toplevel_declaration1 ();
 my  (toplevel_declarations as toplevel_declarations1) = toplevel_declarations1 ();
 (
   mark_declaration (
						make_declaration_sequence (
						    mark_declaration (toplevel_declaration, toplevel_declarationleft, toplevel_declarationright),
						    toplevel_declarations
						),
                                                toplevel_declarationleft,
                                                toplevel_declarationsright
                                            )
                                        
);
 } );
 ( lr_table::NONTERM 127,  ( result,  toplevel_declaration1left,  toplevel_declarations1right),  rest671);
 } 
;  ( 577,  ( ( _,  ( values::QQ_TOPLEVEL_DECLARATIONS toplevel_declarations1,  toplevel_declarations1left,  toplevel_declarations1right)) !  rest671)) => {  my  result = values::QQ_TOPLEVEL (\\  _ = 
 {  my  (toplevel_declarations as toplevel_declarations1) = toplevel_declarations1 ();
 (toplevel_declarations);
 } );
 ( lr_table::NONTERM 124,  ( result,  toplevel_declarations1left,  
toplevel_declarations1right),  rest671);
 } 
; _ => raise exception (MLY_ACTION i392);
esac;
end;
void = values::TM_VOID;
extract = \\ a = (\\ values::QQ_TOPLEVEL x => x;
 _ => { exception PARSE_INTERNAL;
	 raise exception PARSE_INTERNAL; }; end ) a ();
};
};
package tokens : (weak) Mythryl_Tokens {
Semantic_Value = parser_data::Semantic_Value;
Token (X,Y) = token::Token(X,Y);
fun eof (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 0, (parser_data::values::TM_VOID, p1, p2));
fun semi (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 1, (parser_data::values::TM_VOID, p1, p2));
fun implicit_thunk_parameter (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 2, (parser_data::values::IMPLICIT_THUNK_PARAMETER (\\ () = i), p1, p2));
fun lowercase_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 3, (parser_data::values::LOWERCASE_ID (\\ () = i), p1, p2));
fun lowercase_path (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 4, (parser_data::values::LOWERCASE_PATH (\\ () = i), p1, p2));
fun mixedcase_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 5, (parser_data::values::MIXEDCASE_ID (\\ () = i), p1, p2));
fun mixedcase_path (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 6, (parser_data::values::MIXEDCASE_PATH (\\ () = i), p1, p2));
fun uppercase_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 7, (parser_data::values::UPPERCASE_ID (\\ () = i), p1, p2));
fun uppercase_path (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 8, (parser_data::values::UPPERCASE_PATH (\\ () = i), p1, p2));
fun operators_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 9, (parser_data::values::OPERATORS_ID (\\ () = i), p1, p2));
fun operators_path (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 10, (parser_data::values::OPERATORS_PATH (\\ () = i), p1, p2));
fun passiveop_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 11, (parser_data::values::PASSIVEOP_ID (\\ () = i), p1, p2));
fun prefix_op_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 12, (parser_data::values::PREFIX_OP_ID (\\ () = i), p1, p2));
fun postfix_op_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 13, (parser_data::values::POSTFIX_OP_ID (\\ () = i), p1, p2));
fun boguscase_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 14, (parser_data::values::BOGUSCASE_ID (\\ () = i), p1, p2));
fun tyvar (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 15, (parser_data::values::TYVAR (\\ () = i), p1, p2));
fun int (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 16, (parser_data::values::INT (\\ () = i), p1, p2));
fun int0 (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 17, (parser_data::values::INT0 (\\ () = i), p1, p2));
fun unt (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 18, (parser_data::values::UNT (\\ () = i), p1, p2));
fun float (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 19, (parser_data::values::FLOAT (\\ () = i), p1, p2));
fun backticks (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 20, (parser_data::values::BACKTICKS (\\ () = i), p1, p2));
fun dot_backticks (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 21, (parser_data::values::DOT_BACKTICKS (\\ () = i), p1, p2));
fun dot_qquotes (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 22, (parser_data::values::DOT_QQUOTES (\\ () = i), p1, p2));
fun dot_quotes (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 23, (parser_data::values::DOT_QUOTES (\\ () = i), p1, p2));
fun dot_brokets (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 24, (parser_data::values::DOT_BROKETS (\\ () = i), p1, p2));
fun dot_barets (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 25, (parser_data::values::DOT_BARETS (\\ () = i), p1, p2));
fun dot_slashets (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 26, (parser_data::values::DOT_SLASHETS (\\ () = i), p1, p2));
fun dot_hashets (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 27, (parser_data::values::DOT_HASHETS (\\ () = i), p1, p2));
fun pre_compile_code (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 28, (parser_data::values::PRE_COMPILE_CODE (\\ () = i), p1, p2));
fun string (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 29, (parser_data::values::STRING (\\ () = i), p1, p2));
fun char (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 30, (parser_data::values::CHAR (\\ () = i), p1, p2));
fun also_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 31, (parser_data::values::TM_VOID, p1, p2));
fun api_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 32, (parser_data::values::TM_VOID, p1, p2));
fun arrow (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 33, (parser_data::values::TM_VOID, p1, p2));
fun as_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 34, (parser_data::values::TM_VOID, p1, p2));
fun case_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 35, (parser_data::values::TM_VOID, p1, p2));
fun class_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 36, (parser_data::values::TM_VOID, p1, p2));
fun class2_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 37, (parser_data::values::TM_VOID, p1, p2));
fun dotdotdot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 38, (parser_data::values::TM_VOID, p1, p2));
fun else_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 39, (parser_data::values::TM_VOID, p1, p2));
fun elif_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 40, (parser_data::values::TM_VOID, p1, p2));
fun end_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 41, (parser_data::values::TM_VOID, p1, p2));
fun equal_op (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 42, (parser_data::values::TM_VOID, p1, p2));
fun eqeq_op (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 43, (parser_data::values::TM_VOID, p1, p2));
fun eqtype_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 44, (parser_data::values::TM_VOID, p1, p2));
fun esac_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 45, (parser_data::values::TM_VOID, p1, p2));
fun exception_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 46, (parser_data::values::TM_VOID, p1, p2));
fun darrow (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 47, (parser_data::values::TM_VOID, p1, p2));
fun pre_plusplus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 48, (parser_data::values::TM_VOID, p1, p2));
fun plus_plus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 49, (parser_data::values::TM_VOID, p1, p2));
fun plusplus_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 50, (parser_data::values::TM_VOID, p1, p2));
fun post_plusplus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 51, (parser_data::values::TM_VOID, p1, p2));
fun pre_dashdash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 52, (parser_data::values::TM_VOID, p1, p2));
fun dash_dash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 53, (parser_data::values::TM_VOID, p1, p2));
fun dashdash_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 54, (parser_data::values::TM_VOID, p1, p2));
fun post_dashdash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 55, (parser_data::values::TM_VOID, p1, p2));
fun pre_bar (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 56, (parser_data::values::TM_VOID, p1, p2));
fun bar (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 57, (parser_data::values::TM_VOID, p1, p2));
fun bar_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 58, (parser_data::values::TM_VOID, p1, p2));
fun post_bar (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 59, (parser_data::values::TM_VOID, p1, p2));
fun pre_langle (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 60, (parser_data::values::TM_VOID, p1, p2));
fun langle (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 61, (parser_data::values::TM_VOID, p1, p2));
fun rangle (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 62, (parser_data::values::TM_VOID, p1, p2));
fun post_rangle (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 63, (parser_data::values::TM_VOID, p1, p2));
fun pre_lbrace (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 64, (parser_data::values::TM_VOID, p1, p2));
fun lbrace (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 65, (parser_data::values::TM_VOID, p1, p2));
fun rbrace (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 66, (parser_data::values::TM_VOID, p1, p2));
fun post_rbrace (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 67, (parser_data::values::TM_VOID, p1, p2));
fun lbracket (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 68, (parser_data::values::TM_VOID, p1, p2));
fun post_lbracket (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 69, (parser_data::values::TM_VOID, p1, p2));
fun pre_amper (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 70, (parser_data::values::TM_VOID, p1, p2));
fun amper (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 71, (parser_data::values::TM_VOID, p1, p2));
fun amper_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 72, (parser_data::values::TM_VOID, p1, p2));
fun post_amper (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 73, (parser_data::values::TM_VOID, p1, p2));
fun pre_atsign (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 74, (parser_data::values::TM_VOID, p1, p2));
fun atsign (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 75, (parser_data::values::TM_VOID, p1, p2));
fun atsign_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 76, (parser_data::values::TM_VOID, p1, p2));
fun post_atsign (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 77, (parser_data::values::TM_VOID, p1, p2));
fun pre_back (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 78, (parser_data::values::TM_VOID, p1, p2));
fun back (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 79, (parser_data::values::TM_VOID, p1, p2));
fun back_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 80, (parser_data::values::TM_VOID, p1, p2));
fun post_back (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 81, (parser_data::values::TM_VOID, p1, p2));
fun pre_bang (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 82, (parser_data::values::TM_VOID, p1, p2));
fun bang (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 83, (parser_data::values::TM_VOID, p1, p2));
fun bang_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 84, (parser_data::values::TM_VOID, p1, p2));
fun post_bang (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 85, (parser_data::values::TM_VOID, p1, p2));
fun pre_buck (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 86, (parser_data::values::TM_VOID, p1, p2));
fun buck (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 87, (parser_data::values::TM_VOID, p1, p2));
fun buck_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 88, (parser_data::values::TM_VOID, p1, p2));
fun post_buck (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 89, (parser_data::values::TM_VOID, p1, p2));
fun pre_caret (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 90, (parser_data::values::TM_VOID, p1, p2));
fun caret (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 91, (parser_data::values::TM_VOID, p1, p2));
fun caret_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 92, (parser_data::values::TM_VOID, p1, p2));
fun post_caret (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 93, (parser_data::values::TM_VOID, p1, p2));
fun pre_dash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 94, (parser_data::values::TM_VOID, p1, p2));
fun dash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 95, (parser_data::values::TM_VOID, p1, p2));
fun dash_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 96, (parser_data::values::TM_VOID, p1, p2));
fun post_dash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 97, (parser_data::values::TM_VOID, p1, p2));
fun pre_dot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 98, (parser_data::values::TM_VOID, p1, p2));
fun dot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 99, (parser_data::values::TM_VOID, p1, p2));
fun dot_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 100, (parser_data::values::TM_VOID, p1, p2));
fun pre_dotdot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 101, (parser_data::values::TM_VOID, p1, p2));
fun dotdot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 102, (parser_data::values::TM_VOID, p1, p2));
fun dotdot_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 103, (parser_data::values::TM_VOID, p1, p2));
fun post_dotdot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 104, (parser_data::values::TM_VOID, p1, p2));
fun pre_percnt (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 105, (parser_data::values::TM_VOID, p1, p2));
fun percnt (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 106, (parser_data::values::TM_VOID, p1, p2));
fun percnt_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 107, (parser_data::values::TM_VOID, p1, p2));
fun post_percnt (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 108, (parser_data::values::TM_VOID, p1, p2));
fun pre_plus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 109, (parser_data::values::TM_VOID, p1, p2));
fun plus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 110, (parser_data::values::TM_VOID, p1, p2));
fun plus_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 111, (parser_data::values::TM_VOID, p1, p2));
fun post_plus (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 112, (parser_data::values::TM_VOID, p1, p2));
fun pre_qmark (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 113, (parser_data::values::TM_VOID, p1, p2));
fun qmark (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 114, (parser_data::values::TM_VOID, p1, p2));
fun qmark_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 115, (parser_data::values::TM_VOID, p1, p2));
fun post_qmark (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 116, (parser_data::values::TM_VOID, p1, p2));
fun pre_slash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 117, (parser_data::values::TM_VOID, p1, p2));
fun slash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 118, (parser_data::values::TM_VOID, p1, p2));
fun slash_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 119, (parser_data::values::TM_VOID, p1, p2));
fun post_slash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 120, (parser_data::values::TM_VOID, p1, p2));
fun pre_star (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 121, (parser_data::values::TM_VOID, p1, p2));
fun star (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 122, (parser_data::values::TM_VOID, p1, p2));
fun star_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 123, (parser_data::values::TM_VOID, p1, p2));
fun post_star (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 124, (parser_data::values::TM_VOID, p1, p2));
fun pre_tilda (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 125, (parser_data::values::TM_VOID, p1, p2));
fun tilda (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 126, (parser_data::values::TM_VOID, p1, p2));
fun tilda_eq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 127, (parser_data::values::TM_VOID, p1, p2));
fun post_tilda (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 128, (parser_data::values::TM_VOID, p1, p2));
fun except_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 129, (parser_data::values::TM_VOID, p1, p2));
fun fi_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 130, (parser_data::values::TM_VOID, p1, p2));
fun field_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 131, (parser_data::values::TM_VOID, p1, p2));
fun fn_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 132, (parser_data::values::TM_VOID, p1, p2));
fun for_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 133, (parser_data::values::TM_VOID, p1, p2));
fun fun_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 134, (parser_data::values::TM_VOID, p1, p2));
fun fprintf_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 135, (parser_data::values::TM_VOID, p1, p2));
fun postfix_arrow (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 136, (parser_data::values::TM_VOID, p1, p2));
fun generic_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 137, (parser_data::values::TM_VOID, p1, p2));
fun hash (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 138, (parser_data::values::TM_VOID, p1, p2));
fun herein_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 139, (parser_data::values::TM_VOID, p1, p2));
fun if_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 140, (parser_data::values::TM_VOID, p1, p2));
fun in_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 141, (parser_data::values::TM_VOID, p1, p2));
fun include_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 142, (parser_data::values::TM_VOID, p1, p2));
fun infix_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 143, (parser_data::values::TM_VOID, p1, p2));
fun infixr_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 144, (parser_data::values::TM_VOID, p1, p2));
fun lazy_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 145, (parser_data::values::TM_VOID, p1, p2));
fun message_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 146, (parser_data::values::TM_VOID, p1, p2));
fun method_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 147, (parser_data::values::TM_VOID, p1, p2));
fun my_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 148, (parser_data::values::TM_VOID, p1, p2));
fun nonfix_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 149, (parser_data::values::TM_VOID, p1, p2));
fun overloaded_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 150, (parser_data::values::TM_VOID, p1, p2));
fun raise_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 151, (parser_data::values::TM_VOID, p1, p2));
fun recursive_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 152, (parser_data::values::TM_VOID, p1, p2));
fun sharing_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 153, (parser_data::values::TM_VOID, p1, p2));
fun sprintf_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 154, (parser_data::values::TM_VOID, p1, p2));
fun package_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 155, (parser_data::values::TM_VOID, p1, p2));
fun printf_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 156, (parser_data::values::TM_VOID, p1, p2));
fun stipulate_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 157, (parser_data::values::TM_VOID, p1, p2));
fun tilda_tilda (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 158, (parser_data::values::TM_VOID, p1, p2));
fun what_what (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 159, (parser_data::values::TM_VOID, p1, p2));
fun where_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 160, (parser_data::values::TM_VOID, p1, p2));
fun wild (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 161, (parser_data::values::TM_VOID, p1, p2));
fun withtype_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 162, (parser_data::values::TM_VOID, p1, p2));
fun colon (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 163, (parser_data::values::TM_VOID, p1, p2));
fun weak_package_cast (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 164, (parser_data::values::TM_VOID, p1, p2));
fun partial_package_cast (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 165, (parser_data::values::TM_VOID, p1, p2));
fun colon_colon (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 166, (parser_data::values::TM_VOID, p1, p2));
fun colon_what (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 167, (parser_data::values::TM_VOID, p1, p2));
fun what_colon (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 168, (parser_data::values::TM_VOID, p1, p2));
fun comma (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 169, (parser_data::values::TM_VOID, p1, p2));
fun lbrace_dot (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 170, (parser_data::values::TM_VOID, p1, p2));
fun lparen (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 171, (parser_data::values::TM_VOID, p1, p2));
fun rbracket (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 172, (parser_data::values::TM_VOID, p1, p2));
fun rparen (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 173, (parser_data::values::TM_VOID, p1, p2));
fun or_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 174, (parser_data::values::TM_VOID, p1, p2));
fun and_t (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 175, (parser_data::values::TM_VOID, p1, p2));
fun vectorstart (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 176, (parser_data::values::TM_VOID, p1, p2));
fun beginq (p1, p2) = token::TOKEN (parser_data::lr_table::TERM 177, (parser_data::values::TM_VOID, p1, p2));
fun endq (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 178, (parser_data::values::ENDQ (\\ () = i), p1, p2));
fun chunkl (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 179, (parser_data::values::CHUNKL (\\ () = i), p1, p2));
fun antiquote_id (i, p1, p2) = token::TOKEN (parser_data::lr_table::TERM 180, (parser_data::values::ANTIQUOTE_ID (\\ () = i), p1, p2));
};
};
