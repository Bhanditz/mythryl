## unparse-compiler-state.pkg

# Compiled by:
#     src/lib/compiler/core.sublib

stipulate
    package cms =  compiler_mapstack_set;				# compiler_mapstack_set		is from   src/lib/compiler/toplevel/compiler-state/compiler-mapstack-set.pkg
									# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
									# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
									# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
									# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
									# symbolmapstack_entry		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack-entry.pkg

    package cps =  compiler_state;					# compiler_state		is from   src/lib/compiler/toplevel/interact/compiler-state.pkg

    package pp  =  standard_prettyprint_mill;				# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
									# prettyprint_symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/prettyprint-symbolmapstack.pkg
herein

    package unparse_compiler_state
    :       Unparse_Compiler_State					# Unparse_Compiler_State	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/unparse-compiler-state.api
    {

	fun unparse_compiler_mapstack_set
		(pps:  pp::Prettyprint_Mill)
		(compiler_mapstack_set:  cms::Compiler_Mapstack_Set)
	    =
	    {
		include  compiler_mapstack_set;

		pp::lit  pps   "Symbol table";             pp::newline pps;
		pp::lit  pps   "------------";             pp::newline pps;
		pp::newline pps;

		prettyprint_symbolmapstack::prettyprint_symbolmapstack
		    pps
		    (symbolmapstack_part  compiler_mapstack_set);

		pp::newline pps;
		pp::newline pps;
		pp::newline pps;
		pp::lit  pps   "Linking table";            pp::newline pps;
		pp::lit  pps   "-------------";            pp::newline pps;
		pp::newline pps;
		pp::lit  pps   "(unimplemented)";          pp::newline pps;

		pp::newline pps;
		pp::newline pps;
		pp::newline pps;
		pp::lit  pps   "Inlining table";           pp::newline pps;
		pp::lit  pps   "--------------";           pp::newline pps;
		pp::newline pps;
		pp::lit  pps   "(unimplemented)";          pp::newline pps;
	    };


	fun unparse_compiler_mapstack_set_reference
		#
		(pps:  pp::Prettyprint_Mill)
		#
		(compiler_mapstack_set_reference:   cps::Compiler_Mapstack_Set_Jar)
	    =
	    unparse_compiler_mapstack_set  pps   (compiler_mapstack_set_reference.get_mapstack_set ());


	fun unparse_compiler_state
		(pps:  pp::Prettyprint_Mill)
	    =
	    {   pp::lit   pps   "Combined (top_level + base) compiler tableset";            pp::newline  pps;
		pp::lit   pps   "=============================================";            pp::newline  pps;
		unparse_compiler_mapstack_set            pps  (cps::combined ());

		pp::newline  pps;
		pp::newline  pps;
		pp::newline  pps;
		pp::lit   pps   "Toplevel compiler tableset";            pp::newline  pps;
		pp::lit   pps   "==========================";            pp::newline  pps;
		unparse_compiler_mapstack_set_reference  pps  (cps::get_top_level_pkg_etc_defs_jar ());

		pp::newline  pps;
		pp::newline  pps;
		pp::newline  pps;
		pp::lit   pps   "Base compiler tableset";            pp::newline  pps;
		pp::lit   pps   "======================";            pp::newline  pps;
		unparse_compiler_mapstack_set_reference  pps  (cps::get_baselevel_pkg_etc_defs_jar ());

		pp::newline  pps;
		pp::newline  pps;
		pp::newline  pps;
		pp::lit   pps   "Pervasive compiler tableset";            pp::newline  pps;
		pp::lit   pps   "===========================";            pp::newline  pps;
		unparse_compiler_mapstack_set_reference  pps  cps::pervasive_fun_etc_defs_jar;
	    };


	fun unparse_compiler_state_to_file
	    (prettyprint_filename:  String)
	    =
	    {
		pp  = standard_prettyprint_mill::make_standard_prettyprint_mill  prettyprint_filename  [];

		pps = pp.pp;

		unparse_compiler_state  pp;

		pp::newline  pp;
		pp::newline  pp;
		pp::newline  pp;
		pp::lit   pp   "This file generated by unparse_compiler_state_to_file  from";
                pp::newline  pp;
		pp::lit   pp   "    src/lib/compiler/front/typer-stuff/symbolmapstack/unparse-compiler-state.pkg";
		pp::newline  pp;

		pp.flush ();
		pp.close ();
	    };

    };
end;














##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
