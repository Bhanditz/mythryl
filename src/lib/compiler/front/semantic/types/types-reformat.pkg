## types-reformat.pkg
## (C) 2001 Lucent Technologies, Bell Labs



# A utility function pulled out of type-junk.pkg to break certain
# unfortunate dependencies.  The function does not seem to be
# used anywhere anyway.


package TypesReformat:  api
			      #  This used to be in typesutil, but it does not belong there. 

			      my reformatTypeAbstraction:  types::Type
                                                          * List( types::Type )
                                                          * debruijn_index::depth
                                                         -> types::Type
                                                          * List( lambdacode_type::Type_Kind )
                                                          * List( types::Type_Path )
			  end
=
pkg

    use types variables_and_constructors

    # The reformatTypeAbstraction function is called inside translate.sml to reformat
    # a type abstraction packing inside PACK_EXPRESSION deep_syntax_tree. It is a hack. (ZHONG)


    fun reformatTypeAbstraction (type, typs, depth)
        = 
	let fun h ([], i, ks, ps, nts)
                =
                (   reverse ks,
                    reverse ps,
                    reverse nts
                )

	      | h (tc . rest, i, ks, ps, nts)
                =
                let fun noabs ()
                        =
			bug "non-abstract typs seen in tu::reformatTypeAbstraction"
		in
		    case tc

		      of BASE_TYP { stamp, arity, eq, path, kind, stub }
                         =>
			 (   case kind

			       of  ABSTRACT itc
                                   =>
                                   let tk  =   lt::make_n_arg_typ_fun_uniqkind   arity

				       tps = TYPPATH_VARIABLE (TVI::toExn { depth=depth, num=i, kind=tk } )

				       nkind = FLEXIBLE_TYPE tps
				       ntc
                                           =
					   BASE_TYP {
                                              stamp = stamp,
                                              arity = arity,
					      eq    = eq,
                                              kind  = nkind,
					      path  = path,
                                              stub  = NULL
                                           }
				   in
				       h (rest, i+1, tk . ks, (TYPPATH_TYPE itc) . ps,
					  ntc . nts)
				   end

			        | _ => noabs ()
                         )

		       | _ => noabs ()
		end

	    my (tks, tps, ntyps)
                =
                h (typs, 0, [], [], [])

	    fun getTypeConstructor (foo, tc)
                = 
		let fun h (a . r, tc)
                        =
                        if    types_are_equal (a, tc)
                        then  a
                        else  h (r, tc)

		      | h ([], tc)
                        =
                        foo tc
		in
                    h (ntyps, tc)
		end

	    nty = mapTypeEntire getTypeConstructor type

	in
            (nty, tks, tps)
	end

    reformatTypeAbstraction
        =
	compile_statistics::do_phase
            (compile_statistics::make_phase "Compiler 047 reformatTypeAbstraction")
            reformatTypeAbstraction
end


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
