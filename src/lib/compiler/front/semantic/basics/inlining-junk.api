## inlining-junk.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/core.sublib



###        "In my eyes it is never a crime to steal knowledge.
###         It is a good theft.  The pirate of knowledge is a
###         good pirate."
###
###                                  -- Michel Serres



stipulate
    package hbo =  highcode_baseops;					# highcode_baseops		is from   src/lib/compiler/back/top/highcode/highcode-baseops.pkg
    package ty  =  types;						# types				is from   src/lib/compiler/front/typer-stuff/types/types.pkg
herein

    api Inlining_Junk {
	#
	Inlining_Info;

#	inline_baseop:	   (hbo::Baseop, ty::Type) -> Inlining_Info;
#	inline_package:     List( Inlining_Info ) -> Inlining_Info;
#	inline_nothing:     Inlining_Info;


	print_inlining_info:	    Inlining_Info -> String;
	select_inlining_info:	   (Inlining_Info, Int) -> Inlining_Info;

	is_baseop_info:	    Inlining_Info -> Bool;
	is_callcc_baseop:   Inlining_Info -> Bool;
	pure_info:	    Inlining_Info -> Bool;

	make_baseop_inlining_info:	(hbo::Baseop, ty::Type) -> Inlining_Info;
	make_package_inlining_info:	List(Inlining_Info)     -> Inlining_Info;
	    #
	    # These two wrap-and-return the supplied info.
	    # They are used (only) in:    src/lib/compiler/front/semantic/symbolmapstack/base-types-and-ops-symbolmapstack.pkg

	null_inlining_info:		Inlining_Info;

	# This one essentially unwraps information wrapped by one
	# of the above two make_*_inlining_info funs and then does
	# a 'case' statement based on that information:
	#
	case_inlining_info
	    :
	    Inlining_Info
	    ->
	    { do_inline_baseop:   (hbo::Baseop, ty::Type) -> X,
	      do_inline_package:   List( Inlining_Info ) -> X,
	      do_inline_nothing:   Void -> X
	    }
	    ->
	    X;
    };

end;