## generics-expansion-junk-parameter.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/core.sublib



# Lib7-specific instantiation of Generics_Expansion_Junk_Parameter.



###               ``When you say: "I wrote a program that crashed Windows",
###                 people just stare at you blankly and say:
###                 "Hey, I got those with the system -- for free." ''
###
###                                        -- Linus Torvalds



stipulate
    package hcf =  highcode_form;				# highcode_form				is from   src/lib/compiler/back/top/highcode/highcode-form.pkg
    package hut =  highcode_uniq_types;				# highcode_uniq_types			is from   src/lib/compiler/back/top/highcode/highcode-uniq-types.pkg
    package ij  =  inlining_junk;				# inlining_junk				is from   src/lib/compiler/front/semantic/basics/inlining-junk.pkg
    package ppl =  package_property_lists;			# package_property_lists		is from   src/lib/compiler/front/semantic/modules/package-property-lists.pkg
    package tvi =  typevar_info;				# typevar_info				is from   src/lib/compiler/front/semantic/types/typevar-info.pkg
herein

    # This package is referenced (only) in:
    #
    #     src/lib/compiler/front/semantic/modules/generics-expansion-junk.pkg
    #     src/lib/compiler/front/semantic/types/type-core-language-declaration.pkg
    #
    package   generics_expansion_junk_parameter
    : (weak)  Generics_Expansion_Junk_Parameter			# Generics_Expansion_Junk_Parameter	is from   src/lib/compiler/front/typer/modules/generics-expansion-junk-g.pkg
    {
	Highcode_Kind =  hut::Uniqkind;

	make_n_arg_typefun_uniqkind		=  hcf::make_n_arg_typefun_uniqkind;
	make_kindfun_uniqkind			=  hcf::make_kindfun_uniqkind;
	make_kindseq_uniqkind			=  hcf::make_kindseq_uniqkind;

	api_bound_generic_evaluation_paths	=  ppl::api_bound_generic_evaluation_paths;
	set_api_bound_generic_evaluation_paths	=  ppl::set_api_bound_generic_evaluation_paths;

	tvi_exception				=  tvi::to_exception;

	fun inlining_data_to_my_type  inlining_data
	    =
	    ij::case_inlining_data  inlining_data
	      {
#		do_inline_baseop  =>   \\ (_, t) =  THE t,
#		do_inline_list    =>   \\ _      =  NULL,
#		do_inline_nil     =>   \\ ()     =  NULL

		do_inline_baseop  =>   \\ (_, t) =  { if *log::debugging printf "inlining_data_to_my_type/do_inline_baseop\n"; fi; THE t; },
		do_inline_list    =>   \\ _      =  { if *log::debugging printf "inlining_data_to_my_type/do_inline_list\n";   fi; NULL;  },
		do_inline_nil     =>   \\ ()     =  { if *log::debugging printf "inlining_data_to_my_type/do_inline_nil\n";    fi; NULL;  }
	      };
    };
end;