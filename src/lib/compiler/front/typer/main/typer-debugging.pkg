## typer-debugging.pkg

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

stipulate
    package pp  =  standard_prettyprint_mill;					# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package sy  =  symbol;							# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package syx =  symbolmapstack;						# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
herein 

    api Typer_Debugging {
	#
	debug_print:  Ref( Bool )
		     -> ( (String,
			 (pp::Prettyprint_Mill -> X -> Void),
			 X)
			)
		     -> Void;

	prettyprint_symbol_list:  pp::Prettyprint_Mill
				  -> List( sy::Symbol )
				  -> Void;

	symbolmapstack_symbols:  syx::Symbolmapstack
			         -> List( sy::Symbol );

	check_symbolmapstack:  (syx::Symbolmapstack, sy::Symbol)
			       -> String;

	with_internals:  (Void -> X)
			 -> X;
    };										#  Api Typer_Debugging 
end;



stipulate
    package err =  error_message;						# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package pp  =  standard_prettyprint_mill;					# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package sy  =  symbol;							# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package syx =  symbolmapstack;						# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package uj  =  unparse_junk;						# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg

#    include pp;
herein 

    package  typer_debugging
    : (weak) Typer_Debugging							# Typer_Debugging		is from   src/lib/compiler/front/typer/main/typer-debugging.pkg
    {

	fun debug_print (debugging: Ref( Bool ))
		       ( msg:       String,
                         printfn:   pp::Prettyprint_Mill -> X -> Void,
                         arg:       X
                       )
            =
	    if *debugging
		#
		pp::with_standard_prettyprinter
		    #
		    (err::default_plaint_sink())	[]
		    #
		    (fn pp:   pp::Prettyprint_Mill
			=
			{   pp::begin_align_4box pp;
			    pp::string pp msg;
			    pp::newline pp;
			    pp::nonbreakable_spaces pp 2;
			    pp::begin_align_4box pp;

			    printfn pp arg;

			    pp::end_box pp;
			    pp::newline pp;
			    pp::end_box pp;
			    pp::flush_prettyprinter pp;
			}
		      );
	    fi;

	fun prettyprint_symbol_list  stream  (syms: List( sy::Symbol ))
            = 
	    uj::unparse_closed_sequence
		#
                stream
		#
		{ front      =>  (fn stream =  pp::string stream "["),
		  separator  =>  (fn stream = (pp::string stream ", ")),
		  back       =>  (fn stream =  pp::string stream "]"),
		  breakstyle =>  uj::ALIGN,
		  print_one  =>  uj::unparse_symbol
		}

		syms;


	#  More debugging: 

	fun symbolmapstack_symbols (symbolmapstack: syx::Symbolmapstack)
            =
	    syx::fold   (fn ((s, _), sl) =  s ! sl)   NIL   symbolmapstack;

	fun check_symbolmapstack (   symbolmapstack: syx::Symbolmapstack,
                                 symbol:      sy::Symbol
                     )
            =
	    {   syx::get (symbolmapstack, symbol);
               "YES";
            }
            except
                syx::UNBOUND
                =>
                "NO"; end ;

	fun with_internals (f: Void -> X)
            =
	    {   internals   =   *typer_control::internals;

                typer_control::internals := TRUE;

		(   f()
                    before
		        typer_control::internals := internals
                )
		except
                    exn = {   typer_control::internals := internals;
			      raise exception exn;
			  };
	    };

    };		# package typer_debugging 
end;		# stipulate


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
