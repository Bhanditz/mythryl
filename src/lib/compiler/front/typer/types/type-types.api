## type-types.api 
#
# Types for core predefined stuff: void, bools, chars, ints, strings, lists, tuples, records,
# plus somewhat more exotic stuff like exceptions, fates, suspensions and spinlocks.
 
# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

stipulate
    package sta =  stamp;							# stamp				is from   src/lib/compiler/front/typer-stuff/basics/stamp.pkg
    package tdt =  type_declaration_types;					# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package vh  =  varhome;							# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
herein

    api Type_Types {
	#
	arrow_stamp:  sta::Stamp;
	arrow_typ:    tdt::Typ; 

	--> : (tdt::Typoid, tdt::Typoid) -> tdt::Typoid;

	is_arrow_type:      tdt::Typoid -> Bool;
	domain:             tdt::Typoid -> tdt::Typoid;
	range:              tdt::Typoid -> tdt::Typoid;

	int_typ:	    tdt::Typ;     int_typoid:		tdt::Typoid;
	int1_typ:	    tdt::Typ;     int1_typoid:		tdt::Typoid;
	int2_typ:	    tdt::Typ;     int2_typoid:		tdt::Typoid;
	multiword_int_typ:  tdt::Typ;     multiword_int_typoid:	tdt::Typoid;
	float64_typ:	    tdt::Typ;     float64_typoid:	tdt::Typoid;
	unt_typ:	    tdt::Typ;     unt_typoid:		tdt::Typoid;
	unt8_typ:	    tdt::Typ;     unt8_typoid:		tdt::Typoid;
	unt1_typ:	    tdt::Typ;     unt1_typoid:		tdt::Typoid;
	unt2_typ:	    tdt::Typ;     unt2_typoid:		tdt::Typoid;
	string_typ:	    tdt::Typ;     string_typoid:	tdt::Typoid;
	char_typ:	    tdt::Typ;     char_typoid:		tdt::Typoid;
	exception_typ:	    tdt::Typ;     exception_typoid:	tdt::Typoid;

	fate_typ:			tdt::Typ; 
	control_fate_typ:		tdt::Typ; 
	rw_vector_typ:			tdt::Typ; 
	vector_typ:			tdt::Typ;

	chunk_typ:			tdt::Typ;
	c_function_typ:			tdt::Typ;
	un8_rw_vector_typ:		tdt::Typ;
	float64_rw_vector_typ:		tdt::Typ;
	spinlock_typ:			tdt::Typ;

	void_typ:			tdt::Typ; 
	void_typoid:			tdt::Typoid;

	record_typoid:   List( (tdt::Label, tdt::Typoid) ) -> tdt::Typoid;
	tuple_typoid:    List( tdt::Typoid ) -> tdt::Typoid;

        # Get the types of a tuple-type's fields 

	get_fields:  tdt::Typoid -> Null_Or( List( tdt::Typoid ) );

	bool_signature:    vh::Valcon_Signature;

	bool_typ:	tdt::Typ; 
	bool_typoid:    tdt::Typoid;

	false_dcon:   tdt::Valcon;
	true_dcon:    tdt::Valcon;

	#  Unnecessary; removed by appel
	#
	#  my optionTyp:  tdt::Typ 
	#  my NONEDcon:      tdt::Valcon
	#  my SOMEDcon:      tdt::Valcon


	ref_typ:			tdt::Typ; 
	ref_pattern_typoid:		tdt::Typoid;
	ref_dcon:			tdt::Valcon;

	list_typ:			tdt::Typ; 
	nil_dcon:			tdt::Valcon;
	cons_dcon:			tdt::Valcon;

	ulist_typ:			tdt::Typ; 
	unil_dcon:			tdt::Valcon;
	ucons_dcon:			tdt::Valcon;

	frag_typ:			tdt::Typ;
	antiquotedcon:			tdt::Valcon;
	quotedcon:			tdt::Valcon;

	suspension_typ:			tdt::Typ;       	# "susp" == "suspension"
	suspension_pattern_typoid:	tdt::Typoid;        
	dollar_dcon:			tdt::Valcon;    

    }; #  Api Type_Types 
end;

## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
