## prettyprint-type.pkg 

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

#  modified to use Lib7 Lib pp. [dbm, 7/30/03]) 

stipulate 
    package pp  =  prettyprint;				# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package syx =  symbolmapstack;			# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tdt =  type_declaration_types;		# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
herein

    api Prettyprint_Type {
	#
	type_formals
	    :
	    Int
	 -> List( String );

	typevar_ref_printname
	    :
	    tdt::Typevar_Ref
	 -> String;

	prettyprint_type
	    :
	    syx::Symbolmapstack
	 -> pp::Stream 
	 -> tdt::Type
	 -> Void;

	prettyprint_typescheme
	    :
	    syx::Symbolmapstack
	 -> pp::Stream 
	 -> tdt::Typescheme
	 -> Void; 

	prettyprint_typoid
	    :
	    syx::Symbolmapstack
	 -> pp::Stream 
	 -> tdt::Typoid
	 -> Void;

	prettyprint_typevar_ref
	    :
	    syx::Symbolmapstack
	 -> pp::Stream 
	 -> tdt::Typevar_Ref
	 -> Void;

	prettyprint_sumtype_constructor_domain
	    :
	    ((Vector( tdt::Sumtype_Member ), List( tdt::Type )) )
	 -> syx::Symbolmapstack 
	 -> pp::Stream
	 -> tdt::Typoid
	 -> Void;

	prettyprint_sumtype_constructor_types
	    :
	    syx::Symbolmapstack
	 -> pp::Stream 
	 -> tdt::Type
	 -> Void;

	reset_prettyprint_type
	    :
	    Void -> Void;

	prettyprint_formals
	    :
	    pp::Stream
	 -> Int
	 -> Void;

	debugging:	Ref(  Bool );
	unalias:	Ref(  Bool );
    };
end;

stipulate 
    package fis =  find_in_symbolmapstack;	# find_in_symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/find-in-symbolmapstack.pkg
    package ip  =  inverse_path;		# inverse_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package sta =  stamp;			# stamp				is from   src/lib/compiler/front/typer-stuff/basics/stamp.pkg
    package syp =  symbol_path;			# symbol_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package syx =  symbolmapstack;		# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package ts  =  type_junk;			# type_junk			is from   src/lib/compiler/front/typer-stuff/types/type-junk.pkg
    package mtt =  more_type_types;		# more_type_types		is from   src/lib/compiler/front/typer/types/more-type-types.pkg
    package tdt =  type_declaration_types;	# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package uj  =  unparse_junk;		# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
    #
#    include unparse_junk; 
herein

    package   prettyprint_type
    : (weak)  Prettyprint_Type
    {
	debugging = REF FALSE;
	unalias = REF TRUE;
	#
	fun bug s
            =
            error_message::impossible ("prettyprint_type: " + s);

	pps = pp::string;
	#
	fun by f x y
	    =
	    f y x;

#	internals =   typer_control::internals;
internals = log::internals;

	unit_path = ip::extend
			(
			  ip::empty,
			  symbol::make_type_symbol "Void"
			);


        # Map small integer 'k' to a type variable name.
        # We name the first three X Y Z,
        # then run through A B C ... W
        # and then start in on AA, AB...	XXX BUGGO FIXME AA AB etc aren't legal syntax, need A_1 or A_a or such.
	#
	fun bound_typevar_name k
	    =
	    {   a =   char::to_int 'A';
		#
                case k
		    #                  
		    0 => "X";
		    1 => "Y";
		    2 => "Z";
		    _ => 
			if   (k < 26)
			    #
			    string::from_char (char::from_int (k + a - 3));
			else
			    implode [ char::from_int (int::(/) (k, 26) + a), 
				      char::from_int (int::(%) (k, 26) + a)
				    ];
			fi;
                esac;
	    };

	#
	fun meta_tyvar_name' k
	    =
	    {   a =  char::to_int 'a';	#  use reverse order for meta vars 
		#
		if (k < 26)
		    #
		    string::from_char (char::from_int (a - k));
		else 
		    implode [ char::from_int (a - (int::(/) (k, 26))), 
			      char::from_int (a - (int::(%) (k, 26)))
			    ];
                fi;
	    };
	#
	fun type_formals n
	    =
	    loop 0
            where
	        fun loop i
		    =
		    if (i >= n)   [];
		    else 	  (bound_typevar_name i)  !  loop (i + 1);
                    fi;
	    end;
	#
	fun literal_kind_printname (lk: tdt::Literal_Kind)
	    =
	    case lk
		#	      
		tdt::INT    => "Int";      # or "INT" 
		tdt::UNT    => "Unt";      # or "UNT" 
		tdt::FLOAT  => "Float";    # or "FLOAT" 
		tdt::CHAR   => "Char";     # or "CHAR" 
		tdt::STRING => "String";	  # or "STRING" 
            esac;

	stipulate  #  WARNING -- compiler global variables 

	    count = REF(-1);  

	    meta_tyvars = REF([]: List( tdt::Typevar_Ref ));

	herein

	    fun meta_tyvar_name (typevar_ref as { id, ref_typevar }:  tdt::Typevar_Ref)
		=
		meta_tyvar_name' (find_or_add (*meta_tyvars, 0))
                where
		    fun find_or_add ([], _)
			    =>
			    {   meta_tyvars := typevar_ref ! *meta_tyvars;
			        count := *count+1;
			        *count;
                            };

		        find_or_add ({ id, ref_typevar => ref_typevar' } ! rest, k)
			    =>
			    ref_typevar == ref_typevar'
			        ??   *count - k
			        ::   find_or_add (rest, k+1);
                    end;
		end;
	    #
	    fun reset_prettyprint_type ()
		=
		{   count := -1;
		    meta_tyvars := [];
		};
	end;
	#
	fun tv_head (eq, base)		# "tv" for "type variable"
	    =
	    (eq  ??  "'"
		 ::   ""
            )
	    +
	    base;
	#
	fun annotate (name, annotation, maybe_fn_nesting)
	    =
	    if *internals
		#
		cat ( name
		    !  "."
		    !  annotation
		    !  case maybe_fn_nesting
			   #	
			   THE fn_nesting =>  ["[ fn_nesting == ", (int::to_string fn_nesting), "]"];
			   NULL           =>  NIL;
		       esac
		    );
	    else
		name;
            fi;
	#
	fun typevar_ref_printname'  (typevar_ref as { id, ref_typevar })
	    =
	    sprint_typevar  *ref_typevar
            where
	        fun sprint_typevar  typevar
		    =
		    case typevar
			#		      
			tdt::RESOLVED_TYPEVAR (tdt::TYPEVAR_REF (typevar_ref as { id, ref_typevar }) )
			    =>
			    {   (typevar_ref_printname'  typevar_ref)
				    ->
				    (printname, null_or_type);

				( (sprintf "[id%d]" id) + "<tdt::RESOLVED_TYPEVAR \"" + printname + "\">",
				  null_or_type
				);
			    };

			tdt::RESOLVED_TYPEVAR  type
			    =>
			    ( (sprintf "[id%d]" id)  +  "<tdt::RESOLVED_TYPEVAR ?>",
			      THE type
			    );

			tdt::META_TYPEVAR { fn_nesting, eq }
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      tv_head (eq, annotate ( meta_tyvar_name typevar_ref,
						      "tdt::META_TYPEVAR",
						      THE fn_nesting
				      )             ),

			      NULL
			    );

			tdt::INCOMPLETE_RECORD_TYPEVAR { fn_nesting, eq, known_fields }
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      tv_head (eq, annotate ( meta_tyvar_name  typevar_ref,
						      "tdt::INCOMPLETE_RECORD_TYPEVAR",
						      THE fn_nesting
				      )             ),

			      NULL
			    );


			tdt::USER_TYPEVAR { name, fn_nesting, eq }
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      tv_head (eq, annotate (symbol::name name, "tdt::USER_TYPEVAR", THE fn_nesting)),

			      NULL
			    );

			tdt::LITERAL_TYPEVAR { kind, ... }
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      annotate (literal_kind_printname kind, "tdt::LITERAL_TYPEVAR", NULL),

			      NULL
			    );

			tdt::OVERLOADED_TYPEVAR eq
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      tv_head (eq, annotate (meta_tyvar_name typevar_ref, "tdt::OVERLOADED_TYPEVAR", NULL)),

			      NULL
			    );

			tdt::TYPEVAR_MARK _
			    =>
			    ( (sprintf "[id%d]" id)
			      +
			      "<TYPEVAR_MARK ?>",

			      NULL
			    );
                    esac;
	    end;

	#
	fun typevar_ref_printname  typevar_ref
	    =
	    {   my (printname, null_or_type)
                    =
                    typevar_ref_printname'  typevar_ref;

                printname;
            };



	/*
	fun ppkind stream kind
            =
	    pps stream
	      (case kind
		 of BASE _ => "BASE" | FORMAL => "FORMAL"
		  | FLEXIBLE_TYPE _ => "FLEXIBLE_TYPE" | ABSTRACT _ => "ABSTYC"
		  | SUMTYPE _ => "SUMTYPE" | TEMP => "TEMP")
	*/
	#
	fun ppkind stream kind
	    =
	    pps stream
	       case kind
		   # 
		   tdt::BASE _	 	=> "BASE";
		   tdt::FORMAL		=> "FORMAL";
		   tdt::FLEXIBLE_TYPE _ => "FLEXIBLE";
		   tdt::ABSTRACT _	=> "ABSTRACT";
		   tdt::SUMTYPE _	=> "SUMTYPE";
		   tdt::TEMP		=> "TEMP";
              esac;
	#
	fun effective_path (path, type, symbolmapstack) : String
	    =
	    {   fun namepath_of_type ( tdt::SUM_TYPE          { namepath, ... }
				  | tdt::NAMED_TYPE        { namepath, ... }
				  | tdt::TYPE_BY_STAMPPATH { namepath, ... }
				  )
			=>
			THE namepath;

		    namepath_of_type _
			=>
			NULL;
                end;
		#
		fun find (path, type)
		    =
		    (uj::find_path (path,
			(fn type' = ts::type_equality (type', type)),
			(fn x = fis::find_type_via_symbol_path (symbolmapstack, x,
						(fn _ = raise exception syx::UNBOUND))))
                    );
		#
		fun search (path, type)
		    =
		    {   (find (path, type)) ->   (suffix, found);
			#
			if found
			    (suffix, TRUE);
			else
			    if (not *unalias)
				#
				(suffix, FALSE);
			    else
				case (ts::unwrap_definition_1 type)
				    #
				    THE type'
					=>
					case (namepath_of_type type')
					    #
					    THE path'
					        =>
						{   (search (path', type')) ->   x as (suffix', found');
						    #
						    if found'      x;
						    else           (suffix, FALSE);
						    fi;
						};

					    NULL =>  (suffix, FALSE);
					esac;

				    NULL => (suffix, FALSE);
				esac;
			    fi;
                        fi;
		    };

		(search (path, type)) ->   (suffix, found);
                    
		name =   syp::to_string (syp::SYMBOL_PATH suffix);

		if found                name;
		else /* "?." + */	name;		# 2008-01-02 CrT This seems more confusing than helpful, for the moment at least.
		fi;
	    };

	arrow_stamp =  mtt::arrow_stamp;
	#
	fun strength  type
	    =
	    case type
		#	      
		tdt::TYPEVAR_REF   { id, ref_typevar => REF (tdt::RESOLVED_TYPEVAR  type') }
		    =>
		    strength (type');

		tdt::TYPCON_TYPOID (type, args)
		    =>
		    case type
			#
			tdt::SUM_TYPE { stamp, kind => tdt::BASE _, ... }
			    =>
			    if (sta::same_stamp (stamp, arrow_stamp) ) 0;
                            else                                       2;
                            fi;

			tdt::RECORD_TYPE (_ ! _)					#  excepting type Void
			    => 
			    if (tuples::is_tuple_type  type)
				 1;
			    else 2;
			    fi;

			_   => 2;
		    esac;

	        _ => 2;
            esac;
	#
	fun prettyprint_eq_prop stream p
	    =
	    {   a =    case p
			   tdt::e::NO            =>  "NO";
			   tdt::e::YES           =>  "YES";
			   tdt::e::INDETERMINATE =>  "INDETERMINATE";
			   tdt::e::CHUNK         =>  "CHUNK";
			   tdt::e::DATA          =>  "DATA";
			   tdt::e::EQ_ABSTRACT   =>  "EQ_ABSTRACT";
			   tdt::e::UNDEF         =>  "UNDEF";
                       esac;

		pps stream a;
	    };
	#
	fun prettyprint_inverse_path ppstream (inverse_path::INVERSE_PATH inverse_path: inverse_path::Inverse_Path)
	    = 
	    pp::string ppstream (symbol_path::to_string (symbol_path::SYMBOL_PATH (reverse inverse_path)));
	#
	fun prettyprint_type' symbolmapstack stream members_op
	    =
	    prettyprint_type''
            where
	        (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
                    
		#
		fun prettyprint_type'' (type as tdt::SUM_TYPE { namepath, stamp, is_eqtype, kind, ... } )
			=>
			if *internals
# if *log::debugging printf "{{{prettyprint_type'': tdt::SUM_TYPE}}}";  fi;
			    #
			    begin_wrap_box 1;

			    pps "tdt::SUM_TYPE { namepath => ";
			    uj::unparse_inverse_path stream  namepath;

			    pps ", stamp => ";
			    pps (sta::to_short_string stamp);

			    pps ", kind => ";
			    ppkind stream kind;

			    pps ", is_eqtype => ";
			    prettyprint_eq_prop stream  *is_eqtype;

			    pps ", ... }";
			    end_box ();
			else
# if *log::debugging printf "{{{prettyprint_type'': tdt::SUM_TYPE}}}";  fi;
			    pps (effective_path (namepath, type, symbolmapstack));
			fi;

		    prettyprint_type'' (type as tdt::NAMED_TYPE { namepath, typescheme => tdt::TYPESCHEME { body, ... }, ... } )
			=>
			if *internals
# if *log::debugging printf "{{{prettyprint_type'': tdt::NAMED_TYPE}}}";  fi;
			    #	
			    begin_wrap_box 1;
			    pps "tdt::NAMED_TYPE { namepath => "; 
			    uj::unparse_inverse_path stream  namepath;
			    pps ", typescheme => tdt::TYPESCHEME { body => "; 
			    begin_wrap_box 1;
			    prettyprint_typoid  symbolmapstack  stream  body;
			    pps ", ... }";
			    end_box();
			    pps ", ... }";
			    end_box();
			else
# if *log::debugging printf "{{{prettyprint_type'': tdt::NAMED_TYPE}}}";  fi;
			    pps (effective_path (namepath, type, symbolmapstack));
                        fi;

		    prettyprint_type'' (tdt::RECORD_TYPE labels)
			=>
                        {
# if *log::debugging printf "{{{prettyprint_type'': tdt::RECORD_TYPE}}}";  fi;
			    uj::unparse_closed_sequence
				stream

				{   front=> by pp::string "{ ",
				    sep  => fn stream =  {   pp::string stream ", "; 
							     pp::break stream { spaces=>0, indent_on_wrap=>0 };
							 },
				    back => by pp::string "}",
				    style=> uj::INCONSISTENT,
				    pr   => uj::unparse_symbol
				}

				labels;

			};

		    prettyprint_type'' (tdt::RECURSIVE_TYPE n)
			=>
{ # if *log::debugging printf "{{{prettyprint_type'': tdt::RECURSIVE_TYPE}}}";  fi;
			case members_op
			    #			      
			    THE (members, _)
				=> 
				{   (vector::get (members, n))
					->
					{ name_symbol, valcons, ... };

				    pps (string::cat ["[[<RECURSIVE_TYPE ", int::to_string n, ">\n"]);
				    uj::unparse_symbol stream  name_symbol;
				    pps (string::cat ["]]<RECURSIVE_TYPE ", int::to_string n, ">\n"]);
				};

			    NULL =>   pps (string::cat ["<RECURSIVE_TYPE ", int::to_string n, ">"]);
			esac;
};

		    prettyprint_type'' (tdt::FREE_TYPE n)
			=>
{ # if *log::debugging printf "{{{prettyprint_type'': tdt::FREE_TYPE}}}";  fi;
			case members_op
			    #
			    THE (_, free_types)
				=> 
				{   type =  (   list::nth (free_types, n)
						except _
						    =
						    bug "unexpected free_types in prettyprintTypeConstructor"
					    );

				     pps (string::cat ["[[<FREE_TYPE ", int::to_string n, ">\n"]);
				     prettyprint_type'' type;
				     pps (string::cat ["]]<FREE_TYPE ", int::to_string n, ">\n"]);
				};

			    NULL =>   pps (string::cat ["<FREE_TYPE ", int::to_string n, ">"]);
                        esac;
};

		    prettyprint_type'' (type as tdt::TYPE_BY_STAMPPATH { arity, stamppath, namepath } )
			=>
{ # if *log::debugging printf "{{{prettyprint_type'': tdt::TYPE_BY_STAMPPATH}}}";  fi;
			if *internals
			    #
			    begin_wrap_box 1;
			    uj::unparse_inverse_path stream  namepath;	pps "[TYPE_BY_STAMPPATH;"; 
			    pps (stamppath::stamppath_to_string stamppath);
			    pps "]";
			    end_box ();
			else
			    uj::unparse_inverse_path stream  namepath;
                        fi;
};

		    prettyprint_type'' tdt::ERRONEOUS_TYPE
                        =>
{ # if *log::debugging printf "{{{prettyprint_type'': tdt::ERRONEOUS_TYPE}}}";  fi;
                        pps "[E]";
};
                end;

	    end


	also
	fun prettyprint_typoid'  symbolmapstack  stream
            (
              typoid:		tdt::Typoid,
              an_api:		tdt::Typescheme_Eqflags, 
              members_op:	Null_Or( (Vector( tdt::Sumtype_Member ), List( tdt::Type )) )
            )
            : Void
	    =
	    prty typoid
            where
	        (uj::en_pp stream)
		    ->
		    { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, newline };
		
		#
		fun prty typoid
		    =
		    case typoid
			#		      
			tdt::TYPEVAR_REF { id, ref_typevar => REF (tdt::RESOLVED_TYPEVAR type') }
			    =>
			    {   pps "tdt::TYPEVAR_REF{ id=>..., ref_typevar => REF (tdt::RESOLVED_TYPEVAR:  ";
				prty type';
				pps " ) }TYPEVAR_REF\n";
			    };

			tdt::TYPEVAR_REF  typevar_ref
			    =>
			    {   pps "tdt::TYPEVAR_REF{ ";
				prettyprint_typevar_ref' typevar_ref;
				pps " }tdt::TYPEVAR_REF.\n";
			    };

			tdt::TYPESCHEME_ARG n
			    =>
			    {   eq =   list::nth (an_api, n) 
				       except
					   (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) = FALSE;

				pps "[[tdt::TYPESCHEME_ARG \n";
				pps (tv_head (eq, (bound_typevar_name n)));
				pps "]]tdt::TYPESCHEME_ARG \n";
			    };

			tdt::TYPCON_TYPOID (type, args)
			    =>
			    {   fun otherwise ()
				    =
				    {   begin_wrap_box 2;
					#
					prettyprint_type'  symbolmapstack  stream  members_op  type;

					case args
					    #
					    [] => ();
					    _  => {   pps "[[tdt::TYPCON_TYPOID\n";
						      break { spaces=>0, indent_on_wrap=>0 };
						      prettyprint_type_args args; 
						      pps "]]tdt::TYPCON_TYPOID\n";
						  };
					esac;

					end_box();
				    };

				case type
				    #
				    tdt::SUM_TYPE { stamp, kind, ... }
					=>
					case kind
					    #
					    tdt::BASE _ 
						=>
						if (sta::same_stamp (stamp, arrow_stamp))
						    #
						    case args
							#
							[domain, range]
							    =>
							    {   begin_horizontal_else_vertical_box 0;
								#
								pps "[[tdt::TYPCON_TYPOID  \n";

								if (strength domain == 0)
								    #
								    begin_horizontal_else_vertical_box 1;
								    pps "(";
								    prty domain;
								    pps ")";
								    end_box();
								else
								    prty domain;
								fi;

								break { spaces=>1, indent_on_wrap=>0 };
								pps "-> ";
								prty range;
								pps " ]]tdt::TYPCON_TYPE\n";
								end_box();
							    };

							_   => bug "TYPCON_TYPE: arity";
						    esac;
						else
						    begin_wrap_box 2;
						    pps "[[tdt::TYPCON_TYPOID \n";
						    prettyprint_type'  symbolmapstack  stream  members_op  type;

						    pps " ; \n";
						    case args
							#
							[] => ();

							 _ => {   pps "(";
								  break { spaces=>0, indent_on_wrap=>0 };
								  prettyprint_type_args args;
								  pps ")";
							      };
						    esac;

						    pps " ]]tdt::TYPCON_TYPE\n";
						    end_box();
						fi;

					    _   => otherwise ();
					esac;

				    tdt::RECORD_TYPE labels
					=>
					if (tuples::is_tuple_type  type)   prettyprint_tuplety args;
					else                               prettyprint_recordty (labels, args);
                                        fi;

				    _ => otherwise ();
				esac;
			    };

			tdt::TYPESCHEME_TYPOID { typescheme_eqflags =>  an_api,
						 typescheme         =>  tdt::TYPESCHEME { arity, body }
					       }
			    => 
			    {   pps "[[tdt::TYPESCHEME_TYPOID {\n";
				prettyprint_typoid' symbolmapstack stream (body, an_api, members_op);
				pps " } ]]tdt::TYPESCHEME_TYPOID\n";
			    };

			tdt::WILDCARD_TYPOID				# _  in surface syntax.
			    =>
			    pps "tdt::WILDCARD_TYPOID";

			tdt::UNDEFINED_TYPOID
			    =>
			    pps "tdt::UNDEFINED_TYPOID";
                    esac

		also
		fun prettyprint_type_args []
                        =>
                        ();

		    prettyprint_type_args [type]
		        => 
		        {   if (strength type <= 1)
				#		                
				begin_wrap_box 1;
				pps "("; 
				prty type; 
				pps ")";
				end_box();
		            else
                                prty type;
                            fi;

		            break { spaces=>0, indent_on_wrap=>0 };
                        };

		    prettyprint_type_args tys
			=>
			uj::unparse_closed_sequence
			    stream 
			    {   front =>  by pp::string "(",
				sep   =>  fn stream =  {   pp::string stream ", ";
					                   pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                       },
				back  =>  by pp::string ")",
				style =>  uj::INCONSISTENT, 
				pr    =>  fn _ =  fn type =  prty type
			    }
			    tys;
                end 

		also
		fun prettyprint_tuplety []
                        =>
                        pps (effective_path (unit_path, tdt::RECORD_TYPE [], symbolmapstack));

		    prettyprint_tuplety tys
			=>
                        {   pps "(";
			    #
			    uj::unparse_sequence
				stream
				  { sep   => fn stream =  {   pp::string stream ",";	# Was "* "
							      pp::break stream { spaces=>1, indent_on_wrap=>0 };
							  },
				    style => uj::INCONSISTENT,
				    pr    => (fn _ =  fn type = if (strength type <= 1)
								    #
								    begin_wrap_box 1;
								    pps "(";
								    prty type; 
								    pps ")";
								    end_box ();
								else
								    prty type;
								fi
					    )
				  }
				tys;

			       pps ")";
		        };
                end 

		also
		fun prettyprint_field (lab, type)
		    =
		    {   begin_horizontal_else_vertical_box 0;
			uj::unparse_symbol stream lab; 
			pps ":";
			prty type;
			end_box ();
		    }

		also
		fun prettyprint_recordty ([],[])
			=>
			pps (effective_path (unit_path, tdt::RECORD_TYPE [], symbolmapstack));
			  #  this case should not occur 

		    prettyprint_recordty (lab ! labels, arg ! args)
			=>
			{   begin_wrap_box 1;
			    pps "{ ";
			    prettyprint_field (lab, arg);

			    paired_lists::apply 
				(fn field'
				    =
				    {   pps ", ";
					break { spaces=>1, indent_on_wrap=>0 };
					prettyprint_field field';
				    }
				)
				(labels, args);

			    pps "}";
			    end_box ();
			};

		    prettyprint_recordty _
			=>
			bug "prettyprint_type::prettyprintRECORDty";
                end 

		also
		fun prettyprint_typevar_ref' (typevar_ref as { id, ref_typevar => REF typevar }:  tdt::Typevar_Ref):   Void
		    =
		    {   printname =   typevar_ref_printname typevar_ref;
			#
			case typevar
			    #			  
			    tdt::INCOMPLETE_RECORD_TYPEVAR { fn_nesting, eq, known_fields }
				=>
				case known_fields
				    #
				    []  =>
					{   pps "tdt::INCOMPLETE_RECORD_TYPEVAR{ ";
					    pps printname;
					    pps "}tdt::INCOMPLETE_RECORD_TYPEVAR ";
					};

				    field' ! fields
					=>
					{   begin_wrap_box 1;
					    pps "tdt::INCOMPLETE_RECORD_TYPEVAR{ ";
					    prettyprint_field field';
					    apply (fn x =  {   pps ", ";
							       break { spaces=>0, indent_on_wrap=>0 };
							       prettyprint_field x;
							   }
						  )
						 fields;
					    pps ";";
					    break { spaces=>1, indent_on_wrap=>0 };
					    pps printname;
					    pps "}tdt::INCOMPLETE_RECORD_TYPEVAR";
					    end_box ();
					};
				esac;

			    _  => pps printname;
                        esac;
		    };
	    end				# where (fun prettyprint_typoid')

	also
	fun prettyprint_typoid
            (symbolmapstack: syx::Symbolmapstack)
            stream
            (type:  tdt::Typoid)
            :
            Void
	    = 
	    {   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 1);
		prettyprint_typoid' symbolmapstack stream (type,[], NULL);
		pp::end_box stream;
	    };

	#
	fun prettyprint_typevar_ref
                (symbolmapstack:  syx::Symbolmapstack)
                (stream:        pp::Stream )
                (typevar_ref:   tdt::Typevar_Ref)
            :
            Void
	    =
	    {   (typevar_ref_printname'  typevar_ref)
		    ->
		    (printname, null_or_type);

	        (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };

		begin_wrap_box 1;
		pps " typevar_ref: ";
		pps printname;

                case null_or_type
		    #
		    NULL       => ();
		    THE type => {
				      pps " == ";
				      prettyprint_typoid  symbolmapstack  stream  type;
				  };
                esac;

		end_box ();
            };

	#
	fun prettyprint_sumtype_constructor_domain
		members
               (symbolmapstack:  syx::Symbolmapstack)
                stream
               (type:         tdt::Typoid)
	    #
	    : Void
	    = 
	    {   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 1);
		prettyprint_typoid' symbolmapstack stream (type,[], THE members);
		pp::end_box stream;
	    };

	#
	fun prettyprint_type  symbolmapstack stream      type
	    =
	    prettyprint_type' symbolmapstack stream NULL type;

	#
	fun prettyprint_typescheme symbolmapstack stream (tdt::TYPESCHEME { arity, body } )
	    =
	    {   (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
		#
		begin_wrap_box 2;
		pps "TYPESCHEME( { arity="; 
		uj::unparse_int stream arity;   uj::unparse_comma stream;
		break { spaces=>0, indent_on_wrap=>0 };
		pps "body="; 
		prettyprint_typoid  symbolmapstack  stream  body; 
		pps "} )";
		end_box();
	    };
	#
	fun prettyprint_formals  stream
	    =
	    prettyprint_f
            where
	        fun prettyprint_f 0 =>  ();
		    prettyprint_f 1 =>  pps stream "(X)";			# 2008-01-03 CrT: Was " 'a"

		    prettyprint_f n
                        =>
			uj::unparse_tuple
			    stream
			    (fn stream =  fn s =  pps stream s)		# 2008-01-03 CrT: Was ("'" + s)
			    (type_formals n);
                end;
	    end;

	#
	fun prettyprint_sumtype_constructor_types symbolmapstack stream (tdt::SUM_TYPE { kind => tdt::SUMTYPE dt, ... } )
		=>
		{   dt             ->   { index, free_types, family=> { members, ... }, ... };
		    #
		    (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };

		    (vector::get (members, index)) ->   { valcons, ... };
			

		    begin_horizontal_else_vertical_box  0;

		    apply
                        (fn { name, domain, ... }
                            =
			    {   pps (symbol::name name);
                                pps ":";

			        case domain
			          
			             THE type
                                         =>
				         prettyprint_typoid'
                                             symbolmapstack
                                             stream
                                             (type,[], THE (members, free_types));

				     NULL
                                         =>
                                         pps "CONST";
                                esac;

			        break { spaces=>1, indent_on_wrap=>0 };
                            }
			)
			valcons;

		    end_box ();
		};

	    prettyprint_sumtype_constructor_types symbolmapstack stream _
		=>
		bug "prettyprint_sumtype_constructor_types";
       end;
    };						#  package prettyprint_type 
end;						#  toplevel "stipulate"


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1991 by AT&T Bell Laboratories 
## Copyright 2003 by The SML/NJ Fellowship 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
