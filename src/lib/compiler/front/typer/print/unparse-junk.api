## unparse-junk.api

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

stipulate
    package pp  =  standard_prettyprint_mill;		# standard_prettyprint_mill	is from   src/lib/prettyprint/big/src/standard-prettyprint-mill.pkg
    package sy  =  symbol;				# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package syp =  symbol_path;				# symbol_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package ip  =  inverse_path;			# inverse_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
herein
    api Unparse_Junk {
	#
	Break_Style =  ALIGN
		    |  WRAP
		    ;


	open_style_box:  Break_Style
			-> pp::Prettyprint_Mill
			-> pp::typ::Left_Margin_Is
			-> Void;

	unparse_sequence:  pp::Prettyprint_Mill
			       ->
				{   separator:	pp::Prettyprint_Mill -> Void, 
				    print_one:	pp::Prettyprint_Mill -> X -> Void,
				    breakstyle:	Break_Style
				}
			       -> List(X)
			       -> Void;

	unparse_closed_sequence:  pp::Prettyprint_Mill
				     -> { front:	pp::Prettyprint_Mill -> Void, 
					  separator:	pp::Prettyprint_Mill -> Void,
					  back:		pp::Prettyprint_Mill -> Void,
					  print_one:	pp::Prettyprint_Mill -> X -> Void,
					  breakstyle:	Break_Style
					}
				     -> List(X)
				     -> Void;

	unparse_symbol:  pp::Prettyprint_Mill
			     -> sy::Symbol
			     -> Void;

	heap_string:  String -> String;

	unparse_mlstring:  pp::Prettyprint_Mill
			       -> String
			       -> Void;

	unparse_mlstring':  pp::Prettyprint_Mill
			       -> String
			       -> Void;

	unparse_integer:  pp::Prettyprint_Mill
		     -> multiword_int::Int
		     -> Void;

	 ppvseq:  pp::Prettyprint_Mill
		  -> Int
		  -> String
		  -> (pp::Prettyprint_Mill -> X -> Void)
		  -> List(X) -> Void;

	ppvlist:  pp::Prettyprint_Mill
		   -> (String,
		      String,
		      (pp::Prettyprint_Mill -> X -> Void),
		      List(X))
		   -> Void;

	ppvlist' : pp::Prettyprint_Mill
		    -> (String,
		       String,
		       (pp::Prettyprint_Mill -> String -> X -> Void),
		       List(X))
		    -> Void;

	unparse_int_path:      pp::Prettyprint_Mill -> List( Int )	-> Void;
	unparse_symbol_path:   pp::Prettyprint_Mill -> syp::Symbol_Path	-> Void;
	unparse_inverse_path:  pp::Prettyprint_Mill -> ip::Inverse_Path	-> Void;
	newline_indent:        pp::Prettyprint_Mill -> Int		-> Void;

	#  needed in PPTypes, unparse_package_language 

	find_path:  (ip::Inverse_Path, (X -> Bool), (syp::Symbol_Path -> X))
		    ->
		    (List(sy::Symbol), Bool);

	unparse_tuple:  pp::Prettyprint_Mill
			    -> (pp::Prettyprint_Mill -> X -> Void)
			    -> List(X)
			    -> Void;

	unparse_int:           pp::Prettyprint_Mill -> Int -> Void;

	newline_apply:  pp::Prettyprint_Mill
			-> (pp::Prettyprint_Mill -> X -> Void)
			-> List(X)
			-> Void; 

	break_apply:  pp::Prettyprint_Mill
		      -> (pp::Prettyprint_Mill -> X -> Void)
		      -> List(X)
		      -> Void; 

	unparse_array:  pp::Prettyprint_Mill
			    -> ((pp::Prettyprint_Mill -> X -> Void),  Rw_Vector(X))
			    -> Void;

    }; #  Api Unparse_Junk 
end;

## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
