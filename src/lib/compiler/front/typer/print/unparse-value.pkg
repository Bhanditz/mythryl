## unparse-value.pkg 

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

#  Modified to use Lib7 Lib pp. [dbm, 7/30/03]) 

stipulate
    package id  =  inlining_data;		# inlining_data			is from   src/lib/compiler/front/typer-stuff/basics/inlining-data.pkg
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package syx =  symbolmapstack;		# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tdt =  type_declaration_types;	# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package vac =  variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package vh  =  varhome;			# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
herein

    api Unparse_Value {

	 unparse_constructor_representation:  pp::Stream
						-> vh::Valcon_Form
						-> Void;

	 unparse_varhome:     pp::Stream ->  vh::Varhome  -> Void;
	 unparse_valcon:      pp::Stream ->  tdt::Valcon   -> Void;
	 unparse_var:         pp::Stream -> vac::Variable -> Void;

	 unparse_variable
	     :
	     pp::Stream
	     ->
	     (syx::Symbolmapstack, vac::Variable)
	     ->
	     Void;

	 unparse_debug_valcon
	     :
	     pp::Stream
	     -> syx::Symbolmapstack
	     ->  tdt::Valcon
             -> Void;

	 unparse_constructor
	     :
	     pp::Stream
	     -> syx::Symbolmapstack
	     ->  tdt::Valcon
             ->      Void;

	 unparse_debug_var
	     :
	     (id::Inlining_Data -> String)
	     -> pp::Stream 
	     -> syx::Symbolmapstack
	     -> vac::Variable
	     -> Void;

    }; #  Api Unparse_Value 
end;


stipulate
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package syx =  symbolmapstack;		# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tys =  type_junk;			# type_junk			is from   src/lib/compiler/front/typer-stuff/types/type-junk.pkg
    package fis =  find_in_symbolmapstack;	# find_in_symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/find-in-symbolmapstack.pkg
    package mtt =  more_type_types;		# more_type_types		is from   src/lib/compiler/front/typer/types/more-type-types.pkg
    package tc  =  typer_control;		# typer_control			is from   src/lib/compiler/front/typer/basics/typer-control.pkg
    package ip  =  inverse_path;		# inverse_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package syp =  symbol_path;			# symbol_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package vh  =  varhome;			# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package uj  =  unparse_junk;		# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
    package vac =  variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package tdt =  type_declaration_types;	# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package ut  =  unparse_type;		# unparse_type			is from   src/lib/compiler/front/typer/print/unparse-type.pkg

#   package id  =  inlining_data;		# inlining_data			is from   src/lib/compiler/front/typer-stuff/basics/inlining-data.pkg

    unparse_typoid      =  ut::unparse_typoid;
    unparse_type        =  ut::unparse_type;
    unparse_typescheme  =  ut::unparse_typescheme;
herein 

    package   unparse_value
    : (weak)  Unparse_Value
    {
#	internals =   tc::internals;
internals =   log::internals;

	fun by f x y
            =
            f y x;

	pps = pp::string;


	fun unparse_varhome stream a
            =
            pps stream (   " ["
                       +   (vh::print_varhome a)
                       +   "]"
                       );

	fun unparse_inlining_data inlining_info_to_string stream a
            =
            pps stream (" [" + (inlining_info_to_string a) + "]");

	fun unparse_constructor_representation stream representation
            =
            pp::string stream (vh::print_representation representation);

	fun unparse_csig stream csig
            =
            pp::string stream (vh::print_constructor_api csig);

	fun unparse_valcon stream
            =
            unparse_d
	    where
	        fun unparse_d ( tdt::VALCON { name, form => vh::EXCEPTION acc, ... } )
			=>
			{   uj::unparse_symbol  stream  name;
			    #
			    if *internals     unparse_varhome  stream  acc;     fi;
			};

		    unparse_d (tdt::VALCON { name, ... } )
			=>
			uj::unparse_symbol  stream  name;
                end;
	    end;

	fun unparse_debug_valcon stream symbolmapstack (tdt::VALCON { name, form, is_constant, typoid, signature, is_lazy } )
            =
	    {   (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
		#
		unparse_symbol =  uj::unparse_symbol  stream;
	    
                begin_horizontal_else_vertical_box 3;
		pps "VALCON";
		break { spaces=>0, indent_on_wrap=>0 };
		pps "{ name = "; unparse_symbol name;					uj::unparse_comma_newline stream;
		pps "is_constant = "; pps (bool::to_string is_constant);		uj::unparse_comma_newline stream;
		pps "typoid = "; unparse_typoid  symbolmapstack  stream  typoid;	uj::unparse_comma_newline stream;
		pps "is_lazy = "; pps (bool::to_string is_lazy);			uj::unparse_comma_newline stream;

		pps "pick_valcon_form =";
		unparse_constructor_representation
		    stream
		    form;
                                                                                     uj::unparse_comma_newline stream;
		pps "signature = [";  unparse_csig stream signature;  pps "] }";
		end_box ();
	    };

	fun unparse_constructor stream symbolmapstack (tdt::VALCON { name, form, is_constant, typoid, signature, is_lazy } )
            =
	    {   (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
		#
		unparse_symbol =  uj::unparse_symbol  stream;
	    
                begin_horizontal_else_vertical_box 3;
		unparse_symbol name;
		pps " : ";
                unparse_typoid  symbolmapstack  stream  typoid;
		end_box ();
	    };

	fun unparse_sumtype
              (
		symbolmapstack: syx::Symbolmapstack,
		tdt::VALCON { name, typoid, ... }
              )
              stream
            =
	    {   (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#	    
                begin_wrap_box 0;
		uj::unparse_symbol stream name;   pps " : ";
                unparse_typoid  symbolmapstack  stream  typoid;
		end_box ();
	    };

# Is this ever used?
	fun unparse_con_naming stream
            =
            unparse_constructor
            where

	        (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };

		fun unparse_constructor (tdt::VALCON { name, typoid, form=>vh::EXCEPTION _, ... }, symbolmapstack)
			=>
			{   begin_horizontal_else_vertical_box 0;
			    pps "exception ";
                            uj::unparse_symbol  stream  name; 

			    if (mtt::is_arrow_type  typoid)
				#
				pps " "; 
				unparse_typoid  symbolmapstack  stream  (mtt::domain  typoid);
			    fi;

			    pps ";"; 

			    end_box();
			};

		    unparse_constructor (con, symbolmapstack)
			=> 
			{   exception HIDDEN;
			    #
			    visible_valcon_type
				=
				{   type =   tys::sumtype_to_type   con;

				    (   type_junk::type_equality (
					    fis::find_type_via_symbol_path
					    (    symbolmapstack,
						 syp::SYMBOL_PATH
						 [ ip::last (type_junk::namepath_of_type type) ],
						 fn _ = raise exception HIDDEN
					    ),
					    type
					)
					except
                                            HIDDEN = FALSE
				    );
				};

			    if (*internals
                                or
				not visible_valcon_type
			    )
				begin_horizontal_else_vertical_box 0;
				pps "con ";
				unparse_sumtype (symbolmapstack, con) stream;
				pps ";";
				end_box ();
                            fi;
			};
                end;
	    end;

	fun unparse_var stream (vac::ORDINARY_VARIABLE { varhome, path, ... } )
		=>
		{   pps stream (syp::to_string path);

		    if *internals
			 unparse_varhome stream varhome;
		    fi;
		};

	    unparse_var stream (vac::OVERLOADED_IDENTIFIER { name, ... } )
		=>
		uj::unparse_symbol stream (name);

	    unparse_var stream (errorvar)
		=>
		pp::string stream "<errorvar>";
        end;

	fun unparse_debug_var inlining_info_to_string stream symbolmapstack
            = 
	    {   (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#
		unparse_varhome = unparse_varhome stream;
		unparse_inlining_data   = unparse_inlining_data inlining_info_to_string stream;

		fun unparsedebugvar (vac::ORDINARY_VARIABLE { varhome, path, var_type, inlining_data } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "ORDINARY_VARIABLE";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { varhome=";   unparse_varhome varhome;                   uj::unparse_comma_newline stream;
			    pps "inlining_data="; unparse_inlining_data inlining_data;        uj::unparse_comma_newline stream;
			    pps "path=";       pps (syp::to_string path);             uj::unparse_comma_newline stream;
			    pps "var_type=REF "; unparse_typoid  symbolmapstack  stream  *var_type; 
			    pps "} )";
			    end_box();
			    end_box();
			};

		    unparsedebugvar (vac::OVERLOADED_IDENTIFIER { name, alternatives, typescheme } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "vac::OVERLOADED_IDENTIFIER";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { name="; uj::unparse_symbol stream (name);		uj::unparse_comma_newline stream;
			    pps "alternative=["; 
			    (uj::ppvseq stream 0 ", "
			      (fn stream = fn { indicator, variant }
                                  =
				  {   pps "{ indicator=";  unparse_typoid  symbolmapstack  stream   indicator; 
				      uj::unparse_comma_newline stream;
				      pps " variant =";
				      unparse_debug_var inlining_info_to_string stream symbolmapstack variant; pps "}";
				  }
                              )
			      *alternatives);
			    pps "]"; uj::unparse_comma_newline stream;
			    pps "typescheme=";   unparse_typescheme  symbolmapstack  stream  typescheme;   pps "} )";
			    end_box();
			    end_box();
			};

		    unparsedebugvar (errorvar) => pps "<ERRORvar>";
                end;
	    
                unparsedebugvar;
	    };

	fun unparse_variable stream
            =
            unparse_variable'
            where
	        (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#
		fun unparse_variable'
                        (
                          symbolmapstack: syx::Symbolmapstack,
			  vac::ORDINARY_VARIABLE { path, varhome, var_type, inlining_data }
			)
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps (syp::to_string path);

			    if *internals
                                 unparse_varhome stream  varhome;
			    fi;

			    pps ": ";
                            unparse_typoid  symbolmapstack  stream  *var_type;
			    pps ";";
			    end_box ();
			};

		    unparse_variable'
                        (
                          symbolmapstack,
                          vac::OVERLOADED_IDENTIFIER { name, alternatives=>REF alternatives, typescheme=>tdt::TYPESCHEME { body, ... } }
                        )
			=>
			{   begin_horizontal_else_vertical_box 0;
			    uj::unparse_symbol stream (name);
                            pps ": ";
                            unparse_typoid  symbolmapstack  stream  body; 
			    pps " as ";
			    uj::unparse_sequence
                                stream
                                  { sep   =>  by pp::break { spaces=>1, indent_on_wrap=>0 },
				    pr    =>  (fn stream = fn { variant, ... } = unparse_variable' (symbolmapstack, variant)),
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				  }
			        alternatives;
			    pps ";";
			    end_box();
		        };

		    unparse_variable' (_, errorvar)
                        =>
                        pps "<ERRORvar>;";
                end;
	    end;
    };			#  package unparse_value 
end;			#  stipulate











##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Copyright 2003 by The SML/NJ Fellowship 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
