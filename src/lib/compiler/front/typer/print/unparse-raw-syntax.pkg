## unparse-raw-syntax.pkg
## Jing Cao and Lukasz Ziarek 

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

# We refer to a literal dump of the raw syntax tree as "prettyprinting".
# We refer to reconstruction of surface syntax from the raw syntax tree as "unparsing".
# Unparsing is good for end-user diagnostics; prettyprinting is good for compiler debugging.
# This is the implementation of our raw syntax unparser.
# For our raw syntax prettyprinter, see  src/lib/compiler/front/typer/print/prettyprint-raw-syntax.pkg



stipulate
    package mtt =  more_type_types;				# more_type_types		is from   src/lib/compiler/front/typer/types/more-type-types.pkg
    package err =  error_message;				# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package pp  =  prettyprint;					# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package sci =  sourcecode_info;				# sourcecode_info		is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
    package sy  =  symbol;					# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package tc  =  typer_control;				# typer_control			is from   src/lib/compiler/front/typer/basics/typer-control.pkg
    package rs  =  raw_syntax;					# raw_syntax			is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax.pkg
    package tpl =  tuples;					# tuples			is from   src/lib/compiler/front/typer-stuff/types/tuples.pkg
    package fxt =  fixity;					# fixity			is from   src/lib/compiler/front/basics/map/fixity.pkg
#   package vac =  variables_and_constructors;			# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package uj  =  unparse_junk;				# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
#   package ut  =  unparse_type;				# unparse_type			is from   src/lib/compiler/front/typer/print/unparse-type.pkg
#   package uv  =  unparse_value;				# unparse_value			is from   src/lib/compiler/front/typer/print/unparse-value.pkg
herein


    package   unparse_raw_syntax
    : (weak)  Unparse_Raw_Syntax				# Unparse_Raw_Syntax		is from   src/lib/compiler/front/typer/print/unparse-raw-syntax.api
    {
#	internals =  tc::internals;
internals = log::internals;

	lineprint =  REF FALSE;

	fun by f x y
            =
            f y x;

	null_fix = fxt::INFIX (0, 0);
	inf_fix  = fxt::INFIX (1000000, 100000);

	fun stronger_l (fxt::INFIX(_, m), fxt::INFIX (n, _)) => m >= n;
	    stronger_l _ => FALSE;			#  should not matter 
        end;

	fun stronger_r (fxt::INFIX(_, m), fxt::INFIX (n, _)) => n > m;
 	    stronger_r _ => TRUE; 			#  should not matter 
        end;

	fun prpos (   stream:  pp::Stream,
		      source:  sci::Sourcecode_Info,
                      charpos: Int
                  )
            =
	    if *lineprint
		  my (file: String, line: Int, pos: Int)
                      =
                      sci::filepos  source  charpos;

		  pp::string stream (int::to_string line);
		  pp::string stream ".";
		  pp::string stream (int::to_string pos);
	    else
                 pp::string stream (int::to_string charpos);
            fi;


	fun bug msg
            =
            error_message::impossible("unparse_raw_syntax: " + msg);


	arrow_stamp =  mtt::arrow_stamp;


	fun strength  type
            =
	    case type
		#              
		rs::TYPEVAR_TYPE(_) => 1;

		rs::TYPE_TYPE (type, args)
		    => 
		    case type
			#
			[type]
			    =>
			    if (sy::eq (sy::make_type_symbol("->"), type))   0;
			    else                                             2;
			    fi;

			_   => 2;
		    esac;


		rs::RECORD_TYPE _ => 2;

		rs::TUPLE_TYPE _ => 1;

		_ => 2;
            esac;


	fun checkpat (n, NIL)
                =>
                TRUE;

	    checkpat (n, (symbol, _) ! fields)
                =>
                sy::eq (symbol, tpl::number_to_label n)
                and
                checkpat (n+1, fields);
        end;

	fun checkexp (n, NIL)
                =>
                TRUE;

	    checkexp (n, (symbol, expression) ! fields)
		=>
		sy::eq (symbol, tpl::number_to_label n)
                and
		checkexp (n+1, fields);
        end;

	fun is_tuplepat (rs::RECORD_PATTERN { definition => [_], ...                   } ) =>  FALSE;
	    is_tuplepat (rs::RECORD_PATTERN { definition => defs, is_incomplete => FALSE } ) =>  checkpat (1, defs);
	    is_tuplepat _                                                              =>  FALSE;
        end;

	fun is_tupleexp (rs::RECORD_IN_EXPRESSION [_])      =>   FALSE;
	    is_tupleexp (rs::RECORD_IN_EXPRESSION fields)   =>   checkexp (1, fields);
	    is_tupleexp (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (a, _))       =>   is_tupleexp a;
	    is_tupleexp _ => FALSE;
        end;

	fun get_fix (dictionary, symbol)
            =
	    find_in_symbolmapstack::find_fixity_by_symbol  (
                dictionary,
                sy::make_fixity_symbol (sy::name symbol)
            );



	fun strip_source_code_region_data (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (a, _))
		=>
		strip_source_code_region_data a;

	    strip_source_code_region_data x
		=>
		x;
        end;



	fun trim     [x] =>  [];
	    trim (a ! b) =>  a ! trim b;
	    trim      [] =>  [];
        end;


	fun pp_path  stream  symbols
            =
	    {   fun pr stream (symbol)
                    =
                    uj::unparse_symbol  stream  symbol;
	    
                uj::unparse_sequence
                    stream
		    {   sep   =>  (fn stream =  (pp::string stream "::")),	# Was "."
		        pr,
		        style =>  uj::HORIZONTAL_ELSE_VERTICAL
                    }
		    symbols;
	    };

	fun unparse_pattern (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =   pp::string  stream;

		pp_symbol_list =   pp_path  stream;

		fun unparse_pattern' (rs::WILDCARD_PATTERN,                 _)   =>   ppsay "_";
		    unparse_pattern' (rs::VARIABLE_IN_PATTERN         p,    d)   =>   pp_symbol_list (p);
		    unparse_pattern' (rs::INT_CONSTANT_IN_PATTERN     i,    _)   =>   ppsay (multiword_int::to_string i);
		    unparse_pattern' (rs::UNT_CONSTANT_IN_PATTERN     w,    _)   =>   ppsay (multiword_int::to_string w);
		    unparse_pattern' (rs::STRING_CONSTANT_IN_PATTERN  s,    _)   =>   uj::unparse_mlstring  stream s;
		    unparse_pattern' (rs::CHAR_CONSTANT_IN_PATTERN    s,    _)   =>   uj::unparse_mlstring' stream s;

		    unparse_pattern' (rs::AS_PATTERN { variable_pattern, expression_pattern }, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    unparse_pattern'(variable_pattern, d); ppsay " as "; unparse_pattern'(expression_pattern, d - 1);
			    pp::end_box stream;
			};

		    unparse_pattern' (rs::RECORD_PATTERN { definition => [],   is_incomplete }, _)
			=>
			if   is_incomplete      ppsay "{ ... }";
			else                    ppsay "()";
                        fi;

		    unparse_pattern' (r as rs::RECORD_PATTERN { definition, is_incomplete }, d)
			=>
			if (is_tuplepat r)
			    #
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream
						 =
						 {   pp::string stream ", ";
						     pp::break stream { spaces=>0, indent_on_wrap=>0 };
						 }
					     ),
				    back  => (by pp::string ")"),
				    pr    => (fn _ = fn (symbol, pattern) = unparse_pattern' (pattern, d - 1)),
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				definition;
			else
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "{ "),
				    sep   => (fn stream =  { pp::string stream ", ";
							     pp::break stream { spaces=>0, indent_on_wrap=>0 };
							   }
					     ),
				    back  => (fn stream =  if is_incomplete  pp::string stream ", ... }";
							   else pp::string stream "}";
							   fi
					     ),
				    pr    => (fn stream =  fn (symbol, pattern) =  {   uj::unparse_symbol stream symbol;
										       pp::string stream " => ";
										       unparse_pattern' (pattern, d - 1);
										   }
					    ),
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				definition;
			fi;

		    unparse_pattern' (rs::LIST_PATTERN NIL, d) =>   ppsay "[]";

		    unparse_pattern' (rs::LIST_PATTERN l, d)
			=>	
			{   fun pr _ pattern
                                =
                                unparse_pattern' (pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "["),
				    sep   => (fn stream = { pp::string stream ", ";
							    pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                          }
					    ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				l;
			};

		    unparse_pattern' (rs::TUPLE_PATTERN t, d)
			=> 
			{   fun pr _ pattern
                                =
                                unparse_pattern'(pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream = {   pp::string stream ", ";
							      pp::break stream { spaces=>0, indent_on_wrap=>0 };
							  }
					    ),
				    back  => (by pp::string ")"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				t;
			};

		    unparse_pattern' (rs::PRE_FIXITY_PATTERN fap, d)
			=>
			{   fun pr _ { item, fixity, source_code_region }
                                =
                                unparse_pattern'(item, d - 1);		

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				fap;
			}; 

		    unparse_pattern' (rs::APPLY_PATTERN { constructor, argument }, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    unparse_pattern' (constructor, d);
			    ppsay " as ";
			    unparse_pattern'(argument, d);
			    pp::end_box stream;
			};

		    unparse_pattern' (rs::TYPE_CONSTRAINT_PATTERN { pattern, type_constraint }, d)
			=> 
			{   pp::begin_wrap_box stream;
			    unparse_pattern' (pattern, d - 1);
			    ppsay " :";
			    pp::break stream { spaces => 1,   indent_on_wrap => 2 };
			    unparse_type context stream (type_constraint, d);
			    pp::end_box stream;
			};

		    unparse_pattern' (rs::VECTOR_PATTERN NIL, d)
			=>
			ppsay "#[]";

		    unparse_pattern' (rs::VECTOR_PATTERN v, d)
			=> 
			{   fun pr _ pattern
                                =
                                unparse_pattern'(pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "#["),
				    sep   => (fn stream = { pp::string stream ", ";
                                                            pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                          }
                                             ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				v;
			 };

		    unparse_pattern' (rs::SOURCE_CODE_REGION_FOR_PATTERN (pattern, (s, e)), d)
			=> 
			case source_opt
                          
			     THE source
				 =>
				 if *internals
				      ppsay "<MARK(";
				      prpos (stream, source, s); ppsay ", ";
				      prpos (stream, source, e); ppsay "): ";
				      unparse_pattern'(pattern, d); ppsay ">";
				 else
				      unparse_pattern'(pattern, d);
				 fi;

			     NULL => unparse_pattern'(pattern, d);
			 esac;

		    unparse_pattern' (rs::OR_PATTERN orpat, d)
			=>
			{   fun pr _ pattern
                                =
                                unparse_pattern'(pattern, d - 1);		

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream = { pp::break stream { spaces=>1, indent_on_wrap=>0 }; pp::string stream "| ";}),
				    back  => (by pp::string ")"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				};
			}
                        orpat;
                end;

	    
                unparse_pattern';
	    }


	also
	fun unparse_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		fun lparen () = ppsay "("; 
		fun rparen () = ppsay ")";
		fun lpcond (atom) = if atom  ppsay "("; fi;      
		fun rpcond (atom) = if atom  ppsay ")"; fi;

		pp_symbol_list = pp_path stream;

		fun unparse_expression' (_, _, 0) => ppsay "<expression>";
		    unparse_expression' (rs::VARIABLE_IN_EXPRESSION p, _, _) => pp_symbol_list  p;
		    unparse_expression' (rs::IMPLICIT_THUNK_PARAMETER p, _, _) => { ppsay "#"; pp_symbol_list  p; };
		    unparse_expression' (rs::FN_EXPRESSION NIL, _, d) => ppsay "<function>";
		    unparse_expression' (rs::FN_EXPRESSION rules, _, d)
			=>	
			{   fun pr _ pattern
                                =
                                unparse_rule context stream (pattern, d - 1);

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream = { pp::string stream "|";pp::break stream { spaces=>0, indent_on_wrap=>0 }; }),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				rules;
			};

		    unparse_expression' (rs::PRE_FIXITY_EXPRESSION fap, _, d)
			=> 
			{   fun pr _ { item, fixity, source_code_region }
                                =
                                unparse_expression'(item, TRUE, d);		

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				fap;
			}; 

		    unparse_expression' (e as rs::APPLY_EXPRESSION _, atom, d)
			=>
			{   lpcond atom;
			    unparse_app_expression (e, null_fix, null_fix, d);
			    rpcond atom;
			};

		    unparse_expression' (rs::OBJECT_FIELD_EXPRESSION { object, field }, _, d)
			=>
			{   unparse_expression' (object, TRUE, d - 1);
			    ppsay "->";
                            uj::unparse_symbol stream field;
			};

		    unparse_expression' (rs::CASE_EXPRESSION { expression, rules }, _, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "case (";		# Was "(case ";
                            unparse_expression'(expression, TRUE, d - 1);
                            pp::newline stream;		# Was uj::newline_indent stream 2;
			    uj::ppvlist stream (
                                ") ",
                                ";",		# Was "   | ",
                                (fn stream =  fn r =  unparse_rule context stream (r, d - 1)),
                                trim rules
                            );
			    ppsay "esac;";	# Was rparen();
			    pp::end_box stream;
			};

		    unparse_expression' (rs::LET_EXPRESSION { declaration, expression }, _, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "stipulate ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_declaration context stream (declaration, d - 1); 
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    ppsay "herein ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression'(expression, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    ppsay "end";
			    pp::end_box stream;
			};

		    unparse_expression' (rs::SEQUENCE_EXPRESSION exps, _, d)
			=>
			uj::unparse_closed_sequence
			    stream
			    {   front => (by pp::string "("),
				sep   => (fn stream = { pp::string stream ";";
					                pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                      }
                                         ),
				back  => (by pp::string ")"),
				pr    => (fn _ = fn expression = unparse_expression'(expression, FALSE, d - 1)),
				style => uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    exps;

		    unparse_expression' (   rs::INT_CONSTANT_IN_EXPRESSION   i, _, _)   =>   ppsay (multiword_int::to_string i);
		    unparse_expression' (   rs::UNT_CONSTANT_IN_EXPRESSION   w, _, _)   =>   ppsay (multiword_int::to_string w);
		    unparse_expression' ( rs::FLOAT_CONSTANT_IN_EXPRESSION   r, _, _)   =>   ppsay r;
		    unparse_expression' (rs::STRING_CONSTANT_IN_EXPRESSION   s, _, _)   =>   uj::unparse_mlstring  stream s;
		    unparse_expression' (  rs::CHAR_CONSTANT_IN_EXPRESSION   s, _, _)   =>   uj::unparse_mlstring' stream s;

		    unparse_expression'(r as rs::RECORD_IN_EXPRESSION fields, _, d)
			=>
			if (is_tupleexp r)
			    #			    
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    back  => (by pp::string ")"),
				    pr    => (fn _ = fn (_, expression) = unparse_expression'(expression, FALSE, d - 1)),
				    style => uj::HORIZONTAL_ELSE_VERTICAL,
				    sep   => (fn stream =  { pp::string stream ", ";
							     pp::break stream { spaces=>0, indent_on_wrap=>0 };
							   }
					     )
				}
				fields;
			else
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "{ "),
				    sep   => (fn stream = { pp::string stream ", ";
							    pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}
					     ),
				    back  => (by pp::string "}"),
				    pr    => (fn stream = fn (name, expression)
							  =
							  {   uj::unparse_symbol stream name;
							      ppsay " => ";
							      unparse_expression'(expression, FALSE, d);
							  }
					    ),
				   style  => uj::HORIZONTAL_ELSE_VERTICAL
				}
				fields;
                        fi;

		    unparse_expression' (rs::LIST_EXPRESSION p, _, d)
			=> 
			uj::unparse_closed_sequence
			    stream
			    {   front => (by pp::string "["),
				sep   => (fn stream = { pp::string stream ", ";
						        pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}
                                         ),
				back  => (by pp::string "]"),
				pr    => (fn stream =
                                          fn expression =
						      (unparse_expression'(expression, FALSE, d - 1))
                                         ),
				style => uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    p;

		    unparse_expression' (rs::TUPLE_EXPRESSION p, _, d)
			=>
			uj::unparse_closed_sequence
			    stream
			    {   front => (by pp::string "("),
				sep   => (fn stream = { pp::string stream ", ";
						        pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                      }
                                         ),
				back  => (by pp::string ")"),
				pr    => (fn stream =
                                          fn expression =  (unparse_expression'(expression, FALSE, d - 1))
                                         ),
				style => uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    p;

		    unparse_expression' (rs::RECORD_SELECTOR_EXPRESSION name, atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
#			    lpcond (atom);			# Seems like pure clutter so commented out  2009-08-06 CrT
			    ppsay ".";			# Was "#"
                            uj::unparse_symbol stream name;
#			    rpcond (atom);
			    pp::end_box stream;
			};

		    unparse_expression' (rs::TYPE_CONSTRAINT_EXPRESSION { expression, constraint }, atom, d)
			=> 
			{   pp::begin_wrap_box stream;
			    lpcond (atom);
			    unparse_expression'(expression, FALSE, d); ppsay ":";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_type context stream (constraint, d);
			    rpcond (atom);
			    pp::end_box stream;
			};

		    unparse_expression'(rs::EXCEPT_EXPRESSION { expression, rules }, atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    lpcond atom;
			    unparse_expression'(expression, atom, d - 1);
                            pp::newline stream;
                            ppsay "except ";
			    uj::newline_indent stream 2;
			    uj::ppvlist stream (
                                "  ",
                                "; ",			# Was "| ",
				(fn stream =  fn r =  unparse_rule context stream (r, d - 1)),
                                rules
                            );
			    rpcond atom;
			    pp::end_box stream;
			};

		    unparse_expression' (rs::RAISE_EXPRESSION expression, atom, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    lpcond atom;
			    ppsay "raise exception ";
                            unparse_expression'(expression, TRUE, d - 1);
			    rpcond atom;
			    pp::end_box stream;
			};

		    unparse_expression' (rs::IF_EXPRESSION { test_case, then_case, else_case }, atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
			    ppsay "if ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (test_case, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "then ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (then_case, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "else ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (else_case, FALSE, d - 1);
			    pp::end_box stream;
			    rpcond (atom);
			    pp::end_box stream;
			};

		    unparse_expression' (rs::AND_EXPRESSION (e1, e2), atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (e1, TRUE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "and ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (e2, TRUE, d - 1);
			    pp::end_box stream;
			    rpcond (atom);
			    pp::end_box stream;
			 };

		    unparse_expression' (rs::OR_EXPRESSION (e1, e2), atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (e1, TRUE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "or ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression' (e2, TRUE, d - 1);
			    pp::end_box stream;
			    rpcond (atom);
			    pp::end_box stream;
			};

		    unparse_expression' (rs::WHILE_EXPRESSION { test, expression }, atom, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "while ";
			    pp::begin_horizontal_else_vertical_box stream;
			    unparse_expression'(test, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "do ";
			    pp::begin_horizontal_else_vertical_box stream;
			     unparse_expression'(expression, FALSE, d - 1);
			    pp::end_box stream;
			    pp::end_box stream;
			};

		    unparse_expression' (rs::VECTOR_IN_EXPRESSION NIL, _, d) => ppsay "#[]";

		    unparse_expression' (rs::VECTOR_IN_EXPRESSION exps, _, d)
			=>
			{   fun pr _ expression
				=
				unparse_expression'(expression, FALSE, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "#["),
				    sep   => (fn stream = { pp::string stream ", ";
							    pp::break stream { spaces=>1, indent_on_wrap=>0 };
							  }
					     ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				exps;
			};

		    unparse_expression' (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (expression, (s, e)), atom, d)
			=>
			case source_opt
			    #
			    THE source
				=>
				if *internals
				     ppsay "<MARK(";
				     prpos (stream, source, s); ppsay ", ";
				     prpos (stream, source, e); ppsay "): ";
				     unparse_expression'(expression, FALSE, d); ppsay ">";
				else
				     unparse_expression'(expression, atom, d);
				fi;

			    NULL => unparse_expression'(expression, atom, d);
			esac;
		end 

		also
		fun unparse_app_expression (_, _, _, 0)
			=>
			pp::string stream "<expression>";

		    unparse_app_expression arg
			=>
			{   ppsay = pp::string stream;

			    fun fixitypp (name, operand, left_fix, right_fix, d)
				=
				{   dname = symbol_path::to_string (symbol_path::SYMBOL_PATH name);
				    #
				    this_fix = case name
						       [id] => get_fix (dictionary, id);
						      _ => fxt::NONFIX;
					       esac;

				    fun pr_non expression
					=
					{   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
					    ppsay dname; pp::break stream { spaces=>1, indent_on_wrap=>0 };
					    unparse_expression'(expression, TRUE, d - 1);
					    pp::end_box stream;
					};

				    case this_fix
					#
					fxt::INFIX _
					    =>
					    case (strip_source_code_region_data operand)
						#
						rs::RECORD_IN_EXPRESSION [(_, pl), (_, pr)]
						    =>
						    {   atom =  stronger_l (left_fix, this_fix)
                                                             or stronger_r (this_fix, right_fix);

							my (left, right)
							    =
							    if atom     (null_fix, null_fix);
							    else	(left_fix, right_fix);
							    fi;

							{   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
							    lpcond (atom);
							    unparse_app_expression (pl, left, this_fix, d - 1);
							    pp::break stream { spaces=>1, indent_on_wrap=>0 };
							    ppsay dname;
							    pp::break stream { spaces=>1, indent_on_wrap=>0 };
							    unparse_app_expression (pr, this_fix, right, d - 1);
							    rpcond (atom);
							    pp::end_box stream;
							};
						    };

						e' => pr_non e';
					    esac;


					fxt::NONFIX => pr_non operand;
				    esac;
				};

			    fun apply_print (_, _, _, 0)
				    =>
				    ppsay "#";

				apply_print (rs::APPLY_EXPRESSION { function=>operator, argument=>operand }, l, r, d)
				    =>
				    case (strip_source_code_region_data operator)
					#
					rs::VARIABLE_IN_EXPRESSION v
					    =>
					    { path = v;

						fixitypp (path, operand, l, r, d);
					    };

					operator
					    =>
					    {   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
						unparse_expression'(operator, TRUE, d - 1); pp::break stream { spaces=>1, indent_on_wrap=>2 };
						unparse_expression'(operand,  TRUE, d - 1);
						pp::end_box stream;
					    };
				     esac;


				apply_print (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (expression, (s, e)), l, r, d)
				    =>
				    case source_opt
					#
					THE source
					    =>
					    if *internals
						 ppsay "<MARK(";
						 prpos (stream, source, s); ppsay ", ";
						 prpos (stream, source, e); ppsay "): ";
						 unparse_expression'(expression, FALSE, d);
						 ppsay ">";
					    else
						 apply_print (expression, l, r, d);
					    fi;

					NULL => apply_print (expression, l, r, d);
				    esac;

				apply_print (e, _, _, d)
				    =>
				    unparse_expression'(e, TRUE, d);
			    end;

			    apply_print arg;
			};
                end;
	    
                fn (expression, depth)
                    =
                    unparse_expression' (expression, FALSE, depth);
	    }

	also
	fun unparse_rule (context as (dictionary, source_opt)) stream (rs::CASE_RULE { pattern, expression }, d)
            =
	    if (d>0) 
		#                
		pp::begin_horizontal_else_vertical_box stream;
		unparse_pattern context stream (pattern, d - 1);
		pp::string stream " =>";
		pp::break stream { spaces=>1, indent_on_wrap=>2 };
		unparse_expression context stream (expression, d - 1);
		pp::end_box stream;
	    else
                pp::string stream "<rule>";
            fi

	also
	fun unparse_package_cast (context as (_, source_opt)) stream package_cast d
            =
	    {   ppsay = pp::string stream;
		#
		case package_cast
		    #
		    rs::NO_PACKAGE_CAST
			=>
			();

		    rs::WEAK_PACKAGE_CAST api_expression
			=> 
			{   ppsay " : (weak)";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_api_expression context stream (api_expression, d - 1);
			};

		    rs::PARTIAL_PACKAGE_CAST api_expression
			=> 
			{   ppsay " : (partial)";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_api_expression context stream (api_expression, d - 1);
			};

		    rs::STRONG_PACKAGE_CAST api_expression
			=> 
			{   ppsay " : ";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_api_expression context stream (api_expression, d - 1);
			};
		esac;
	    }

	also
	fun unparse_package_expression (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun unparse_package_expression'(_, 0)
			=>
			ppsay "<package_expression>";

		    unparse_package_expression' (rs::PACKAGE_BY_NAME p, d)
			=>
			pp_symbol_list (p);

		    unparse_package_expression' (rs::PACKAGE_DEFINITION (rs::SEQUENTIAL_DECLARATIONS NIL), d)
			=>
			{   ppsay "package {";
			    pp::nonbreakable_spaces stream 1;
			    ppsay "};";
			};

		    unparse_package_expression' (rs::PACKAGE_DEFINITION de, d)
			=>
			{   pp::begin_vertical_box stream;
			    ppsay "package {";
			    uj::newline_indent stream 2;
			    unparse_declaration context stream (de, d - 1);
			    ppsay "};";
			    pp::end_box stream;
			};

		    unparse_package_expression' (rs::PACKAGE_CAST (stre, constraint), d)
			=>
			{   pp::begin_wrap_box stream;
			    unparse_package_expression' (stre, d - 1);

			    unparse_package_cast context stream constraint d;

			    pp::end_box  stream;
			};

		    unparse_package_expression' (rs::CALL_OF_GENERIC (path, str_list), d)
			=> 
			{   fun pr stream (strl, bool)
				=
				{   ppsay "("; unparse_package_expression context stream (strl, d); ppsay ")";};

			    pp_symbol_list (path);

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				str_list;
			  };	

		    unparse_package_expression' (rs::INTERNAL_CALL_OF_GENERIC (path, str_list), d)
			=> 
			{   fun pr stream (strl, bool)
				=
				  {   ppsay "(";
				      unparse_package_expression context stream (strl, d);
				      ppsay ")";
				  };

			    pp_symbol_list (path);

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				str_list;
			};	

		    unparse_package_expression' (rs::LET_IN_PACKAGE (declaration, body), d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "stipulate ";
			    unparse_declaration context stream (declaration, d - 1); 
			    pp::newline stream;
			    ppsay " herein ";
			    unparse_package_expression'(body, d - 1);
			    pp::newline stream;
			    ppsay "end";
			    pp::end_box stream;
			};

		    unparse_package_expression' (rs::SOURCE_CODE_REGION_FOR_PACKAGE (body, (s, e)), d)
			=>
			unparse_package_expression' (body, d);
		end;

#		      (case source_opt
#			of THE source =>
#			   (ppsay "rs::SOURCE_CODE_REGION_FOR_PACKAGE(";
#			      prettyprintPackageexpression'(body, d); ppsay ", ";
#			      prpos (stream, source, s); ppsay ", ";
#			      prpos (stream, source, e); ppsay ")")
#			 | NULL => prettyprintPackageexpression'(body, d))

	    
		unparse_package_expression';
	    }

	also
	fun unparse_generic_expression (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun unparse_generic_expression'(_, 0)
                        =>
                        ppsay "<generic_expression>";

		    unparse_generic_expression' (rs::GENERIC_BY_NAME (p, _), d)
                        =>
                        pp_symbol_list (p);

		    unparse_generic_expression' (rs::LET_IN_GENERIC (declaration, body), d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "stipulate ";
                            unparse_declaration context stream (declaration, d - 1); 
			    pp::newline stream;
			    ppsay " herein ";
                            unparse_generic_expression'(body, d - 1);
                            pp::newline stream;
			    ppsay "end";
			    pp::end_box stream;
			};

		    unparse_generic_expression' (rs::CONSTRAINED_CALL_OF_GENERIC (path, sblist, fsigconst), d)
			=>
			{   fun pr stream (package_expression, _)
				=
				{   ppsay "(";
				    unparse_package_expression context stream (package_expression, d);
				    ppsay ")";
				};

			    pp::begin_horizontal_else_vertical_box stream;
			    pp_symbol_list path;

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				sblist;

			    pp::end_box stream;
			};

		    unparse_generic_expression' (rs::SOURCE_CODE_REGION_FOR_GENERIC (body, (s, e)), d)
			=>
			unparse_generic_expression' (body, d);


		    unparse_generic_expression' (rs::GENERIC_DEFINITION _, d)
			=>
			error_message::impossible "prettyprintGenericexpression: GENERIC_DEFINITION";
                end;
	    
		unparse_generic_expression';
	    }

	also
	fun unparse_where_spec (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;

		fun unparse_where_spec'(_, 0)
                        =>
                        ppsay "<WhereSpec>";


		    unparse_where_spec' (rs::WHERE_TYPE([],[], type), d)
                        =>
                        unparse_type context stream (type, d);


		    unparse_where_spec' (rs::WHERE_TYPE (slist, tvlist, type), d)
			=> 
			{   fun pr _ symbol
				=
				uj::unparse_symbol stream symbol;

			    fun pr' _ tyv
				=
				unparse_typevar context stream (tyv, d);

			    ppsay "typeX ";

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr    =>  pr',
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				tvlist;

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				slist;	 

			    ppsay" =";
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    unparse_type context stream (type, d);
			};

		    unparse_where_spec' (rs::WHERE_PACKAGE (slist, slist'), d)
			=>
			{   fun pr _ symbol
				=
				uj::unparse_symbol stream symbol;

			    ppsay "packageZ ";

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				slist;

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				slist';
			};
                end;
	    
		unparse_where_spec';
	    }

	also
	fun unparse_api_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		fun unparse_api_expression'(_, 0)
                        =>
                        ppsay "<api_expression>";

		    unparse_api_expression'(rs::API_BY_NAME s, d)
                        =>
                        uj::unparse_symbol  stream  s;

		    unparse_api_expression'(rs::API_WITH_WHERE_SPECS (an_api, wherel), d)
			=>
			{   unparse_api_expression' (an_api, d);
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    case an_api
				#			      
				rs::API_BY_NAME s
				    =>
				    uj::ppvlist stream (
					"where ",
					"also ",
					(fn stream =  fn r =  unparse_where_spec context stream (r, d - 1)),
					wherel
				    );

				rs::SOURCE_CODE_REGION_FOR_API (rs::API_BY_NAME s, r)
				    =>
				    uj::ppvlist stream (
					"where ",
					"also ",
					(fn stream =  fn r =  unparse_where_spec context stream (r, d - 1)),
					wherel
				    );

				_ =>
				    {   pp::newline stream;
					#
					uj::ppvlist stream (
					    "where ",
					    "also ",
					    (fn stream =  fn r =  unparse_where_spec context stream (r, d - 1)),
					    wherel
					);
				    };
			    esac;
			};

		    unparse_api_expression' (rs::API_DEFINITION [], d)
			=>	
			{   ppsay "api {";
			    pp::nonbreakable_spaces stream 1;
			    ppsay "};";
			};

		    unparse_api_expression' (rs::API_DEFINITION specl, d)
			=> 
			{   fun pr stream speci
                                =
                                unparse_specification context stream (speci, d);

			    pp::newline stream; # XXX BUGGO TEST ONLY
			    ppsay "api {";

			    pp::begin_vertical_box stream;
			    pp::newline stream;
#			    uj::newline_indent stream 4;

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  pp::newline stream),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				specl;

			    pp::end_box stream;

			    pp::newline stream;
			    ppsay "};";
			};

		    unparse_api_expression' (rs::SOURCE_CODE_REGION_FOR_API (m, r), d)
                        =>
                        unparse_api_expression context stream (m, d);
                end;
	    
		unparse_api_expression';
	    }

	also
	fun unparse_generic_api_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun unparse_generic_api_expression'(_, 0)
                        =>
                        ppsay "<generic_api_expression>";

		    unparse_generic_api_expression' (rs::GENERIC_API_BY_NAME s, d)
                        =>
                        uj::unparse_symbol stream s;

		    unparse_generic_api_expression' (rs::GENERIC_API_DEFINITION { parameter, result }, d)
			=>
			{   fun pr stream (THE symbol, api_expression)
				    =>
				    {   ppsay "(";
                                        uj::unparse_symbol stream symbol;
                                        ppsay ":";
					unparse_api_expression context stream (api_expression, d);
					ppsay ")";
				    };

			        pr stream (NULL, api_expression)
				    =>
				    {   ppsay "("; unparse_api_expression context stream (api_expression, d);
                                        ppsay ")";
                                    };
                            end;

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  (pp::newline stream)),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				parameter;

			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    ppsay "=> ";
			    unparse_api_expression context stream (result, d);
			};

		    unparse_generic_api_expression' (rs::SOURCE_CODE_REGION_FOR_GENERIC_API (m, r), d)
			=>
			unparse_generic_api_expression context stream (m, d);
                end;
	    
		unparse_generic_api_expression';
	    }

	also
	fun unparse_specification (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun pp_tyvar_list ([], d)
                        =>
                        ();

		    pp_tyvar_list ( [typevar], d)
			=> 
			{   unparse_typevar context stream (typevar, d);
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			};

		    pp_tyvar_list (tyvar_list, d)
			=> 
			{   fun pr _ typevar
				=
				(unparse_typevar context stream (typevar, d));

			    uj::unparse_closed_sequence
				stream
				{   front => (fn stream = pp::string stream "("),
				    sep   => { pp::string stream ", "; fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); },
				    back  => { pp::string stream ")" ; fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); },
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				tyvar_list;
			};
                end;

		fun unparse_specification'(_, 0)
                        =>
                        ppsay "<Specification>";

		    unparse_specification' (rs::PACKAGES_IN_API sspo_list, d)
			=>
			{   fun pr _ (symbol, api_expression, path)
				=
				case path
				  
				     THE p => {   uj::unparse_symbol stream symbol;
                                                  ppsay " = ";
						  unparse_api_expression context stream (api_expression, d);
						  pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                  pp_path stream p;
                                              };

				     NULL  => {   uj::unparse_symbol stream symbol;
                                                  ppsay " = ";
					          unparse_api_expression context stream (api_expression, d);
                                              };
				esac;

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "packageY "),
				    sep   => (fn stream
                                                 =
                                                 {   pp::string stream ", ";
						     pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                 }
                                             ),
				    back  => (by pp::string ""),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				sspo_list;
			}; 

		    unparse_specification' (rs::TYPES_IN_API (stto_list, bool), d)
			=> 
			{   fun pr _ (symbol, tyvar_list, tyo)
				=
				case tyo
				    #
				    THE type
					=>
					{   uj::unparse_symbol stream symbol;
					    ppsay "(";
					    pp_tyvar_list (tyvar_list, d);
					    ppsay ") =  ";
					    unparse_type context stream (type, d);
					};

				    NULL
					=>
					{   uj::unparse_symbol stream symbol;
					    ppsay "(";
					    pp_tyvar_list (tyvar_list, d);
					    ppsay ")";
					};
				esac;


			    uj::unparse_closed_sequence
				stream
				{   front =>  (by pp::string ""),			# Was "type "
				    sep   =>  fn stream =  {   pp::string stream "|";
                                                               pp::newline stream;
                                                           },
				    back  =>  (by pp::string ";"),
				    pr,
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				stto_list;
			}; 

		    unparse_specification' (rs::GENERICS_IN_API sf_list, d)
			=>
			{   fun pr stream (symbol, generic_api_expression)
				=
				{   uj::unparse_symbol stream symbol;
                                    ppsay " : ";
				    unparse_generic_api_expression context stream (generic_api_expression, d - 1);
				}; 

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("generic package ", "also ", pr, sf_list);
			    pp::end_box stream;
			}; 

		    unparse_specification' (rs::VALUES_IN_API st_list, d)
			=> 
			{   fun pr stream (symbol, type)
				= 
				{   uj::unparse_symbol stream symbol;
                                    ppsay ":   ";
                                    unparse_type context stream (type, d);
                                }; 

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream (
                                "",		# Was "my ",
                                "also ",
                                pr, 
                                st_list
                            );
                            ppsay "; ";
			    pp::end_box stream;
			}; 

		    unparse_specification' (rs::VALCONS_IN_API { sumtypes, with_types => [] }, d)
			=> 
			{   fun pr stream (dbing)
				=
				(unparse_union_type context stream (dbing, d));

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("", "also ", pr, sumtypes);
			    pp::end_box stream;
			}; 

		    unparse_specification' (rs::VALCONS_IN_API { sumtypes, with_types }, d)
			=> 
			{   fun prd stream (dbing) = (unparse_union_type context stream (dbing, d));
			    fun prw stream (tbing) = (unparse_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				uj::ppvlist stream ("", "also ", prd, sumtypes);
				pp::newline stream;
				uj::ppvlist stream ("", "also ", prw, with_types);
				pp::end_box stream;
			    };
			};

		    unparse_specification' (rs::EXCEPTIONS_IN_API sto_list, d)
			=> 
			{   fun pr stream (symbol, tyo)
				=
				case tyo
				    #
				    THE type => {   uj::unparse_symbol stream symbol;
						    ppsay " : ";
						    unparse_type context stream (type, d);
						};

				    NULL => uj::unparse_symbol stream symbol;
				esac;

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("exception ", "also ", pr, sto_list);
			    pp::end_box stream;
			}; 

		    unparse_specification' (rs::PACKAGE_SHARING_IN_API paths, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("sharing ", " = ", pp_path, paths);
			    pp::end_box stream;
			};

		    unparse_specification' (rs::TYPE_SHARING_IN_API paths, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("sharing ", " = ", pp_path, paths);
			    pp::end_box stream;
			};

		    unparse_specification' (rs::IMPORT_IN_API api_expression, d)
			=>
			unparse_api_expression context stream (api_expression, d);

		    unparse_specification' (rs::SOURCE_CODE_REGION_FOR_API_ELEMENT (m, r), d)
			=>
			unparse_specification context stream (m, d);
                end;
	    
		unparse_specification';
	    }

	also
	fun unparse_declaration (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		pp_symbol_list =  pp_path  stream;

		fun unparse_declaration' (_, 0)
                        =>
                        ppsay "<declaration>";

		    unparse_declaration' (rs::VALUE_DECLARATIONS (vbs, typevars), d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream (
                                "my ",
                                "also ",
                                (fn stream =  fn named_value =  unparse_named_value context stream (named_value, d - 1)),
                                vbs
                            );
			    pp::end_box stream;
			};

		    unparse_declaration' (rs::FIELD_DECLARATIONS (fields, typevars), d)
			=>
			# 2009-02-23 CrT: A quick first-cut solution, duplicated from VALUE_DECLARATIONS: case:
			#
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream (
                                "field ",
                                "also ",
                                (fn stream =  fn named_value =  unparse_named_field context stream (named_value, d - 1)),
                                fields
                            );
			    pp::end_box stream;
			};

		    unparse_declaration' (rs::RECURSIVE_VALUE_DECLARATIONS (rvbs, typevars), d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist
				stream
				(   "my rec ",
				    "also ",
				    (  fn stream =
				       fn named_recursive_values =
				       unparse_named_recursive_values
					   context
					   stream
					   (named_recursive_values, d - 1)
				    ),
				    rvbs
				);

			    pp::end_box stream;
			};

		    unparse_declaration' (rs::FUNCTION_DECLARATIONS (fbs, typevars), d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist'
				stream
				(   "fun ",
				    "also ",
				    (   fn stream =
					fn str =
					fn fb =
					unparse_named_sml_function
					    context
					    stream
					    str
					    (fb, d - 1)
				    ),
				    fbs
				);

			    pp::end_box  stream;
			};

		    unparse_declaration' (rs::NADA_FUNCTION_DECLARATIONS (fbs, typevars), d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist'
				stream
				(   "fun ",
				    "also ",
				    (   fn stream =
					fn str =
					fn fb =
					unparse_named_lib7function
					    context
					    stream
					    str
					    (fb, d - 1)
				    ),
				    fbs
				);

			    pp::end_box  stream;
			};

		    unparse_declaration' (rs::TYPE_DECLARATIONS types, d)
			=>
			{   fun pr  stream  type
				=
				(unparse_named_type context stream (type, d));

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string ""),	# Was "type "
				    sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    back  => (by pp::string ";"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				types;
			}; 	

		    unparse_declaration' (rs::SUMTYPE_DECLARATIONS { sumtypes, with_types => [] }, d)
			=> 
			{   fun prd _ (dbing)
				=
				(unparse_union_type context stream (dbing, d));


			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string ""),
				    sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    back  => (by pp::string ";"),
				    pr    => prd,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				sumtypes;
			};             

		    unparse_declaration' (rs::SUMTYPE_DECLARATIONS { sumtypes, with_types }, d)
			=> 
			{   fun prd stream dbing = (unparse_union_type context stream (dbing, d));
			    fun prw stream tbing = (unparse_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				#
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string ""),
					sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					back  => (by pp::string ";"),
					pr    => prd,
					style => uj::HORIZONTAL_ELSE_VERTICAL
				    }
				    sumtypes;

				pp::newline stream;

				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "withtype "),
					sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					back  => (by pp::string ""),
					pr    => prw,
					style => uj::HORIZONTAL_ELSE_VERTICAL
				    }
				    with_types;

				pp::end_box stream;
			    };
			};

		    unparse_declaration' (rs::ABSTRACT_TYPE_DECLARATIONS { abstract_types, with_types => [], body }, d)
			=> 
			{   fun prd stream dbing = (unparse_union_type context stream (dbing, d));
			    fun prw stream tbing = (unparse_named_type     context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string ""),
					    sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					    back  => (by pp::string ";"),
					    pr    => prd,
					    style => uj::HORIZONTAL_ELSE_VERTICAL
					}
					abstract_types
				);
				pp::newline stream;
				unparse_declaration' (body, d);
				pp::end_box stream;
			    };
			};

		    unparse_declaration' (rs::ABSTRACT_TYPE_DECLARATIONS { abstract_types, with_types, body }, d)
			=> 
			{   fun prd _ (dbing) = (unparse_union_type context stream (dbing, d));
			    fun prw _ (tbing) = (unparse_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string ""),
					    sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					    back  => (by pp::string ";"),
					    pr    => prd,
					    style => uj::HORIZONTAL_ELSE_VERTICAL
					}
					abstract_types
				);
				pp::newline stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string "withtype "),
					    sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					    back  => (by pp::string ""),
					    pr    => prw,
					    style => uj::HORIZONTAL_ELSE_VERTICAL
					}
					with_types
				);
				pp::newline stream;
				unparse_declaration' (body, d);
				pp::end_box stream;
			    };
			};

		    unparse_declaration' (rs::EXCEPTION_DECLARATIONS ebs, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    (   (fn stream =  fn eb =  unparse_named_exception context stream (eb, d - 1)),   ebs   );
			    pp::end_box stream;
			};

		    unparse_declaration' (rs::PACKAGE_DECLARATIONS sbs, d)
			=>
			{   fun pr _ (sbing)
				=
				(unparse_named_package context stream (sbing, d));

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "package "),
				    sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    back  => (by pp::string ";"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				sbs;
			};

		    unparse_declaration' (rs::GENERIC_DECLARATIONS fbs, d)
			=> 
			{   fun f stream generic_naming
				=
				unparse_named_generic context stream (generic_naming, d);


			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("generic package ", "also ", f, fbs);
			    pp::end_box stream;
			};

		    unparse_declaration' (rs::API_DECLARATIONS sigvars, d)
			=> 
			{   fun f stream (rs::NAMED_API { name_symbol=>fname, definition=>def } )
				=>
				{   uj::unparse_symbol  stream  fname;
				    pp::newline stream;
                                    ppsay "=";
				    unparse_api_expression context stream (def, d);
				};

				f stream (rs::SOURCE_CODE_REGION_FOR_NAMED_API (t, r))
                                    =>
                                    f stream t;
			    end;


			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("api ", "also ", f, sigvars);	# Was "api "
			    pp::end_box stream;
			};

		    unparse_declaration' (rs::GENERIC_API_DECLARATIONS sigvars, d)
			=> 
			{   fun pr stream sigv
				=
				unparse_generic_api_naming context stream (sigv, d);

			    pp::begin_horizontal_else_vertical_box stream;

			    uj::unparse_sequence
				stream
				{   sep   => pp::newline,
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				sigvars;

			    pp::end_box stream;
			};

		    unparse_declaration' (rs::LOCAL_DECLARATIONS (inner, outer), d)
			=>
			{   pp::horizontal_else_vertical_box stream .{
				pp::newline stream;  ppsay "with";
                                pp::vertical_box stream .{
				    pp::newline stream;  unparse_declaration'(inner, d - 1);
                                };
				pp::newline stream;  ppsay "do ";
                                pp::vertical_box stream .{
				    pp::newline stream;  unparse_declaration'(outer, d - 1);
	                        };
				pp::newline stream;  ppsay "end;\t\t# with";
			    };
			    pp::newline stream;
			};

		    unparse_declaration' (rs::SEQUENTIAL_DECLARATIONS decs, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    #
			    uj::unparse_sequence
				stream
				{   sep   =>  pp::newline,
				    pr    =>  (fn stream =  fn declaration =  unparse_declaration' (declaration, d)),
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				decs;

			    pp::end_box stream;
			};

		    unparse_declaration' (rs::INCLUDE_DECLARATIONS named_packages, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "use ";

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  pp::break stream { spaces=>1, indent_on_wrap=>0 }),
				    pr    =>  (fn stream =  fn sp =  pp_symbol_list sp),
				    style =>  uj::HORIZONTAL_ELSE_VERTICAL
				}
				named_packages;

			    pp::end_box stream;
			};

		    unparse_declaration' (rs::OVERLOADED_VARIABLE_DECLARATION (symbol, type, explist, extension), d)
		        =>
			{   ppsay "overloaded my ";
		            uj::unparse_symbol stream symbol;
			    ppsay ( extension ?? " += ... " :: " = ... ");
			};

		    unparse_declaration' (rs::FIXITY_DECLARATIONS { fixity, ops }, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    #
			    case fixity
                                #
				fxt::NONFIX => ppsay "nonfix my ";

				fxt::INFIX (i, _)
				 => 
				 {   if (i % 2 == 0)	ppsay "infix my ";
				     else		ppsay "infixr my ";
                                     fi;

				     if (i / 2 > 0)
				         #
					 ppsay (int::to_string (i / 2));
					 ppsay " ";
				     fi;
				 };
			   esac;

			   uj::unparse_sequence
			       stream
			       {   sep   =>  (fn stream =  pp::break stream { spaces=>1, indent_on_wrap=>0 }),
				   pr    =>  uj::unparse_symbol,
				   style =>  uj::HORIZONTAL_ELSE_VERTICAL
			       }
			       ops;

			   pp::end_box stream;
			};

		    unparse_declaration' (rs::SOURCE_CODE_REGION_FOR_DECLARATION (declaration, (s, e)), d)
			=>  
#			case source_opt
#			    #
#			    THE source
#				 =>
#				 {   ppsay "rs::SOURCE_CODE_REGION_FOR_DECLARATION(";
#				     unparse_declaration'(declaration, d); ppsay ", ";
#				     prpos (stream, source, s); ppsay ", ";
#				     prpos (stream, source, e); ppsay ")";
#				 };
#
#			    NULL
#			       =>
			       unparse_declaration' (declaration, d);
#			esac;

		    unparse_declaration' (rs::PRE_COMPILE_CODE string, d)
			=>
			ppsay ("#DO " + string);

                  end;
	      
                  unparse_declaration';
	      }

	also
	fun unparse_named_value (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun unparse_named_value'(_, 0)
                        =>
                        ppsay "<naming>";

		    unparse_named_value' (rs::NAMED_VALUE { pattern, expression, ... }, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    unparse_pattern context stream (pattern, d - 1);
			    pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_expression context stream (expression, d - 1);
			    pp::end_box stream;
			};

		    unparse_named_value' (rs::SOURCE_CODE_REGION_FOR_NAMED_VALUE (named_value, source_code_region), d)
			=>
			unparse_named_value' (named_value, d);
                end;
	    
		unparse_named_value';
	    }

	also
	fun unparse_named_field (context as (dictionary, source_opt)) stream
            =
	    # 2009-02-23 CrT: A quick first-cut solution
	    # duplicated from unparse_named_value:
	    #
	    {   ppsay =  pp::string  stream;
		#
		fun unparse_named_field'(_, 0)
                        =>
                        ppsay "<field>";

		    unparse_named_field' (rs::NAMED_FIELD { name => symbol, type => case_pattern, init }, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    pp_path stream [symbol];
			    pp::end_box stream;
			};

		    unparse_named_field' (rs::SOURCE_CODE_REGION_FOR_NAMED_FIELD (named_field, source_code_region), d)
			=>
			unparse_named_field' (named_field, d);
                end;
	    
		unparse_named_field';
	    }

	also
	fun unparse_named_recursive_values (context as (_, source_opt)) stream
            = 
	    {   ppsay =  pp::string  stream;
		#
		fun unparse_named_recursive_values'(_, 0)=> ppsay "<rec naming>";

		    unparse_named_recursive_values' (rs::NAMED_RECURSIVE_VALUE { variable_symbol, expression, ... }, d)
			=>
			{   pp::begin_wrap_box stream;
			    uj::unparse_symbol stream variable_symbol;
                            pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            unparse_expression context stream (expression, d - 1);
			    pp::end_box stream;
			};

		    unparse_named_recursive_values' (rs::SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (named_recursive_values, source_code_region), d)
			=>
			unparse_named_recursive_values' (named_recursive_values, d);
                end;
	    
		unparse_named_recursive_values';
	    }

	also
	fun unparse_named_sml_function (context as (_, source_opt)) stream head
            = 
	    {   ppsay =  pp::string  stream;


		fun unparse_named_sml_function'(_, 0)
                        =>
                        ppsay "<FunNaming>";

		    unparse_named_sml_function' (rs::NAMED_FUNCTION { pattern_clauses, is_lazy, kind, null_or_type }, d)
			=>
			{
			    case kind
				rs::PLAIN_FUN => ppsay "";
			       rs::METHOD_FUN => ppsay " (method) ";
			      rs::MESSAGE_FUN => ppsay " (message) ";
			    esac;

                            case null_or_type 
				THE type => {   ppsay " : ";
						unparse_type context stream (type, d - 1);
					    };
				NULL => ();
			    esac;

			    uj::ppvlist stream
                              ( head, "  ; ",
			        (fn stream =   fn (cl: rs::Pattern_Clause) =   (unparse_pattern_clause context stream (cl, d))),
			        pattern_clauses
                              );
			};

		    unparse_named_sml_function' (rs::SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (t, r), d)
			=>
			unparse_named_sml_function context stream head (t, d);
                end;
	    
		unparse_named_sml_function';
	    }

	also
	fun unparse_pattern_clause (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;

		fun unparse_pattern_clause' (rs::PATTERN_CLAUSE { patterns, result_type, expression }, d)
                    =
		    {   fun pr _ {   item:		    rs::Case_Pattern,
                                     fixity:		    Null_Or( rs::Symbol ),
                                     source_code_region:    rs::Source_Code_Region
                                 }
                            =
			    case fixity
			        #
			         THE a =>   unparse_pattern context stream (item, d);

				 NULL =>    case item
						#
						rs::PRE_FIXITY_PATTERN p
						    =>
						    {   pp::string stream "(";unparse_pattern context stream (item, d);
							pp::string stream ")";
						    };

						rs::TYPE_CONSTRAINT_PATTERN p
						    =>
						    {   pp::string stream "(";unparse_pattern context stream (item, d);
							pp::string stream ")";
						    };

						rs::AS_PATTERN p
						    =>
						    {   pp::string stream"(";unparse_pattern context stream (item, d);
							pp::string stream ")";
						    };

						rs::OR_PATTERN p
						    =>
						    {   pp::string stream "(";unparse_pattern context stream (item, d);
							pp::string stream ")";
						    };

						_   =>
						    unparse_pattern context stream (item, d);
					    esac;
			    esac;


		    
			pp::begin_wrap_box stream;

			uj::unparse_sequence
			    stream
			    {   sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				pr,
				style => uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    patterns;

			case result_type
			    #			  
			    THE type => {   pp::string stream ":";
					    unparse_type context stream (type, d);
					};

			    NULL => ();
			esac;

			pp::string stream " =";
			pp::break stream { spaces=>1, indent_on_wrap=>0 }; 
			unparse_expression context stream (expression, d);
			pp::end_box stream;

		    }; 

	    
		unparse_pattern_clause';
	    }

	also
	fun unparse_named_lib7function (context as (_, source_opt)) stream head
            = 
	    {   ppsay =  pp::string stream;
		#
		fun unparse_named_lib7function'(_, 0)
                        =>
                        ppsay "<FunNaming>";

		    unparse_named_lib7function' (rs::NADA_NAMED_FUNCTION (clauses, ops), d)
			=>
			uj::ppvlist stream (head, "  | ",
			   (fn stream =
                            fn (cl: rs::Nada_Pattern_Clause) = (unparse_lib7pattern_clause context stream (cl, d))
                           ),
			   clauses);

		    unparse_named_lib7function' (rs::SOURCE_CODE_REGION_FOR_NADA_NAMED_FUNCTION (t, r), d)
			=>
			unparse_named_lib7function context stream head (t, d);
                end;
	    
		unparse_named_lib7function';
	    }

	also
	fun unparse_lib7pattern_clause (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun unparse_lib7pattern_clause' (rs::NADA_PATTERN_CLAUSE { pattern, result_type, expression }, d)
                    =
		    {   fun pr _ (item:   rs::Case_Pattern)
                            =
                            #  XXX BUGGO FIXME:  Need to be more intelligent about paren insertion: 
			    {   pp::string stream "(";
                                unparse_pattern context stream (item, d);
				pp::string stream ")";
                            };

		    
			pp::begin_wrap_box stream;

			uj::unparse_sequence
			    stream
			    {   sep   =>  (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				pr,
				style =>  uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    [ pattern ];         #  XXX BUGGO FIXME this list is always len 1 (obviously) so the logic here can probably be simplified. 


			case result_type
			    #
			    THE type => {   pp::string stream ":";
					    unparse_type context stream (type, d);
					};

			    NULL => ();
			esac;


			pp::string stream " =";
			pp::break stream { spaces=>1, indent_on_wrap=>0 }; 
			unparse_expression context stream (expression, d);
			pp::end_box stream;

		    }; 

	    
		unparse_lib7pattern_clause';
	    }

	also
	fun unparse_named_type (context as (_, source_opt)) stream 
            = 
	    {   ppsay = pp::string stream;

		fun pp_tyvar_list (symbol_list, d)
                    =
		    {   fun pr _ (typevar)
                            =
                            unparse_typevar  context  stream  (typevar, d);
		    
                        uj::unparse_sequence
                            stream
			    {   sep   => (fn stream =  { pp::string stream ",";	# Was "*"
					       pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}),
			        pr,
			        style => uj::HORIZONTAL_ELSE_VERTICAL
                            }
			    symbol_list;
		    };

		fun unparse_named_type'(_, 0)
                        =>
                        ppsay "<t::naming>";

		    unparse_named_type' (rs::NAMED_TYPE { name_symbol, definition, typevars }, d)
			=> 
			{   pp::begin_wrap_box stream;
			    uj::unparse_symbol stream name_symbol;
                            if (list::length typevars > 0)
				pp::string stream "(";
				pp_tyvar_list (typevars, d);
				pp::string stream ")";
			    fi;
			    pp::string stream " =";

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
                            unparse_type context stream (definition, d);
			    pp::end_box stream;
			};

		    unparse_named_type' (rs::SOURCE_CODE_REGION_FOR_NAMED_TYPE (t, r), d)
			=>
			unparse_named_type context stream (t, d);
                end;
	    
		unparse_named_type';
	    }

	also
	fun unparse_union_type (context as (_, source_opt)) stream
            = 
	    {   ppsay = pp::string stream;

# Commented out because apparently unused  -- 2009-08-08 CrT
#		fun pp_tyvar_list (symbol_list, d)
#                    =
#		    {   fun pr _ (typevar)
#                            =
#                            (unparse_typevar context stream (typevar, d));
#		    
#                        uj::unparse_sequence
#                            stream
#			    {   sep   => (fn stream =  { pp::string stream ",";	# Was "*"
#					     pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}),
#			        pr,
#			        style => uj::HORIZONTAL_ELSE_VERTICAL
#                            }
#			    symbol_list;
#		    };

		fun unparse_union_type'(_, 0)
                        =>
                        ppsay "<d::naming>";

		    unparse_union_type' (rs::SUM_TYPE { name_symbol, typevars, right_hand_side, is_lazy }, d)
			=> 
			{   pp::begin_wrap_box stream;

			    uj::unparse_symbol stream name_symbol;
			    pp::string stream " =";

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    unparse_union_type_right_hand_side context stream (right_hand_side, d);

			    pp::end_box stream;
			};

		    unparse_union_type' (rs::SOURCE_CODE_REGION_FOR_UNION_TYPE (t, r), d)
			=>
			unparse_union_type context stream (t, d);
                end;
	    
		unparse_union_type';
	    }

	also
	fun unparse_union_type_right_hand_side (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun unparse_union_type_right_hand_side'(_, 0)
                        =>
                        ppsay "<sumtype_naming_right_hand_side>";

		    unparse_union_type_right_hand_side' (rs::VALCONS const, d)
			=> 
			{   fun pr stream   (symbol: rs::Symbol,   tv: Null_Or(rs::Any_Type))
				=
				case tv
				    #
				    THE a =>    {    uj::unparse_symbol stream symbol;
						     ppsay " ";	# Was " of "
						     unparse_type context stream (a, d);
						};

				    NULL =>   (uj::unparse_symbol stream symbol);
				esac;

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream = { pp::string stream " |";
						            pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                          }
                                             ),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				const;
			};

		    unparse_union_type_right_hand_side' (rs::REPLICAS symlist, d)
			=> 
			uj::unparse_sequence
			    stream
			    {   sep   => (fn stream
                                             =
                                             {   pp::string stream " |";
					         pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                             }
                                         ),
				pr    => (fn stream =  fn symbol =  uj::unparse_symbol stream symbol),
				style => uj::HORIZONTAL_ELSE_VERTICAL
			    }
			    symlist;
                end;
	    
                unparse_union_type_right_hand_side';
	    }

	also
	fun unparse_named_exception (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun unparse_named_exception' (_, 0)
                        =>
                        ppsay "<Eb>";

		    unparse_named_exception' (   rs::NAMED_EXCEPTION {
                                                         exception_symbol => exn,
                                                         exception_type   => etype
                                                     },
                                                     d
                                                 )
			=> 
			case etype
			    #			  
			    THE a =>    {   pp::begin_horizontal_else_vertical_box stream;
					    uj::unparse_symbol stream exn;
					    pp::string stream " =";
					    pp::break stream { spaces=>1, indent_on_wrap=>2 };
					    unparse_type context stream (a, d - 1);
					    pp::end_box stream;
					};

			    NULL =>     {   pp::begin_horizontal_else_vertical_box stream;
					    uj::unparse_symbol stream exn; 
					    pp::end_box stream;
					};
			esac;


		    unparse_named_exception' ( rs::DUPLICATE_NAMED_EXCEPTION { exception_symbol=>exn, equal_to=>edef }, d)
			=> 
			# ASK MACQUEEN IF WE NEED TO PRINT EDEF XXX BUGGO FIXME 
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream exn;
			    pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    pp_symbol_list (edef);
			    pp::end_box stream;
			};

		    unparse_named_exception' (rs::SOURCE_CODE_REGION_FOR_NAMED_EXCEPTION (t, r), d)
			=>
			unparse_named_exception context stream (t, d);
                end;
	    
		unparse_named_exception';
	    }

	also
	fun unparse_named_package (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;

		fun unparse_named_package' (_, 0)
                        =>
                        ppsay "<rs::NAMED_PACKAGE>";

		    unparse_named_package' ( rs::NAMED_PACKAGE { name_symbol=>name, definition=>def, constraint, kind }, d)
			=> 
			{   ppsay case kind
                                      rs::PLAIN_PACKAGE  => "package ";
                                      rs::CLASS_PACKAGE  => "class ";
                                      rs::CLASS2_PACKAGE => "class2 ";
                                  esac;

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream name;

                            unparse_package_cast context stream constraint d;

                            pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            unparse_package_expression context stream (def, d - 1);
			    pp::end_box stream;
			};

		    unparse_named_package' (rs::SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (t, r), d)
			=>
			unparse_named_package context stream (t, d);
                end;
	    
		unparse_named_package';
	    }

	also
	fun unparse_named_generic (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun unparse_named_generic' (_, 0)
                        =>
                        ppsay "<rs::NAMED_GENERIC>";

		    unparse_named_generic' (
                        rs::NAMED_GENERIC {
                            name_symbol => name,
                            definition => rs::GENERIC_DEFINITION { parameters, body, constraint }
                        },
                        d
                    )
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    #
			    uj::unparse_symbol stream name;

			    {   fun pr stream (THE symbol, api_expression)
					=>
					{   ppsay "(";
					    uj::unparse_symbol stream symbol;
					    ppsay " : ";
					    unparse_api_expression context stream (api_expression, d);
					    ppsay ")";
					};

				    pr stream (NULL, api_expression)
					=>
					{   ppsay "(";
					    unparse_api_expression context stream (api_expression, d);
					    ppsay ")";
					};
                                end;

				{   uj::unparse_sequence
					stream
					{   sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					    pr,
					    style => uj::HORIZONTAL_ELSE_VERTICAL
					}
					parameters;



                                    unparse_package_cast  context  stream  constraint  d;


				    pp::nonbreakable_spaces stream 1;

				    ppsay "=";
                                    pp::break stream { spaces=>1, indent_on_wrap=>0 };

				    unparse_package_expression context stream (body, d);};
			    };
			    pp::end_box stream;
			};

		    unparse_named_generic' ( rs::NAMED_GENERIC { name_symbol=>name, definition=>def }, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream name;
			    pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_generic_expression context stream (def, d - 1);
			    pp::end_box stream;
			}; 

		    unparse_named_generic' (rs::SOURCE_CODE_REGION_FOR_NAMED_GENERIC (t, r), d)
			=>
			unparse_named_generic context stream (t, d);
                end;
	    
		unparse_named_generic';
	    }

	also
	fun unparse_generic_api_naming (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun unparse_generic_api_naming'(_, 0)
                        =>
                        ppsay "<rs::NAMED_GENERIC_API>";

		    unparse_generic_api_naming' (rs::NAMED_GENERIC_API { name_symbol=>name, definition=>def }, d)
			=> 
			{   pp::begin_horizontal_else_vertical_box stream;
			    ppsay "funsig ";
                            uj::unparse_symbol stream name;
                            ppsay " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            unparse_generic_api_expression context stream (def, d - 1);
			    pp::end_box stream;
			};

		    unparse_generic_api_naming' (rs::SOURCE_REGION_FOR_NAMED_GENERIC_API (t, r), d)
			=>
			unparse_generic_api_naming context stream (t, d);
                end;
	    
		unparse_generic_api_naming';
	    }

	also
	fun unparse_typevar (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		fun unparse_typevar' (_, 0) => ppsay "<typevar>";
		    unparse_typevar' (rs::TYPEVAR s, d) => (uj::unparse_symbol stream s); 
		    unparse_typevar' (rs::SOURCE_CODE_REGION_FOR_TYPEVAR (t, r), d) => unparse_typevar context stream (t, d);
                end;
	    
		unparse_typevar';
	    }

	also
	fun unparse_type (context as (dictionary, source_opt)) stream
            =			
	    {   ppsay =  pp::string stream;
		#
		fun unparse_type' (_, 0)
                        =>
                        ppsay "<type>";

		    unparse_type' (rs::TYPEVAR_TYPE t, d)
                        =>
                        (unparse_typevar context stream (t, d));

		    unparse_type' (rs::TYPE_TYPE (type, []), d)
			=>
			{   pp::begin_indented_horizontal_else_vertical_box stream (pp::CURSOR_RELATIVE 1);
			    pp_path stream type;
			    pp::end_box stream;
			};

		    unparse_type' (rs::TYPE_TYPE (type, args), d)
			=> 
			{   pp::begin_indented_horizontal_else_vertical_box  stream  (pp::CURSOR_RELATIVE 1);
			    #
			    case type
				#			      
				[type] =>   if (sy::eq (sy::make_type_symbol("->"), type))
						#				         
						case args

						     [dom, ran]
							 =>
							 {   unparse_type' (dom, d - 1);
							     ppsay " ->";
							     pp::break stream { spaces=>1, indent_on_wrap=>2 };
							     unparse_type' (ran, d - 1);
							 };

						     _   =>
							 err::impossible "wrong args for -> type";
						esac;
					    else
						uj::unparse_symbol  stream  type;
						ppsay "(";
						unparse_type_args  (args, d);
						ppsay ")";
					    fi;

				_ => {   pp_path  stream  type;
					 ppsay "(";
                                         unparse_type_args  (args, d);
					 ppsay ")";
				     };
                            esac;

			    pp::end_box stream;
			};

		    unparse_type' (rs::RECORD_TYPE s, d)
			=> 
			{   fun pr stream (symbol: rs::Symbol, tv: rs::Any_Type)
				= 
				{   uj::unparse_symbol stream symbol;
				    ppsay ": ";
				    unparse_type context stream (tv, d);
				};

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "{ "),
				    sep   => (fn stream = { pp::string stream ", ";
						            pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                          }
                                             ),
				    back  => (by pp::string "}"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				s;
			};

		    unparse_type' (rs::TUPLE_TYPE t, d)
			=> 
			{   fun pr _ (tv: rs::Any_Type)
				=
				(unparse_type context stream (tv, d));

			    uj::unparse_closed_sequence 
				stream
				{   front => (by pp::string "("),
                                    sep   => (fn stream =  {   pp::string stream ", ";				# Was " *"
						               pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                           }
                                             ),
				    back  => (by pp::string ")"),
				    pr,
				    style => uj::HORIZONTAL_ELSE_VERTICAL
				}
				t;
			};

		    unparse_type' (rs::SOURCE_CODE_REGION_FOR_TYPE (t, r), d)
			=>
			unparse_type context stream (t, d);
                end 

		also
		fun unparse_type_args ([], d)
                        =>
                        ();

		    unparse_type_args ( [type], d)
			=> 
			{   if (strength type <= 1)
			        #  
				pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 1);
				ppsay "("; 
				unparse_type' (type, d); 
				ppsay ")";
				pp::end_box stream;
			    else 
				unparse_type' (type, d);
			    fi;

			    pp::break stream { spaces => 0,  indent_on_wrap => 0 };
			};

		    unparse_type_args (tys, d)
			=>
			uj::unparse_closed_sequence
			    stream 
			    {   front => by pp::string "(",
				sep   => fn stream =  { pp::string stream ", ";
							pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                      },
				back  => by pp::string ") ",
				style => uj::HORIZONTAL_ELSE_VERTICAL, 
				pr    => fn _ =  fn type =  unparse_type' (type, d)
			    }
			    tys;
                end; 
	    
                unparse_type';
	    };
    };					# package unparse_raw_syntax 
end;					# top-level local 








##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################



## Copyright 2003 by University of Chicago 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
