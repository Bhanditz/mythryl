## prettyprint-raw-syntax.pkg
## Jing Cao and Lukasz Ziarek 

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

# We refer to a literal dump of the raw syntax tree as "prettyprinting".
# We refer to reconstruction of surface syntax from the raw syntax tree as "unparsing".
# Unparsing is good for end-user diagnostics; prettyprinting is good for compiler debugging.
# This is the implementation of our raw syntax prettyprinter.
# For our raw syntax unparser, see  src/lib/compiler/front/typer/print/unparse-raw-syntax.pkg

# 2008-01-08 CrT: This file is a quick clone-and-tweak
#                 conversion of unparse-raw-syntax.pkg.
#
#                 It needs a lot more work to be a full
#                 prettyprinter, starting with doing the
#                 clone-and-convert dance on the unparse_type
#                 and unparse_value packages.



stipulate
    package err =  error_message;			# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package mld =  module_level_declarations;		# module_level_declarations	is from   src/lib/compiler/front/typer-stuff/modules/module-level-declarations.pkg
    package pp  =  prettyprint;				# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package sci =  sourcecode_info;			# sourcecode_info		is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
    package sy  =  symbol;				# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package tc  =  typer_control;			# typer_control			is from   src/lib/compiler/front/typer/basics/typer-control.pkg
    package mtt =  more_type_types;			# more_type_types		is from   src/lib/compiler/front/typer/types/more-type-types.pkg
    package rs  =  raw_syntax;				# raw_syntax			is from   src/lib/compiler/front/parser/raw-syntax/raw-syntax.pkg
    package tpl =  tuples;				# tuples			is from   src/lib/compiler/front/typer-stuff/types/tuples.pkg
    package fxt =  fixity;				# fixity			is from   src/lib/compiler/front/basics/map/fixity.pkg
#   package vac =  variables_and_constructors;		# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package uj  =  unparse_junk;			# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
#   package ut  =  unparse_type;			# unparse_type			is from   src/lib/compiler/front/typer/print/unparse-type.pkg
#   package uv  =  unparse_value;			# unparse_value			is from   src/lib/compiler/front/typer/print/unparse-value.pkg
herein


    package   prettyprint_raw_syntax
    : (weak)  Prettyprint_Raw_Syntax			# Prettyprint_Raw_Syntax	is from   src/lib/compiler/front/typer/print/prettyprint-raw-syntax.api
    {
	internals =  tc::internals;
	#
	lineprint =  REF FALSE;

	fun by f x y
            =
            f y x;

	null_fix = fxt::INFIX (0, 0);
	inf_fix  = fxt::INFIX (1000000, 100000);

	fun stronger_l (fxt::INFIX(_, m), fxt::INFIX (n, _)) => m >= n;
	    stronger_l _ => FALSE;			#  should not matter 
        end;

	fun stronger_r (fxt::INFIX(_, m), fxt::INFIX (n, _)) => n > m;
 	    stronger_r _ => TRUE; 			#  should not matter 
        end;

	fun prpos ( stream:	pp::Stream,
		    source:	sci::Sourcecode_Info,
                    charpos:	Int
                  )
            =
	    if *lineprint
		#
		(sci::filepos  source  charpos)
		    ->
		    (file: String,  line: Int,  pos: Int);

		pp::string stream (int::to_string line);
		pp::string stream ".";
		pp::string stream (int::to_string pos);
	    else
                pp::string stream (int::to_string charpos);
            fi;


	fun bug msg
            =
            err::impossible("unparse_raw_syntax: " + msg);


	arrow_stamp =  mtt::arrow_stamp;


	fun strength type
            =
	    case type
		#              
		rs::TYPEVAR_TYPE(_) =>   1;
		#
		rs::TYPE_TYPE (typ, args)
		    => 
		    case typ
			#
			[typ]
			    =>
			    if (sy::eq (sy::make_type_symbol("->"), typ))   0;
			    else                                               2;
			   fi;

			_   => 2;
		    esac;


		rs::RECORD_TYPE _ => 2;

		rs::TUPLE_TYPE _ => 1;

		_ => 2;
            esac;


	fun checkpat (n, NIL)
                =>
                TRUE;

	    checkpat (n, (symbol, _) ! fields)
                =>
                sy::eq (symbol, tpl::number_to_label n)
                and
                checkpat (n+1, fields);
        end;

	fun checkexp (n, NIL)
                =>
                TRUE;

	    checkexp (n, (symbol, expression) ! fields)
		=>
		sy::eq (symbol, tpl::number_to_label n)
                and
		checkexp (n+1, fields);
        end;

	fun is_tuplepat (rs::RECORD_PATTERN { definition => [_], ...                   } ) =>  FALSE;
	    is_tuplepat (rs::RECORD_PATTERN { definition => defs, is_incomplete => FALSE } ) =>  checkpat (1, defs);
	    is_tuplepat _                                                              =>  FALSE;
        end;

	fun is_tupleexp (rs::RECORD_IN_EXPRESSION [_])      =>   FALSE;
	    is_tupleexp (rs::RECORD_IN_EXPRESSION fields)   =>   checkexp (1, fields);
	    #
	    is_tupleexp (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (a, _))       =>   is_tupleexp a;
	    is_tupleexp _ => FALSE;
        end;

	fun get_fix (dictionary, symbol)
            =
	    find_in_symbolmapstack::find_fixity_by_symbol  (
                dictionary,
                sy::make_fixity_symbol (sy::name symbol)
            );



	fun strip_source_code_region_data (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (a, _))
		=>
		strip_source_code_region_data a;

	    strip_source_code_region_data x
		=>
		x;
        end;



	fun trim     [x] =>  [];
	    trim (a ! b) =>  a ! trim b;
	    trim      [] =>  [];
        end;


	fun pp_path  stream  symbols
            =
	    {   fun pr stream (symbol)
                    =
                    uj::unparse_symbol  stream  symbol;
	    
                uj::unparse_sequence
                    stream
		    {   sep   =>  (fn stream =  (pp::string stream "::")),	# Was "."
		        pr,
		        style =>  uj::INCONSISTENT
                    }
		    symbols;
	    };

	fun prettyprint_pattern (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =   pp::string  stream;
		#
		pp_symbol_list =   pp_path  stream;

		fun prettyprint_pattern' (          rs::WILDCARD_PATTERN,       _)   =>     ppsay           "rs::WILDCARD_PATTERN ";
		    prettyprint_pattern' (       rs::VARIABLE_IN_PATTERN  p,    d)   =>   { ppsay        "rs::VARIABLE_IN_PATTERN ";  pp_symbol_list p; };
		    prettyprint_pattern' (   rs::INT_CONSTANT_IN_PATTERN  i,    _)   =>   { ppsay    "rs::INT_CONSTANT_IN_PATTERN ";  ppsay (multiword_int::to_string i); };
		    prettyprint_pattern' (   rs::UNT_CONSTANT_IN_PATTERN  w,    _)   =>   { ppsay    "rs::UNT_CONSTANT_IN_PATTERN ";  ppsay (multiword_int::to_string w); };
		    prettyprint_pattern' (rs::STRING_CONSTANT_IN_PATTERN  s,    _)   =>   { ppsay "rs::STRING_CONSTANT_IN_PATTERN ";  uj::unparse_mlstring  stream s; };
		    prettyprint_pattern' (  rs::CHAR_CONSTANT_IN_PATTERN  s,    _)   =>   { ppsay   "rs::CHAR_CONSTANT_IN_PATTERN ";   uj::unparse_mlstring' stream s;};

		    prettyprint_pattern' (rs::AS_PATTERN { variable_pattern, expression_pattern }, d)
			=>
			{   pp::begin_horizontal_else_vertical_box stream;
                            ppsay "rs::AS_PATTERN ";
			    prettyprint_pattern'(variable_pattern, d);
                            ppsay " as ";
                            prettyprint_pattern'(expression_pattern, d - 1);
			    pp::end_box stream;
			};

		    prettyprint_pattern' (rs::RECORD_PATTERN { definition => [],   is_incomplete }, _)
			=>
                        {   ppsay "rs::RECORD_PATTERN ";
			    if   is_incomplete      ppsay "{... } (==incomplete)";
			    else                    ppsay "() (==complete)";
                            fi;
                        };

		    prettyprint_pattern' (r as rs::RECORD_PATTERN { definition, is_incomplete }, d)
			=>
                        {
			    ppsay "rs::RECORD_PATTERN ";
			    #
			    if (is_tuplepat r)
				#			        
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "("),
					sep   => (fn stream
						     =
						     {   pp::string stream ", ";
							 pp::break stream { spaces=>0, indent_on_wrap=>0 };
						     }
						 ),
					back  => (by pp::string ")"),
					pr    => (fn _ = fn (symbol, pattern) = prettyprint_pattern' (pattern, d - 1)),
					style => uj::INCONSISTENT
				    }
				    definition;
			    else
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "{ "),
					sep   => (fn stream =  { pp::string stream ", ";
						       pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}),
					back  => (fn stream =  if is_incomplete  pp::string stream ", ... }";
						       else pp::string stream "}";fi),
					pr    => (fn stream =  fn (symbol, pattern) =  {   uj::unparse_symbol stream symbol;
											   pp::string stream "=";
											   prettyprint_pattern' (pattern, d - 1);
										       }
						),
					style => uj::INCONSISTENT
				    }
				    definition;
			    fi;
			};

		    prettyprint_pattern' (rs::LIST_PATTERN NIL, d)
                        =>
                        ppsay "rs::LIST_PATTERN []";

		    prettyprint_pattern' (rs::LIST_PATTERN l, d)
			=>	
			{   ppsay "rs::LIST_PATTERN ";
			    #
                            fun pr _ pattern
                                =
                                prettyprint_pattern' (pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "["),
				    sep   => (fn stream => { pp::string stream ", ";
							   pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}; end 
					    ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::INCONSISTENT
				}
				l;
			};

		    prettyprint_pattern' (rs::TUPLE_PATTERN t, d)
			=> 
			{   ppsay "rs::TUPLE_PATTERN "; 
			    #
                            fun pr _ pattern
                                =
                                prettyprint_pattern'(pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream =  {   pp::string stream ", ";
							       pp::break stream { spaces=>0, indent_on_wrap=>0 };
							   }
					    ),
				    back  => (by pp::string ")"),
				    pr,
				    style => uj::INCONSISTENT
				}
				t;
			};

		    prettyprint_pattern' (rs::PRE_FIXITY_PATTERN fap, d)
			=>
			{   ppsay "rs::PRE_FIXITY_PATTERN ";

                            fun pr _ { item, fixity, source_code_region }
                                =
                                prettyprint_pattern'(item, d - 1);		

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style => uj::INCONSISTENT
				}
				fap;
			}; 

		    prettyprint_pattern' (rs::APPLY_PATTERN { constructor, argument }, d)
			=> 
			{   ppsay "rs::APPLY_PATTERN ";
                            pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_pattern' (constructor, d);
			    ppsay " as ";
			    prettyprint_pattern'(argument, d);
			    pp::end_box stream;
			};

		    prettyprint_pattern' (rs::TYPE_CONSTRAINT_PATTERN { pattern, type_constraint }, d)
			=> 
			{   ppsay "rs::TYPE_CONSTRAINT_PATTERN ";
                            pp::begin_wrap_box stream;
			    prettyprint_pattern' (pattern, d - 1);
			    ppsay " :";
			    pp::break stream { spaces => 1,   indent_on_wrap => 2 };
			    prettyprint_type context stream (type_constraint, d);
			    pp::end_box stream;
			};

		    prettyprint_pattern' (rs::VECTOR_PATTERN NIL, d)
			=>
			ppsay "rs::VECTOR_PATTERN #[]";

		    prettyprint_pattern' (rs::VECTOR_PATTERN v, d)
			=> 
			{   ppsay "rs::VECTOR_PATTERN ";
			    #
                            fun pr _ pattern
                                =
                                prettyprint_pattern'(pattern, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "#["),
				    sep   => (fn stream => { pp::string stream ", ";pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}; end ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::INCONSISTENT
				}
				v;
			 };

		    prettyprint_pattern' (rs::SOURCE_CODE_REGION_FOR_PATTERN (pattern, (s, e)), d)
			=> 
			case source_opt
			    #
			    THE source
				=>
				{
# Commented out to reduce verbosity:
#				      ppsay "SOURCE_CODE_REGION_FOR_PATTERN [";
#				      prpos (stream, source, s); ppsay ", ";
#				      prpos (stream, source, e); ppsay "): ";

				     prettyprint_pattern'(pattern, d);

#                                      ppsay "]";
				};

			    NULL => {   ppsay "SOURCE_CODE_REGION_FOR_PATTERN [] ";
					prettyprint_pattern'(pattern, d);
				    };
			 esac;

		    prettyprint_pattern' (rs::OR_PATTERN orpat, d)
			=>
			{   ppsay "rs::OR_PATTERN ";
			    #
                            fun pr _ pattern
                                =
                                prettyprint_pattern'(pattern, d - 1);		

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream => { pp::break stream { spaces=>1, indent_on_wrap=>0 }; pp::string stream "| ";}; end ),
				    back  => (by pp::string ")"),
				    pr,
				    style => uj::INCONSISTENT
				};
			}
                        orpat;
                end;

	    
                prettyprint_pattern';
	    }


	also
	fun prettyprint_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		fun lparen () = ppsay "("; 
		fun rparen () = ppsay ")";
		#
		fun lpcond atom = if atom  ppsay "(";  fi;      
		fun rpcond atom = if atom  ppsay ")";  fi;

		pp_symbol_list = pp_path stream;

		fun prettyprint_expression' (_, _, 0) => ppsay "<rs::Expression>";
		    prettyprint_expression' (rs::VARIABLE_IN_EXPRESSION   p, _, _) => {   ppsay "rs::VARIABLE_IN_EXPRESSION ";    pp_symbol_list (p); };
		    prettyprint_expression' (rs::IMPLICIT_THUNK_PARAMETER p, _, _) => {   ppsay "rs::IMPLICIT_THUNK_PARAMETER #"; pp_symbol_list (p); };
		    prettyprint_expression' (rs::FN_EXPRESSION NIL, _,          d) =>     ppsay "FN_EXPRESSION NIL";

		    prettyprint_expression' (rs::FN_EXPRESSION rules, _, d)
			=>	
			{   ppsay "rs::FN_EXPRESSION ";
			    #
                            fun pr _ pattern
                                =
                                prettyprint_rule context stream (pattern, d - 1);

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  { pp::string stream "|";pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}),
				    pr,
				    style => uj::INCONSISTENT
				}
				rules;
			};

		    prettyprint_expression' (rs::PRE_FIXITY_EXPRESSION fap, _, d)
			=> 
			{   ppsay "rs::PRE_FIXITY_EXPRESSION[ ";
			    pp::newline stream;
			    ppsay "    ";

                            fun pr _ { item, fixity, source_code_region }
                                =
                                prettyprint_expression'(item, TRUE, d);		

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style => uj::INCONSISTENT
				}
				fap;

			    pp::newline stream;
                            ppsay " ]PRE_FIXITY_EXPRESSION ";
			}; 

		    prettyprint_expression' (e as rs::APPLY_EXPRESSION _, atom, d)
			=>
			{   ppsay "rs::APPLY_EXPRESSION ";
			    #
                            infix0 = fxt::INFIX (0, 0);

			    lpcond atom;
			    prettyprint_app_expression (e, null_fix, null_fix, d);
			    rpcond atom;
			};

		    prettyprint_expression' (rs::OBJECT_FIELD_EXPRESSION { object, field }, atom, d)
			=>
			{   ppsay "rs::OBJECT_FIELD_EXPRESSION ";
                            prettyprint_expression'(object, TRUE, d - 1);
			    ppsay "->";
                            uj::unparse_symbol stream field;
			};

		    prettyprint_expression' (rs::CASE_EXPRESSION { expression, rules }, _, d)
			=> 
			{   ppsay "rs::CASE_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    ppsay "case (";		# Was "(case ";
                            prettyprint_expression'(expression, TRUE, d - 1);
                            pp::newline stream;		# Was newline_indent stream 2;
			    uj::ppvlist stream (
                                ") ",
                                ";",		# Was "   | ",
                                (fn stream =  fn r =  prettyprint_rule context stream (r, d - 1)),
                                trim rules
                            );
			    ppsay "esac;";	# Was rparen();
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::LET_EXPRESSION { declaration, expression }, _, d)
			=>
			{   ppsay "rs::LET_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    ppsay "stipulate ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_declaration context stream (declaration, d - 1); 
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    ppsay "herein ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression'(expression, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    ppsay "end";
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::SEQUENCE_EXPRESSION exps, _, d)
			=>
                        {   ppsay "rs::SEQUENCE_EXPRESSION ";
			    #
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream => { pp::string stream ";";
						  pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}; end ),
				    back  => (by pp::string ")"),
				    pr    => (fn _ => fn expression => prettyprint_expression'(expression, FALSE, d - 1); end; end ),
				    style => uj::INCONSISTENT
				}
				exps;
                        };

		    prettyprint_expression' (   rs::INT_CONSTANT_IN_EXPRESSION   i, _, _)   =>   { ppsay    "rs::INT_CONSTANT_IN_EXPRESSION "; ppsay (multiword_int::to_string i); };
		    prettyprint_expression' (   rs::UNT_CONSTANT_IN_EXPRESSION   w, _, _)   =>   { ppsay "   rs::UNT_CONSTANT_IN_EXPRESSION "; ppsay (multiword_int::to_string w); };
		    prettyprint_expression' ( rs::FLOAT_CONSTANT_IN_EXPRESSION   r, _, _)   =>   { ppsay  "rs::FLOAT_CONSTANT_IN_EXPRESSION "; ppsay r; };
		    prettyprint_expression' (rs::STRING_CONSTANT_IN_EXPRESSION   s, _, _)   =>   { ppsay "rs::STRING_CONSTANT_IN_EXPRESSION ";    uj::unparse_mlstring  stream s; };
		    prettyprint_expression' (  rs::CHAR_CONSTANT_IN_EXPRESSION   s, _, _)   =>   { ppsay   "rs::CHAR_CONSTANT_IN_EPXRESSION "; uj::unparse_mlstring' stream s; };

		    prettyprint_expression'(r as rs::RECORD_IN_EXPRESSION fields, _, d)
			=>
                        {   ppsay "rs::RECORD EXPRESSION ";
			    #
			    if (is_tupleexp r)
				#			        
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "("),
					sep   => (fn stream => { pp::string stream ", ";
							  pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}; end ),
					back  => (by pp::string ")"),
					pr    => (fn _ => fn (_, expression) => prettyprint_expression'(expression, FALSE, d - 1); end; end ),
					style => uj::INCONSISTENT
				    }
				    fields;
			    else
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "{ "),
					sep   => (fn stream => { pp::string stream ", ";
							  pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}; end ),
					back  => (by pp::string "}"),
					pr    => (fn stream = fn (name, expression)
							      =
							      {   uj::unparse_symbol stream name;
								  ppsay "=";
								  prettyprint_expression'(expression, FALSE, d);
							      }
						),
				       style  => uj::INCONSISTENT
				    }
				    fields;
			    fi;
			};

		    prettyprint_expression' (rs::LIST_EXPRESSION p, _, d)
			=> 
			{   ppsay "rs::LIST_EXPRESSION ";
			    #
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "["),
				    sep   => (fn stream => { pp::string stream ", ";
						    pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}; end ),
				    back  => (by pp::string "]"),
				    pr    => (fn stream => fn expression =>
							  (prettyprint_expression'(expression, FALSE, d - 1)); end; end ),
				    style => uj::INCONSISTENT
				}
				p;
			};

		    prettyprint_expression' (rs::TUPLE_EXPRESSION p, _, d)
			=>
			{   ppsay "rs::TUPLE_EXPRESSION ";
			    #
			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "("),
				    sep   => (fn stream => { pp::string stream ", ";
							   pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}; end ),
				    back  => (by pp::string ")"),
				    pr    => (fn stream => fn expression =>
							  (prettyprint_expression'(expression, FALSE, d - 1)); end; end ),
				    style => uj::INCONSISTENT
				}
				p;
			};

		    prettyprint_expression' (rs::RECORD_SELECTOR_EXPRESSION name, atom, d)
			=>
			{   ppsay "rs::RECORD_SELECTOR_EXPRESSION( ";
                            pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
                            uj::unparse_symbol stream name;
			    rpcond (atom);
			    ppsay " )RECORD_SELECTOR_EXPRESSION ";
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::TYPE_CONSTRAINT_EXPRESSION { expression, constraint }, atom, d)
			=> 
			{   ppsay "rs::TYPE_CONSTRAINT_EXPRESSION ";
                            pp::begin_wrap_box stream;
			    lpcond (atom);
			    prettyprint_expression'(expression, FALSE, d); ppsay ":";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    prettyprint_type context stream (constraint, d);
			    rpcond (atom);
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::EXCEPT_EXPRESSION { expression, rules }, atom, d)
			=>
			{   ppsay "rs::EXCEPT_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    lpcond atom;
			    prettyprint_expression'(expression, atom, d - 1);
                            pp::newline stream;
                            ppsay "except ";
			    uj::newline_indent stream 2;
			    uj::ppvlist stream (
                                "  ",
                                "; ",			# Was "| ",
				(fn stream =  fn r =  prettyprint_rule context stream (r, d - 1)),
                                rules
                            );
			    rpcond atom;
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::RAISE_EXPRESSION expression, atom, d)
			=> 
			{   ppsay "rs::RAISE_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    lpcond atom;
			    ppsay "raise exception ";
                            prettyprint_expression'(expression, TRUE, d - 1);
			    rpcond atom;
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::IF_EXPRESSION { test_case, then_case, else_case }, atom, d)
			=>
			{   ppsay "rs::IF_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
			    ppsay "if ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (test_case, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "then ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (then_case, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "else ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (else_case, FALSE, d - 1);
			    pp::end_box stream;
			    rpcond (atom);
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::AND_EXPRESSION (e1, e2), atom, d)
			=>
			{   ppsay "rs::AND_EXPRESSION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    lpcond atom;
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (e1, TRUE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "and ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (e2, TRUE, d - 1);
			    pp::end_box stream;
			    rpcond  atom;
			    pp::end_box stream;
			 };

		    prettyprint_expression' (rs::OR_EXPRESSION (e1, e2), atom, d)
			=>
			{   ppsay "rs::OR_EXPRESSION ";
			    pp::begin_horizontal_else_vertical_box stream;
			    lpcond (atom);
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (e1, TRUE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "or ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression' (e2, TRUE, d - 1);
			    pp::end_box stream;
			    rpcond  atom;
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::WHILE_EXPRESSION { test, expression }, atom, d)
			=>
			{   ppsay "rs::WHILE_EXPRESSION ";
			    pp::begin_horizontal_else_vertical_box stream;
			    ppsay "while ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression'(test, FALSE, d - 1);
			    pp::end_box stream;
			    pp::break stream { spaces=>1, indent_on_wrap=> 0 };
			    ppsay "do ";
			    pp::begin_horizontal_else_vertical_box stream;
			    prettyprint_expression'(expression, FALSE, d - 1);
			    pp::end_box stream;
			    pp::end_box stream;
			};

		    prettyprint_expression' (rs::VECTOR_IN_EXPRESSION NIL, _, d)
			=>
			ppsay "rs::VECTOR_IN_EXPRESSION NIL ";

		    prettyprint_expression' (rs::VECTOR_IN_EXPRESSION exps, _, d)
			=>
			{   ppsay "rs::VECTOR EXPRESSION ";
			    #	
			    fun pr _ expression
				=
				prettyprint_expression'(expression, FALSE, d - 1);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "#["),
				    sep   => (fn stream => { pp::string stream ", ";
						  pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}; end ),
				    back  => (by pp::string "]"),
				    pr,
				    style => uj::INCONSISTENT
				}
				exps;
			};

		    prettyprint_expression' (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (expression, (s, e)), atom, d)
			=>
			case source_opt
			    #
			    THE source
				=>
				{
# Commented out to reduce verbosity:
#				     ppsay "rs::SOURCE_CODE_REGION_FOR_EXPRESSION [ ";
#				     prpos (stream, source, s); ppsay ", ";
#				     prpos (stream, source, e); ppsay "): ";
				     prettyprint_expression'(expression, FALSE, d);
#				     ppsay " ] ";
				};

			    NULL =>
				{
# Commented out to reduce verbosity:
#				     ppsay "rs::SOURCE_CODE_REGION_FOR_EXPRESSION [ ";
				     prettyprint_expression'(expression, atom, d);
#                                    ppsay " ] "; 
				};
			esac;
                   end 

		    also
		    fun prettyprint_app_expression (_, _, _, 0)
			    =>
			    pp::string stream "<expression>";

			prettyprint_app_expression arg
			    =>
			    {   ppsay = pp::string stream;
				#
				fun fixitypp (name, operand, left_fix, right_fix, d)
				    =
				    {   dname = symbol_path::to_string (symbol_path::SYMBOL_PATH name);
					#
					this_fix =  case name
							[id] =>  get_fix (dictionary, id);
							   _ =>  fxt::NONFIX;
						    esac;

					fun pr_non  expression
					    =
					    {   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
						ppsay dname;
						pp::break stream { spaces=>1, indent_on_wrap=>0 };
						prettyprint_expression'(expression, TRUE, d - 1);
						pp::end_box stream;
					    };

					case this_fix
					    #
					    fxt::INFIX _ =>  case (strip_source_code_region_data operand)
							    #						  	
							    rs::RECORD_IN_EXPRESSION [(_, pl), (_, pr)]
								=>
								{   atom =   stronger_l (left_fix, this_fix)
									 or  stronger_r (this_fix, right_fix);

								    my (left, right)
									=
									atom  ??  (null_fix, null_fix)
									      ::  (left_fix, right_fix);

								    {   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
									lpcond atom;
									prettyprint_app_expression (pl, left, this_fix, d - 1);
									pp::break stream { spaces=>1, indent_on_wrap=>0 };
									ppsay dname;
									pp::break stream { spaces=>1, indent_on_wrap=>0 };
									prettyprint_app_expression (pr, this_fix, right, d - 1);
									rpcond atom;
									pp::end_box stream;
								    };
								};

						    e' => pr_non e';
						esac;

					   fxt::NONFIX => pr_non operand;
				       esac;
				    };

				fun apply_print (_, _, _, 0)
					=>
					ppsay "#";

				    apply_print (rs::APPLY_EXPRESSION { function=>operator, argument=>operand }, l, r, d)
					=>
					case (strip_source_code_region_data operator)
					    #
					    rs::VARIABLE_IN_EXPRESSION v
						=>
						{   path = v;
						    #
						    fixitypp (path, operand, l, r, d);
						};

					    operator
						=>
						{   pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
						    prettyprint_expression'(operator, TRUE, d - 1); pp::break stream { spaces=>1, indent_on_wrap=>2 };
						    prettyprint_expression'(operand,  TRUE, d - 1);
						    pp::end_box stream;
						};
					esac;


				    apply_print (rs::SOURCE_CODE_REGION_FOR_EXPRESSION (expression, (s, e)), l, r, d)
					=>
					case source_opt
					    #
					    THE source
						=>
						{
# Commented out to reduce verbosity:
#						    ppsay "SOURCE_CODE_REGION_FOR_EXPRESSION [ ";
#						    prpos (stream, source, s); ppsay ", ";
#						    prpos (stream, source, e); ppsay "): ";
						    prettyprint_expression'(expression, FALSE, d);
#						    ppsay " ] ";

						};

					    NULL => apply_print (expression, l, r, d);
					esac;

				   apply_print (e, _, _, d)
				    =>
				    prettyprint_expression'(e, TRUE, d); end;

				apply_print arg;
			    };
                end;
	    
                fn (expression, depth)
                    =
                    prettyprint_expression' (expression, FALSE, depth);
	    }

	also
	fun prettyprint_rule (context as (dictionary, source_opt)) stream (rs::CASE_RULE { pattern, expression }, d)
            =
	    if (d == 0) 
                pp::string stream "<rs::CASE_RULE>";
	    else
		pp::string stream  "rs::CASE_RULE ";
		pp::begin_horizontal_else_vertical_box stream;
		prettyprint_pattern context stream (pattern, d - 1);
		pp::string stream " =>"; pp::break stream { spaces=>1, indent_on_wrap=>2 };
		prettyprint_expression context stream (expression, d - 1);
		pp::end_box stream;
            fi

	also
	fun prettyprint_package_expression (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun  prettyprint_package_expression'(_, 0)
			 =>
			 ppsay "<package_expression>";

		     prettyprint_package_expression' (rs::PACKAGE_BY_NAME p, d)
			 =>
                         {   ppsay "rs::PACKAGE_BY_NAME ";
			     pp_symbol_list (p);
                         };

		     prettyprint_package_expression' (rs::PACKAGE_DEFINITION (rs::SEQUENTIAL_DECLARATIONS NIL), d)
			 =>
			 {   ppsay "rs::PACKAGE_DEFINITION (rs::SEQUENTIAL_DECLARATIONS_NIL) ";
                             pp::nonbreakable_spaces stream 1;
                             ppsay "end";
                         };

		     prettyprint_package_expression' (rs::PACKAGE_DEFINITION de, d)
			 =>
			 {   
                             pp::newline stream;
			     ppsay "rs::PACKAGE_DEFINITION[";
                             pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
                             pp::newline stream;
                             unparse_junk::newline_indent stream 2;
			     prettyprint_declaration context stream (de, d - 1);
			     pp::end_box stream;
                             pp::newline stream;
			     ppsay "rs::]PACKAGE_DEFINITION";
                             pp::newline stream;
			 };

		     prettyprint_package_expression' (rs::PACKAGE_CAST (stre, constraint), d)
			 =>
			 {   ppsay "rs::PACKAGE_CAST ";
                             pp::begin_wrap_box stream;
			     prettyprint_package_expression' (stre, d - 1);

			     case constraint
			         #
				 rs::NO_PACKAGE_CAST
				     =>
				     ppsay "rs::NO_PACKAGE_CAST ";

				 rs::WEAK_PACKAGE_CAST api_expression
				     => 
				     {   ppsay "rs::WEAK_PACKAGE_CAST :";
					 pp::break stream { spaces=>1, indent_on_wrap=>2 };
					 prettyprint_api_expression context stream (api_expression, d - 1);
				     };

				 rs::PARTIAL_PACKAGE_CAST api_expression
				     => 
				     {   ppsay "rs::PARTIAL_PACKAGE_CAST :";
					 pp::break stream { spaces=>1, indent_on_wrap=>2 };
					 prettyprint_api_expression context stream (api_expression, d - 1);
				     };

				 rs::STRONG_PACKAGE_CAST api_expression
				     => 
				     {   ppsay "rs::STRONG_PACKAGE_CAST :>";
					 pp::break stream { spaces=>1, indent_on_wrap=>2 };
					 prettyprint_api_expression context stream (api_expression, d - 1);
				     };
			     esac;

			     pp::end_box  stream;
			 };

		     prettyprint_package_expression' (rs::CALL_OF_GENERIC (path, str_list), d)
			 => 
			 {   ppsay "rs::CALL_OF_GENERIC ";
			     #
                             fun pr stream (strl, bool)
				 =
				 {   ppsay "("; prettyprint_package_expression context stream (strl, d); ppsay ")";};

			     pp_symbol_list (path);

			     uj::unparse_sequence
				 stream
				 {   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				     pr,
				     style =>  uj::INCONSISTENT
				 }
				 str_list;
			   };	

		     prettyprint_package_expression' (rs::INTERNAL_CALL_OF_GENERIC (path, str_list), d)
			 => 
			 {   ppsay "rs::INTERNAL_CALL_OF_GENERIC ";
			     #
                             fun pr stream (strl, bool)
				 =
				   {   ppsay "(";
                                       prettyprint_package_expression context stream (strl, d);
                                       ppsay ")";
                                   };

			     pp_symbol_list (path);

			     uj::unparse_sequence
				 stream
				 {   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				     pr,
				     style =>  uj::INCONSISTENT
				 }
				 str_list;
			 };	

		     prettyprint_package_expression' (rs::LET_IN_PACKAGE (declaration, body), d)
			 =>
			 {
			     pp::newline stream;
			     ppsay "rs::LET_IN_PACKAGE[ ";
			     pp::newline stream;
                             pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 5);
			     pp::newline stream;
			     ppsay "    ";
                             prettyprint_declaration context stream (declaration, d - 1); 
			     pp::newline stream;
			     pp::end_box stream;
			     pp::newline stream;
			     ppsay ";LET_IN_PACKAGE ";
			     pp::newline stream;
                             pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 5);
			     ppsay "    ";
                             prettyprint_package_expression'(body, d - 1);
                             pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 5);
                             pp::newline stream;
			     pp::end_box stream;
                             pp::newline stream;
			     ppsay " ]LET_IN_PACKAGE ";
			 };

		     prettyprint_package_expression' (rs::SOURCE_CODE_REGION_FOR_PACKAGE (body, (s, e)), d)
			 =>
                         {
# Commented out to reduce verbosity:
#			     ppsay "rs::SOURCE_CODE_REGION_FOR_PACKAGE (...) ";
			     prettyprint_package_expression' (body, d);
                         };
                 end;

	/*	      (case source_opt
			of THE source =>
			   (ppsay "rs::SOURCE_CODE_REGION_FOR_PACKAGE(";
			      prettyprintPackageexpression'(body, d); ppsay ", ";
			      prpos (stream, source, s); ppsay ", ";
			      prpos (stream, source, e); ppsay ")")
			 | NULL => prettyprintPackageexpression'(body, d))
	*/
	    
		prettyprint_package_expression';
	    }

	also
	fun prettyprint_generic_expression (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun prettyprint_generic_expression'(_, 0)
                        =>
                        ppsay "<generic_expression>";

		    prettyprint_generic_expression' (rs::GENERIC_BY_NAME (p, _), d)
                        =>
                        {   ppsay "rs::GENERIC_BY_NAME ";
			    #
                            pp_symbol_list (p);
                        };

		    prettyprint_generic_expression'(rs::LET_IN_GENERIC (declaration, body), d)
			=>
			{   ppsay "rs::LET_IN_GENERIC ";
                            pp::begin_horizontal_else_vertical_box stream;
			    ppsay "stipulate ";
                            prettyprint_declaration context stream (declaration, d - 1); 
			    pp::newline stream;
			    ppsay " herein ";
                            prettyprint_generic_expression'(body, d - 1);
                            pp::newline stream;
			    ppsay "end";
			    pp::end_box stream;
			};

		    prettyprint_generic_expression' (rs::CONSTRAINED_CALL_OF_GENERIC (path, sblist, fsigconst), d)
			=>
			{   ppsay "rs::CONSTRAINED_GENERIC ";

                            fun pr stream (package_expression, _)
				=
				{   ppsay "(";
				    prettyprint_package_expression context stream (package_expression, d);
				    ppsay ")";
				};

			    pp::begin_horizontal_else_vertical_box stream;
			    pp_symbol_list path;

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				sblist;

			    pp::end_box stream;
			};

		    prettyprint_generic_expression' (rs::SOURCE_CODE_REGION_FOR_GENERIC (body, (s, e)), d)
			=>
                        {   ppsay "rs::SOURCE_CODE_REGION_FOR_GENERIC (...) ";
			    #
			    prettyprint_generic_expression' (body, d);
                        };


		    prettyprint_generic_expression' (rs::GENERIC_DEFINITION _, d)
			=>
                        {   ppsay "rs::GENERIC DEFINITION <- NOT LEGAL HERE!! ";
                        };
                end;
	    
		prettyprint_generic_expression';
	    }

	also
	fun prettyprint_where_spec (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;

		fun prettyprint_where_spec'(_, 0)
                        =>
                        ppsay "<WhereSpec>";


		    prettyprint_where_spec' (rs::WHERE_TYPE([],[], type), d)
                        =>
                        {   ppsay "rs::WHERE TYPE ";
			    #
                            prettyprint_type context stream (type, d);
                        };

		    prettyprint_where_spec' (rs::WHERE_TYPE (slist, tvlist, type), d)
			=> 
			{   ppsay "rs::WHERE_TYPE ";
			    #
                            fun pr _ symbol
				=
				uj::unparse_symbol stream symbol;

			    fun pr' _ tyv
				=
				prettyprint_typevar context stream (tyv, d);

			    ppsay "typeX ";

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr    =>  pr',
				    style =>  uj::INCONSISTENT
				}
				tvlist;

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				slist;	 

			    ppsay" =";
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    prettyprint_type context stream (type, d);
			};

		    prettyprint_where_spec' (rs::WHERE_PACKAGE (slist, slist'), d)
			=>
			{   ppsay "rs::WHERE_PACKAGE ";
			    #
                            fun pr _ symbol
				=
				uj::unparse_symbol stream symbol;

			    ppsay "packageZ ";

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				slist;  pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				slist';
			};
                end;
	    
		prettyprint_where_spec';
	    }

	also
	fun prettyprint_api_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;

		fun prettyprint_api_expression'(_, 0)
                        =>
                        ppsay "<api_expression>";

		    prettyprint_api_expression' (rs::API_BY_NAME s, d)
                        =>
                        {   ppsay "rs::API_BY_NAME ";
			    #
                            uj::unparse_symbol  stream  s;
                        }; 

		    prettyprint_api_expression' (rs::API_WITH_WHERE_SPECS (an_api, wherel), d)
			=>
			{   ppsay "rs::API_WITH_WHERE_SPECS ";
                            prettyprint_api_expression' (an_api, d);
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };

			    case an_api
			        #
				rs::API_BY_NAME s
				    =>
				    {   ppsay "rs::API_BY_NAME ";
					#
					uj::ppvlist stream (
					    "where ",
					    "also ",
					    (fn stream =  fn r =  prettyprint_where_spec context stream (r, d - 1)),
					    wherel
					);
				    };

				rs::SOURCE_CODE_REGION_FOR_API (rs::API_BY_NAME s, r)
				    =>
				    {   ppsay "rs::SOURCE_CODE_REGION_FOR_API ";
					#
					uj::ppvlist stream (
					    "where ",
					    "also ",
					    (fn stream =  fn r =  prettyprint_where_spec context stream (r, d - 1)),
					    wherel
					);
				    };
				_
				=>
				{   pp::newline stream;
				    #
				    uj::ppvlist stream (
					"where ",
					"also ",
					(fn stream =  fn r =  prettyprint_where_spec context stream (r, d - 1)),
					wherel
				    );
				};
			    esac;
			};

		    prettyprint_api_expression' (rs::API_DEFINITION [], d)
			=>	
			{   ppsay "rs::API_DEFINITION ";
                            ppsay "api";
			    pp::nonbreakable_spaces stream 1;
			    ppsay"end;";
			};

		    prettyprint_api_expression' (rs::API_DEFINITION specl, d)
			=> 
			{   ppsay "rs::API_DEFINITION ";
			    #
                            fun pr stream speci
                                =
                                prettyprint_specification context stream (speci, d);

			    pp::newline stream; # XXX BUGGO TEST ONLY
			    ppsay "api";

			    pp::begin_vertical_box stream;
			    pp::newline stream;
#			    unparse_junk::newline_indent stream 4;

			    uj::unparse_sequence
				stream
				{   sep   =>  (fn stream =  pp::newline stream),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				specl;

			    pp::end_box stream;

			    pp::newline stream;
			    ppsay "end;";
			};

		    prettyprint_api_expression' (rs::SOURCE_CODE_REGION_FOR_API (m, r), d)
                        =>
                        {   ppsay "rs::SOURCE_CODE_REGION_FOR_API (...) ";
                            prettyprint_api_expression context stream (m, d);
                        };
                end;
	    
		prettyprint_api_expression';
	    }

	also
	fun prettyprint_generic_api_expression (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun prettyprint_generic_api_expression'(_, 0)
                        =>
                        ppsay "<generic_api_expression>";

		    prettyprint_generic_api_expression' (rs::GENERIC_API_BY_NAME s, d)
                        =>
                        {   ppsay "rs::GENERIC_API_BY_NAME ";
			    #
                            uj::unparse_symbol stream s;
                        };

		    prettyprint_generic_api_expression' (rs::GENERIC_API_DEFINITION { parameter, result }, d)
			=>
			{   ppsay "rs::GENERIC_API_DEFINITION ";
			    #
                            fun pr stream (THE symbol, api_expression)
				    =>
				    {   ppsay "(";
                                        uj::unparse_symbol stream symbol;
                                        ppsay ":";
					prettyprint_api_expression context stream (api_expression, d);
					ppsay ")";
				    };

			        pr stream (NULL, api_expression)
				    =>
				    {   ppsay "("; prettyprint_api_expression context stream (api_expression, d);
                                        ppsay ")";
                                    };
                            end;

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  (pp::newline stream)),
				    pr,
				    style => uj::INCONSISTENT
				}
				parameter;

			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    ppsay "=> ";
			    prettyprint_api_expression context stream (result, d);
			};

		    prettyprint_generic_api_expression' (rs::SOURCE_CODE_REGION_FOR_GENERIC_API (m, r), d)
			=>
                        {   ppsay "rs::SOURCE_CODE_REGION_FOR_GENERIC_API (...) ";
			    #
			    prettyprint_generic_api_expression context stream (m, d);
                        };
                end;
	    
		prettyprint_generic_api_expression';
	    }

	also
	fun prettyprint_specification (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;

		fun pp_tyvar_list ([], d)
                        =>
                        ();

		    pp_tyvar_list ( [typevar], d)
			=> 
			{   prettyprint_typevar context stream (typevar, d);
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			};

		    pp_tyvar_list (tyvar_list, d)
			=> 
			{   fun pr _ (typevar)
				=
				(prettyprint_typevar context stream (typevar, d));

			    uj::unparse_closed_sequence
				stream
				{   front => (fn stream => pp::string stream "("; end ),
				    sep   => { pp::string stream ", ";fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ;},
				    back  => { pp::string stream ")";fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ;},
				    pr,
				    style => uj::INCONSISTENT
				}
				tyvar_list;
			};
                end;

		fun prettyprint_specification'(_, 0)
                        =>
                        ppsay "<Specification>";

		    prettyprint_specification' (rs::PACKAGES_IN_API sspo_list, d)
			=>
			{   ppsay "rs::PACKAGES_IN_API ";
			    #
                            fun pr _ (symbol, api_expression, path)
				=
				case path
				    #				  
				    THE p => {   uj::unparse_symbol stream symbol;
						 ppsay " = ";
						 prettyprint_api_expression context stream (api_expression, d);
						 pp::break stream { spaces=>1, indent_on_wrap=>0 };
						 pp_path stream p;
					     };

				    NULL  => {   uj::unparse_symbol stream symbol;
						 ppsay " = ";
						 prettyprint_api_expression context stream (api_expression, d);
					     };
				esac;

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "packageY "),
				    sep   => (fn stream
                                                 =
                                                 {   pp::string stream ", ";
						     pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                 }
                                             ),
				    back  => (by pp::string ""),
				    pr,
				    style => uj::INCONSISTENT
				}
				sspo_list;
			}; 

		    prettyprint_specification' (rs::TYPES_IN_API (stto_list, bool), d)
			=> 
			{   ppsay "rs::TYPES_IN_API ";
			    #
                            fun pr _ (symbol, tyvar_list, tyo)
				=
				case tyo
				    #
				    THE type
					=>
					{   pp_tyvar_list (tyvar_list, d);
					    uj::unparse_symbol stream symbol;
					    ppsay " =  ";
					    prettyprint_type context stream (type, d);
					};

				    NULL
					=>
					{    pp_tyvar_list (tyvar_list, d);
					     uj::unparse_symbol stream symbol;
					};
				esac;


			    uj::unparse_closed_sequence
				stream
				{   front =>  (by pp::string ""),			# Was "type "
				    sep   =>  fn stream =  {   pp::string stream "|";
                                                               pp::newline stream;
                                                           },
				    back  =>  (by pp::string ";"),
				    pr,
				    style =>  uj::INCONSISTENT
				}
				stto_list;
			}; 

		    prettyprint_specification' (rs::GENERICS_IN_API sf_list, d)
			=>
			{   ppsay "rs::GENERICS_IN_API ";
			    #
                            fun pr stream (symbol, generic_api_expression)
				=
				{   uj::unparse_symbol stream symbol;
                                    ppsay " : ";
				    prettyprint_generic_api_expression context stream (generic_api_expression, d - 1);
				}; 

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("generic package ", "also ", pr, sf_list);
			    pp::end_box stream;
			}; 

		    prettyprint_specification' (rs::VALUES_IN_API st_list, d)
			=> 
			{   ppsay "rs::VALUES_IN_API ";
			    #
                            fun pr stream (symbol, type)
				= 
				{   uj::unparse_symbol stream symbol;
                                    ppsay ":   ";
                                    prettyprint_type context stream (type, d);
                                }; 

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream (
                                "",		# Was "my ",
                                "also ",
                                pr, 
                                st_list
                            );
                            ppsay "; ";
			    pp::end_box stream;
			}; 

		    prettyprint_specification' (rs::VALCONS_IN_API { sumtypes, with_types => [] }, d)
			=> 
			{   ppsay "rs::VALCONS_IN_API ";
			    #
                            fun pr stream (dbing)
				=
				(prettyprint_union_type context stream (dbing, d));

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("", "also ", pr, sumtypes);
			    pp::end_box stream;
			}; 

		    prettyprint_specification' (rs::VALCONS_IN_API { sumtypes, with_types }, d)
			=> 
			{   ppsay "rs::VALCONS_IN_API ";
			    #
                            fun prd stream (dbing) = (prettyprint_union_type context stream (dbing, d));
			    fun prw stream (tbing) = (prettyprint_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				uj::ppvlist stream ("", "also ", prd, sumtypes);
				pp::newline stream;
				uj::ppvlist stream ("", "also ", prw, with_types);
				pp::end_box stream;
			    };
			};

		    prettyprint_specification' (rs::EXCEPTIONS_IN_API sto_list, d)
			=> 
			{   ppsay "rs::EXCEPTIONS_IN_API ";
			    #
                            fun pr stream (symbol, tyo)
				=
				case tyo
				    #
				    THE type => {   uj::unparse_symbol stream symbol;
						    ppsay " : ";
						    prettyprint_type context stream (type, d);
						};

				    NULL =>     uj::unparse_symbol stream symbol;
				esac;

			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("exception ", "also ", pr, sto_list);
			    pp::end_box stream;
			}; 

		    prettyprint_specification' (rs::PACKAGE_SHARING_IN_API paths, d)
			=> 
			{   ppsay "rs::PACKAGE_SHARING_IN_API ";
			    #
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("sharing ", " = ", pp_path, paths);
			    pp::end_box stream;
			};

		    prettyprint_specification' (rs::TYPE_SHARING_IN_API paths, d)
			=> 
			{   ppsay "rs::TYPE_SHARING_IN_API ";
			    #
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("sharing ", " = ", pp_path, paths);
			    pp::end_box stream;
			};

		    prettyprint_specification' (rs::IMPORT_IN_API api_expression, d)
			=>
                        {   ppsay "rs::IMPORT_IN_API ";
			    prettyprint_api_expression context stream (api_expression, d);
                        };

		    prettyprint_specification' (rs::SOURCE_CODE_REGION_FOR_API_ELEMENT (m, r), d)
			=>
                        {   ppsay "rs::SOURCE_CODE_REGION_FOR_API_ELEMENT ";
			    prettyprint_specification context stream (m, d);
                        };
                end;
	    
		prettyprint_specification';
	    }

	also
	fun prettyprint_declaration (context as (dictionary, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		pp_symbol_list =  pp_path  stream;

		fun prettyprint_declaration'(_, 0)
                        =>
                        ppsay "<declaration>";

		    prettyprint_declaration' (rs::VALUE_DECLARATIONS (vbs, typevars), d)
			=>
			{
			    pp::newline stream;
			    pp::newline stream;
			    ppsay "rs::VALUE_DECLARATIONS";

                            pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			    uj::ppvlist stream (
                                "    [ ",
                                " ;rs::VALUE_DECLARATIONS ",
                                (fn stream =  fn named_value =  prettyprint_named_value context stream (named_value, d - 1)),
                                vbs
                            );
			    pp::end_box stream;
			    pp::newline stream;
                            ppsay "]rs::VALUE_DECLARATIONS ";
			    pp::newline stream;
			    pp::newline stream;
			};

		    prettyprint_declaration' (rs::FIELD_DECLARATIONS (fields, typevars), d)
			=>
			{   ppsay "rs::FIELD_DECLARATIONS";
			    #
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream (
                                "[ ",
                                " ;rs::FIELD_DECLARATIONS ",
                                (fn stream =  fn named_field =  prettyprint_named_field context stream (named_field, d - 1)),
                                fields
                            );
                            ppsay " ]FIELD_DECLARATIONS ";
			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::RECURSIVE_VALUE_DECLARATIONS (rvbs, typevars), d)
			=> 
			{
			    pp::newline stream;
			    ppsay "rs::RECURSIVE_VALUE_DECLARATIONS";

                            pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist
				stream
				(   "[ ",
				    " ;rs::RECURSIVE_VALUE_DECLARATIONS ",
				    (  fn stream =
				       fn named_recursive_values =
				       prettyprint_named_recursive_values
					   context
					   stream
					   (named_recursive_values, d - 1)
				    ),
				    rvbs
				);

                            ppsay "]rs::RECURSIVE_VALUE_DECLARATIONS ";

			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::FUNCTION_DECLARATIONS (fbs, typevars), d)
			=>
			{
			    pp::newline stream;
			    ppsay "rs::FUNCTION_DECLARATIONS ";
			    pp::newline stream;

                            pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			    pp::newline stream;
			    ppsay "    ";

			    uj::ppvlist'
				stream
				(   "[ ",
				    " ;rs::FUNCTION_DECLARATIONS ",
				    (   fn stream =
					fn str =
					fn fb =
					prettyprint_named_function
					    context
					    stream
					    str
					    (fb, d - 1)
				    ),
				    fbs
				);

			    pp::newline stream;
                            ppsay "]rs::FUNCTION_DECLARATIONS ";

			    pp::end_box  stream;
			};

		    prettyprint_declaration' (rs::NADA_FUNCTION_DECLARATIONS (fbs, typevars), d)
			=>
			{   ppsay "rs::NADA_FUNCTION_DECLARATIONS ";
			    #
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist'
				stream
				(   "fun ",
				    "also ",
				    (   fn stream =
					fn str =
					fn fb =
					prettyprint_named_lib7function
					    context
					    stream
					    str
					    (fb, d - 1)
				    ),
				    fbs
				);

			    pp::end_box  stream;
			};

		    prettyprint_declaration' (rs::TYPE_DECLARATIONS types, d)
			=>
			{   ppsay "rs::TYPE_DECLARATIONS [ ";
			    #
                            fun pr stream (typ)
				=
				(prettyprint_named_type context stream (typ, d));

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string ""),	# Was "type "
				    sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    back  => (by pp::string ";"),
				    pr,
				    style => uj::INCONSISTENT
				}
				types;

                            ppsay " ]rs::TYPE_DECLARATIONS ";
			}; 	

		    prettyprint_declaration' (rs::SUMTYPE_DECLARATIONS { sumtypes, with_types => [] }, d)
			=> 
			{   ppsay "rs::SUMTYPE_DECLARATIONS[ ";
			    #
                            fun prd _ (dbing)
				=
				(prettyprint_union_type context stream (dbing, d));


			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string ""),
				    sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
				    back  => (by pp::string ";"),
				    pr    => prd,
				    style => uj::INCONSISTENT
				}
				sumtypes;

                            ppsay " ]rs::SUMTYPE_DECLARATIONS ";
			};             

		    prettyprint_declaration' (rs::SUMTYPE_DECLARATIONS { sumtypes, with_types }, d)
			=> 
			{   ppsay "rs::SUMTYPE_DECLARATIONS[ ";
			    #
                            fun prd stream dbing = (prettyprint_union_type context stream (dbing, d));
			    fun prw stream tbing = (prettyprint_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				#
				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string ""),
					sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
					back  => (by pp::string ";"),
					pr    => prd,
					style => uj::INCONSISTENT
				    }
				    sumtypes;

				pp::newline stream;

				uj::unparse_closed_sequence
				    stream
				    {   front => (by pp::string "withtype "),
					sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
					back  => (by pp::string ""),
					pr    => prw,
					style => uj::INCONSISTENT
				    }
				    with_types;

                                ppsay " ]rs::SUMTYPE_DECLARATIONS ";

				pp::end_box stream;
			    };
			};

		    prettyprint_declaration' (rs::ABSTRACT_TYPE_DECLARATIONS { abstract_types, with_types => [], body }, d)
			=> 
			{   ppsay "rs::ABSTRACT_TYPE_DECLARATIONS ";
			    #
                            fun prd stream dbing = (prettyprint_union_type context stream (dbing, d));
			    fun prw stream tbing = (prettyprint_named_type     context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string ""),
					    sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
					    back  => (by pp::string ";"),
					    pr    => prd,
					    style => uj::INCONSISTENT
					}
					abstract_types
				);
				pp::newline stream;
				prettyprint_declaration' (body, d);
				pp::end_box stream;
			    };
			};

		    prettyprint_declaration' (rs::ABSTRACT_TYPE_DECLARATIONS { abstract_types, with_types, body }, d)
			=> 
			{   ppsay "rs::ABSTRACT_TYPE_DECLARATIONS ";
			    #
                            fun prd _ (dbing) = (prettyprint_union_type context stream (dbing, d));
			    fun prw _ (tbing) = (prettyprint_named_type context stream (tbing, d));

			    {   pp::begin_horizontal_else_vertical_box stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string ""),
					    sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
					    back  => (by pp::string ";"),
					    pr    => prd,
					    style => uj::INCONSISTENT
					}
					abstract_types
				);
				pp::newline stream;
				(   uj::unparse_closed_sequence
					stream
					{   front => (by pp::string "withtype "),
					    sep   => (fn stream => (pp::break stream { spaces=>1, indent_on_wrap=>0 } ); end ),
					    back  => (by pp::string ""),
					    pr    => prw,
					    style => uj::INCONSISTENT
					}
					with_types
				);
				pp::newline stream;
				prettyprint_declaration' (body, d);
				pp::end_box stream;
			    };
			};

		    prettyprint_declaration' (rs::EXCEPTION_DECLARATIONS ebs, d)
			=>
			{   ppsay "rs::EXCEPTION_DECLARATIONS[ ";
 			    #
                            pp::begin_horizontal_else_vertical_box stream;
			    (   (fn stream =  fn eb =  prettyprint_named_exception context stream (eb, d - 1)),   ebs   );

                            ppsay " ]rs::EXCEPTION_DECLARATIONS ";

			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::PACKAGE_DECLARATIONS sbs, d)
			=>
			{
			    pp::newline stream;
			    pp::newline stream;
			    ppsay "rs::PACKAGE_DECLARATIONS";
			    pp::newline stream;

                            fun pr _ sbing
				=
				prettyprint_named_package context stream (sbing, d);

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "[ "),
				    sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				    back  => (by pp::string ";"),
				    pr,
				    style => uj::INCONSISTENT
				}
				sbs;

			    pp::newline stream;
                            ppsay " ]rs::PACKAGE_DECLARATIONS ";
			};

		    prettyprint_declaration' (rs::GENERIC_DECLARATIONS fbs, d)
			=> 
			{   ppsay "rs::GENERIC_DECLARATIONS ";
			    #
                            fun f stream generic_naming
				=
				prettyprint_named_generic context stream (generic_naming, d);


			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("generic package ", "also ", f, fbs);
			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::API_DECLARATIONS sigvars, d)
			=> 
			{   ppsay "rs::API_DECLARATIONS ";
			    #
                            fun f stream (rs::NAMED_API { name_symbol=>fname, definition=>def } )
				=>
				{   uj::unparse_symbol  stream  fname;
				    pp::newline stream;
                                    ppsay "=";
				    prettyprint_api_expression context stream (def, d);
				};

				f stream (rs::SOURCE_CODE_REGION_FOR_NAMED_API (t, r))
                                    =>
                                    f stream t;
			    end;


			    pp::begin_horizontal_else_vertical_box stream;
			    uj::ppvlist stream ("api ", "also ", f, sigvars);	# Was "api "
			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::GENERIC_API_DECLARATIONS sigvars, d)
			=> 
			{   ppsay "rs::GENERIC_API_DECLARATIONS ";
			    #
                            fun pr stream sigv
				=
				prettyprint_generic_api_naming context stream (sigv, d);

			    pp::begin_horizontal_else_vertical_box stream;

			    uj::unparse_sequence
				stream
				{   sep   => pp::newline,
				    pr,
				    style => uj::CONSISTENT
				}
				sigvars;

			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::LOCAL_DECLARATIONS (inner, outer), d)
			=>
			{   ppsay "rs::LOCAL_DECLARATIONS ";
			    #
                            pp::horizontal_else_vertical_box stream .{
				pp::newline stream;  ppsay "with";
                                pp::vertical_box stream .{
				    pp::newline stream;  prettyprint_declaration'(inner, d - 1);
                                };
				pp::newline stream;  ppsay "do ";
                                pp::vertical_box stream .{
				    pp::newline stream;  prettyprint_declaration'(outer, d - 1);
	                        };
				pp::newline stream;  ppsay "end;\t\t# with";
			    };
			    pp::newline stream;
			};

		    prettyprint_declaration' (rs::SEQUENTIAL_DECLARATIONS decs, d)
			=>
			{
			    pp::newline stream;
                            ppsay "rs::SEQUENTIAL_DECLARATIONS[ ";

                            pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  { pp::newline stream; pp::string stream ";SEQUENTIAL_DECLARATIONS";  pp::break stream { spaces=>0, indent_on_wrap=>0 } ;}),
				    pr    => (fn stream =  fn declaration =  prettyprint_declaration'(declaration, d)),
				    style => uj::CONSISTENT
				}
				decs;

			    pp::end_box stream;
			    pp::newline stream;
                            ppsay "]rs::SEQUENTIAL DECLARATIONS ";
			};

		    prettyprint_declaration' (rs::INCLUDE_DECLARATIONS named_packages, d)
			=> 
			{   ppsay "rs::INCLUDE_DECLARATIONS ";
                            pp::begin_horizontal_else_vertical_box stream;
			    ppsay "use ";

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream =  pp::break stream { spaces=>1, indent_on_wrap=>0 } ),
				    pr    => (fn stream =  fn sp =  pp_symbol_list sp),
				    style => uj::INCONSISTENT
				}
				named_packages;

			    pp::end_box stream;
			};

		    prettyprint_declaration' (rs::OVERLOADED_VARIABLE_DECLARATION (symbol, type, explist, extension), d)
		        =>
		        {   ppsay "rs::OVERLOADED_VARIABLE_DECLARATION ";
                            uj::unparse_symbol stream symbol;
                        };

		    prettyprint_declaration' (rs::FIXITY_DECLARATIONS { fixity, ops }, d)
			=>
			{   ppsay "rs::FIXITY_DECLARATIONS ";
			    #
                            pp::begin_horizontal_else_vertical_box stream;

			    case fixity
                                # 
				fxt::NONFIX => ppsay "fxt::NONFIX ";

				fxt::INFIX (i, _)
				    => 
				    {   if (i % 2 == 0)	  ppsay "fxt::INFIX ";
					else		  ppsay "fxt::INFIXR ";
					fi;

					if (i / 2 > 0)
					    #  
					    ppsay (int::to_string (i / 2));
					    ppsay " ";
					fi;
				    };
			   esac;

			   uj::unparse_sequence
			       stream
			       {   sep   => (fn stream =  pp::break stream { spaces=>1, indent_on_wrap=>0 }),
				   pr    => uj::unparse_symbol,
				   style => uj::INCONSISTENT
			       }
			       ops;

			   pp::end_box stream;
			};

		    prettyprint_declaration' (rs::SOURCE_CODE_REGION_FOR_DECLARATION (declaration, (s, e)), d)
			=>  
			case source_opt
			    #                          
			    THE source
				 =>
				 {
# Commented out to reduce verbosity:
#				     ppsay "rs::SOURCE_CODE_REGION_FOR_DECLARATION [ ";

				     prettyprint_declaration'(declaration, d);

#				     ppsay ", ";
#				     prpos (stream, source, s); ppsay ", ";
#				     prpos (stream, source, e); ppsay " ] ";
				 };

			    NULL => {
# Commented out to reduce verbosity:
#					ppsay "rs::SOURCE_CODE_REGION_FOR_DECLARATION <...> ";
					prettyprint_declaration' (declaration, d);
				    };
			esac;

		    prettyprint_declaration' (rs::PRE_COMPILE_CODE string, d)
			=>
			ppsay ("rs::PRE_COMPILE_CODE \"" + string + "\"");
                  end;
	      
                  prettyprint_declaration';
	      }

	also
	fun prettyprint_named_value (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_named_value' (_, 0)
                        =>
                        ppsay "<naming>";

		    prettyprint_named_value' (rs::NAMED_VALUE { pattern, expression, ... }, d)
			=> 
			{   ppsay "rs::NAMED_VALUE[ ";
                            pp::begin_horizontal_else_vertical_box stream;
			    pp::newline stream;
			    prettyprint_pattern context stream (pattern, d - 1);
			    pp::end_box stream;
			    pp::newline stream;
			    pp::string stream " = (NAMED_VALUE)";
                            pp::begin_horizontal_else_vertical_box stream;
			    pp::newline stream;
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    prettyprint_expression context stream (expression, d - 1);
			    pp::end_box stream;
			    pp::newline stream;
			    ppsay "]rs::NAMED_VALUE";
			};

		    prettyprint_named_value' (rs::SOURCE_CODE_REGION_FOR_NAMED_VALUE (named_value, source_code_region), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_VALUE ";
			    prettyprint_named_value' (named_value, d);
                        };
                end;
	    
		prettyprint_named_value';
	    }

	also
	fun prettyprint_named_field (context as (dictionary, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_named_field'(_, 0)
                        =>
                        ppsay "<field>";

		    prettyprint_named_field' (rs::NAMED_FIELD { name, type, init }, d)
			=> 
			{   ppsay "rs::NAMED_FIELD[";
                            pp::begin_horizontal_else_vertical_box stream;
			    pp::newline stream;
                            pp_path stream [name];
			    pp::end_box stream;
			    pp::newline stream;
                            ppsay " : (rs::NAMED_FIELD)";
			    pp::newline stream;
                            pp::begin_horizontal_else_vertical_box stream;
			    pp::newline stream;
			    prettyprint_type context stream (type, d);
			    pp::end_box stream;
			    pp::newline stream;
			    ppsay "]rs::NAMED_FIELD";
			    pp::newline stream;
			};

		    prettyprint_named_field' (rs::SOURCE_CODE_REGION_FOR_NAMED_FIELD (named_field, source_code_region), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_FIELD ";
			    prettyprint_named_field' (named_field, d);
                        };
                end;
	    
		prettyprint_named_field';
	    }

	also
	fun prettyprint_named_recursive_values (context as (_, source_opt)) stream
            = 
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_named_recursive_values'(_, 0)=> ppsay "<rec naming>";

		    prettyprint_named_recursive_values' (rs::NAMED_RECURSIVE_VALUE { variable_symbol, expression, ... }, d)
			=>
			{   pp::begin_wrap_box stream;
			    uj::unparse_symbol stream variable_symbol;
                            pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            prettyprint_expression context stream (expression, d - 1);
			    pp::end_box stream;
			};

		    prettyprint_named_recursive_values' (rs::SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE (named_recursive_values, source_code_region), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_RECURSIVELY_NAMED_VALUE ";
			    prettyprint_named_recursive_values' (named_recursive_values, d);
                        };
                end;
	    
		prettyprint_named_recursive_values';
	    }

	also
	fun prettyprint_named_function (context as (_, source_opt)) stream head
            = 
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_named_function'(_, 0)
                        =>
                        ppsay "<NAMED_FUNCTION>";

		    prettyprint_named_function'(rs::NAMED_FUNCTION { pattern_clauses, is_lazy, kind, null_or_type }, d)
			=>
                        {
                            case kind
				#
			        rs::PLAIN_FUN => ppsay "rs::NAMED_FUNCTION[ ";
			       rs::METHOD_FUN => ppsay "rs::NAMED_FUNCTION[ (method) ";
			      rs::MESSAGE_FUN => ppsay "rs::NAMED_FUNCTION[ (message) ";
                            esac;

			    pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			    pp::newline stream;

                            case null_or_type
				#
				THE anytype =>  {   prettyprint_type context stream (anytype, d - 1);
						    pp::newline stream;
					        };
				NULL => ();
                            esac;

			    uj::ppvlist stream
                              ( head, "  | ",
			        (fn stream =  fn (cl: rs::Pattern_Clause) =  (prettyprint_pattern_clause context stream (cl, d))),
			        pattern_clauses
                              );

			    pp::end_box stream;
			    pp::newline stream;
                            ppsay "]rs::NAMED_FUNCTION";
			    pp::newline stream;
                        };

		    prettyprint_named_function' (rs::SOURCE_CODE_REGION_FOR_NAMED_FUNCTION (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_FUNCTION ";
			    prettyprint_named_function context stream head (t, d);
                        };
                end;
	    
		prettyprint_named_function';
	    }

	also
	fun prettyprint_pattern_clause (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_pattern_clause' (rs::PATTERN_CLAUSE { patterns, result_type, expression }, d)
                    =
		    {   ppsay "rs::PATTERN_CLAUSE[ ";
			pp::newline stream;
			pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			pp::newline stream;

                        fun pr _ {   item:			rs::Case_Pattern,
                                     fixity:			Null_Or( rs::Symbol ),
                                     source_code_region:	rs::Source_Code_Region
                                 }
                            =
			    case fixity
			        #
				THE a =>  prettyprint_pattern context stream (item, d);

				NULL => case item
					    #
					    rs::PRE_FIXITY_PATTERN p
						=>
						{   ppsay "rs::PRE_FIXITY_PATTERN ";
						    pp::string stream "(";prettyprint_pattern context stream (item, d);
						    pp::string stream ")";
						};

					    rs::TYPE_CONSTRAINT_PATTERN p
						=>
						{   ppsay "rs::TYPE_CONSTRAINT_PATTERN ";
						    pp::string stream "(";prettyprint_pattern context stream (item, d);
						    pp::string stream ")";
						};

					    rs::AS_PATTERN p
						=>
						{   ppsay "rs::AS_PATTERN ";
						    pp::string stream"(";prettyprint_pattern context stream (item, d);
						    pp::string stream ")";
						};

					    rs::OR_PATTERN p
						=>
						{   ppsay "rs::OR_PATTERN ";
						    pp::string stream "(";prettyprint_pattern context stream (item, d);
						    pp::string stream ")";
						};

					    _   =>
						prettyprint_pattern context stream (item, d);
					esac;
			    esac;


		    
			pp::end_box stream;
			pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			pp::newline stream;

			uj::unparse_sequence
			    stream
			    {   sep   => (fn stream =  (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				pr,
				style => uj::INCONSISTENT
			    }
			    patterns;

			case result_type
			    #			  
			    THE type
				=>
				{   pp::string stream ":";
				   prettyprint_type context stream (type, d);
				};

			    NULL => ();
			esac;

			pp::newline stream;
			pp::end_box stream;
			pp::newline stream;
			pp::string stream "= (PATTERN_CLAUSE) ";
			pp::begin_indented_vertical_box stream (pp::BOX_RELATIVE 4);
			pp::newline stream;
			pp::break stream { spaces=>1, indent_on_wrap=>0 }; 
			prettyprint_expression context stream (expression, d);
			pp::newline stream;
		        ppsay "]PATTERN_CLAUSE";
			pp::newline stream;
			pp::end_box stream;
			pp::newline stream;
		    }; 

		prettyprint_pattern_clause';
	    }

	also
	fun prettyprint_named_lib7function (context as (_, source_opt)) stream head
            = 
	    {   ppsay =  pp::string stream;

		fun prettyprint_named_lib7function'(_, 0)
                        =>
                        ppsay "<rs::NADA_NAMED_FUNCTION>";

		    prettyprint_named_lib7function' (rs::NADA_NAMED_FUNCTION (clauses, ops), d)
			=>
                        {   ppsay "rs::NADA_NAMED_FUNCTION ";
			    #
			    uj::ppvlist stream ( head, "  | ",
					     (fn stream = fn (cl: rs::Nada_Pattern_Clause) = (prettyprint_lib7pattern_clause context stream (cl, d))),
					     clauses
					   );
                        };

		    prettyprint_named_lib7function' (rs::SOURCE_CODE_REGION_FOR_NADA_NAMED_FUNCTION (t, r), d)
			=>
			{   ppsay "rs::SOURCE_CODE_REGION_FOR_NADA_NAMED_FUNCTION ";
			    #
			    prettyprint_named_lib7function context stream head (t, d);
                        };
                end;
	    
		prettyprint_named_lib7function';
	    }

	also
	fun prettyprint_lib7pattern_clause (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun prettyprint_lib7pattern_clause' (rs::NADA_PATTERN_CLAUSE { pattern, result_type, expression }, d)
                    =
		    {   ppsay "rs::NADA_PATTERN_CLAUSE ";
			#
                        fun pr _ (item:   rs::Case_Pattern)
                            =
                            #  XXX BUGGO FIXME:  Need to be more intelligent about paren insertion: 
			    {   pp::string stream "(";
                                prettyprint_pattern context stream (item, d);
				pp::string stream ")";
                            };

		    
			pp::begin_wrap_box stream;

			uj::unparse_sequence
			    stream
			    {   sep   =>  (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
				pr,
				style =>  uj::INCONSISTENT
			    }
			    [ pattern ];         #  XXX BUGGO FIXME this list is always len 1 (obviously) so the logic here can probably be simplified. 


			case result_type
			    # 
			    THE type
				=>
				{   pp::string stream ":";
				    prettyprint_type context stream (type, d);
				};

			    NULL => ();
			esac;


			pp::string stream " =";
			pp::break stream { spaces=>1, indent_on_wrap=>0 }; 
			prettyprint_expression context stream (expression, d);
			pp::end_box stream;

		    }; 

	    
		prettyprint_lib7pattern_clause';
	    }

	also
	fun prettyprint_named_type (context as (_, source_opt)) stream 
            = 
	    {   ppsay = pp::string stream;
		#
		fun pp_tyvar_list (symbol_list, d)
                    =
		    {   fun pr _ (typevar)
                            =
                            prettyprint_typevar  context  stream  (typevar, d);
		    
                        uj::unparse_sequence
                            stream
			    {   sep   => (fn stream =  { pp::string stream ",";	# Was "*"
					       pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}),
			        pr,
			        style => uj::INCONSISTENT
                            }
			    symbol_list;
		    };

		fun prettyprint_named_type'(_, 0)
                        =>
                        ppsay "<t::naming>";

		    prettyprint_named_type' (rs::NAMED_TYPE { name_symbol, definition, typevars }, d)
			=> 
			{   ppsay "rs::NAMED_TYPE( ";
                            pp::begin_wrap_box stream;
			    uj::unparse_symbol stream  name_symbol;
                            ppsay " ";
			    pp_tyvar_list (typevars, d);
                            pp::string stream " = ";
			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
                            prettyprint_type context stream (definition, d);
			    pp::end_box stream;
                            ppsay " )rs::NAMED_TYPE ";
			};

		    prettyprint_named_type' (rs::SOURCE_CODE_REGION_FOR_NAMED_TYPE (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_TYPE ";
			    prettyprint_named_type context stream (t, d);
                        };
                end;
	    
		prettyprint_named_type';
	    }

	also
	fun prettyprint_union_type (context as (_, source_opt)) stream
            = 
	    {   ppsay = pp::string stream;
		#
		fun pp_tyvar_list (symbol_list, d)
                    =
		    {   fun pr _ (typevar)
                            =
                            (prettyprint_typevar context stream (typevar, d));
		    
                        uj::unparse_sequence
                            stream
			    {   sep   => (fn stream =  { pp::string stream ",";	# Was "*"
					     pp::break stream { spaces=>1, indent_on_wrap=>0 } ;}),
			        pr,
			        style => uj::INCONSISTENT
                            }
			    symbol_list;
		    };

		fun prettyprint_union_type'(_, 0)
                        =>
                        ppsay "<rs::SUM_TYPE>";

		    prettyprint_union_type' (rs::SUM_TYPE { name_symbol, typevars, right_hand_side, is_lazy }, d)
			=> 
			{   ppsay "rs::SUM_TYPE ";
			    #
                            pp::begin_wrap_box stream;

			    uj::unparse_symbol stream  name_symbol;
			    pp::string stream " =";

			    pp::break stream { spaces=>1, indent_on_wrap=>0 };
			    prettyprint_union_type_right_hand_side context stream (right_hand_side, d);

			    pp::end_box stream;
			};

		    prettyprint_union_type' (rs::SOURCE_CODE_REGION_FOR_UNION_TYPE (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_UNION_TYPE ";
			    #
			    prettyprint_union_type context stream (t, d);
                        };
                end;
	    
		prettyprint_union_type';
	    }

	also
	fun prettyprint_union_type_right_hand_side (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string stream;
		#
		fun prettyprint_union_type_right_hand_side'(_, 0)
                        =>
                        ppsay "<rs::VALCONS>";

		    prettyprint_union_type_right_hand_side' (rs::VALCONS const, d)
			=> 
			{   ppsay "rs::VALCONS ";
			    #
                            fun pr  stream  (symbol: rs::Symbol,  tv: Null_Or(rs::Any_Type))
				=
				case tv
				    #  
				    THE a =>    {   uj::unparse_symbol stream symbol;
						    ppsay" ";	# Was " of "
						    prettyprint_type context stream (a, d);
						};

				    NULL  =>  (uj::unparse_symbol stream symbol);
				esac;

			    uj::unparse_sequence
				stream
				{   sep   => (fn stream = {   pp::string stream " |";
						              pp::break stream { spaces=>1, indent_on_wrap=>0 } ;
                                                          }
                                             ),
				    pr,
				    style => uj::INCONSISTENT
				}
				const;
			};

		    prettyprint_union_type_right_hand_side' (rs::REPLICAS symlist, d)
			=> 
                        {   ppsay "rs::REPLICAS ";
			    #
			    uj::unparse_sequence
				stream
				{   sep   => (fn stream
						 =
						 {   pp::string stream " |";
						     pp::break stream { spaces=>1, indent_on_wrap=>0 };
						 }
					     ),
				    pr    => (fn stream =  fn symbol =  uj::unparse_symbol stream symbol),
				    style => uj::INCONSISTENT
				}
				symlist;
                        };
                end;
	    
                prettyprint_union_type_right_hand_side';
	    }

	also
	fun prettyprint_named_exception (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		pp_symbol_list = pp_path stream;

		fun prettyprint_named_exception'(_, 0)
                        =>
                        ppsay "<Eb>";

		    prettyprint_named_exception' (   rs::NAMED_EXCEPTION {
                                                         exception_symbol => exn,
                                                         exception_type   => etype
                                                     },
                                                     d
                                                 )
			=> 
                        {   ppsay "rs::EXCEPTION NAMING ";
			    #
			    case etype
			        #
				THE a =>    {   pp::begin_horizontal_else_vertical_box stream;
						uj::unparse_symbol stream exn;
						pp::string stream " =";
						pp::break stream { spaces=>1, indent_on_wrap=>2 };
						prettyprint_type context stream (a, d - 1);
						pp::end_box stream;
					    };

				NULL =>     {   pp::begin_horizontal_else_vertical_box stream;
						uj::unparse_symbol stream exn; 
						pp::end_box stream;
					    };
			    esac;
			};

		    prettyprint_named_exception' (rs::DUPLICATE_NAMED_EXCEPTION { exception_symbol=>exn, equal_to=>edef }, d)
			=> 
			# ASK MACQUEEN IF WE NEED TO PRINT EDEF XXX BUGGO FIXME 
			{   ppsay "rs::DUPLICATE_NAMED_EXCEPTION ";
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream exn;
			    pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    pp_symbol_list (edef);
			    pp::end_box stream;
			};

		    prettyprint_named_exception' (rs::SOURCE_CODE_REGION_FOR_NAMED_EXCEPTION (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_EXCEPTION ";
			    prettyprint_named_exception context stream (t, d);
                        };
                end;
	    
		prettyprint_named_exception';
	    }

	also
	fun prettyprint_named_package (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		fun prettyprint_named_package' (_, 0)
                        =>
                        ppsay "<rs::NAMED_PACKAGE>";

		    prettyprint_named_package' (rs::NAMED_PACKAGE { name_symbol=>name, definition=>def, constraint, kind }, d)
			=> 
			{   ppsay "rs::NAMED_PACKAGE ";
			    #
			    case kind
				rs::PLAIN_PACKAGE  =>  ();
				rs::CLASS_PACKAGE  =>  ppsay " (class) ";
				rs::CLASS2_PACKAGE =>  ppsay " (class2) ";
			    esac;

                            pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream name;

                            case constraint
				rs::NO_PACKAGE_CAST => ();
				rs::WEAK_PACKAGE_CAST    api_expression => { pp::string stream " : (weak) ";    prettyprint_api_expression context stream (api_expression, d); };
				rs::STRONG_PACKAGE_CAST  api_expression => { pp::string stream " : ";           prettyprint_api_expression context stream (api_expression, d); };
				rs::PARTIAL_PACKAGE_CAST api_expression => { pp::string stream " : (partial) "; prettyprint_api_expression context stream (api_expression, d); };
                            esac; 

                            pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            prettyprint_package_expression context stream (def, d - 1);
			    pp::end_box stream;
			};

		    prettyprint_named_package' (rs::SOURCE_CODE_REGION_FOR_NAMED_PACKAGE (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_PACKAGE ";
			    prettyprint_named_package context stream (t, d);
                        };
                end;
	    
		prettyprint_named_package';
	    }

	also
	fun prettyprint_named_generic (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;
		#
		fun prettyprint_named_generic' (_, 0)
                        =>
                        ppsay "<rs::NAMED_GENERIC>";

		    prettyprint_named_generic' (
                        rs::NAMED_GENERIC {
                            name_symbol =>  name,
                            definition  =>  rs::GENERIC_DEFINITION { parameters, body, constraint }
                        },
                        d
                    )
			=>
			{   ppsay "rs::NAMED_GENERIC ";
			    #
                            pp::begin_horizontal_else_vertical_box stream;

			    uj::unparse_symbol  stream  name;

			    {   fun pr stream (THE symbol, api_expression)
					=>
					{   ppsay "(";
					    uj::unparse_symbol stream symbol;
					    ppsay " : ";
					    prettyprint_api_expression context stream (api_expression, d);
					    ppsay ")";
					};

				    pr stream (NULL, api_expression)
					=>
					{   ppsay "(";
					    prettyprint_api_expression context stream (api_expression, d);
					    ppsay ")";
					};
                                end;

				{   uj::unparse_sequence
					stream
					{   sep   => (fn stream = (pp::break stream { spaces=>1, indent_on_wrap=>0 } )),
					    pr,
					    style => uj::INCONSISTENT
					}
					parameters;

				    case constraint
				        #
					rs::NO_PACKAGE_CAST
					    =>
					    ppsay "rs::NO_PACKAGE_CAST ";

					rs::WEAK_PACKAGE_CAST api_expression
					    => 
					    {   ppsay "rs::WEAK_PACKAGE_CAST: ";
						pp::break stream { spaces=>1, indent_on_wrap=>2 };
						prettyprint_api_expression context stream (api_expression, d);
					    };

					rs::PARTIAL_PACKAGE_CAST api_expression
					    => 
					    {   ppsay "rs::PARTIAL_PACKAGE_CAST: ";
						pp::break stream { spaces=>1, indent_on_wrap=>2 };
						prettyprint_api_expression context stream (api_expression, d);
					    };

					rs::STRONG_PACKAGE_CAST (api_expression)
					    => 
					    {   ppsay "rs::STRONG_PACKAGE_CAST: ";
						pp::break stream { spaces=>1, indent_on_wrap=>2 };
						prettyprint_api_expression context stream (api_expression, d);
					    };
                                    esac;

				    pp::nonbreakable_spaces stream 1;

				    ppsay "=";
                                    pp::break stream { spaces=>1, indent_on_wrap=>0 };

				    prettyprint_package_expression context stream (body, d);};
			    };
			    pp::end_box stream;
			};

		    prettyprint_named_generic' (rs::NAMED_GENERIC { name_symbol=>name, definition=>def }, d)
			=>
			{   ppsay "rs::NAMED_GENERIC ";
                            pp::begin_horizontal_else_vertical_box stream;
			    uj::unparse_symbol stream name;
			    pp::string stream " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
			    prettyprint_generic_expression context stream (def, d - 1);
			    pp::end_box stream;
			}; 

		    prettyprint_named_generic' (rs::SOURCE_CODE_REGION_FOR_NAMED_GENERIC (t, r), d)
			=>
                        {   ppsay "rs::SOURCE_CODE_REGION_FOR_NAMED_GENERIC ";
			    prettyprint_named_generic context stream (t, d);
                        };
                end;
	    
		prettyprint_named_generic';
	    }

	also
	fun prettyprint_generic_api_naming (context as (_, source_opt)) stream
            =
	    {   ppsay =  pp::string  stream;

		fun prettyprint_generic_api_naming'(_, 0)
                        =>
                        ppsay "<NAMED_GENERIC_API>";

		    prettyprint_generic_api_naming' (rs::NAMED_GENERIC_API { name_symbol=>name, definition=>def }, d)
			=> 
			{   ppsay "rs::NAMED_GENERIC_API ";
                            pp::begin_horizontal_else_vertical_box stream;
			    ppsay "funsig ";
                            uj::unparse_symbol stream name;
                            ppsay " =";
			    pp::break stream { spaces=>1, indent_on_wrap=>2 };
                            prettyprint_generic_api_expression context stream (def, d - 1);
			    pp::end_box stream;
			};

		    prettyprint_generic_api_naming' (rs::SOURCE_REGION_FOR_NAMED_GENERIC_API (t, r), d)
			=>
                        {   ppsay "rs::SOURCE_REGION_FOR_NAMED_GENERIC_API ";
			    #
			    prettyprint_generic_api_naming context stream (t, d);
                        };
                end;
	    
		prettyprint_generic_api_naming';
	    }

	also
	fun prettyprint_typevar (context as (_, source_opt)) stream
            =
	    {   ppsay = pp::string stream;
		#
		fun prettyprint_typevar' (_, 0)
                        =>
                        ppsay "<typevar>";

		    prettyprint_typevar' (rs::TYPEVAR s, d)
                        =>
                        {   ppsay "rs::TYPEVAR( ";
                            uj::unparse_symbol stream s;
                            ppsay ")rs::TYPEVAR;";
                        };

		    prettyprint_typevar' (rs::SOURCE_CODE_REGION_FOR_TYPEVAR (t, r), d)
                        =>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_TYPEVAR ";
                            prettyprint_typevar context stream (t, d);
                        };
                end;
	    
		prettyprint_typevar';
	    }

	also
	fun prettyprint_type (context as (dictionary, source_opt)) stream
            =			
	    {   ppsay =  pp::string stream;

		fun prettyprint_type' (_, 0)
                        =>
                        ppsay "<type>";

		    prettyprint_type' (rs::TYPEVAR_TYPE t, d)
                        =>
                        {   ppsay "rs::TYPEVAR_TYPE( ";
                            prettyprint_typevar context stream (t, d);
                            ppsay ")rs::TYPEVAR_TYPE ";
                        };

		    prettyprint_type' (rs::TYPE_TYPE (typ, []), d)
			=>
			{   ppsay "rs::TYPE_TYPE( ";
			    pp::begin_indented_horizontal_else_vertical_box stream (pp::CURSOR_RELATIVE 1);
			    pp_path stream typ;
			    pp::end_box stream;
                            ppsay ")rs::TYPE_TYPE ";
			};

		    prettyprint_type' (rs::TYPE_TYPE (typ, args), d)
			=> 
			{   ppsay "rs::TYPE_TYPE( ";
			    #
			    pp::begin_indented_horizontal_else_vertical_box  stream  (pp::CURSOR_RELATIVE 1);

			    case typ
				#			      
				[typ]
				    =>
				    if (sy::eq (sy::make_type_symbol("->"), typ))
					#				         
					case args
					    #
					    [dom, ran]
						=>
						{   prettyprint_type' (dom, d - 1);
						    ppsay " ->";
						    pp::break stream { spaces=>1, indent_on_wrap=>2 };
						    prettyprint_type' (ran, d - 1);
						};

					    _   =>
						err::impossible "wrong args for -> type";
					esac;

				    else
					uj::unparse_symbol  stream  typ;
					ppsay " ";
					prettyprint_type_args  (args, d);
				    fi;

				_ => {   pp_path  stream  typ;
                                         ppsay " ";
					 prettyprint_type_args  (args, d);
				     };
                            esac;

			    pp::end_box stream;
                            ppsay ")rs::TYPE_TYPE ";
			};

		    prettyprint_type' (rs::RECORD_TYPE s, d)
			=> 
			{   ppsay "rs::RECORD_TYPE ";
 
                            fun pr  stream  (symbol: rs::Symbol,  tv: rs::Any_Type)
				= 
				{   uj::unparse_symbol stream symbol;
				    ppsay ":";
				    prettyprint_type context stream (tv, d);
				};

			    uj::unparse_closed_sequence
				stream
				{   front => (by pp::string "{ "),
				    sep   => (fn stream = {   pp::string stream ", ";
						              pp::break stream { spaces=>1, indent_on_wrap=>0 } ;
                                                          }
                                             ),
				    back  => (by pp::string "}"),
				    pr,
				    style => uj::INCONSISTENT
				}
				s;
			};

		    prettyprint_type' (rs::TUPLE_TYPE t, d)
			=> 
			{   ppsay "rs::TUPLE_TYPE ";

                            fun pr _ (tv: rs::Any_Type)
				=
				(prettyprint_type context stream (tv, d));

			    uj::unparse_sequence 
				stream
				{   sep   => (fn stream =  {   pp::string stream ", ";				# Was " *"
						               pp::break stream { spaces=>1, indent_on_wrap=>0 };
                                                           }
                                             ),
				    pr,
				    style => uj::INCONSISTENT
				}
				t;
			};

		    prettyprint_type' (rs::SOURCE_CODE_REGION_FOR_TYPE (t, r), d)
			=>
                        {
# Commented out to reduce verbosity:
#			    ppsay "rs::SOURCE_CODE_REGION_FOR_TYPE ";
			    prettyprint_type context stream (t, d);
                        };
                end 

		also
		fun prettyprint_type_args ([], d)
                        =>
                        ();

		    prettyprint_type_args ( [type], d)
			=> 
			{   if (strength type <= 1)
			        #
				pp::begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 1);
				ppsay "("; 
				prettyprint_type' (type, d); 
				ppsay ")";
				pp::end_box stream;
			    else 
				prettyprint_type' (type, d);
			    fi;

			    pp::break stream { spaces => 1,  indent_on_wrap => 0 };
			};

		    prettyprint_type_args (tys, d)
			=>
			uj::unparse_closed_sequence
			    stream 
			    {   front => by pp::string "(",
				sep   => fn stream =  { pp::string stream ", ";
							pp::break stream { spaces=>0, indent_on_wrap=>0 };
                                                      },
				back  => by pp::string ") ",
				style => uj::INCONSISTENT, 
				pr    => fn _ =  fn type =  prettyprint_type' (type, d)
			    }
			    tys;
                end; 
	    
                prettyprint_type';
	    };
    };						# package unparse_raw_syntax 
end;						# top-level stipulate









##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################



## Copyright 2003 by University of Chicago 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
