## latex-print-value.pkg 
## Copyright 2003 by The SML/NJ Fellowship 

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

#  Modified to use Lib7 Lib pp. [dbm, 7/30/03]) 

stipulate
    package id  =  inlining_data;		# inlining_data			is from   src/lib/compiler/front/typer-stuff/basics/inlining-data.pkg
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package syx =  symbolmapstack;		# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tdt =  type_declaration_types;	# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package vac =  variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package vh  =  varhome;			# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
herein

    api Latex_Print_Value {

	 backslash_latex_special_chars:   String -> String;

	 latex_print_constructor_representation:  pp::Stream
						    -> vh::Valcon_Form
						    -> Void;

	 latex_print_varhome:    pp::Stream ->  vh::Varhome  -> Void;
	 latex_print_valcon:       pp::Stream ->  tdt::Valcon   -> Void;
	 latex_print_var:        pp::Stream -> vac::Variable -> Void;

	 latex_print_variable
	     :
	     pp::Stream
	     ->
	     (syx::Symbolmapstack, vac::Variable)
	     ->
	     Void;

	 latex_print_debug_valcon
	     :
	     pp::Stream
	     ->
	     syx::Symbolmapstack
	     ->
	     tdt::Valcon -> Void;

	 latex_print_constructor
	     :
	     pp::Stream
	     ->
	     syx::Symbolmapstack
	     ->
	     tdt::Valcon -> Void;

	 latex_print_debug_var
	     :
	     (id::Inlining_Data -> String)
	     -> pp::Stream 
	     -> syx::Symbolmapstack
	     -> vac::Variable
	     -> Void;

    };
end;


stipulate
    package fis =  find_in_symbolmapstack;	# find_in_symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/find-in-symbolmapstack.pkg
    package ip  =  inverse_path;		# inverse_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package pp  =  prettyprint;			# prettyprint			is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package syp =  symbol_path;			# symbol_path			is from   src/lib/compiler/front/typer-stuff/basics/symbol-path.pkg
    package syx =  symbolmapstack;		# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package tys =  type_junk;			# type_junk			is from   src/lib/compiler/front/typer-stuff/types/type-junk.pkg
    package tdt =  type_declaration_types;	# type_declaration_types	is from   src/lib/compiler/front/typer-stuff/types/type-declaration-types.pkg
    package uj  =  unparse_junk;		# unparse_junk			is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
    package mtt =  more_type_types;		# more_type_types		is from   src/lib/compiler/front/typer/types/more-type-types.pkg
    package vac =  variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typer-stuff/deep-syntax/variables-and-constructors.pkg
    package vh  =  varhome;			# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
						# latex_print_type		is from   src/lib/compiler/front/typer/print/latex-print-type.pkg

#   package id = inlining_data;			# inlining_data			is from   src/lib/compiler/front/typer-stuff/basics/inlining-data.pkg

    include prettyprint;
#    include unparse_junk;
#    include variables_and_constructors;
    include type_declaration_types;
herein 


    package   latex_print_value
    : (weak)  Latex_Print_Value
    {
	internals = typer_control::internals;

	# La/TeX wants all literal underlines backslashed
	# (otherwise they denote subscripting), and similarly
        # for $ % # { } so we need a function to do
	#     s/([$%#{}_])/\\\1/g:
	#
	fun backslash_latex_special_chars  string
	    =
	    string::implode  (quote_em ( string::explode string, [] ))
	    where
		fun quote_em ([], done)
			=>
			reverse done;

		    quote_em (c ! rest, done)
			=>
                        case c
                        '\'' => quote_em (rest, '_' ! '\\' ! '_' ! '\\' ! 'e' ! 'm' ! 'i' ! 'r' ! 'p' ! '_' ! '\\' ! '_' ! '\\' ! done);
                        '!' =>  quote_em (rest, '_' ! '\\' ! '_' ! '\\' !       'g' ! 'n' ! 'a' ! 'b' ! '_' ! '\\' ! '_' ! '\\' ! done);
                        '_' =>  quote_em (rest, c ! '\\' ! done);
                        '$' =>  quote_em (rest, c ! '\\' ! done);
                        '&' =>  quote_em (rest, c ! '\\' ! done);
                        '%' =>  quote_em (rest, c ! '\\' ! done);
                        '#' =>  quote_em (rest, c ! '\\' ! done);
                        '@' =>  quote_em (rest, c ! '\\' ! done);
                        '{' =>  quote_em (rest, c ! '\\' ! done);
                        '}' =>  quote_em (rest, c ! '\\' ! done);
                         _  =>  quote_em (rest, c !        done);
                        esac;
		end;
	    end;

	fun by f x y
            =
            f y x;

	pps = pp::string;

	latex_print_some_type        =  latex_print_type::latex_print_some_type;
	latex_print_type             =  latex_print_type::latex_print_type;
	latex_print_typescheme    =  latex_print_type::latex_print_typescheme;

	fun latex_print_varhome stream a
            =
            pps stream (   " ["
                       +   (vh::print_varhome a)
                       +   "]"
                       );

	fun latex_print_inlining_data inlining_info_to_string stream a
            =
            pps stream (" [" + (inlining_info_to_string a) + "]");

	fun latex_print_constructor_representation stream representation
            =
            pp::string stream (vh::print_representation representation);

	fun latex_print_csig stream csig
            =
            pp::string stream (vh::print_constructor_api csig);

	fun latex_print_valcon stream
            =
            latex_print_d
	    where	
	        fun latex_print_d ( VALCON { name, form => vh::EXCEPTION acc, ... } )
                    =>
		    {   uj::unparse_symbol  stream  name;
			#
			if *internals
                             latex_print_varhome  stream  acc; 
                        fi;
                    };

		    latex_print_d (VALCON { name, ... } )
			=>
			uj::unparse_symbol  stream  name;
                end;
	    end;

	fun latex_print_debug_valcon stream symbolmapstack (VALCON { name, form, is_constant, typoid, signature, is_lazy } )
            =
	    {   (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
		#
		unparse_symbol =  uj::unparse_symbol  stream;
	    
                begin_horizontal_else_vertical_box 3;
		pps "VALCON";
		break { spaces=>0, indent_on_wrap=>0 };
		pps "{ name = ";  unparse_symbol name;                          uj::unparse_comma_newline stream;
		pps "is_constant = "; pps (bool::to_string is_constant);                         uj::unparse_comma_newline stream;
		pps "typoid = "; latex_print_some_type  symbolmapstack  stream  typoid;        uj::unparse_comma_newline stream;
		pps "is_lazy = "; pps (bool::to_string is_lazy);                     uj::unparse_comma_newline stream;

		pps "pick_valcon_form =";
		latex_print_constructor_representation
		    stream
		    form;
                                                                                     uj::unparse_comma_newline stream;
		pps "signature = [";   latex_print_csig stream signature;   pps "] }";
		end_box ();
	    };

	fun latex_print_constructor stream symbolmapstack (VALCON { name, form, is_constant, typoid, signature, is_lazy } )
            =
	    {   (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... };
		#
		unparse_symbol =  uj::unparse_symbol stream;
	    
                begin_horizontal_else_vertical_box 3;
		unparse_symbol name;
		pps " : ";
                latex_print_some_type  symbolmapstack  stream  typoid;
		end_box ();
	    };

	fun latex_print_sumtype
              (
		symbolmapstack: syx::Symbolmapstack,
		VALCON { name, typoid, ... }
	      )
              stream
            =
	    {   (uj::en_pp  stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#	    
                begin_wrap_box 0;
		uj::unparse_symbol stream name;   pps " : ";
                latex_print_some_type  symbolmapstack  stream  typoid;
		end_box ();
	    };

# Is this ever used?
	fun latex_print_con_naming stream
            =
            latex_print_constructor
            where
	        (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };

		fun latex_print_constructor (VALCON { name, typoid, form=>vh::EXCEPTION _, ... }, symbolmapstack)
			=>
			{   begin_horizontal_else_vertical_box 0;
			    pps "exception ";
                            uj::unparse_symbol  stream  name; 

			    if (mtt::is_arrow_type typoid)
				#
				 pps " "; 
				 latex_print_some_type  symbolmapstack  stream  (mtt::domain  typoid);
			    fi;

			    pps ";"; 

			    end_box();
			};

		    latex_print_constructor (con, symbolmapstack)
			=> 
			{   exception HIDDEN;
			    #
			    visible_valcon_type
				=
				{   type = tys::sumtype_to_type  con;

				    (   tys::type_equality (
					    fis::find_type_via_symbol_path
					    (    symbolmapstack,
						 syp::SYMBOL_PATH
						 [ ip::last (tys::namepath_of_type type) ],
						 fn _ = raise exception HIDDEN
					    ),
					    type
					)
					except
                                            HIDDEN = FALSE
				    );
				};

			    if (*internals
                                or
				not visible_valcon_type 
			    )
				 begin_horizontal_else_vertical_box 0;
				 pps "con ";
				 latex_print_sumtype (symbolmapstack, con) stream;
				 pps ";";
				 end_box ();
                            fi;
			};
                end;
	    end;

	fun latex_print_var stream (vac::ORDINARY_VARIABLE { varhome, path, ... } )
		=>
		{   pps stream (syp::to_string path);

		    if *internals
			 latex_print_varhome stream varhome;
		    fi;
		};

	    latex_print_var stream (vac::OVERLOADED_IDENTIFIER { name, ... } )
		=>
		uj::unparse_symbol stream (name);

	    latex_print_var stream (errorvar)
		=>
		pp::string stream "<errorvar>";
        end;

	fun latex_print_debug_var inlining_info_to_string stream symbolmapstack
            = 
	    {   (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#
		latex_print_varhome       =  latex_print_varhome stream;
		latex_print_inlining_data =  latex_print_inlining_data inlining_info_to_string stream;

		fun latexprintdebugvar (vac::ORDINARY_VARIABLE { varhome, path, var_type, inlining_data } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "vac::ORDINARY_VARIABLE";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { varhome=";   latex_print_varhome varhome;          uj::unparse_comma_newline stream;
			    pps "inlining_data="; latex_print_inlining_data inlining_data;        uj::unparse_comma_newline stream;
			    pps "path=";       pps (syp::to_string path);    uj::unparse_comma_newline stream;
			    pps "var_type=REF "; latex_print_some_type  symbolmapstack  stream  *var_type; 
			    pps "} )";
			    end_box();
			    end_box();
			};

		    latexprintdebugvar (vac::OVERLOADED_IDENTIFIER { name, alternatives, typescheme } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "vac::OVERLOADED_IDENTIFIER";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { name=";   uj::unparse_symbol stream (name);   uj::unparse_comma_newline stream;
			    pps "alternatives=["; 
			    (uj::ppvseq stream 0 ", "
			     (fn stream =  fn { indicator, variant } =
				{ pps "{ indicator=";  latex_print_some_type  symbolmapstack  stream   indicator; 
				 uj::unparse_comma_newline stream;
				 pps " variant =";
				 latex_print_debug_var inlining_info_to_string stream symbolmapstack variant; pps "}";})
			     *alternatives);
			    pps "]"; uj::unparse_comma_newline stream;
			    pps "typescheme=";   latex_print_typescheme  symbolmapstack  stream  typescheme;   pps "} )";
			    end_box();
			    end_box();
			};

		    latexprintdebugvar  errorvar
                        =>
                        pps "<ERRORvar>";
                end;
	    
                latexprintdebugvar;
	    };

	fun latex_print_variable stream
            =
            latexprintvariable
            where
	        (uj::en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };
		#
		fun latexprintvariable (   symbolmapstack: syx::Symbolmapstack,
					    vac::ORDINARY_VARIABLE { path, varhome, var_type, inlining_data }
					)
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps (syp::to_string path);

			    if *internals
                                 latex_print_varhome  stream  varhome;
			    fi;

			    pps ": ";
                            latex_print_some_type  symbolmapstack  stream  *var_type;
			    pps ";";

			    end_box ();
			};

		    latexprintvariable (symbolmapstack, vac::OVERLOADED_IDENTIFIER { name, alternatives, typescheme=>TYPESCHEME { body, ... } } )
			=>
			{   begin_horizontal_else_vertical_box 0;
			    uj::unparse_symbol stream name;
                            pps ": ";
                            latex_print_some_type  symbolmapstack  stream  body; 
			    pps " as ";
			    uj::unparse_sequence stream { separator  => by pp::break { spaces=>1, indent_on_wrap=>0 },
							  print_one  => (fn stream = fn { variant, ... } = latexprintvariable (symbolmapstack, variant)),
							  breakstyle => uj::HORIZONTAL_ELSE_VERTICAL
							}
			        *alternatives;
			    pps ";";
			    end_box();
		        };

		    latexprintvariable (_, errorvar)
                        =>
                        pps "<ERRORvar>;";
                end;
	    end;
    };			#  package latex_print_value 
end;			#  stipulate











##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
