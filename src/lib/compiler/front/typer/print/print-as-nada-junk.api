## print-as-nada-junk.api

# Compiled by:
#     src/lib/compiler/front/typer/typer.sublib

stipulate
    package pp  =  plain_prettyprint_buffer;				# plain_prettyprint_buffer	is from   src/lib/prettyprint/big/src/plain-prettyprint-buffer.pkg
herein

    api Print_As_Nada_Junk {
	#
	Break_Style = CONSISTENT | INCONSISTENT;

	open_style_box:  Break_Style
		       -> pp::Prettyprint_Buffer
		       -> pp::Indent
		       -> Void;

	print_sequence_as_nada:  pp::Prettyprint_Buffer
			      ->
			       {   sep:   pp::Prettyprint_Buffer -> Void, 
				   pr:    pp::Prettyprint_Buffer -> X -> Void,
				   style: Break_Style
			       }
			      -> List(X)
			      -> Void;

	print_closed_sequence_as_nada:  pp::Prettyprint_Buffer
				    -> {   front: pp::Prettyprint_Buffer -> Void, 
					   sep:   pp::Prettyprint_Buffer -> Void,
					   back:  pp::Prettyprint_Buffer -> Void,
					   pr:    pp::Prettyprint_Buffer -> X -> Void,
					   style: Break_Style
				       }
				    -> List(X)
				    -> Void;

	print_symbol_as_nada:  pp::Prettyprint_Buffer
			    -> symbol::Symbol
			    -> Void;

	heap_string:  String -> String;

	print_lib7_string_as_nada:  pp::Prettyprint_Buffer
			      -> String
			      -> Void;

	print_integer_as_nada:  pp::Prettyprint_Buffer
		    -> multiword_int::Int
		    -> Void;

	ppvseq:  pp::Prettyprint_Buffer
		 -> Int
		 -> String
		 -> (pp::Prettyprint_Buffer -> X -> Void)
		 -> List(X) -> Void;

	ppvlist:  pp::Prettyprint_Buffer
		  -> (String,
		     String,
		     (pp::Prettyprint_Buffer -> X -> Void),
		     List(X))
		  -> Void;

	ppvlist' : pp::Prettyprint_Buffer
		   -> (String,
		      String,
		      (pp::Prettyprint_Buffer -> String -> X -> Void),
		      List(X))
		   -> Void;

	print_int_path_as_nada:      pp::Prettyprint_Buffer -> List( Int )                -> Void;
	print_symbol_path_as_nada:   pp::Prettyprint_Buffer -> symbol_path::Symbol_Path   -> Void;
	print_inverse_path_as_nada:  pp::Prettyprint_Buffer -> inverse_path::Inverse_Path -> Void;
	newline_indent:              pp::Prettyprint_Buffer -> Int                        -> Void;

       #  Needed in PPTypes, unparse_package_language 

	find_path:  (inverse_path::Inverse_Path,
		     (X -> Bool),
		     (symbol_path::Symbol_Path -> X))
		   -> ((List( symbol::Symbol ), Bool));

	print_tuple_as_mythrl7:  pp::Prettyprint_Buffer
			   -> (pp::Prettyprint_Buffer -> X -> Void)
			   -> List(X)
			   -> Void;

	print_int_as_nada:           pp::Prettyprint_Buffer -> Int -> Void;
	print_comma_as_nada:         pp::Prettyprint_Buffer -> Void;
	print_comma_newline_as_nada:  pp::Prettyprint_Buffer -> Void;

	newline_apply:  pp::Prettyprint_Buffer
		       -> (pp::Prettyprint_Buffer -> X -> Void)
		       -> List(X)
		       -> Void; 

	break_apply:  pp::Prettyprint_Buffer
		     -> (pp::Prettyprint_Buffer -> X -> Void)
		     -> List(X)
		     -> Void; 

	en_pp:  pp::Prettyprint_Buffer
	       -> {   break:       { spaces: Int,   indent_on_wrap: Int } -> Void, 
		      newline:     Void -> Void,
		      begin_horizontal_else_vertical_box:   Int -> Void,
		      begin_wrap_box:  Int -> Void,
		      end_box:    Void -> Void, 
		      pps:         String -> Void
		  };

	print_array_as_nada:  pp::Prettyprint_Buffer
			   -> ((pp::Prettyprint_Buffer -> X -> Void),  Rw_Vector(X))
			   -> Void;

    }; #  Api Print_As_Nada_Junk 
end;

## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2013,
## released per terms of SMLNJ-COPYRIGHT.
