## fatecode-globalfix.pkg

# Compiled by:
#     src/lib/compiler/core.sublib



# This file implements one of the fatecode transforms.
# For context, see the comments in
#
#     src/lib/compiler/back/top/highcode/highcode-form.api




#       "Do not worry about your problems with mathematics, 
#        I assure you mine are far greater."
# 
#                                     --Albert Einstein 




stipulate
    package fcf =  fatecode_form;			# fatecode_form		is from   src/lib/compiler/back/top/fatecode/fatecode-form.pkg
herein

    api Fatecode_Globalfix {
	#
	fatecode_globalfix:  fcf::Function  ->  List( fcf::Function );
    };
end;



stipulate
    package fcf =  fatecode_form;			# fatecode_form		is from   src/lib/compiler/back/top/fatecode/fatecode-form.pkg
herein

    package   fatecode_globalfix
    : (weak)  Fatecode_Globalfix			# Fatecode_Globalfix	is from   src/lib/compiler/back/top/closures/fatecode-globalfix.pkg
    {
	fun fatecode_globalfix (fk, f, vl, cl, cexp)
	    =
	    {   (gfix cexp) ->   (l, body);
		#	
		(fk, f, vl, cl, body) ! l;
	    }
	    where
		fun gfix ce
		    =
		    case ce 
			#
			fcf::TAIL_CALL _   =>   ([], ce);

			fcf::DEFINE_FUNS { funs, fate }
			    =>
			    {   (gfix fate) ->   (n, fate');

				l'  =   fold_left
					    (   fn ((k, v, a, t, fate), m)
						    =
						    {   (gfix fate) ->   (l, d);
							#
							(k, v, a, t, d)  !  l @ m;
						    }
					    )
					    n
					    funs;

				(l', fate');
			    };

			fcf::JUMPTABLE { i, xvar, fates }
			    =>
			    {   my (f, fates)
				    =
				    fold_right
					(   fn (c, (fl, cl))
					       =
					       {   (gfix c) ->   (f, d);

						   ( f @ fl,
						     d ! cl
						   );
					       }
					)

					([], [])

					fates;

				(f, fcf::JUMPTABLE { i, xvar, fates });
			    };

			fcf::DEFINE_RECORD	    { kind, fields, name,    fate } =>     {  (gfix fate) ->   (f, fate);  (f, fcf::DEFINE_RECORD	    { kind, fields,    name, fate });  };
			fcf::GET_FIELD_I	    { i, record, name, type, fate } =>     {  (gfix fate) ->   (f, fate);  (f, fcf::GET_FIELD_I		    { i, record, type, name, fate });  };
			fcf::GET_ADDRESS_OF_FIELD_I { i, record, name,       fate } =>     {  (gfix fate) ->   (f, fate);  (f, fcf::GET_ADDRESS_OF_FIELD_I  { i, record,       name, fate });  };

			fcf::STORE_TO_RAM	    { op, args,             fate } =>     {  (gfix fate) ->   (f, fate);   (f, fcf::STORE_TO_RAM	    { op, args,             fate });  };
			fcf::FETCH_FROM_RAM	    { op, args, name, type, fate } =>     {  (gfix fate) ->   (f, fate);   (f, fcf::FETCH_FROM_RAM	    { op, args, name, type, fate });  };
			fcf::MATH           	    { op, args, name, type, fate } =>     {  (gfix fate) ->   (f, fate);   (f, fcf::MATH		    { op, args, name, type, fate });  };

			fcf::PURE           	    { op, args, name, type, fate } =>     {  (gfix fate) ->   (f, fate);   (f, fcf::PURE		    { op, args, name, type, fate });  };

			fcf::RAW_C_CALL { kind, cfun_name, cfun_type, args, results, fate }
			    =>
			    {   (gfix fate) ->   (f, fate);
				#
				( f,
                                  fcf::RAW_C_CALL { kind, cfun_name, cfun_type, args, results, fate }
                                );
			    };

			fcf::IF_THEN_ELSE { op, args, xvar, thenfate, elsefate }
			    =>
			    {   (gfix thenfate) ->   (f1, thenfate);
				(gfix elsefate) ->   (f2, elsefate);

				( f1 @ f2,
				  fcf::IF_THEN_ELSE { op, args, xvar, thenfate, elsefate }
				);
			    };
		    esac;
	    end;

    };		#  package fatecode_globalfix 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
