## highcode-var.pkg 
#
# Highcode variables are simply Int31 integers,
# successively allocated starting at one.
#
# When desired we associate names with them by
# maintaining an Int->String hashtable.

# Compiled by:
#     src/lib/compiler/front/typer-stuff/typecheckdata.sublib

# This package is used (in particular) in:
#
#     src/lib/compiler/back/top/highcode/highcode-uniq-types.pkg

stipulate 
    package sy  =  symbol;					# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package iht =  int_hashtable;				# int_hashtable			is from   src/lib/src/int-hashtable.pkg
    package tdc =  typer_data_controls;				# typer_data_controls		is from   src/lib/compiler/front/typer-stuff/main/typer-data-controls.pkg
herein

    package   highcode_var
    : (weak)  Highcode_Var					# Highcode_Var			is from   src/lib/compiler/back/top/highcode/highcode-var.api
    {
	fun make_lvar r ()
            =
            {   inc r;
                *r;
            }
	    where
		fun inc r =     r := *r + 1;
	    end;

	exception NO_LVAR_NAME;

	varcount =  REF 0;					#  XXX BUGGO FIXME: 'varcount' is yet more yucky thread-hostile mutable global state: 

	my lvar_names:  iht::Hashtable( String )        	#  XXX BUGGO FIXME: 'lvar_names' is yet more yucky thread-hostile mutable global state: 
           =
           iht::make_hashtable  { size_hint => 32,  not_found_exception => NO_LVAR_NAME  };


	name_of =  iht::get  lvar_names;


	give_lvar_name
            =
            iht::set  lvar_names;


	Variable
            =
            Int;      #  lambda variable id number 


	remember_highcode_variable_names
            =
            tdc::remember_highcode_variable_names;



	fun highcode_variable_has_a_name  lv
            =
            {   name_of lv;
                TRUE;
            }
            except
                NO_LVAR_NAME = FALSE;


	fun to_string (highcode_variable: Variable)
            =
            int::to_string  highcode_variable;


	fun share_name (v, w)
            =
	    if *remember_highcode_variable_names
		#
		give_lvar_name (v, name_of w)
		except
		    NO_LVAR_NAME
			=
			(   give_lvar_name (w, name_of v)
			    except
				NO_LVAR_NAME = ()
			);
	    fi;


	make_highcode_variable
            =
            make_lvar  varcount;


	fun clear ()
            =
            {   varcount := 0;
                iht::clear  lvar_names;
            };


	fun copy_highcode_variable  var
            =
	    {   make_var =  make_highcode_variable ();
	    
                if *remember_highcode_variable_names
		    #
		    give_lvar_name (make_var,  name_of var)
		    except
			NO_LVAR_NAME = ();
		fi;

		make_var;
	    };


	fun make_named_highcode_variable (id: sy::Symbol)
            =
	    {   make_var =  make_highcode_variable ();
	    
                if *remember_highcode_variable_names
		    #
                    give_lvar_name (make_var,  sy::name id);
                fi;

		make_var;
	    };


	fun highcode_variable_to_value_symbol (lv:  Variable) : Null_Or( sy::Symbol )
	    =
            THE (sy::make_value_symbol (name_of lv))
            except
                NO_LVAR_NAME = NULL;


	fun name_of_highcode_variable (lv:  Variable) : String
            =
	    {   s =  int::to_string  lv;
	    
                (name_of lv + s)
                except
                    NO_LVAR_NAME = ("v" + s);
	    };
    };												#  package highcode_var
end;												# stipulate


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
