## lambdacode-form.pkg 

# Compiled by:
#     src/lib/compiler/core.sublib


###               "The dynamic principle of fantasy is play,
###                which belongs also to the child, and as such
###                it appears to be inconsistent with the principle
###                of serious work.
###
###                But without this playing with fantasy
###                no creative work has ever yet come to birth.
###
###                                    -- Carl Jung


stipulate
    package hbo =  highcode_baseops;		# highcode_baseops		is from   src/lib/compiler/back/top/highcode/highcode-baseops.pkg
    package hcf =  highcode_form;		# highcode_form			is from   src/lib/compiler/back/top/highcode/highcode-form.pkg
    package hcv =  highcode_var;		# highcode_var			is from   src/lib/compiler/back/top/highcode/highcode-var.pkg
    package hut =  highcode_uniq_types;		# highcode_uniq_types		is from   src/lib/compiler/back/top/highcode/highcode-uniq-types.pkg
    package sy  =  symbol;			# symbol			is from   src/lib/compiler/front/basics/map/symbol.pkg
    package vh  =  varhome;			# varhome			is from   src/lib/compiler/front/typer-stuff/basics/varhome.pkg
herein 

    package  lambdacode_form
    : (weak) Lambdacode_Form			# Lambdacode_Form		is from   src/lib/compiler/back/top/lambdacode/lambdacode-form.api
    {

	# See comments in    src/lib/compiler/back/top/lambdacode/lambdacode-form.api
	#
	Constructor
            =
            ( sy::Symbol,
              vh::Valcon_Form,
              hut::Uniqtype
            ); 


	# See comments in    src/lib/compiler/back/top/lambdacode/lambdacode-form.api
	#
	Casetag  										# Constant in a 'case' rule lefthandside.
	  = VAL_CASETAG    (Constructor, List( hut::Uniqtyp ), hcv::Variable)
	  | INT_CASETAG     Int
	  | INT32_CASETAG   int32::Int
	  | INTEGER_CASETAG  integer::Int
	  | UNT_CASETAG     Unt
	  | UNT32_CASETAG   unt32::Unt
	  | FLOAT64_CASETAG String
	  | STRING_CASETAG  String
	  | VLEN_CASETAG    Int; 


	# See comments in    src/lib/compiler/back/top/lambdacode/lambdacode-form.api
	#
	Lambdacode_Expression
	  = VAR     hcv::Variable
	  | INT     Int
	  | INT32   int32::Int
	  | UNT     Unt
	  | UNT32   unt32::Unt
	  | FLOAT64 String
	  | STRING  String 
	  | BASEOP  (hbo::Baseop, hut::Uniqtype, List( hut::Uniqtyp ))				# Op, result_tpe, argtypes.
	  | GENOP   (Dictionary, hbo::Baseop, hut::Uniqtype, List( hut::Uniqtyp ))

	  | FN   (hcv::Variable, hut::Uniqtype, Lambdacode_Expression)
	  | MUTUALLY_RECURSIVE_FNS  (List(hcv::Variable), List(hut::Uniqtype), List(Lambdacode_Expression), Lambdacode_Expression)
	  | APPLY  (Lambdacode_Expression, Lambdacode_Expression)
	  | LET  (hcv::Variable, Lambdacode_Expression, Lambdacode_Expression)

	  | TYPEFUN     (List(hut::Uniqkind),   Lambdacode_Expression)
	  | APPLY_TYPEFUN  (Lambdacode_Expression, List( hut::Uniqtyp ))

	  | RAISE           (Lambdacode_Expression, hut::Uniqtype) 
	  | EXCEPT          (Lambdacode_Expression, Lambdacode_Expression)
	  | EXCEPTION_TAG   (Lambdacode_Expression, hut::Uniqtype)                 

	  | CONSTRUCTOR (Constructor, List( hut::Uniqtyp ), Lambdacode_Expression)
	  | SWITCH      (Lambdacode_Expression, vh::Valcon_Signature, List ((Casetag, Lambdacode_Expression)), Null_Or( Lambdacode_Expression ))

	  | VECTOR            (List( Lambdacode_Expression ), hut::Uniqtyp)
	  | RECORD             List( Lambdacode_Expression )
	  | PACKAGE_RECORD     List( Lambdacode_Expression )
	  | SELECT             (Int, Lambdacode_Expression)

	  | PACK    (hut::Uniqtype, List( hut::Uniqtyp ), List( hut::Uniqtyp ), Lambdacode_Expression)   
	  | BOX     (hut::Uniqtyp, Bool, Lambdacode_Expression)					# NEVER USED.
	  | UNBOX   (hut::Uniqtyp, Bool, Lambdacode_Expression)					# NEVER USED.

	withtype
	Dictionary
          =
          { default: Lambdacode_Expression,
	    table:   List( (List(hut::Uniqtyp), Lambdacode_Expression) )
	  };

    };												# package lambdacode 
end;												# stipulate




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
