## nextcode-preimprover-transform-g.pkg 

# Compiled by:
#     src/lib/compiler/core.sublib


# In this file we handle the initial nextcode
# transforms performed immediately after
# conversion from A-Normal to nextcode form,
# as set-up our core nextcode optimizations.
#
# I'm not sure specifically what is supposed to
# be happening here.  It seems to involve some
# type munging.
#
# We get invoked from the
#
#     src/lib/compiler/back/top/main/backend-tophalf-g.pkg
#
# function
#
#     translate_anormcode_to_execode()
#
# which uses us in the transform sequence
#
#     translate_anormcode_to_nextcode()
#     nextcode_preimprover_transform()
#     optional_nextcode_improvers()

# For context, see the comments in
#
#     src/lib/compiler/back/top/highcode/highcode-form.api


# Our runtime invocation is from
#
#     src/lib/compiler/back/top/main/backend-tophalf-g.pkg


stipulate
    package fcf =  nextcode_form;						# nextcode_form			is from   src/lib/compiler/back/top/nextcode/nextcode-form.pkg
herein

    api Nextcode_Preimprover_Transform {
	#
        nextcode_preimprover_transform:  fcf::Function  ->  fcf::Function;
    };
end;



# We are invoked from:
#
#     src/lib/compiler/back/top/main/backend-tophalf-g.pkg

		 								# Machine_Properties		is from   src/lib/compiler/back/low/main/main/machine-properties.api
stipulate
    package fcf =  nextcode_form;						# nextcode_form			is from   src/lib/compiler/back/top/nextcode/nextcode-form.pkg
    package hcv =  highcode_var;						# highcode_var			is from   src/lib/compiler/back/top/highcode/highcode-var.pkg
    package iht =  int_hashtable;						# int_hashtable			is from   src/lib/src/int-hashtable.pkg
herein


    generic package   nextcode_preimprover_transform_g   (
	#             ================================
	#
	mp:  Machine_Properties		 					# Machine_Properties		is from   src/lib/compiler/back/low/main/main/machine-properties.api
										# machine_properties_intel32	is from   src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg
										# machine_properties_pwrpc32	is from   src/lib/compiler/back/low/main/pwrpc32/machine-properties-pwrpc32.pkg
										# machine_properties_sparc32	is from   src/lib/compiler/back/low/main/sparc32/machine-properties-sparc32.pkg
	#
    )
    : (weak) Nextcode_Preimprover_Transform

    {

	fun bug s = error_message::impossible ("Nextcode_Preimprover_Transform: " + s);
	fun ident x = x;
	make_var = hcv::make_highcode_variable;

	###########################################################################
	#                     TOP OF THE MAIN FUNCTION                            #
	###########################################################################

	# We get invoked from the
	#
        #     src/lib/compiler/back/top/main/backend-tophalf-g.pkg
	#
        # function
	#
        #     translate_anormcode_to_execode()
	#
        # which uses us in the transform sequence
        #
        #     translate_anormcode_to_nextcode()
        #     nextcode_preimprover_transform()
        #     optional_nextcode_improvers()
        #
	fun nextcode_preimprover_transform fe
	    =
	    functrans fe
            where
	        unboxedfloat =  mp::unboxed_floats;
		untaggedint  =  mp::untagged_int;

		exception NEXTCODE_SUBSTITUTION;

		stipulate
		    my mmm:   iht::Hashtable( fcf::Value ) = iht::make_hashtable  { size_hint => 32,  not_found_exception => NEXTCODE_SUBSTITUTION };
		herein
		    addvl = iht::set mmm; 
		    fun mapvl v = ((iht::get  mmm  v) except NEXTCODE_SUBSTITUTION = fcf::VAR v);
		end;

		exception CTYMAP;

		stipulate
		    my ct:   iht::Hashtable( fcf::Type )
                         =   iht::make_hashtable  { size_hint => 32,  not_found_exception => CTYMAP };
		herein
		    addty = iht::set  ct;
		    getty = iht::get  ct;
		end;

		fun grabty (fcf::VAR     v) =>  ((getty v) except _ = fcf::bogus_pointer_type);
		    grabty (fcf::FLOAT64 _) =>  fcf::type::FLOAT64;
		    grabty (fcf::INT     _) =>  fcf::type::INT;
		    grabty (fcf::INT32   _) =>  fcf::type::INT32;
		    grabty _                =>  fcf::bogus_pointer_type;
		end;


		fun select (i, record, name, type, next)
                    =
                    fcf::GET_FIELD_I { i, record, name, type, next };

		fun record (kind, fields, name, next)
                    =
                    fcf::DEFINE_RECORD { kind, fields, name, next };


		# Wrappers around floats and ints are now dealt with in the convert phase 

#		fun unwrapfloat (arg, name, next) =  fcf::PURE { op => fcf::p::funwrap,   args => [arg], name, type =>  fcf::type::FLOAT64,      next }
#		fun wrapfloat   (arg, name, next) =  fcf::PURE { op => fcf::p::fwrap,     args => [arg], name, type =>  fcf::bogus_pointer_type, next }
#		fun unwrapint   (arg, name, next) =  fcf::PURE { op => fcf::p::iunwrap,   args => [arg], name, type =>  fcf::type::INT,          next }
#		fun wrapint     (arg, name, next) =  fcf::PURE { op => fcf::p::iwrap,     args => [arg], name, type =>  fcf::bogus_pointer_type, next }
#		fun unwrapint32 (arg, name, next) =  fcf::PURE { op => fcf::p::i32unwrap, args => [arg], name, type =>  fcf::type::INT32,        next }
#		fun wrapint32   (arg, name, next) =  fcf::PURE { op => fcf::p::i32wrap,   args => [arg], name, type =>  fcf::bogus_pointer_type, next }
#
#		fun select (i, u, x, ct, ce) =
#		  case (ct, unboxedfloat, untaggedint)
#		   of (fcf::type::FLOAT64, TRUE, _) => let v = make_var()
#					in fcf::GET_FIELD_I { i, record => u, name => v, type => fcf::bogus_pointer_type, next => unwrapfloat (fcf::VAR v, x, ce) }
#				       end
#		    | (fcf::type::INT, _, TRUE) => let v = make_var()
#					in fcf::GET_FIELD_I { i, record => u, name => v, type => fcf::bogus_pointer_type, next => unwrapint (fcf::VAR v, x, ce) }
#				       end
#		    | (fcf::type::INT32, _, _)  => let v = make_var()
#					in fcf::GET_FIELD_I { i, record => u, name => v, type => fcf::bogus_pointer_type, next => unwrapint32 (fcf::VAR v, x, ce) }
#				       end
#		    | _ => fcf::GET_FIELD_I { i, record => u, name => x, type => ct, next => ce }
#
#		fun record (k, ul, w, ce) =
#		  let fun h ((fcf::type::FLOAT64, u), (l, h)) = 
#			     if unboxedfloat then 
#			      (let v = make_var()
#				in ((fcf::VAR v, OFFp 0) ! l, fn ce => wrapfloat(#1 u, v, h (ce)))
#			       end)
#			     else (u ! l, h)
#			| h((fcf::type::INT, u), (l, h)) = 
#			     if untaggedint then 
#			      (let v = make_var()
#				in ((fcf::VAR v, OFFp 0) ! l, fn ce => wrapint(#1 u, v, h (ce)))
#			       end)
#			     else (u ! l, h)
#			| h((fcf::type::INT32, u), (l, h)) = 
#			     let v = make_var()
#			     in ((fcf::VAR v, OFFp 0) ! l, fn ce => wrapint32(#1 u, v, h (ce)))
#			     end
#			| h((_, u), (l, h)) = (u ! l, h)
#
#		      info = map (fn (u as (v, _)) => (grabty v, u)) ul
#		      my (nul, header) = fold h info ([], ident)
#		   in header (fcf::DEFINE_RECORD { kind => k, field => nul, name => w, next => ce })
#		  end



		# ************************************************************************
		#          UTILITY FUNCTIONS THAT DO THE ARGUMENT SPILLING               *
		# ************************************************************************

		stipulate

		    # arg_spill(), spill_in() and spill_out()
		    # are private support functions for
		    # make_arg_in and make_arg_out:	

		    # The following figures must be consistent with the choices made
		    # in the closure or spilling phases:

		    stipulate
			#
			fpnum =  int::min (mp::num_float_regs - 2, mp::num_arg_regs);
			nregs =  mp::num_int_regs - mp::num_callee_saves;
			gpnum =  int::min (nregs - 3, mp::num_arg_regs);
			#
		    herein

			fun arg_spill (args, ctys)
			    = 
			    {   fun h ([], [], ngp, nfp, ovs, ots, [], [], [])    => NULL;
				    h([], [], ngp, nfp, ovs, ots, [x], [_], [])  => NULL;

				    h([], [], ngp, nfp, ovs, ots, gvs, gts, fvs)
					=> 
					THE (reverse ovs, reverse ots, reverse gvs, reverse gts, reverse fvs);

				    h (x ! xs, ct ! cts, ngp, nfp, ovs, ots, gvs, gts, fvs)
					=> 
					case ct 
					    #
					    fcf::type::FLOAT64 => if (nfp > 0)   h (xs, cts, ngp, nfp - 1, x ! ovs, ct ! ots, gvs, gts,     fvs);
						    else           h (xs, cts, ngp, nfp,         ovs,      ots, gvs, gts, x ! fvs);
						    fi;

					    _    => if (ngp > 0)   h (xs, cts, ngp - 1, nfp, x ! ovs, ct ! ots,     gvs,      gts, fvs);
						    else           h (xs, cts, ngp,     nfp,     ovs,      ots, x ! gvs, ct ! gts, fvs);
						    fi;
					esac;

				    h _ =>
					bug "unexpected case in arg_spill";
				end;

				n = length args;

				if (n > fpnum
				or  n > gpnum) 
				    h (args, ctys, gpnum, fpnum, [], [], [], [], []);
				else NULL;
				fi;
			    };					# fun arg_spill 
		    end;						# stipulate

		    fun spill_in (origargs, origctys, spgvars, spgctys, spfvars)
			= 
			{   my (fhdr, spgvars, spgctys)
				= 
				case spfvars
				    #
				    [] => (ident, spgvars, spgctys);

				    _  => {   name = make_var();
					      fields = map (fn x =  (x, fcf::SLOT 0)) spfvars;
					      ct = fcf::type::POINTER (fcf::FPT (length fields));
					      fh =  fn next =  fcf::DEFINE_RECORD { kind => fcf::rk::FBLOCK, fields, name, next };
					      (fh, (fcf::VAR name) ! spgvars, ct ! spgctys);
					 };
				esac;

			    my (spgv, ghdr)
				= 
				case spgvars
				    #
				    [] => (NULL, fhdr);

				   [x] => (THE x, fhdr);

				    _  => {   name = make_var();

					      fields =  map  (fn x =  (x, fcf::SLOT 0))  spgvars;

					      ( THE (fcf::VAR name),
						fn next = fhdr (fcf::DEFINE_RECORD { kind => fcf::rk::RECORD, fields, name, next })
					      );
					 };
				esac;

			    case spgv
				 THE x =>  THE (origargs @ [x], ghdr);
				 NULL  =>  NULL;
			    esac;
			};

		    fun spill_out (origargs, origctys, spgvars, spgctys, spfvars)
			=
			{   my (spfv, fhdr, spgvars, spgctys)
				= 
				case spfvars
				    #
				    [] => (NULL, ident, spgvars, spgctys);

				    _ => {   v =  make_var (); 

					     record =  fcf::VAR  v;

					     fun g (name, (i, header))
						 = 
						 (i+1, fn next = header (fcf::GET_FIELD_I { i, record, name, type => fcf::type::FLOAT64, next }));

					      my (n, fh) = fold_left g (0, ident) spfvars;

					      ct = fcf::type::POINTER (fcf::FPT n);

					      (THE v, fh, v ! spgvars, ct ! spgctys);
					  };
				esac;

			    my (spgv, ghdr)
				= 
			        case (spgvars, spgctys)
				    #
				    ([], _)      =>  (NULL, fhdr);
				    ([x], t ! _) =>  (THE (x, t), fhdr);

				     _ => {   v      =  make_var();
					      record =  fcf::VAR v;

					      fun g (name, type, (i, header))
						  = 
						  (i+1, fn next = header (fcf::GET_FIELD_I { i, record, name, type, next }));

					      my (n, gh)
						  =
						  paired_lists::fold_left g (0, fhdr) (spgvars, spgctys);

					      ct = fcf::type::POINTER (fcf::RPT n);

					      (THE (v, ct), gh);
					   };
			       esac;

			    case spgv
				#
				THE (x, t) => THE (origargs @ [x], origctys @ [t], ghdr);
				NULL       => NULL;
			    esac;
			};

		herein


		    #  make_arg_in:  List( value ) -> Null_Or( cexp -> cexp * List( value ) )
		    #
		    fun make_arg_in (args:  List( fcf::Value ))
			= 
			{   ctys = map grabty args;

			    case (arg_spill (args, ctys))
				#
				THE xx =>  spill_in xx;
				NULL   =>  NULL;
			    esac;
			};

		    #  make_arg_out:  List(Variable) -> ( Null_Or( List(Variable), List(cty), cexp) -> cexp )
		    #
		    fun make_arg_out args
			= 
			{   ctys = map getty args;

			    case (arg_spill (args, ctys))

				 THE xx => spill_out xx;
				 NULL   => NULL;
			    esac;
			};
		end;			# stipulate

		###########################################################################
		#               Main functions that translate nextcode code               #
		###########################################################################

		fun cexptrans (ce)
		    = 
		    case ce 
			#		      
			fcf::DEFINE_RECORD { kind, fields, name, next }
			    =>
			    record( kind,
                                    map  rectrans  fields,
                                    name,
                                    cexptrans next
                                  );

			fcf::GET_FIELD_I { i, record, name, type, next }
			    => 
			    {   addty (name, type);
				record = vtrans record;
				next = cexptrans next;
				select (i, record, name, getty name, next );
			    };

			fcf::GET_ADDRESS_OF_FIELD_I { i, record, name, next }
			    =>
			    fcf::GET_ADDRESS_OF_FIELD_I { i, record => vtrans record, name, next => cexptrans next };

			fcf::TAIL_CALL { func, args }
			    => 
			    case (make_arg_in  args)
				#
				THE (args, header) =>  cexptrans (header (fcf::TAIL_CALL { func, args }));
				NULL               =>  fcf::TAIL_CALL {   func => vtrans func,   args => map vtrans args   };
			    esac;

			fcf::DEFINE_FUNS { funs, next }
			    =>
			    fcf::DEFINE_FUNS  { funs =>  map functrans funs,
                                                next =>  cexptrans next
                                              };

			fcf::JUMPTABLE { i, xvar, nexts }
			    =>
			    fcf::JUMPTABLE
			      { i =>  vtrans i,
				xvar,
				nexts =>  map cexptrans nexts
                              };

			fcf::FETCH_FROM_RAM { op, args, name, type, next }
			    => 
			    {   addty (name, type);
				args = map vtrans args;
				next = cexptrans next;
				type = getty name;
				fcf::FETCH_FROM_RAM { op, args, name, type, next };
			    };

			fcf::STORE_TO_RAM { op, args, next }
			    => 
			    fcf::STORE_TO_RAM { op,
                                                args =>  map vtrans args,
                                                next =>  cexptrans next
                                              };

			fcf::MATH { op, args, name, type, next }
			    => 
			    {   addty (name, type);
				#
				fcf::MATH { op,  args => map vtrans args,  name, type,  next => cexptrans next  };
			    };

			fcf::RAW_C_CALL { kind, cfun_name, cfun_type, args, results, next }
			    =>
			    {   apply addty results;
				#
				fcf::RAW_C_CALL { kind, cfun_name, cfun_type,  args => map vtrans args,  results,  next => cexptrans next };
			    };


		     /*** this special case is a temporary hack; ask ZHONG for details XXX BUGGO FIXME */ 

#		        fcf::PURE { op => fcf::p::WRAP, args =>[u], name, type as fcf::type::POINTER (fcf::FPT _), next } => 
#			     (addty (w, t); fcf::PURE { op => fcf::p::wrap, args => [vtrans u], name, type, next => cexptrans next })
#		        fcf::PURE { op => fcf::p::UNWRAP, args =>[u], name, type as fcf::type::POINTER (fcf::FPT _), next } => 
#			     (addty (w, t); fcf::PURE { op => fcf::p::unwrap, args => [vtrans u], name, type, next => cexptrans next })


			fcf::PURE { op   =>  fcf::p::WRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    {   addvl (name, vtrans u);
				#
				cexptrans next;
			    };


			fcf::PURE { op   =>  fcf::p::UNWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    {   case u    fcf::VAR z =>  addty (z, type);
					  _          =>  ();
				esac;

				addvl (name, vtrans u);

                                cexptrans  next;
			    }; 

			fcf::PURE { op   =>  fcf::p::FWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    if unboxedfloat
				#
				addty (name, type);
				#
                                fcf::PURE { op   =>  fcf::p::FWRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next =>  cexptrans next
                                          };
			    else
                                addvl (name, vtrans u);
                                cexptrans next;
			    fi;

			fcf::PURE { op   =>  fcf::p::FUNWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    if unboxedfloat
				#
				addty (name, type);
				#
				fcf::PURE { op   =>  fcf::p::FUNWRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next =>  cexptrans next
                                          };
			    else
				addvl (name, vtrans u);
				#
                                cexptrans next;
			    fi;

			fcf::PURE { op   =>  fcf::p::IWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    if untaggedint
                                #
				addty (name, type);
				#
                                fcf::PURE { op   =>  fcf::p::IWRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next => cexptrans next
                                          };
			    else
                                addvl (name, vtrans u);
				#
                                cexptrans next;
			    fi;

			fcf::PURE { op   =>  fcf::p::IUNWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    => 
			    if untaggedint
                                #
				addty (name, type);
				#
                                fcf::PURE { op   =>  fcf::p::IUNWRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next => cexptrans next
                                          };
			    else
                                addvl (name, vtrans u);
				#
                                cexptrans next;
			    fi;

			fcf::PURE { op   =>  fcf::p::I32WRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    =>
			    {   addty (name, type);
				#
				fcf::PURE { op   =>  fcf::p::I32WRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next => cexptrans next
                                          };
			    };

			fcf::PURE { op   =>  fcf::p::I32UNWRAP,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    =>
			    {   addty (name, type);
				#
				fcf::PURE { op   =>  fcf::p::I32UNWRAP,
                                            args =>  [vtrans u],
                                            name,
                                            type,
                                            next => cexptrans next
                                          };
			    };


#		        fcf::PURE { op    =>  fcf::p::CAST,
#				    args  =>  [u],
#				    name,
#				    next,
#				    ...
#				  }
#			    =>
#			    {   addvl (name, vtrans u);
#				cexptrans next;
#			    };


			fcf::PURE { op   =>  fcf::p::GETCON,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    =>
			    {   addty (name, type);
				#
                                select (0, vtrans u, name, type, cexptrans next);
                            };

			fcf::PURE { op   =>  fcf::p::GETEXN,
                                    args =>  [u],
                                    name,
                                    type,
                                    next
                                  }
			    =>
			    {   addty (name, type);
				#
				select (0, vtrans u, name, type, cexptrans next);
			    };

			fcf::PURE { op, args, name, type, next }
			    => 
			    {   addty (name, type);
				args = map vtrans args;
				next = cexptrans next;
				fcf::PURE { op, args, name, type => getty name, next };
			    };

			fcf::IF_THEN_ELSE { op, args, xvar, then_next, else_next }
			    => 
			    fcf::IF_THEN_ELSE { op, args => map vtrans args, xvar, then_next => cexptrans then_next,
                                                                             else_next => cexptrans else_next
                                        };
		    esac

		also
                fun functrans (fk, v, args, cl, ce)
		    = 
		    {   paired_lists::apply addty (args, cl);
			ce' = cexptrans ce;

			case (make_arg_out args)
			    #
			    THE (nargs, nctys, fhdr)
				=>
				(fk, v, nargs, nctys, fhdr ce');

			    NULL
				=>
				(fk, v, args, cl, ce');
			esac;
		    }

		also
		fun rectrans (v, acp)
		    =
		    (vtrans v, acp)

		also
		fun vtrans (fcf::VAR v) =>  mapvl v;
		    vtrans u => u;
		end;


	    end;		# fun     nextcode_preimprover_transform
    };				# package nextcode_preimprover_transform_g 
end;				# stipulate 



## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
