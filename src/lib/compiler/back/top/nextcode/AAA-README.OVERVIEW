Early intermediate code representations left the callstack implicit.
Unfortunately, in the context of code optimization, "implicit"
is bad, because what you don't represent explicitly, you can't
rewrite.

Consequently compiler intermediate code representations were
developed in which the callstack was explicitly represented.

Oversimplifying slightly, in this context the callstack was
referred to as the "continuation" for the computation, and
this class of intermediate code representations was named
"continuation-passing-style" because the continuations are
explicitly passed around from one subcomputation to another.

Most of the continuation-passing-style code in this compiler
derives from Andrew Appel's original 1990 SML/NJ compiler.

I find "continuation" to be too much of a mouthful for regular
use and "continuation passing style" to be even more of a mouthful,
so in this compiler I use "fate" to mean "continuation" and
"nextcode" as the name for our "continuation passing style"
intermediate code representation.

 -- 2010-09-11 CrT


