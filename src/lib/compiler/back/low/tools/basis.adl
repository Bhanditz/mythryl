(* basis.adl
 *
 * "adl" is "architecture description language", an SML variant
 * hacked to support description of instruction sets.  For more
 * info see comments in
 *
 *     src/lib/compiler/back/low/tools/parser/architecture-description-language.lex
 *     src/lib/compiler/back/low/tools/parser/architecture-description-language.grammar
 *
 * This file contains definitions shared by our architecture descriptions.
 * Currently we have three:
 *
 *     src/lib/compiler/back/low/xxx/xxx.architecture-desription
 *     src/lib/compiler/back/low/pwrpc32/pwrpc32.architecture-description
 *     src/lib/compiler/back/low/sparc32/sparc32.architecture-description
 *)
structure Basis =
struct
   (* Primitive types *)
   type #n bits    (* a value that is n bits wide *)
   type #n cell    (* a cell containing an n-bit value *)
   type bool       (* a boolean *)
   type effect     (* an action *)
   type (#n, 'a) list (* an n-element list of type 'a *)
   type string

   type int
   type word

   type operand
   type label    

   (* We are allowed to use map in the basis.  
    * This is the only higher order function we have. 
    *)
   my  map       : ('a -> 'b) -> (#n, 'a) list -> (#n, 'b) list

   my  :=        : #n bits * #n bits -> effect
   my  ???       : #n bits
   my  label     : label -> #n bits
   my  operand   : operand -> #n bits

   (* Signed/unsigned promotion *)
   my  sx  : #n bits -> #m bits
   my  zx  : #n bits -> #m bits

   (* Integer operators *)
   my  ~ notb negt : #n bits -> #n bits
   my  + - muls mulu divs divu quots rems remu  
         : #n bits * #n bits -> #n bits
   my  andb orb xorb eqvb << >> ~>> : #n bits * #n bits -> #n bits  
   my  addt subt mult divt quott remt : #n bits * #n bits -> #n bits  

   (* Boolean operators *)
   my  cond    : bool * #n bits * #n bits -> #n bits
   my  not     : bool -> bool
   my  andalso : bool * bool -> bool
   my  orelse  : bool * bool -> bool

   (* Integer comparisons *)
   my  == <> > < <= >= ltu leu gtu geu : #n bits * #n bits -> bool

   (* Floating point operators *)
   my  fadd fsub fmul fdiv : #n bits * #n bits -> #n bits
   my  fabs fneg : #n bits -> #n bits

   (* Floating point comparisons *)
   my  |?| |!<=>| |==| |?=| |!<>| |!?>=| |<| |?<| 
       |!>=| |!?>| |<=| |?<=| |!>| |!?<=| |>| |?>|
       |!<=| |!?<| |>=| |?>=| |!<| |!?=| |<>| |!=|
       |!?| |<=>| |?<>| : #n bits * #n bits -> bool

   (* Effect combinators *)
   my  ||    : effect * effect -> effect  (* parallel effects *)
   my  Nop   : effect                     (* empty effect *)
   my  Jmp   : #n bits -> effect          (* jump to address *)
   my  Call  : #n bits -> effect          (* call address *)
   my  Ret   : effect                     (* return *)
   my  If    : bool * effect * effect -> effect (* if/then/else *)

   fun Kill x = x := ???
   fun Use x  = ??? := x

   (* Hidden definitions *)
   my  intConst  : int -> #n bits
   my  wordConst : word -> #n bits
   my  newOp     : string -> 'a
end 
