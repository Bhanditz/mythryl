/*
 * This is Wu Hui's example.
 */

package WuHui =
pkg

   package g = digraph_by_adjacency_list

   fun makeDag nodes edges =
   let my dag as graph::GRAPH G = g::graph("Test1", (), 10)
   in  apply G.add_node nodes;
       apply G.add_edge edges;
       dag
   end

   my dag as graph::GRAPH G = 
             makeDag [(1, (0, 6)),
                      (2, (0, 6)),
                      (3, (1, 6)),
                      (4, (1, 6)),
                      (5, (1, 6)),
                      (6, (3, 6))
                     ]
                     [(1, 3, 1),
                      (1, 4, 1),
                      (2, 4, 1),
                      (2, 5, 1),
                      (3, 6, 0),
                      (4, 6, 1),
                      (5, 6, 1)
                     ]

   fun close dag =
       transitive_closure::acyclic_transitive_closure2 
          {+   = \\ (i, j) => i+j+1,
           max = int::max
          } dag

   fun leung (dag as graph::GRAPH G) =
   let my dag' as graph::GRAPH G' = g::graph("Tmp", (), 10)
       G.forall_nodes G'.add_node
       G.forall_edges G'.add_edge
   in  LeungPalemPnueli::rank
                       { dag = dag',
                        l   = \\(_, _, l) => l,
                        d   = \\(_, (_, d)) => d,
                        r   = \\(_, (r, _)) => r,
                        m   = 1
                       } 
   end

   package view = graph_viewer_g (da_vinci)
   package l    = graph_layout

   fun view dag =
       view::view(
          l::makeLayout { node=\\ (n, (r, d))=>
                          [l::LABEL (int::to_string n$" r="$int::to_string r $
                                                  " d="$int::to_string d)
                          ],
                       edge=\\ (i, j, l)=>[l::LABEL (int::to_string l), l::COLOR "red"],
                       graph=\\ _ =>[] } dag
       )

end
