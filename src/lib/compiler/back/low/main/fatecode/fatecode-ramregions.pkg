## fatecode-ramregions.pkg

# Compiled by:
#     src/lib/compiler/core.sublib


stipulate
    package rkj =  registerkinds_junk;						# registerkinds_junk		is from   src/lib/compiler/back/low/code/registerkinds-junk.pkg
herein

    package   fatecode_ramregions
    : (weak)  Fatecode_Ramregions						# Fatecode_Ramregions		is from   src/lib/compiler/back/low/main/fatecode/fatecode-ramregions.api
    {
	package pt= points_to;							# points_to			is from   src/lib/compiler/back/low/aliasing/points-to.pkg

	Ramregion = pt::Ramregion;

	memory_cell    = pt::TOP { id=>rkj::make_ram_register 128, name=>"rw",        mutable=>TRUE  };
	readonly_cell  = pt::TOP { id=>rkj::make_ram_register 129, name=>"ro",        mutable=>FALSE };
	stack_cell     = pt::TOP { id=>rkj::make_ram_register 130, name=>"stack",     mutable=>TRUE  };
	spill_cell     = pt::TOP { id=>rkj::make_ram_register 131, name=>"spill",     mutable=>TRUE  };
	real_cell      = pt::TOP { id=>rkj::make_ram_register 132, name=>"real",      mutable=>FALSE };
	storelist_cell = pt::TOP { id=>rkj::make_ram_register 133, name=>"storelist", mutable=>TRUE  };		# This list tracks writes into the heap, for later use by the heapcleaner ("garbage collector").

	memory     = REF    memory_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.
	readonly   = REF  readonly_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.
	stack      = REF     stack_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.
	spill      = REF     spill_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.
	real       = REF      real_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.
	storelist  = REF storelist_cell;				# XXX BUGGO FIXME icky thread-hostile global mutable state.

	fun reset ()
	    =
	    {   memory    :=    memory_cell;
		readonly  :=  readonly_cell;
		stack     :=     stack_cell;
		spill     :=     spill_cell;
		real      :=      real_cell;	# "real" probably means "float" here.
		storelist := storelist_cell;
	    };

	my    ramregion_to_string
        = pt::ramregion_to_string;
    };
end;