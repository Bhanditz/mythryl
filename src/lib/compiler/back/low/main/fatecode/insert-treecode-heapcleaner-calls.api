# insert-treecode-heapcleaner-calls.api
#
# This is an alternative module for generating
# heapcleaner ("garbage collector") invocation code.
# There are a few improvements.
#
# All code to invoke heapcleaner is generated once at the end of the
# compilation unit---with one exception. For each cluster, a 
# call to heapcleaner is a jump  to the end of the cluster  where there 
# is another jump.
#
# Code to invoke heapcleaner for known functions is generated at the end of
# the cluster. This is important as there may be spilling across
# heapcleaner invocation calls.

# Compiled by:
#     src/lib/compiler/core.sublib


stipulate
    package fcf =  fatecode_form;				# fatecode_form			is from   src/lib/compiler/back/top/fatecode/fatecode-form.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/compiler/back/low/main/fatecode/insert-treecode-heapcleaner-calls-g.pkg
    #
    api Insert_Treecode_Heapcleaner_Calls {
	#
	package tcs: Treecode_Stream;				# Treecode_Stream		is from   src/lib/compiler/back/low/treecode/treecode-stream.api

	package mcg: Machcode_Controlflow_Graph			# Machcode_Controlflow_Graph	is from   src/lib/compiler/back/low/mcg/machcode-controlflow-graph.api
		     where
			 pop == tcs::cst::pop;			# "pop" == "pseudo_op".


	Fun_Info
	  =
	  { max_heapbytes_allocated_before_next_heaplimit_check:	Int,
	    #
	    regfmls:		List( tcs::tcf::Expression ),
	    regtys:		List( fcf::Type ),
	    return:		tcs::tcf::Void_Expression
	  };

	Stream
	   =
	   tcs::Treecode_Stream (
	       tcs::tcf::Void_Expression,
	       List( tcs::tcf::Expression ),
	       mcg::Machcode_Controlflow_Graph
	   );


	# List of registers which are used
	# as roots for the heapcleaner:
	#
	root_registers
	    :
	    List( tcs::tcf::Int_Expression );			# Float registers don't contain pointers, so heapcleaner can ignore them.


	# Initialize the state before compiling a module 
	#
	clear__ccomponent_heapcleaner_blocks__all_callers_known_heapcleaner_blocks__and__module_heapcleaner_blocks
	    :
	    Void -> Void;


	make_and_save_heaplimit_check_for_standard_function	    	      :	    Stream -> Fun_Info -> Void;
	make_and_save_heaplimit_check_for_all_callers_known_function	      :	    Stream -> Fun_Info -> Void;
	make_and_save_heaplimit_check_for_optimized_all_callers_known_function:	    Stream -> Fun_Info -> Void;


	# Generate a long jump to call heapcleaner ("garbage collector"). 
	#
	emit_longjump_heapcleaner_calls
	    :
	    Stream -> Void;


	# Generate all heapcleaner invocation code in a package:
	# 
	emit_heapcleaner_calls_for_package
	    :
	    Stream -> Void;


	# Generate the actual heapcleaner invocation code:
	#
#	emit_heapcleaner_call													# Commented out 2011-08-05 CrT because it is never called.
#	    :
#	    Stream
#	    ->
#	    { regfmls:	List( tcs::tcf::Expression ), 		# Formal parameters.
#	      regtys:	List( fcf::Type ),			# Formal paramter types.
#	      return:	tcs::tcf::Void_Expression
#	    }
#	    ->
#	    Void;

    };
end;

## Changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
