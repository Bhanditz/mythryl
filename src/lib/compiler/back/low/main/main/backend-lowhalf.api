## backend-lowhalf.api

# Compiled by:
#     src/lib/compiler/core.sublib



#  Generation of machine code from a list of fatecode functions 

stipulate
    package em  =  error_message;							# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package fcf =  fatecode_form;							# fatecode_form				is from   src/lib/compiler/back/top/fatecode/fatecode-form.pkg
    package pci =  per_compile_info;							# per_compile_info			is from   src/lib/compiler/front/typer-stuff/main/per-compile-info.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/compiler/back/low/main/main/backend-lowhalf-g.pkg
    #
    api Backend_Lowhalf {
	#
	include Backend_Lowhalf_Core;							# Backend_Lowhalf_Core			is from   src/lib/compiler/back/low/main/main/backend-lowhalf-core.api

	package t2m: Translate_Treecode_To_Machcode					# Translate_Treecode_To_Machcode		is from   src/lib/compiler/back/low/treecode/translate-treecode-to-machcode.api
		     where
			  mcg == mcg							# "mcg" == "machcode_controlflow_graph".
		     also mcf == mcg::mcf;						# "mcf" == "machcode_form" (abstract machine code).

	package ihc: Insert_Treecode_Heapcleaner_Calls					# Insert_Treecode_Heapcleaner_Calls	is from   src/lib/compiler/back/low/main/fatecode/insert-treecode-heapcleaner-calls.api
		     where
			  mcg == t2m::mcg						# "mcg" == "machcode_controlflow_graph".
		     also tcs == t2m::tcs;						# "tcs" == "treecode_stream".

	package crm									# "crm" == "compiler_register_moves".
	      : Compile_Register_Moves							# Compile_Register_Moves		is from   src/lib/compiler/back/low/code/compile-register-moves.api
	        where
	            mcf == t2m::mcf;							# "mcf" == "machcode_form" (abstract machine code).

	package mp									# Typically 					  src/lib/compiler/back/low/main/intel32/machine-properties-intel32.pkg
	      : Machine_Properties;							# Machine_Properties			is from   src/lib/compiler/back/low/main/main/machine-properties.api

	abi_variant
	    :
	    Null_Or(  String );	# To distinguish between different ABIs
				# for same CPU/OSKind combination;
				# prime example: intel-based macs which
				# are intel32/unix vs. intel-based linux
				# boxen.

	translate_fatecode_to_execode
	  :
	  { fatecode_functions:		List( fcf::Function ),				# Typically the complete set of functions for one sourcefile.
	    limits:			fcf::Variable					# Given a fun_id
					  ->						# return
					  { max_fun_heapwords:		Int,		# max words of heap memory allocated on any path through function body and
					    max_fun_ops:		Int		# max fatecode instructions executed on any path through function body.
					  },
	    #
	    err:			em::Plaint_Sink,
	    source_name:		String,						# Typically a filename, something like "<stdin>" if compiling interactively.
	    per_compile_info:		pci::Per_Compile_Info( deep_syntax::Declaration )
	  }
	  ->
	  (Void -> Int);
    };
end;


## COPYRIGHT (c) 1999 Lucent Technologies, Bell Labs 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
