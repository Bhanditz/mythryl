/* alignment.pkg --- determine if the allocation pointer should be
 *		     aligned on entry to function.
 */
api ALIGNMENT = api
  my build:  List( nextcode::function ) -> (Int -> Bool) 
end

package alignment {

  package ncf = nextcode

  exception Alignment

  fun error msg
      =
      error_message::impossible ("Alignment." + msg)

  fun build (cluster)
      =
      {
	  #  sorted_list should be replaced by int-binary-set 
	  fun hasFloats (ncf::RECORD (rk, _, _, e)) = 
	       (case rk of (ncf::RK_FCONT | ncf::RK_FBLOCK) => TRUE | _ => hasFloats (e))
	    | hasFloats (ncf::GET_FIELD(_, _, _, _, e)) = hasFloats (e)
	    | hasFloats (ncf::OFFSET(_, _, _, e)) = hasFloats (e)
	    | hasFloats (ncf::APPLY _) = FALSE
	    | hasFloats (ncf::FIX _) = error "hasFloats: FIX"
	    | hasFloats (ncf::SWITCH(_, _, el)) = let
		fun iter [] = FALSE
		  | iter (e . el) = hasFloats (e) or iter (el)
	      in iter el
	      end
	    | hasFloats (ncf::BRANCH(_, _, _, e1, e2)) = 
		hasFloats (e1) or hasFloats (e2)
	    | hasFloats (ncf::SETTER(_, _, e)) = hasFloats (e)
	    | hasFloats (ncf::LOOKER(_, _, _, _, e)) = hasFloats (e)
	    | hasFloats (ncf::MATH(_, _, _, _, e)) = hasFloats (e)
	    | hasFloats (ncf::PURE (ncf::P.fwrap, _, _, _, _)) = TRUE
	    | hasFloats (ncf::PURE(_, _, _, _, e)) = hasFloats (e);

	  fun doFunction((_, f, _, _, e), set)
              = 
	      if hasFloats e   then sorted_list::enter (f, set)
                               else set;

          sorted_list::member (list::fold_left doFunction [] cluster);

      }   #  Build 
};

