api INTEL32REWRITE_PSEUDO {
  package f:  FLOWGRAPH

    # Takes a cluster and returns a range of registers to prohibit 
    # from spilling.  The arguments are:
    # 1. The first pseudo register
    # 2. The regmap before RA32.  If this is guaranteed to be 
    #    an identity you can use the identity function.   
    #    I use i::C.lookup regmap.
    #    
    # 3. The cluster.
    #
    # It returns a range of registers.
    #
    # NOTE: this version does not assume that the original regmap
    #       is an identity.  So there is some ugly regmap business to
    #       take care of.

    
  my rewrite:  
      { firstPseudo:     f::I.c::cell,
        originalRegmap:  f::I.c::cell -> f::I.c::cell,
        pruneRegistersets:   Bool # should we remove references to memory 
                              # registers from all cell sets?
      } -> f::cluster -> f::I.c::cell * f::I.c::cell
end




###                  "I'm one of the most durable and fervent advocates
###                   of space exploration, but my take is that we could
###                   do it robotically at far less cost and far greater
###                   quantity and quality of results."
###
###                                         -- James Van Allen




generic package INTEL32RewritePseudo (
    #
    package instruction:  INTEL32INSTR
    package flowgraph:  FLOWGRAPH where I = Instr
    # 
    my ea:  Int -> Instr::operand
)
: INTEL32REWRITE_PSEUDO =
pkg
  package rgk =  registerkinds_intel32
  package is  =  machcode
  package flo =  flowgraph

  fun error msg = lowhalf_error_message::error("INTEL32RewritePseudo", msg)

  fun rewrite { firstPseudo, originalRegmap, pruneRegistersets } 
              (flo::CLUSTER { blocks, regmap, ... } ) = 
  let
    first = rgk::make_reg()
    lookup = rgk::lookup regmap
    fun shuffle (dests, srcs, tmp)  = let
      fun move (rd, rs) = is::MOVE { mv_op=is::MOVL, src=rs, dst=rd }
      fun loop((p as (rd, dst, rs, src)) . rest, changed, used, done, instrs) = 
	  if list::exists (fn (r:  is::C.cell) => dst==r) used then
	    loop (rest, changed, used, p . done, instrs)
	  else 
	    loop (rest, TRUE, used, done, move (is::DIRECT rd, is::DIRECT rs) . instrs)
	| loop([], FALSE, _, done, instrs) = (done, instrs)
	| loop([], TRUE, _, done, instrs) = 
	    loop (done, FALSE, map #4 done, [], instrs)

      fun cycle([], instrs) = instrs
	| cycle (moves, instrs) = 
	  (case loop (moves, FALSE, map #4 moves, [], instrs) 
	   of ([], instrs) => instrs
	    | ((rd, rd', rs, rs') . nonCyclic, instrs) => let
		my THE tmpR = tmp
		instrs' = move (tmpR, is::DIRECT rs) . instrs
		my (cyclic, instrs'') = 
		  loop (nonCyclic, FALSE, map #4 nonCyclic, [], instrs')
	      in cycle (cyclic, move (is::DIRECT rd, null_or::the tmp) . instrs'')
	      end
	  /*esac*/)
      fun rmCoalesced([], [], remain, coalesced) = (remain, coalesced)
	| rmCoalesced (rd . rds, rs . rss, remain, coalesced) = let
	    dst = lookup rd
	    src = lookup rs
	  in
	    if dst == -1 then #  eliminate dead copies 
	      rmCoalesced (rds, rss, remain, coalesced)
            else if dst == src then 
	      rmCoalesced (rds, rss, remain, 
                          move (is::DIRECT rd, is::DIRECT rs) . coalesced)
	    else rmCoalesced (rds, rss, (rd, dst, rs, src) . remain, coalesced)
	  end
    in reverse (cycle (rmCoalesced (dests, srcs, [], [])))
    end

    fun doBlock (flo::BBLOCK { blknum, instructions, liveOut, next, ... } ) = let
	  fun pseudoR r = (r >= 8 and r < firstPseudo)
	  fun resetLiveOut() = let
	    fun reset (gp, fp, cc) = 
	      liveOut := (list::filter (not o pseudoR) gp, fp, cc)
	  in
	    case *next
	     of [] => reset *liveOut
	      | [(flo::EXIT _, _)] => reset(*liveOut)
	      | _ => ()
	  end

	  #  subst: hd (acc) is the last instruction in the stream. 
	  fun subst (instruction, acc) = let
            fun mark (i,[]) = i
              | mark (instruction, note . notes) = mark (is::NOTE { instruction, note }, notes)

	    fun movl { src, dst, acc } = 
	        is::MOVE { mv_op=is::MOVL, src=src, dst=dst } . acc

	    fun displace (base, disp, acc, mem) = 
            let base' = originalRegmap base
            in  if pseudoR base' then 
	        let tmpR = rgk::make_reg()
		    newDisp = is::DISPLACE { base=tmpR, disp=disp, mem=mem }
  		in (newDisp, movl { src=ea base', dst=is::DIRECT tmpR, acc=acc } )
		end
 	        else (is::DISPLACE { base=base, disp=disp, mem=mem }, acc)
            end

	    fun indexedEa (base, index, scale, disp, mem) = 
	      is::Indexed { base=base, index=index, scale=scale, disp=disp, mem=mem }

	    fun indexed (NULL, index, scale, disp, acc, mem) = 
                let index' = originalRegmap index
                in  if pseudoR index' then 
		    let tmpR = rgk::make_reg()
		        newIndex = indexedEa (NULL, tmpR, scale, disp, mem)
		    in (newIndex, movl { src=ea index', dst=is::DIRECT tmpR, acc=acc } )
		    end
		    else (indexedEa (NULL, index, scale, disp, mem), acc)
                end
	      | indexed (ba as THE base, index, scale, disp, acc, mem) = 
                let base'  = originalRegmap base
                    index' = originalRegmap index
		    b = pseudoR base'
		    i = pseudoR index'
		in  if b and i then 
                    let tmpB = rgk::make_reg()
		        tmpI = rgk::make_reg()
		        operand = indexedEa (THE tmpB, tmpI, scale, disp, mem)
		    in (operand, movl { src=ea base', dst=is::DIRECT tmpB, 
				   acc=movl { src=ea index', 
                                            dst=is::DIRECT tmpI, acc=acc }} )
		    end
		  else if b then let
		      tmpB = rgk::make_reg()
		    in (indexedEa (THE tmpB, index, scale, disp, mem), 
			movl { src=ea base', dst=is::DIRECT tmpB, acc=acc } )
		    end
		  else if i then let
		      tmpI = rgk::make_reg()
		    in (indexedEa (ba, tmpI, scale, disp, mem), 
			movl { src=ea index', dst=is::DIRECT tmpI, acc=acc } )
		    end
		  else (indexedEa (ba, index, scale, disp, mem), acc)

		end
	    fun direct (r, acc) = 
            let r' = originalRegmap r
            in  if pseudoR r' then (ea r', acc) else (is::DIRECT r, acc) 
            end

	    fun operand (is::DIRECT r, acc) = direct (r, acc)
	      | operand (is::Indexed { base, index, scale, disp, mem }, acc) = 
		 indexed (base, index, scale, disp, acc, mem)
	      | operand (is::DISPLACE { base, disp, mem }, acc) = 
                 displace (base, disp, acc, mem)
	      | operand arg = arg

	    fun done (operand, f, an) = 
	    let my (operand', acc') = operand (operand, acc)
	    in  mark (f operand', an) . acc'
	    end

	    fun memArg (is::DISPLACE _) = TRUE
	      | memArg (is::Indexed _) = TRUE
	      | memArg (is::MemReg _) = TRUE
	      | memArg (is::LabelEA _) = TRUE
	      | memArg _ = FALSE

	    fun withTmp f =
            let t = rgk::make_reg()
	    in  f t
	    end

            fun rewriteCmpTest (cmptest, lsrc, rsrc, an) =
            let my (lsrcOpnd, acc1) = operand (lsrc, acc)
                my (rsrcOpnd, acc2) = operand (rsrc, acc1)
	    in  if memArg lsrcOpnd and memArg rsrcOpnd then 
		    withTmp (fn t =>
		       mark (cmptest { lsrc=is::DIRECT t, rsrc=rsrcOpnd }, an) .
			 movl { src=lsrcOpnd, dst=is::DIRECT t, acc=acc2 } )
		else
		    mark (cmptest { lsrc=lsrcOpnd, rsrc=rsrcOpnd }, an) . acc2
	    end

            fun rewrite (instruction, an) =
	    case instruction
	     of is::JMP (operand, labs) => done (operand, fn operand => is::JMP (operand, labs), an)
	      | is::JCC { operand, cond } => 
                  done (operand, fn operand => is::JCC { operand=operand, cond=cond }, an)
	      | is::MOVE { src, dst, mv_op } => let
		  my (srcOpnd, acc1) = operand (src, acc)
		  my (dstOpnd, acc2) = operand (dst, acc1)
		in
		  if memArg srcOpnd and memArg dstOpnd then 
		    withTmp (fn t =>
		       mark (is::MOVE { src=is::DIRECT t, dst=dstOpnd, mv_op=mv_op }, an) .
			    movl { src=srcOpnd, dst=is::DIRECT t, acc=acc2 } )
		  else 
		    mark (is::MOVE { src=srcOpnd, dst=dstOpnd, mv_op=mv_op }, an) . acc2
		end
	      | is::LEA { r32, address } => let
		  my (srcOpnd, acc1) = operand (address, acc)
                  r32' = originalRegmap r32
		in
		  if pseudoR r32' then 
		    withTmp (fn t =>
		       movl { dst=ea r32', src=is::DIRECT t, 
		 	    acc=mark (is::LEA { r32=t, address=srcOpnd }, an) . acc1 } )
		  else mark (is::LEA { r32=r32, address=srcOpnd }, an) . acc1
		end
	      | is::CMPL { lsrc, rsrc } => rewriteCmpTest (is::CMPL, lsrc, rsrc, an)
	      | is::CMPW { lsrc, rsrc } => rewriteCmpTest (is::CMPW, lsrc, rsrc, an)
	      | is::CMPB { lsrc, rsrc } => rewriteCmpTest (is::CMPB, lsrc, rsrc, an)
	      | is::TESTL { lsrc, rsrc } => rewriteCmpTest (is::TESTL, lsrc, rsrc, an)
	      | is::TESTW { lsrc, rsrc } => rewriteCmpTest (is::TESTW, lsrc, rsrc, an)
	      | is::TESTB { lsrc, rsrc } => rewriteCmpTest (is::TESTB, lsrc, rsrc, an)
	      | is::BINARY { binOp, src, dst } => let
		  my (srcOpnd, acc1) = operand (src, acc)
		  my (dstOpnd, acc2) = operand (dst, acc1)
		in 
		  if memArg srcOpnd and memArg dstOpnd then
		    withTmp (fn t =>
	             mark (is::BINARY { binOp=binOp, src=is::DIRECT t, dst=dstOpnd }, an) .
			 movl { src=srcOpnd, dst=is::DIRECT t, acc=acc2 } )
		  else 
                    mark (is::BINARY { binOp=binOp, src=srcOpnd, dst=dstOpnd }, an) . acc2
		end
	      | is::CALL (operand, def, uses, mem) => let
		  my (operand1, acc1) = operand (operand, acc)
		  fun registerset (gp, fp, cc) =
                    if pruneRegistersets then
		      (list::filter (not o pseudoR) gp, fp, cc)
                    else
                      (gp, fp, cc)
		in mark (is::CALL (operand1, registerset def, registerset uses, mem), an) . acc1
		end
	      | is::MULTDIV { multDivOp, src } => 
		  done (src, 
                       fn operand => is::MULTDIV { multDivOp=multDivOp, src=operand }, an)
	      | is::MUL3 { dst, src1, src2 } =>  let
		  my (src1Opnd, acc1) = operand (src1, acc)
                  dst' = originalRegmap dst
		in
		  if pseudoR dst' then
		    withTmp (fn t =>
		      movl { dst=ea dst', src=is::DIRECT t, acc=
			mark (is::MUL3 { dst=t, src1=src1Opnd, src2=src2 }, an) . acc1 } )
		  else mark (is::MUL3 { dst=dst, src1=src1Opnd, src2=src2 }, an) . acc1
		end
	      | is::UNARY { unOp, operand } => 
		  done (operand, fn operand => is::UNARY { unOp=unOp, operand=operand }, an)
	      | is::SET { cond, operand } => 
		  done (operand, fn operand => is::SET { cond=cond, operand=operand }, an)
	      | is::PUSHL operand => done (operand, is::PUSHL, an)	
	      | is::PUSHW operand => done (operand, is::PUSHW, an)	
	      | is::PUSHB operand => done (operand, is::PUSHB, an)	
	      | is::POP operand => done (operand, is::POP, an)
	      | is::CMOV { cond, src, dst } => 
                  let my (srcOpnd, acc1) = operand (src, acc)
                      dst' = originalRegmap dst
                  in  if pseudoR dst then
		        withTmp (fn t =>
		         movl { dst=ea dst', src=is::DIRECT t, acc=
                           mark (is::CMOV { cond=cond, dst=t, src=srcOpnd }, an) .
                             acc1 } )
		      else 
                        mark (is::CMOV { cond=cond, dst=dst, src=srcOpnd }, an) . acc1
                  end
	      | is::COPY { dst, src, tmp } => let
		  # Note:
		  #  Parallel copies are not allowed after this point.
		  #  Consider:
		  #    (r8, r9, edx) <- (566, 567, 560)
		  #
		  #  RA32 may well decide to allocate 560 to r8.
		  #  After the rewrite we will get:
		  #
		  #      mem[r8] <- 566
		  #	  mem[r9] <- 567
		  #          edx <- 560
		  # 
		  # If 560 should spill, we all of a sudden have the 
		  # incorrect value being read from the spill location.
		  
		  fun f((instruction as is::MOVE { mv_op, src, dst } ) . rest, acc) =
		      (case (src, dst)
			of (is::DIRECT s, is::DIRECT d) =>
                        let d' = originalRegmap d   
                            s' = originalRegmap s
			in  if s'==d' then f (rest, acc) 
                            else if pseudoR d' and pseudoR s' then
			            f (rest, withTmp (fn t =>
				       (movl { src=is::DIRECT t, dst=ea d', 
                                           acc=movl { src=ea s', 
                                             dst=is::DIRECT t, acc=acc }} )))
			    else if pseudoR d' then
			      f (rest, withTmp (fn t =>
				 (movl { src=is::DIRECT s, dst=ea d', acc=acc } )))
			    else if pseudoR s' then
			      f (rest, withTmp (fn t =>
			         (movl { src=ea s', dst=is::DIRECT d, acc=acc } )))
			    else f (rest, is::COPY { src=[s], dst=[d], tmp=NULL } . acc)
                        end

		         | _  => f (rest, instruction . acc)
		      /*esac*/)

		    | f([], acc) = acc
	        in f (shuffle (dst, src, tmp), acc)
		end
	      | is::FSTPT operand => done (operand, is::FSTPT, an)
	      | is::FSTPL operand => done (operand, is::FSTPL, an)
	      | is::FSTPS operand => done (operand, is::FSTPS, an)
	      | is::FSTL operand => done (operand, is::FSTL, an)
	      | is::FSTS operand => done (operand, is::FSTS, an)
	      | is::FLDT operand => done (operand, is::FLDT, an)
	      | is::FLDL operand => done (operand, is::FLDL, an)
	      | is::FLDS operand => done (operand, is::FLDS, an)
	      | is::FILD operand => done (operand, is::FILD, an)
	      | is::FILDL operand => done (operand, is::FILDL, an)
	      | is::FILDLL operand => done (operand, is::FILDLL, an)
	      | is::FENV { fenvOp, operand } => done (operand, 
                    fn operand => is::FENV { fenvOp=fenvOp, operand=operand }, an)
	      | is::FBINARY { src, dst, binOp } => 
		  done (src, 
                       fn operand => is::FBINARY { binOp=binOp, src=operand, dst=dst }, an)
	      | is::FIBINARY { src, binOp } => 
		  done (src, fn operand => is::FIBINARY { binOp=binOp, src=operand }, an)
              | is::NOTE { instruction, note } => rewrite (instruction, note . notes)
	      | _ => mark (instruction, an) . acc
          in  rewrite (instruction,[])
	  end #  subst 
	in instructions := list::fold_left subst [] (reverse(*instructions));
	   if pruneRegistersets then resetLiveOut() else ()
	end # DoBlock
      | doBlock _ = ()
  in apply doBlock blocks;  (first, rgk::make_reg())
  end #  rewrite 
end
