/* 
 * This generic factors out the machine independent part of the register
 * allocator.   This works well for RISC machines; not applicable to intel32.
 */
generic package backend (
    package translate_treecode_to_machcode:  Translate_Treecode_To_Machcode    #  instruction selection 
    package flowgraph:   FLOWGRAPH
    package machcode_universals:   Machcode_Universals
    package asm_emitter: Machcode_Codebuffer
    package ra:          CLUSTER_OPTIMIZATION
       sharing machcode_universals::I = flowgraph::I = asm_emitter::I = translate_treecode_to_machcode::I 
       sharing asm_emitter::P = flowgraph::P = translate_treecode_to_machcode::T.PseudoOp
       sharing ra::F = flowgraph
  ) : api
         package t:  Treecode
         package c:  Cells
         my coder:  label::label * List( t::statement ) -> Void  
      end
{
   package f      = flowgraph
   package t      = translate_treecode_to_machcode::T
   package i      = f::I
   package c      = i::C
   package stream = t::Stream

   #  Flowgraph generation 
   package flow_graph_g =
       ClusterGen (package flowgraph = F
                  package machcode_universals = machcode_universals
                  package treecode    = translate_treecode_to_machcode::T
                 )

   #  Assembly output 
   package assembler = 
      ClusterEmit (package f = F
                  package e = asm_emitter)

   fun error msg = lowhalf_error_message::error("backend", msg)

   /* How to compile a cluster */ 
   fun compile cluster =
   let cluster = ra::run cluster #  just run register allocation 
   in  assembler::asmEmit cluster    #  And output the assembly 
   end

   fun coder (functionName, treecodeStms) =
   let 
         #  initialize all hidden states first 
          label::reset();  /* okay, just the label counters */ 
       /*
        * Extract the methods from a stream 
        */
       my stream as Stream::STREAM
          { put_cccomponent_start,  # start a compilation unit consisting of one connected component of the callgraph.
            get_completed_cccomponent,    # end of callgraph connected component: Finalize and return it.
            put_op,          #  emit Treecode statement 
            put_private_label,   #  Define a local label 
            put_public_label,    #  Define an external entry 
            put__end_of_fn__mark,     #  mark the end of a procedure 
            put_pseudo_op,      #  emit a pseudo op 
            annotation,    #  Add an annotation 
            ... } =
            translate_treecode_to_machcode::translate_treecode_to_machcode
                (flow_graph_g::newStream { compile=compile, flowgraph=NULL } )
   in  start_new_cccomponent 0;      #  start a new cccomponent
       put_public_label functionName; #  Define the entry label 
       apply put_op treecodeStms; #  emit all the statements 
         #  IMPORTANT: normally you'll have to call the other methods too 
       get_completed_cccomponent []        #  end the cccomponent.
   end 
}
