
# ---------------------------------------------------------------------------
# First, some frontend dependent stuff.  Typically, you only need
# one instance of these things for each source language.
# ---------------------------------------------------------------------------


# User defined constant type.  Dummy for now.
# In practice, you'll want to use this type to implement constants with
# values that cannot be determined until final code generation, e.g.
# stack frame offset.

package user_const {

   type const = Void
   fun to_string () = ""  
   fun hash () = 0w0  
   fun valueOf _ = 0
   fun ==== _ = TRUE  
};


# Macro-expand label expressions with respect to user defined constants.
# This type is somewhat misnamed; it is used to represent constant 
# expressions.

#  package label_expression = treecode_label_expression_g (user_const) 


# User defined enum for representing aliasing.   Dummy for now.
# You'll need this to represent aliasing information. 

package user_region {

   type region = Void
   fun to_string () = "" 
   memory = ()
   stack = ()
   readonly = ()
   spill = ()
}


# User defined enum for representing pseudo assembly operators.
# Dummy for now.
#
# You'll need this to represent assembler directives. 

package user_pseudo_ops {

   type pseudo_op = Void  
   fun to_string () = ""
   fun emitValue _ = ()
   fun sizeOf _ = 0
   fun adjustLabels _ = TRUE
}



# Instruction stream enum.
# This is just a simple record type used by lowhalf to represent 
# instruction streams.

package stream = codestream (user_pseudo_ops)

/*
 * Client defined extensions.  None for now.
 * You'll need this only if you need to extend the set of Treecode operators
 */
package user_extension {

   type sx (S,R,F,C) = Void
   type rx (S,R,F,C) = Void
   type fx (S,R,F,C) = Void
   type ccx (S,R,F,C) = Void

}

/*
 * This module controls how we handle user extensions.  Since we don't
 * have any yet.  This is just a bunch of dummy routines.
 */
generic package UserTreecodeExtComp
   (package tcf:  Treecode_Form
    package i:  Machcode
      sharing t::label_expression = i::label_expression
   ) : Treecode_Extension_Compiler 
{
   package t = T
   package i = I
   package c = i::C
   type reducer =
     (i::instruction, c::registerset, i::operand, i::addressing_mode) t::reducer
   fun unimplemented _ = lowhalf_error_message::impossible "UserTreecodeExtComp"
   compileSext  = unimplemented
   compileRext  = unimplemented
   compileFext  = unimplemented
   compileCCext = unimplemented
}


/*
 * The Treecode RTL language.
 */
package treecode
    =
    treecode_transforms_g (					# treecode_transforms_g		is from   src/lib/compiler/back/low/treecode/treecode-transforms-g.pkg
	package label_expression = label_expression
	package region = user_region
	package stream = Stream
	package extension = user_extension
    )


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
