## treecode-stream-g.pkg
#
# See comments in src/lib/compiler/back/low/treecode/treecode-stream.api

# Compiled by:
#     src/lib/compiler/back/low/lib/lowhalf.lib



###                  "The difference between scientists and engineers
###                   is that when engineers screw up, people die."
###
###                      -- Frederick Orthlieb, engineering professor

# We get invoked (only) from:
#
#     src/lib/compiler/back/low/main/pwrpc32/backend-lowhalf-pwrpc32.pkg
#     src/lib/compiler/back/low/main/sparc32/backend-lowhalf-sparc32.pkg
#     src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg
#
generic package   treecode_stream_g   (
    #             =================
    #
    package tcf: Treecode_Form;				# Treecode_Form		is from   src/lib/compiler/back/low/treecode/treecode-form.api

    # codestream_g specialized with			# codestream_g		is from   src/lib/compiler/back/low/code/codestream-g.pkg
    # architecture-specific pseudo-ops;
    #
    package cst: Codestream;				# Codestream		is from   src/lib/compiler/back/low/code/codestream.api
)
: (weak) Treecode_Stream				# Treecode_Stream	is from   src/lib/compiler/back/low/treecode/treecode-stream.api
{
    # Export to client packages:
    #
    package tcf = tcf;
    package cst = cst;




    # Instruction streams
    #
    Treecode_Stream (I, A_registerset, A_cfg)
        =
        cst::Codestream (I, List(tcf::Note), A_registerset, A_cfg);


    # treecode extension mechanism -- see http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/mltree-ext.html
    #
    Reducer (A_instruction, A_registerset, A_operand, A_addressing_mode, A_cfg)
        =
	REDUCER { reduce_int_expression:	tcf::Int_Expression   -> tcf::Register,
		  reduce_float_expression:	tcf::Float_Expression -> tcf::Register,
		  reduce_flag_expression:	tcf::Flag_Expression  -> tcf::Register,			# flag expressions handle zero/parity/overflow/... flag stuff.

		  reduce_void_expression:	(tcf::Void_Expression, List(tcf::Note)) -> Void,	# Reduce statement to equivalent instructions.
		  operand:			tcf::Int_Expression -> A_operand,			# Reduce expression to operand (usually an immediate or register value).
		  reduce_operand:		A_operand -> tcf::Register,				# Move a native operand into a register.

		  address_of:			tcf::Int_Expression -> A_addressing_mode,		# Reduce an expression to a memory address.
		  emit_op:			(A_instruction, List( tcf::Note )) -> Void,		# Emit an instruction with an annotation.

		  codestream:			Treecode_Stream (A_instruction, A_registerset, A_cfg),	# The native-instruction output stream.

		  treecode_stream:              Treecode_Stream (					# Treecode output stream.
						     tcf::Void_Expression,
						     List( tcf::Expression ),
						     A_cfg
                                                )
		};
  
};



## COPYRIGHT (c) 2001 Lucent Technologies, Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
