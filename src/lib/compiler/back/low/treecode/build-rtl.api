
# Functions for building an RTL.

###   "Avoir de l'audacité, toujours l'audacité,
###    encore une fois l'audacité!"
###
###                         -- Danton

api BUILD_RTL =
api
   package rtl:  Treecode_Rtl
   type Type = Int

   my map:    Int -> (X -> Y) -> List(X) -> List(Y)

   my fetch:  Type -> RTL::loc -> RTL::expression
   my :=    : Type -> RTL::loc * RTL::expression -> RTL::action
   my aggb:   Type * Type -> RTL::cell -> RTL::loc 
   my aggl:   Type * Type -> RTL::cell -> RTL::loc
   my idaggr: Type -> RTL::cell -> RTL::loc
   my copy:   Type -> X * X -> RTL::action
   my !     : Type * String * String -> RTL::expression
   my @@@   : String * Type -> RTL::expression -> RTL::cell 
   my @@    : String * Type -> RTL::expression * RTL::expression -> RTL::cell 

   my intConst:    Type -> Int -> RTL::expression
   my wordConst:   Type -> unt1::word -> RTL::expression

   my newOp:  String -> List( RTL::expression ) -> RTL::expression
   my newCond:  String -> List( RTL::expression ) -> RTL::expression


   my immed:    Type -> RTL::expression -> RTL::expression
   my operand:  Type -> RTL::expression -> RTL::expression
   my label:    Type -> RTL::expression -> RTL::expression
   my forall:   Type -> RTL::expression -> RTL::expression
   my ?       : Type -> RTL::expression

   my not:    RTL::cond -> RTL::cond
   my False:  RTL::cond
   my True:   RTL::cond

   my sx:     Type * Type -> RTL::expression -> RTL::expression
   my zx:     Type * Type -> RTL::expression -> RTL::expression
   my bitslice:  Type -> List (Int * Int) -> RTL::expression -> RTL::expression

   #  Integer operators 
   my (-_)  : Type -> RTL::expression -> RTL::expression
   my +     : Type -> RTL::expression * RTL::expression -> RTL::expression
   my -     : Type -> RTL::expression * RTL::expression -> RTL::expression
   my muls:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my mulu:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my divs:   Type -> RTL::div_rounding_mode * RTL::expression * RTL::expression -> RTL::expression
   my divu:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my rems:   Type -> RTL::div_rounding_mode * RTL::expression * RTL::expression -> RTL::expression
   my remu:   Type -> RTL::expression * RTL::expression -> RTL::expression

   my bitwise_and:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_or:    Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_xor:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my eqvb:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_not:   Type -> RTL::expression -> RTL::expression
   my <<    : Type -> RTL::expression * RTL::expression -> RTL::expression
   my >>    : Type -> RTL::expression * RTL::expression -> RTL::expression
   my >>>   : Type -> RTL::expression * RTL::expression -> RTL::expression  

   #  Trapping operators 
   my addt:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my subt:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my mult:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my divt:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my remt:   Type -> RTL::expression * RTL::expression -> RTL::expression

   my cond:   Type -> RTL::cond * RTL::expression * RTL::expression -> RTL::expression

   #  Integer comparisons 
   my ====  : Type -> RTL::expression * RTL::expression -> RTL::cond
   my <>    : Type -> RTL::expression * RTL::expression -> RTL::cond
   my >     : Type -> RTL::expression * RTL::expression -> RTL::cond
   my <     : Type -> RTL::expression * RTL::expression -> RTL::cond
   my <=    : Type -> RTL::expression * RTL::expression -> RTL::cond
   my >=    : Type -> RTL::expression * RTL::expression -> RTL::cond
   my ltu:    Type -> RTL::expression * RTL::expression -> RTL::cond
   my leu:    Type -> RTL::expression * RTL::expression -> RTL::cond
   my gtu:    Type -> RTL::expression * RTL::expression -> RTL::cond
   my geu:    Type -> RTL::expression * RTL::expression -> RTL::cond

   #  Floating point operators 
   my fadd:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my fsub:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my fmul:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my fdiv:   Type -> RTL::expression * RTL::expression -> RTL::expression
   my fabs:   Type -> RTL::expression -> RTL::expression
   my fneg:   Type -> RTL::expression -> RTL::expression
   my fsqrt:  Type -> RTL::expression -> RTL::expression

   #  Floating point comparisons 
   my |?|     : Type -> RTL::expression * RTL::expression -> RTL::cond  
   my |!<=>|  : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |====|  : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?=|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!<>|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?>=|  : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |<|     : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!>=|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?>|   : Type -> RTL::expression * RTL::expression -> RTL::cond
   my |<=|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<=|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!>|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?<=|  : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |>|     : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?>|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!<=|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?<|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |>=|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?>=|   : Type -> RTL::expression * RTL::expression -> RTL::cond
   my |!<|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?=|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |<>|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!=|    : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?|    : Type -> RTL::expression * RTL::expression -> RTL::cond
   my |<=>|   : Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<>|   : Type -> RTL::expression * RTL::expression -> RTL::cond

   #  Action combinators 
   my ||    : RTL::action * RTL::action -> RTL::action   #  parallel RTL::actions 
   my Nop:    RTL::action                    #  empty RTL::action 
   my Jmp:    Int -> RTL::expression -> RTL::action    #  jump to address 
   my Call:   Int -> RTL::expression -> RTL::action    #  Call address 
   my Ret:    RTL::action                    #  return 
   my If:     RTL::cond * RTL::action * RTL::action -> RTL::action #  if/then/else 
end
