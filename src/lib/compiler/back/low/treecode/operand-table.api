## operand-table.api -- derived from  ~/src/sml/nj/smlnj-110.58/new/new/src/MLRISC/mltree/operand-table.sig
#
# A table for storing operands for a compilation unit.
# We give each distinct operand a unique (negative) value number.

# Compiled by:
#     src/lib/compiler/back/low/lib/rtl.lib

stipulate
    package rkj =  registerkinds_junk;							# registerkinds_junk	is from   src/lib/compiler/back/low/code/registerkinds-junk.pkg
herein
    # This api is currently referenced only in
    #
    #     src/lib/compiler/back/low/treecode/operand-table-g.pkg
    #
    # but see also
    #
    #     src/lib/compiler/back/low/tools/arch/adl-gen-ssaprops.pkg:			"package operand_table:  OPERAND_TABLE where I = Instr",
    #     src/lib/compiler/back/low/tools/arch/adl-gen-rtlprops.pkg:			 "package operand_table:  OPERAND_TABLE where I = Instr",
    #
    api Operand_Table {
	#
	package mcf:  Machcode_Form;							# Machcode_Form		is from   src/lib/compiler/back/low/code/machcode-form.api

	Operand_Table;

	Value_Number = rkj::Codetemp_Info;

	Const
	  = INT  Int									# Small integer operand.
	  | INTINF machine_int::Machine_Int						# Large integer operand.
	  | OPERAND i::Operand								# Other         operand.
	  ;

	Value_Number_Methods
	    =
	    VALUE_NUMBERING
	      { int:      Int          -> Value_Number,
		unt:      Unt          -> Value_Number,
		unt32:    unt32::Unt   -> Value_Number,
		int1:    int1::Int   -> Value_Number,
		intinf:   integer::Int -> Value_Number,
		operand:  i::Operand   -> Value_Number
	      };

	exception NO_OPERAND;
	exception NO_INT;
	exception NO_INT_INF;
	exception NO_CONST;

	# Special values:
	#
	bot:       Value_Number;
	top:       Value_Number;
	volatile:  Value_Number;

	create:   Ref(Int) -> Operand_Table;						# Create a new table.

	#  Lookup methods 

	#  Value number -> int/operand/label 
	const:        Value_Number -> Const;
	int:          Operand_Table -> Int          -> Value_Number;
	unt:          Operand_Table -> Unt          -> Value_Number;
	int1:        Operand_Table -> int1::Int   -> Value_Number;
	unt32:        Operand_Table -> unt32::Unt   -> Value_Number;
	intinf:       Operand_Table -> integer::Int -> Value_Number;
	operand:      Operand_Table -> i::Operand   -> Value_Number;

	make_new_value_numbers:  Operand_Table -> Value_Number_Methods;			# Create new value numbers.

	lookup_value_numbers:    Operand_Table -> Value_Number_Methods;			# Look up but don't create.

    };
end;
