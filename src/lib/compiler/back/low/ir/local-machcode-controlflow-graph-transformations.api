## local-machcode-controlflow-graph-transformations.api.unused

# This module includes some very basic machcode_controlflow_graph transformations.
#
# -- Allen Leung

api Local_Machcode_Controlflow_Graph_Transformations =
api

    package mcg:  Machcode_Controlflow_Graph

    # =======================================================================
    # Get a label from a block
    # =======================================================================
    my labelOf:  mcg::Machcode_Controlflow_Graph -> graph::node_id -> label::label

    # =======================================================================
    #  Update the label of the branch instruction in a block
    #  to be consistent with the control flow edges.  
    #  This is an NOP if the machcode_controlflow_graph is already consistent.
    # =======================================================================
    my updateJumpLabel:  mcg::Machcode_Controlflow_Graph -> graph::node_id -> Void

    # =======================================================================
    #  Copy an edge
    # =======================================================================
    my copyEdge:  mcg::edge_info -> mcg::edge_info

    # =======================================================================
    #  Merge a control flow edge.  Return FALSE if merging is unsuccessful.
    # =======================================================================
    my mergeEdge:  mcg::Machcode_Controlflow_Graph -> mcg::edge -> Bool

    # =======================================================================
    #  Eliminate the jump (insert a jump)
    #     at the end of the current block if it is feasible.
    #  Return TRUE iff it is successful.
    # =======================================================================
    my eliminateJump:  mcg::Machcode_Controlflow_Graph -> graph::node_id -> Bool
    my insertJump:     mcg::Machcode_Controlflow_Graph -> graph::node_id -> Bool

    # =======================================================================
    #  Split a control flow edge, return a new edge and the new block.
    #  If the jump flag is TRUE, then a jump is always placed in the 
    #  new block; otherwise, we try to eliminate the jump when feasible.
    # =======================================================================
    my splitEdge:   mcg::Machcode_Controlflow_Graph -> 
		       { kind:  mcg::block_kind,
			 edge:  mcg::edge,
			 jump:  Bool
		       } ->
		       { edge:  mcg::edge,
			 node:  mcg::node
		       }
    # =======================================================================
    #  Test if an edge is critical.  An edge i->j is critical iff 
    #  there are multiple entries into j and multiple exits out of i,
    #  i.e. it is both a merge and a split node.
    # =======================================================================
    my isMerge:         mcg::Machcode_Controlflow_Graph -> graph::node_id -> Bool
    my isSplit:         mcg::Machcode_Controlflow_Graph -> graph::node_id -> Bool
    my hasSideExits:    mcg::Machcode_Controlflow_Graph -> graph::node_id -> Bool
    my isCriticalEdge:  mcg::Machcode_Controlflow_Graph -> mcg::edge -> Bool

    # =======================================================================
    #  Split all critical edges in the machcode_controlflow_graph.
    #  This may introduce extra jumps into the program.
    # =======================================================================
    my splitAllCriticalEdges:  mcg::Machcode_Controlflow_Graph -> Void

    # =======================================================================
    #  Check whether two blocks are necessary connected.
    #  Blocks i and j are connected iff i must be layout before j.
    # =======================================================================
    my mustPreceed:  mcg::Machcode_Controlflow_Graph -> graph::node_id * graph::node_id -> Bool

    # =======================================================================
    #  Tail duplicate a region until it only has a single entry.
    #  Return the set of new nodes and new edges.  The region is represented
    #  as a subgraph view.
    # =======================================================================
    my tailDuplicate:  mcg::Machcode_Controlflow_Graph -> 
                        { subgraph:  mcg::Machcode_Controlflow_Graph,
                          root:      graph::node_id
                        } -> 
                        { nodes:  List( mcg::node ), 
                          edges:  List( mcg::edge )
                        } 

    # =======================================================================
    #  Remove all unreachable code 
    # =======================================================================
    my removeUnreachableCode:  mcg::Machcode_Controlflow_Graph -> Void

    # =======================================================================
    #  Try to merge all edges
    # =======================================================================*)
    my mergeAllEdges:  mcg::Machcode_Controlflow_Graph -> Void

end

