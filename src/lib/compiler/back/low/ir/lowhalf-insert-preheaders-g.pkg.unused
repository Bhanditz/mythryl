#
# This module inserts preheaders
#
# -- Allen Leung



generic package InsertPreheaders
  (package ir:         LOWHALF_IR
   package machcode_universals:  Machcode_Universals
     sharing ir::machcode_controlflow_graph::I = machcode_universals::I
  ) : Lowhalf_Ir_Improver 
{

   package ir   = IR
   package machcode_controlflow_graph  = ir::machcode_controlflow_graph
   package loop = ir::Loop
   package util = ir::Util
   package w    = machcode_controlflow_graph::W
   package g    = graph

   type flowgraph = ir::IR 

   preheaders = LowhalfControl::getCounter "preheaders-inserted"

   name = "InsertPreheaders"

   fun error msg = lowhalf_error_message::error (name, msg)

   fun run IR =
   let  my CFG as g::GRAPH mcg = IR
        my g::GRAPH loop = ir::loop IR

        fun is_falls_thru (_, _, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::BRANCH FALSE, ... } ) = TRUE
          | is_falls_thru(_, _, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::FALLSTHRU, ... } ) = TRUE
          | is_falls_thru(_, _, _) = FALSE

        changed = REF FALSE

        fun process_loop (_, Loop::LOOP { backedges=[], ... } ) = ()
          | process_loop(_, Loop::LOOP { header, backedges, ... } ) =
        let fun find_entries ([], entries, freq) = (entries, freq)
              | find_entries((e as (i, j, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::ENTRY, ... } )) . es, _, _) = 
                 error "insert_preheaders"
              | find_entries((e as (i, j, machcode_controlflow_graph::EDGE { w, k, ... } )) . es, entries, freq) = 
                 if list::exists (fn (i', j', _) => i==i' and j==j') backedges
                 then find_entries (es, entries, freq)
                 else find_entries (es, e . entries,*w + freq)
            my (entries, w) = find_entries (mcg.in_edges header,[], 0)
            header_node = mcg.node_info header
            preheader   = mcg.new_id ()
            my preheader_node as machcode_controlflow_graph::BLOCK { freq, annotations, instructions, ... } =
                 machcode_controlflow_graph::newBlock (preheader, REF w)
            no_jump = list::exists is_falls_thru entries
            new_edge = machcode_controlflow_graph::EDGE { k=if no_jump then machcode_controlflow_graph::FALLSTHRU 
                                      else machcode_controlflow_graph::JUMP, w=REF w, a=REF [] }
        in  changed := TRUE;
            preheaders := *preheaders + 1;
            mcg.add_node (preheader, preheader_node);
            mcg.add_edge (preheader, header, new_edge);
            if no_jump then () 
               else instructions := [machcode_universals::jump (machcode_controlflow_graph::define_local_label header_node)];
            apply (fn (i, _, _) => 
                let fun edge (i, j, e) = 
                         (i, if j == header then preheader else j, e)
                in  mcg.set_out_edges (i, map edge (mcg.out_edges i));
                    Util::updateJumpLabel CFG i
                end) entries
        end 
   in   
        loop.forall_nodes process_loop;
        if *changed then ir::changed IR 
        IR
   end



