## build-machcode-controlflow-graph-g.pkg -- Derived from ~/src/sml/nj/smlnj-110.60/MLRISC/IR/mlrisc-mcg-gen2.sml

# This module builds a machcode_controlflow_graph from a stream of instructions.
# We use the FLOWGRPAH_GEN interface here, which is the 
# default interface used by the core lowhalf.
#
#                                        -- Allen Leung

# This appears to be the facility described in the
#     "Directly from instructions"
# section of
#     http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/mlrisc-ir.html 
#
# The live version of this code appears to be
#     src/lib/compiler/back/low/mcg/make-machcode-codebuffer-g.pkg


generic package  build_machcode_controlflow_graph_g   (
    #            =================================
    #
    package machcode_controlflow_graph:		Machcode_Controlflow_Graph
    package machcode_universals:			Machcode_Universals
    package treecode:				Treecode
     sharing machcode_controlflow_graph::I = machcode_universals::I
     sharing Treecode::Constant = machcode_universals::i::Constant
     sharing Treecode::PseudoOp = machcode_controlflow_graph::P 
  )

: FLOWGRAPH_GEN		# This API appears to be defined nowhere in the SML/NJ codebase.
			# There -is- a CONTROL_FLOWGRAPH_GEN signature defined and implemented in
			#     ~/src/sml/nj/smlnj-110.60/MLRISC/mcg/buildFlowgraph.sml
			# The live version of this api appears to be  Make_Machcode_Codebuffer   in
			#     src/lib/compiler/back/low/mcg/make-machcode-codebuffer-g.pkg
{

   package i = machcode_controlflow_graph::I
   package c = i::C
   package s = Treecode::Stream
   package t = Treecode
   package p = machcode_controlflow_graph::P
   package builder = ControlFlowGraphGen
     (package machcode_controlflow_graph = machcode_controlflow_graph
      package stream = S
      package machcode_universals = machcode_universals
     )

   type flowgraph = machcode_controlflow_graph::mcg

   fun newStream { compile, flowgraph } =
   let mcg = REF (case flowgraph of
                       NULL => machcode_controlflow_graph::new()
                     | THE mcg => mcg
                    )
       my { stream, next } = Builder::builder *mcg
       my s::STREAM { start_new_cccomponent, get_completed_cccomponent, pseudoOp, emit, put__end_of_fn__mark,
                    get_notes, comment, annotation,
                    put_private_label, put_public_label, ... } 
                      = stream
       fun endCFG a = 
       let get_completed_cccomponent a
           oldCFG = *mcg
           newCFG = machcode_controlflow_graph::new()
       in  mcg := newCFG;
           next newCFG;
           compile oldCFG
       end 

   in  s::STREAM { start_new_cccomponent,
                get_completed_cccomponent     => endCFG,
                pseudoOp       => pseudoOp,
                emit,
                put__end_of_fn__mark,
                comment,
                annotation,
                get_notes,
                put_private_label,
                put_public_label
               }
   end

};

