/*
 * This module takes a stream of instructions and build a machcode_controlflow_graph.
 * The building can be incremental.
 *
 * -- Allen Leung
 */
generic package ControlFlowGraphGen
   (package machcode_controlflow_graph:      Machcode_Controlflow_Graph
    package stream:   Codestream
    package machcode_universals:  Machcode_Universals
        sharing machcode_controlflow_graph::I = machcode_universals::I
        sharing machcode_controlflow_graph::P = Stream::P
   ) : ABSCODE_CONTROLFLOW_GRAPH_GEN
{

   package machcode_controlflow_graph     = machcode_controlflow_graph
   package i       = machcode_controlflow_graph::I
   package p       = machcode_controlflow_graph::P
   package g       = graph
   package w       = machcode_controlflow_graph::W
   package s       = Stream

   fun error msg = lowhalf_error_message::error("ControlFlowGraphGen", msg)

   fun builder (CFG) = 
   let NOBLOCK      = machcode_controlflow_graph::newBlock(-1, REF 0)
       currentablock = REF NOBLOCK 
       newBlocks    = REF [] : Ref(  List(  machcode_controlflow_graph::block ) ) 
       blockNames   = REF [] : Ref(  Annotations::annotations )
       entryLabels  = REF [] : Ref( List( label::label ) )
       fun can'tUse _   = error "unimplemented"
       exception NOT_FOUND
       labelMap = int_hashtable::make_hashtable (32, NOT_FOUND)
       newLabel = int_hashtable::set labelMap
       lookupLabel = int_hashtable::lookup labelMap
       CFG    = REF CFG

       #  Initialization 
       fun init _ =
       let my g::GRAPH mcg = *CFG
       in  int_hashtable::clear labelMap;
           mcg.forall_nodes 
             (fn (blockId, machcode_controlflow_graph::BLOCK { labels, ... } ) =>
                  apply (fn label::Label { id, ... } => newLabel (id, blockId))
                      *labels);
           currentablock := NOBLOCK;
           newBlocks := [];
           blockNames := [];
           entryLabels := []
       end   

       init()

       fun next mcg
           =
           CFG := mcg

       fun newBlock() = 
       let my g::GRAPH mcg = *CFG
           id = mcg.new_id ()
           my b as machcode_controlflow_graph::BLOCK { annotations, ... } = machcode_controlflow_graph::newBlock (id, REF 0)
       in  currentablock := b; 
           annotations := *blockNames;
           newBlocks := b . *newBlocks;
           mcg.add_node (id, b);
           b 
       end

       fun getablock () = 
           case *currentablock of
              machcode_controlflow_graph::BLOCK { id= -1, ... } => newBlock()
           |  b => b

       fun newPseudoOpBlock() =
            (case *currentablock of
                machcode_controlflow_graph::BLOCK { id= -1, ... } => newBlock()
             |  b as machcode_controlflow_graph::BLOCK { instructions=REF [], ... } => b
             |  _ => newBlock()
            )  

       fun insertOp p = 
       let my machcode_controlflow_graph::BLOCK { data, ... } = newPseudoOpBlock()
       in  data := *data @ [p] end

       #  Add a new label 
       fun define_local_label (l as label::Label { id=labelId, ... } ) = 
       let id = lookupLabel labelId
           my g::GRAPH mcg = *CFG
           my blk as machcode_controlflow_graph::BLOCK { instructions, ... } = mcg.node_info id
       in  currentablock := blk;
           newBlocks := blk . *newBlocks;
           instructions := []; #  Clear instructions 
           mcg.set_out_edges (id,[]) #  Clear edges 
       end except _ =>
       let my machcode_controlflow_graph::BLOCK { id, labels, ... } = newPseudoOpBlock()
       in  labels := l . *labels;
           newLabel (labelId, id)
       end

       #  Add a new entry label 
       fun define_global_label l = (define_local_label l; entryLabels := l . *entryLabels)

       #  Add a new pseudo op 
       fun pseudoOp p = insertOp (machcode_controlflow_graph::PSEUDO p)

       fun nextablock () =
           case *currentablock of
              machcode_controlflow_graph::BLOCK { id= -1, ... } => ()
           |  b => currentablock := NOBLOCK

       #  Add a new annotation 
       fun annotation a = 
           case a of
             lowhalf_notes::BLOCKNAMES names =>
                (blockNames := names;
                 nextablock()
                )
           | lowhalf_notes::EMPTYBLOCK => nextablock()
           | a => 
              let my machcode_controlflow_graph::BLOCK { annotations, ... } = getablock()
              in  annotations := a . *annotations
              end

       #  Mark current block as exit 
       fun end_procedure liveOut = 
       let fun setLiveOut (machcode_controlflow_graph::BLOCK { annotations, ... } ) = 
                 annotations := machcode_controlflow_graph::LIVEOUT.create liveOut . *annotations
       in  case *currentablock of
              machcode_controlflow_graph::BLOCK { id= -1, ... } => 
                (case *newBlocks of
                   [] => error "end_procedure"
                 | b . _ => setLiveOut b
                )
            | b => setLiveOut b
       end

       #  Add a new comment 
       fun comment msg = annotation (lowhalf_notes::COMMENT.create msg)

       #  Emit an instruction 
       fun emit i =
       let my machcode_controlflow_graph::BLOCK { instructions, ... } = getablock()
       in  instructions := i . *instructions;
           case machcode_universals::instrKind i of
             (machcode_universals::IK_JUMP | machcode_universals::IK_CALL_WITH_CUTS) =>
                currentablock := NOBLOCK
           | _ => () 
       end

       #  End current cluster 
       fun end_connected_component (annotations) =
       let my g::GRAPH mcg = *CFG
           machcode_controlflow_graph::init *CFG #  Create entry/exit 

           ENTRY = hd (mcg.entries ())
           EXIT = hd (mcg.exits ())

           fun next (machcode_controlflow_graph::BLOCK { id, data=REF [], ... } . _) = id
             | next _ = error "next"

           lookupLabelMap = int_hashtable::find labelMap
           lookupLabelMap = 
                fn l => case lookupLabelMap l of THE b => b | NULL => EXIT 
           true = machcode_controlflow_graph::BRANCH TRUE
           false = machcode_controlflow_graph::BRANCH FALSE
           addEdge = mcg.add_edge

           fun target (label::Label { id, ... } ) = lookupLabelMap id

           fun addEdges [] = ()
             | addEdges (machcode_controlflow_graph::BLOCK { id, instructions, ... } . blocks) =
               (case *instructions of
                  [] => fallsThru (id, blocks)
                | instruction . _ =>
                   (case machcode_universals::instrKind instruction of 
                      (machcode_universals::IK_JUMP | machcode_universals::IK_CALL_WITH_CUTS) =>
                        jump (id, machcode_universals::branchTargets instruction, blocks)
                   | _ => fallsThru (id, blocks)
                   );
                addEdges blocks
               )
           and fallsThru (i, machcode_controlflow_graph::BLOCK { id=j, data, ... } . _) =
                 (case *data of
                     [] => ()
                  |  _  => error("falls thru into pseudo ops: " $
                                 int::to_string i$" -> "$int::to_string j)
                  ;
                  addEdge (i, j, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::FALLSTHRU, w=REF 0, a=REF [] } )
                 )
             | fallsThru (i,[]) =
                  #  error("missing return in block "$int::to_string i) 
                  addEdge (i, EXIT, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::EXIT, w=REF 0, a=REF [] } )
           and jump (i,[machcode_universals::ESCAPES], _) =
                  addEdge (i, EXIT, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::EXIT, w=REF 0, a=REF [] } )
             | jump (i,[machcode_universals::LABELLED L], _) =
                  addEdge (i, target L, machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::JUMP, w=REF 0, a=REF [] } )
             | jump (i,[machcode_universals::LABELLED L, machcode_universals::FALLTHROUGH], bs) =
                  (addEdge (i, target L, machcode_controlflow_graph::EDGE { k=true, w=REF 0, a=REF[] } );
                   addEdge (i, next bs, machcode_controlflow_graph::EDGE { k=false, w=REF 0, a=REF [] } )
                  )
             | jump (i,[machcode_universals::FALLTHROUGH, machcode_universals::LABELLED L], bs) =
                  (addEdge (i, target L, machcode_controlflow_graph::EDGE { k=true, w=REF 0, a=REF [] } );
                   addEdge (i, next bs, machcode_controlflow_graph::EDGE { k=false, w=REF 0, a=REF [] } )
                  )
             | jump (i, targets, _) =
               let fun loop (n,[]) = ()
                     | loop (n, machcode_universals::LABELLED L . targets) =
                        (addEdge (i, target L, 
                           machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::SWITCH n, w=REF 0, a=REF [] } );
                       loop (n+1, targets))
                     | loop _ = error "jump"
               in  loop (0, targets) end
          in  addEdges (reverse *newBlocks);
              apply (fn l => addEdge (ENTRY, target l,
                              machcode_controlflow_graph::EDGE { k=machcode_controlflow_graph::ENTRY, a=REF [], w=REF 0 } )) 
                     *entryLabels;
              let an = machcode_controlflow_graph::annotations *CFG;
              in  an := annotations @ *an end;
              init()
          end

       #  Start a new cluster 

       fun begin_connected_component _
           =
           init ()
  
       fun get_notes ()
           =
           machcode_controlflow_graph::annotations *CFG

    in  { stream=s::STREAM
           {  begin_connected_component,
              end_connected_component,
              define_local_label,
              define_global_label,
              pseudoOp,
              emit,
              end_procedure,
              comment,
              annotation,
              get_notes
           },
         next = next
        }
    end  

}
