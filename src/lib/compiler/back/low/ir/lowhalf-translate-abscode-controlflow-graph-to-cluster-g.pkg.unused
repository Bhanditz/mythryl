## lowhalf-translate-machcode-controlflow-graph-to-cluster-g.pkg
/* 
 *  Convert the new control flow graph format back into the old cluster format
 *
 *  -- Allen Leung
 */

api CFG2CLUSTER =
api
   package machcode_controlflow_graph:  Machcode_Controlflow_Graph
   package f:    FLOWGRAPH
      sharing machcode_controlflow_graph::I = f::I
      sharing machcode_controlflow_graph::P = f::P

   /* 
    * If relayout is TRUE, then always use the layout algorithm.
    * Otherwise, try to preserve the original layout if possible.
    */
   my cfg2cluster:  { mcg:       machcode_controlflow_graph::mcg,
                       relayout:  Bool   
                     } -> f::cluster

end 

generic package CFG2Cluster
   (package machcode_controlflow_graph:        Machcode_Controlflow_Graph
    package flowgraph:  FLOWGRAPH
       sharing machcode_controlflow_graph::I = flowgraph::I
       sharing machcode_controlflow_graph::P = flowgraph::P
   )

: CFG2CLUSTER

{

    package machcode_controlflow_graph      = machcode_controlflow_graph
    package w        = machcode_controlflow_graph::W
    package f        = flowgraph
    package g        = graph
    package q        = priority_queue
    package set      = bit_set
    package a        = rw_vector

    fun error msg = lowhalf_error_message::error("CFG2Cluster", msg)

    dummyNode = f::LABEL (label::Label { id= -1, address=REF -1, name=""} )

    fun pseudo_op (machcode_controlflow_graph::LABEL l) = f::LABEL l
      | pseudo_op (machcode_controlflow_graph::PSEUDO p) = f::PSEUDO p

        #  Create a new BBLOCK with id i 
    fun bblock M (i, b as 
                 machcode_controlflow_graph::BLOCK { kind, freq, annotations, instructions, labels, data, ... } ) =
    let labels = map f::LABEL *labels
    in  case kind of
           machcode_controlflow_graph::STOP => map pseudo_op *data
        |  _ =>
        let block = f::BBLOCK { blknum      = i,
                                 freq        = freq,
                                 annotations = REF (machcode_controlflow_graph::LIVEOUT.rmv 
                                                    *annotations),
                                 instructions       = instructions,
                                 liveIn      = REF f::C.empty,
                                 liveOut     = REF (machcode_controlflow_graph::liveOut b),
                                 prior        = REF [],
                                 next        = REF []
                                }
       in  a::update (M, i, block); 
           map pseudo_op *data @ labels @ [block]
       end
    end

    fun bblock' (M, M', M'') =
    let bblock = bblock M
    in  \\ (i, b as machcode_controlflow_graph::BLOCK { id, ... } ) =>
           let block = bblock (i, b) 
           in  a::update (M', i, id); a::update (M'', id, i); block end
    end

        #  Create a new ENTRY with id i 
    fun entry (M, i, freq) =
    let entry = f::ENTRY { next=REF [], blknum=i, freq=freq }
    in  a::update (M, i, entry); 
        entry
    end

    fun entry'(M, M', M'', i, id, freq) =
    let entry = entry (M, i, freq)
    in  a::update (M', i, id); a::update (M'', id, i); entry
    end

        #  Create a new EXIT with id i 
    fun exit (M, i, freq) = 
    let exit = f::EXIT { prior=REF [], blknum=i, freq=freq }
    in  a::update (M, i, exit); 
        exit
    end

    fun exit'(M, M', M'', i, id, freq) =
    let exit = exit (M, i, freq)
    in  a::update (M', i, id); a::update (M'', id, i); exit
    end

    fun id_of (f::BBLOCK { blknum, ... } ) = blknum
      | id_of (f::ENTRY { blknum, ... } )  = blknum
      | id_of (f::EXIT { blknum, ... } )   = blknum

    fun remove_entry_to_exit (ENTRY, EXIT, CFG) =
        graph::remove_edge CFG (ENTRY, EXIT)

    fun freqOf (g::GRAPH mcg) id =
        let my machcode_controlflow_graph::BLOCK { freq, ... } = mcg.node_info id in freq end

       /*
        * Convert mcg -> cluster, assuming the layout is unchanged
        */
    fun computeOldLayout (CFG as g::GRAPH mcg) =
    let M       = mcg.capacity ()
        ENTRY   = case mcg.entries () of
                        [ENTRY] => ENTRY
                      | _ => raise exception graph::NOT_SINGLE_ENTRY
        EXIT    = case mcg.exits () of
                        [EXIT] => EXIT
                      | _ => raise exception graph::NOT_SINGLE_EXIT
        my machcode_controlflow_graph::INFO { annotations, ... } = mcg.graph_info
        remove_entry_to_exit (ENTRY, EXIT, CFG)
        A       = a::rw_vector (M, dummyNode)
        nodes   = list::filter (\\ (i, machcode_controlflow_graph::BLOCK { kind, ... } ) => 
                           i != ENTRY and i != EXIT) 
                                 (mcg.nodes ())
        blocks  = list::cat(
                        map (bblock A) (nodes @ [(EXIT, mcg.node_info EXIT)]))
        entry   = entry (A, ENTRY, freqOf CFG ENTRY)
        exit    = exit (A, EXIT, freqOf CFG EXIT)
        fun succs i = map (\\ (_, i, machcode_controlflow_graph::EDGE { w, ... } ) => (a::sub (A, i), w)) 
                            (mcg.out_edges i)
        fun preds i = map (\\ (i, _, machcode_controlflow_graph::EDGE { w, ... } ) => (a::sub (A, i), w)) 
                            (mcg.in_edges i)
        fun set_links (f::BBLOCK { blknum, prior, next, instructions, ... } ) = 
                  (prior := preds blknum; next := succs blknum)
          | set_links (f::ENTRY { blknum, next, ... } ) = next := succs blknum
          | set_links (f::EXIT { blknum, prior, ... } )  = prior := preds blknum
          | set_links _ = ()
        a::apply set_links A
    in  f::CLUSTER { blkCounter  = REF M,
                   blocks      = blocks,
                   entry       = entry,
                   exit        = exit,
                   annotations = annotations
                 }
    end

       /*
        * Convert mcg -> cluster, while computing a new code layout.
        */
    fun computeNewLayout (CFG as g::GRAPH mcg) =
    let M        = mcg.capacity ()
        ENTRY   = case mcg.entries () of
                        [ENTRY] => ENTRY
                      | _ => raise exception graph::NOT_SINGLE_ENTRY
        EXIT    = case mcg.exits () of
                        [EXIT] => EXIT
                      | _ => raise exception graph::NOT_SINGLE_EXIT
        my machcode_controlflow_graph::INFO { first_block, annotations, ... } = 
               mcg.graph_info
        A        = a::rw_vector (M, dummyNode)    #  new id -> f::block 
        A'       = a::rw_vector (M,-1)           #  new id -> old id 
        A''      = a::rw_vector (M,-1)           #  old id -> new id 
        min_pred = a::rw_vector (M, 10000000)
        in_degs  = a::from_fn (M, \\ i => length (mcg.in_edges i))
        nodes    = graph_topological_sort::topologicalSort CFG (ENTRY . map #1 (mcg.nodes ()))

        fun higher_freq (i, j) =
            let my machcode_controlflow_graph::BLOCK { freq=w1, ... } = mcg.node_info i
                my machcode_controlflow_graph::BLOCK { freq=w2, ... } = mcg.node_info j
            in  *w1 > *w2
            end

        fun older (i, j) = a::sub (min_pred, i) < a::sub (min_pred, j)

        marked  = set::create M
        node_queue = q::create /* older */ higher_freq
        insert_node = q::set node_queue

        fun node b = (b, mcg.node_info b)
        
        make_a_block = bblock' (A, A', A'')
        fun make_block (id, B as machcode_controlflow_graph::BLOCK { id=i,
                               instructions=REF [], data, labels, ... } ) = 
              (case mcg.in_edges i of
                  [] => map pseudo_op *data @ map f::LABEL *labels
               |  _  => make_a_block (id, B) 
              )
          | make_block (id, B) = make_a_block (id, B)

        fun update_succs (id,[])      = ()
          | update_succs (id, ((i, j, _) . es)) = 
            let count = a::sub (in_degs, j) - 1
            in  a::update (min_pred, j, int::min (id, a::sub (min_pred, j)));
                a::update (in_degs, j, count);
                if count == 0 and
                   j != EXIT and
                   (case machcode_controlflow_graph::fallsThruFrom (CFG, j) of THE _ => FALSE 
                                                   | NULL => TRUE) then
                   insert_node j
                
                update_succs (id, es)
            end
         
        fun layout (id, (i, B), waiting, blocks) =
            if set::markAndTest (marked, i) then
                 layout_all (id, waiting, blocks)
            else let blocks = make_block (id, B) . blocks
                 in  update_succs (id, mcg.out_edges i);
                     case machcode_controlflow_graph::fallsThruTo (CFG, i) of
                        THE j => layout (id+1, node j, waiting, blocks)
                     |  NULL   => layout_all (id+1, waiting, blocks)
                 end

        and layout_all (id, waiting, blocks) =
          if q::is_empty node_queue then
             layout_waiting (id, waiting, blocks) 
          else
             let b = q::deleteMin node_queue
             in  layout (id, node b, waiting, blocks)
             end

        and layout_waiting (id,[], blocks) = 
               (id, list::cat (reverse blocks))
          | layout_waiting (id, n . waiting, blocks) =  
              case machcode_controlflow_graph::fallsThruFrom (CFG, n) of
                 THE _ => layout_waiting (id, waiting, blocks)
              |  NULL   => layout (id, node n, waiting, blocks)

        set::set (marked, ENTRY)
        set::set (marked, EXIT)
        my (id, blocks) = layout_all (0, *first_block . nodes,[])
        # print("M="$int::to_string M$ " id="$int::to_string id$"\n")

        exit    = exit'(A, A', A'', id, EXIT, freqOf CFG EXIT)
        entry   = entry'(A, A', A'', id+1, ENTRY, freqOf CFG ENTRY)
        blocks  = blocks @ bblock A (EXIT, mcg.node_info EXIT)
        fun succs i = map (\\ (_, i, machcode_controlflow_graph::EDGE { w, ... } ) => 
                               (a::sub (A, a::sub (A'', i)), w))
                                 (mcg.out_edges (a::sub (A', i)))
        fun preds i = map (\\ (i, _, machcode_controlflow_graph::EDGE { w, ... } ) => 
                               (a::sub (A, a::sub (A'', i)), w)) 
                                 (mcg.in_edges (a::sub (A', i)))
        fun set_links (f::BBLOCK { blknum, prior, next, instructions, ... } ) = 
            let fun isBackwardBranch((f::BBLOCK { blknum=next, ... }, _) . bs) =
                      next <= blknum or isBackwardBranch bs
                  | isBackwardBranch(_ . bs) = isBackwardBranch bs
                  | isBackwardBranch []     = FALSE
            in  prior := preds blknum; 
                next := succs blknum
            end
          | set_links (f::ENTRY { blknum, next, ... } ) = next := succs blknum
          | set_links (f::EXIT { blknum, prior, ... } )  = prior := preds blknum
          | set_links _ = ()
        a::apply set_links A
    in  f::CLUSTER { blkCounter  = REF (id+2),
                   blocks      = blocks,
                   entry       = entry,
                   exit        = exit,
                   annotations = annotations
                 }
    end

    fun cfg2cluster { mcg=CFG as g::GRAPH mcg, relayout } =
    let my machcode_controlflow_graph::INFO { reorder, ... } = mcg.graph_info
    in  if *reorder or relayout then computeNewLayout CFG
        else computeOldLayout CFG
    end

};

