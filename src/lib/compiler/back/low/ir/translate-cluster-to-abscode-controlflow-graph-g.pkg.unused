## translate-cluster-to-machcode-controlflow-graph-g.pkg
/*
 *  Convert the old cluster format into the new control flow graph format
 *
 * -- Allen Leung
 */

api CLUSTER2CFG =
api
   package machcode_controlflow_graph:  Machcode_Controlflow_Graph
   package f:    FLOWGRAPH
      sharing machcode_controlflow_graph::I = f::I
      sharing machcode_controlflow_graph::P = f::P

   my cluster2cfg:  f::cluster -> machcode_controlflow_graph::mcg

end 

generic package Cluster2CFG
   (package machcode_controlflow_graph:        Machcode_Controlflow_Graph 
    package util:       Local_Machcode_Controlflow_Graph_Transformations
    package flowgraph:  FLOWGRAPH
    package machcode_universals:  Machcode_Universals
       sharing Util::machcode_controlflow_graph = machcode_controlflow_graph
       sharing machcode_controlflow_graph::I = flowgraph::I = machcode_universals::I
       sharing machcode_controlflow_graph::P = flowgraph::P
   ) : CLUSTER2CFG
{

    package machcode_controlflow_graph  = machcode_controlflow_graph
    package i    = machcode_controlflow_graph::I
    package f    = flowgraph
    package g    = graph
    package w    = machcode_controlflow_graph::W

    fun error msg = lowhalf_error_message::error("Cluster2CFG", msg)

    fun cluster2cfg
         (f::CLUSTER { blocks, entry, exit, blkCounter, annotations, ... } )=
    let fun id (f::BBLOCK { blknum, ... } ) = blknum
          | id (f::ENTRY { blknum, ... } ) = blknum
          | id (f::EXIT { blknum, ... } )  = blknum
          | id _                      = error "id"

        fun idfreq (blk, freq) = (id blk, freq)

        fun first_block (f::BBLOCK { blknum, ... } . _) = blknum
          | first_block (_ . bs)                   = first_block bs
          | first_block []                        = error "first_block"

        reorder = REF FALSE
        info = machcode_controlflow_graph::INFO { first_block   = REF (first_block blocks),
                              reorder      = reorder,
                              annotations  = annotations
                             }

        my CFG as g::GRAPH mcg = machcode_controlflow_graph::mcg (info)

        my f::ENTRY { blknum = ENTRY, ... } = entry
        my f::EXIT { blknum = EXIT, ... }   = exit

            /* Add a list of blocks into the CFG */ 
        fun add (f::ENTRY e . rest, Ps, Ls)     = add_entry (e, Ps, Ls, rest)
          | add (f::EXIT e . rest, Ps, Ls)      = add_exit (e, Ps, Ls, rest)
          | add (f::BBLOCK b . rest, Ps, Ls)    = add_block (b, reverse Ps, Ls, rest)
          | add((f::PSEUDO p) . rest, Ps, Ls)  = 
              add (rest, machcode_controlflow_graph::PSEUDO p . map machcode_controlflow_graph::LABEL Ls@Ps,[])
          | add((f::LABEL l) . rest, Ps, Ls)   = add (rest, Ps, l . Ls)
          | add([], Ps, Ls)                  = finish (Ps, Ls)

            #  Insert an entry node 
        and add_entry( { blknum, next, freq }, [], [], rest) =
              ( mcg.add_node (blknum, machcode_controlflow_graph::newStart (blknum, freq));
                mcg.set_entries [blknum];
                apply
                     (fn (blk, w) =  add_edge (blknum, id blk, machcode_controlflow_graph::JUMP, w)) 
                     *next;
                add (rest, [], [])
              )
          | add_entry _ = error "add_entry"

            #  Insert an exit node 
        and add_exit( { blknum, prior, freq }, [], [], rest) = 
              ( mcg.add_node (blknum, machcode_controlflow_graph::newStop (blknum, freq));
                mcg.set_exits [blknum];
                add (rest, [], [])
              )
  
            #  Insert an normal basic block 
       and add_block( { blknum, annotations,
                      freq, liveIn, liveOut, next, prior, instructions },
                     Ps, Ls, rest) =
           let an = *annotations
               an = 
                   case *next of
                     ([(f::EXIT _, _)] | []) => machcode_controlflow_graph::LIVEOUT.create *liveOut . an
                   | _ => an
               bb = machcode_controlflow_graph::BLOCK { id    = blknum,
                                  kind  = machcode_controlflow_graph::NORMAL,
                                  labels= REF Ls,
                                  freq  = freq,
                                  data  = REF Ps,
                                  instructions = instructions,
                                  annotations=REF an
                                 }
           in  mcg.add_node (blknum, bb);
               add_edges (blknum, *next, *instructions);
               /*
               add_call_edges (blknum, *callSucc);
               add_return_edge (blknum, *returnSucc);
                */
               add (rest, [], [])
           end

            #  Finished insertion 
       and finish([],[]) = ()
         | finish (Ps,[]) = 
               let my machcode_controlflow_graph::BLOCK { data, labels, ... } = mcg.node_info EXIT
               in  data := Ps @ *data
               end
         | finish _ = error "finish"

            #  Insert one edge into the flowgraph 
       and add_edge (i, j, k, w) =
           let k = if ENTRY == i then machcode_controlflow_graph::ENTRY
                       else if EXIT == j then machcode_controlflow_graph::EXIT
                       else k
           in  mcg.add_edge (i, j, machcode_controlflow_graph::EDGE { k=k, w=w, a=REF [] } )
           end

            #  Add edges into the flowgraph 
       and add_edges (i, succs, instructions) = 
           let fun is_fallsthru (j, yes, no) =
                   if j == i + 1 then
                      (case instructions of
                         jmp . _ => (case machcode_universals::instrKind jmp of
                                      machcode_universals::IK_JUMP => no
                                    | _                 => yes
                                   )
                      |  _ => yes)
                   else no
               fun add_branch (i, (j, jw), (k, kw)) =
               let j = id j and k = id k
               in  if j == i + 1 then
                     ( add_edge (i, j, machcode_controlflow_graph::BRANCH FALSE, jw);
                       add_edge (i, k, machcode_controlflow_graph::BRANCH TRUE, kw))
                   else if k == i + 1 then
                     ( add_edge (i, k, machcode_controlflow_graph::BRANCH FALSE, kw);
                       add_edge (i, j, machcode_controlflow_graph::BRANCH TRUE, jw))
                   else error "add_branch"
               end
               fun add_switch (i, _,[]) = ()
                 | add_switch (i, k, (j, jw) . js) =
                   (add_edge (i, id j, machcode_controlflow_graph::SWITCH k, jw); add_switch (i, k+1, js))
           in  case succs of
                 []      => ()
               | [(j, w)] => 
                   let j = id j
                   in  add_edge (i, j, is_fallsthru (j, machcode_controlflow_graph::FALLSTHRU, machcode_controlflow_graph::JUMP), w)
                   end
               | [j, k] => add_branch (i, j, k)
               | js    => add_switch (i, 0, js)
           end

           fun check_for_bad_entries () =
               apply (fn (i, j, e) =>
                     if j == EXIT then ()
                     else
                     case mcg.in_edges j of 
                        [_] => () #  only edge from ENTRY, okay 
                     |  _ => 
                        error("entry "$int::to_string j$" has internal edges") 
                   ) (mcg.out_edges ENTRY)

           #  Add edge from entry to exit 
           fun insert_entry_to_exit () = 
               if mcg.has_edge (ENTRY, EXIT) then ()
               else add_edge (ENTRY, EXIT, machcode_controlflow_graph::JUMP, REF 0)
    in 
        add (entry . exit . blocks,[],[]);
        check_for_bad_entries();
        insert_entry_to_exit(); 
        CFG
    end

}

