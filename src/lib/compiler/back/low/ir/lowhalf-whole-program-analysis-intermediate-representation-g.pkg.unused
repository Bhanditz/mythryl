#
# lowhalf IR
#
# This is for performing whole program analysis.
# All optimizations are based on this representation.
# It provides a few useful views: dominator tree, control dependence graph,
# loop nesting (interval) package etc. Also there is a mechanism to
# incrementally attach additional views to the IR.  The SSA infrastructure
# is implemented in such a manner.
#
# -- Allen Leung


###      "Hardening of the categories causes art disease."
###
###                            -- W. Eugene Smith



generic package LOWHALF_IR
   (package machcode_controlflow_graph:          Machcode_Controlflow_Graph
    package cdg:          CONTROL_DEPENDENCE_GRAPH
    package loop:         Loop_Structure
    package graph_viewer:  Graph_Viewer
    package util:         Local_Machcode_Controlflow_Graph_Transformations
       sharing Loop::Dom = CDG::Dom
       sharing Util::machcode_controlflow_graph = machcode_controlflow_graph
   ) : LOWHALF_IR
{
   package i    = machcode_controlflow_graph::I
   package machcode_controlflow_graph  = machcode_controlflow_graph
   package dom  = Loop::Dom
   package cdg  = CDG
   package loop = Loop
   package g    = graph
   package a    = Annotations
   package util = Util
   package l    = graph_layout
  
   type mcg  = machcode_controlflow_graph::mcg
   type IR   = machcode_controlflow_graph::mcg

   type dom  = Dom::dominator_tree     (machcode_controlflow_graph::block, machcode_controlflow_graph::edge_info, machcode_controlflow_graph::info)
   type pdom = Dom::postdominator_tree (machcode_controlflow_graph::block, machcode_controlflow_graph::edge_info, machcode_controlflow_graph::info)
   type cdg  = CDG::cdg                (machcode_controlflow_graph::block, machcode_controlflow_graph::edge_info, machcode_controlflow_graph::info)
   type loop = Loop::loop_structure    (machcode_controlflow_graph::block, machcode_controlflow_graph::edge_info, machcode_controlflow_graph::info)

   layouts = REF []:  Ref( List( string * (IR -> l::layout) ) )

   fun addLayout name layout =
   let fun f ((x, y) . rest) = if x == name then (x, layout) . rest
                            else (x, y) . f rest
         | f [] = [(name, layout)]
   in  layouts := f *layouts end

   exception NoLayout 

   fun findLayout name =
   let fun f [] = (print ("[Can't find "$name$"]\n"); raise exception NoLayout)
         | f((x, layout) . rest) = if x == name then layout else f rest
   in  f *layouts end

   fun view name IR = graph_viewer::view (findLayout name IR) 
           except NoLayout => ()

   fun views names IR = 
       let layouts = map (\\ n => findLayout n IR) names
       in  graph_viewer::view (graph_combination::sums layouts)
       end except NoLayout => ()

   fun viewSubgraph IR subgraph = 
         graph_viewer::view (machcode_controlflow_graph::subgraphLayout { mcg=IR, subgraph=subgraph } )

   /*
    * This function defines how we compute a new view 
    */

   verbose = LowhalfControl::getFlag "verbose"

   fun memo name compute = 
   let my { get, set, ... } = a::new (THE (\\ _ => name))
       fun getView (IR as g::GRAPH ir:  IR)=
       let my machcode_controlflow_graph::INFO { annotations, ... } = ir.graph_info 
           fun process (THE (REF (THE info))) =
                 (if *verbose then print ("[reusing "$name$"]")  info)
             | process (THE r) =
                 let 
                        if *verbose then print("[computing "$name) else ()
                     info = compute IR
                     if *verbose then print "]" else ()
                 in  r := THE info; info end
           |  process NULL = 
              let r = REF NULL
                  fun kill () = (r := NULL; 
                                if *verbose then print("[uncaching "$name$"]")
                                else ())
              in  annotations := machcode_controlflow_graph::CHANGED.create (name, kill) . 
                                 set (r,*annotations);
                  process (THE r) 
              end
       in  process (get *annotations) end
   in  getView
   end

   /*
    *  Extract various views from an IR
    */ 

   dom = memo "dom" Dom::makeDominator
   pdom = memo "pdom" Dom::makePostdominator
   fun doms IR = (dom IR, pdom IR)
   cdg  = memo "cdg" 
             (\\ IR => CDG::control_dependence_graph machcode_controlflow_graph::cdgEdge (pdom IR))
   loop = memo "loop" (Loop::loop_structure o dom)
   changed = machcode_controlflow_graph::changed 

   /*
    *  Methods to layout various graphs
    */
   fun defaultEdge _  = [l::COLOR "red"]
   fun defaultGraph _ = []  
   fun layoutDom' IR G = 
   let my { node, ... } = machcode_controlflow_graph::viewStyle IR
   in  l::makeLayout { edge = defaultEdge,
                     graph= defaultGraph,
                     node = node } G
   end
 
   fun layoutDom IR  = layoutDom' IR (dom IR)
   fun layoutPdom IR = layoutDom' IR (pdom IR)
   fun layoutDoms IR = layoutDom' IR
       let my (dom, pdom) = doms IR
       in  graph_combination::sum (dom, reversed_graph_view::rev_view pdom)
       end
   fun layoutCDG IR = machcode_controlflow_graph::viewLayout (cdg IR)
   fun layoutLoop (IR as g::GRAPH mcg) = 
       let loop   = loop IR
           an     = *(machcode_controlflow_graph::annotations IR)
           fun mkNodes nodes =
              string::cat (map (\\ i => int::to_string i$" ") nodes)
           fun mkEdges edges = 
              string::cat (map 
                (\\ (i, j, _) => int::to_string i$"->"$int::to_string j$" ") edges)
           fun node (_, Loop::LOOP { nesting, header, loop_nodes,
                                backedges, exits, ... } ) =
               [l::LABEL
                ("nesting: "$int::to_string nesting$"\n" $
                 machcode_controlflow_graph::show_block an (mcg.node_info header) $
                 "entry edges: "$mkEdges (Loop::entryEdges loop header)$"\n" $
                 "loop_nodes: "$mkNodes loop_nodes$"\n" $
                 "backedges: "$mkEdges backedges$"\n" $
                 "exits: "$mkEdges exits$"\n"
                )]
       in  l::makeLayout { edge=defaultEdge,
                         graph=defaultGraph,
                         node=node } loop
       end
 
   /*
    *  Insert the layout methods here.
    */
   my _ = addLayout "mcg" machcode_controlflow_graph::viewLayout
   my _ = addLayout "dom"  layoutDom
   my _ = addLayout "pdom" layoutPdom
   my _ = addLayout "doms" layoutDoms
   my _ = addLayout "cdg"  layoutCDG
   my _ = addLayout "loop" layoutLoop

}

