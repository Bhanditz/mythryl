/*
 * This example is from the paper
 * ``A New Frameowrk for Elimination Based Data Flow Analysis using DJ Graphs''
 * By Sreedhar et. al. 
 */
package test_dj_dataflow =
pkg
package graph = graph;
my CFG as graph::GRAPH mcg = digraph_by_adjacency_list::graph("mcg", (), 10)
    :
    graph::graph( String, Void, Void ) 
package viewer = graph_viewer_g (AllDisplays)
package l   = graph_layout
package dom = dominator_tree (digraph_by_adjacency_list)
package dj  = DJGraph (Dom)
package dataflow = DJDataflow (Dom)

my _ = apply mcg.add_node
          [(0, "0"),
           (1, "1"),
           (2, "2"),
           (3, "3"),
           (4, "4"),
           (5, "5"),
           (6, "6"),
           (7, "7"),
           (8, "8"),
           (9, "9")
          ]
my _ = mcg.set_entries [0]
my _ = mcg.set_exits [9]
my _ = apply mcg.add_edge
          [(0, 1, ()),
           (1, 2, ()),
           (2, 3, ()),
           (2, 8, ()),
           (3, 4, ()),
           (3, 5, ()),
           (4, 6, ()), 
           (4, 9, ()),
           (5, 6, ()),
           (6, 2, ()),
           (6, 7, ()),
           (7, 9, ()),
           (8, 1, ()),
           (8, 9, ()),
           (9, 0, ())
          ] 

Dom = Dom::makeDominator CFG

fun viewCFG _ =
    Viewer::view (l::makeLayout
                  { graph = fn _ => [],
                   node  = fn (i, _) => [l::LABEL (int::to_string i)],
                   edge  = fn (i, j, _) => [l::COLOR "red"]
                  } CFG)
fun viewDom _ =
    Viewer::view (l::makeLayout
                  { graph = fn _ => [],
                   node  = fn (i, _) => [l::LABEL (int::to_string i)],
                   edge  = fn (i, j, _) => [l::COLOR "red"]
                  } Dom)
fun viewDJ _ = 
    let fun iso kind G = 
            mapped_digraph_view::map (fn x => x) (fn x => kind) (fn g => ()) G
        idom = Dom::immediately_dominates Dom
        Dom = iso [l::COLOR "red"] Dom 
        CFG = iso [l::COLOR "green"] CFG 
        CFG' = subgraph_view::subgraph_view
                      (map #1 (mcg.nodes ()))
                      (fn (i, j, _) => not (idom (i, j))) CFG
        DJ = union_graph_view::union_view (fn _ => ()) (Dom, CFG')
    in  Viewer::view (l::makeLayout 
                  { graph = fn _ => [],
                   node  = fn (i, _) => [l::LABEL (int::to_string i)],
                   edge  = fn (i, j, e) => e
                  } DJ)
    end

fun testDataflow() = 
let fun closure { y } = print("Closure "$int::to_string y$"\n")
    fun var_elim { y, z } = print("Variable elim "$int::to_string y $
                              "->"$int::to_string z$"\n")
    fun fixpoint { scc } = ()
    fun compute { y, z } = ()
in  Dataflow::analyze { closure=closure, var_elim=var_elim, 
                     fixpoint=fixpoint, compute=compute } Dom
end

end

