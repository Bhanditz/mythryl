#
# This is an abstract interface for instruction emitters,
# i.e. assemblers and machine code emitters.
#
# This api is implemented in:
#
#     src/lib/compiler/back/low/intel32/emit/translate-machcode-to-asmcode-intel32-g.codemade.pkg
#     src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-asmcode-pwrpc32-g.codemade.pkg
#     src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-execode-pwrpc32-g.codemade.pkg
#     src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-asmcode-sparc32-g.codemade.pkg
#     src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-execode-sparc32-g.codemade.pkg
#
# Compare to:
# 
#     src/lib/compiler/back/low/emit/execode-emitter.api

# Compiled by:
#     src/lib/compiler/back/low/lib/lowhalf.lib

###                  "He that will not apply new
###                   remedies must expect new evils;
###                   for time is the greatest innovator."
###
###                                 -- Francis Bacon


stipulate
    package nt  =  note;							# note			is from   src/lib/src/note.pkg
herein

    api Instruction_Emitter {
	#
	package mcf: Machcode_Form;						# Machcode_Form		is from   src/lib/compiler/back/low/code/machcode-form.api
	package cst: Codestream;						# Codestream		is from   src/lib/compiler/back/low/code/codestream.api


	# Create a new stream.  The argument is a List of 
	# annotations that can affect the output format.
	#
	make_stream
	    :
	    nt::Notes
	    ->
	    cst::Codestream (mcf::Machine_Op, B, C, D);

    };
end;