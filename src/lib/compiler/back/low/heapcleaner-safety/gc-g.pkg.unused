#
# This module is reponsible for generating garbage collection 
# code for all gc-points in the program.  That is, we delay the generation
# of garbage collection code until all optimizations have been performed.
# The gc code to be generated is determined by a callback to the client.


generic package GCGen
   (package translate_treecode_to_machcode:  Translate_Treecode_To_Machcode
    package ir:          LOWHALF_IR
    package gc_call_back:  GC_CALLBACK
    package machcode_universals:   Machcode_Universals
       sharing gc_call_back::T          = translate_treecode_to_machcode::T
       sharing gc_call_back::C          = ir::i::C 
       sharing translate_treecode_to_machcode::t::Constant = ir::i::Constant
       sharing translate_treecode_to_machcode::t::PseudoOp = ir::machcode_controlflow_graph::P
       sharing ir::I = machcode_universals::I = translate_treecode_to_machcode::I
   ) : Lowhalf_Ir_Improver
{

   package c   = ir::i::C
   package t   = translate_treecode_to_machcode::T
   package ir  = IR
   package machcode_controlflow_graph = ir::machcode_controlflow_graph
   package gc  = gc_call_back::GC
   package g   = graph
   package a   = rw_vector
   package liveness =   
      GCLiveness (package ir = IR
                 package gc = GC
                 package machcode_universals = machcode_universals)

   package gen = build_machcode_controlflow_graph_g
      (package machcode_controlflow_graph       = machcode_controlflow_graph
       package treecode    = T
       package machcode_universals = machcode_universals
      )

   type flowgraph = ir::IR

   fun error msg = lowhalf_error_message::error("GCGen", msg)

   gc_bug = LowhalfControl::getCounter "gc-bug"

   name = "Generate GC code"

   fun run (IR as g::GRAPH mcg) =
   let /*
        * Run gc-typed liveness analysis
        */
       table = liveness::liveness IR
       codestream = Gen::newStream { compile=fn _ => (), flowgraph=THE IR }
       fun dummy _ = error "no extension" 
       my stream as t::Stream::STREAM { start_new_cccomponent, get_completed_cccomponent, ... } = 
           translate_treecode_to_machcode::translate_treecode_to_machcode codestream
       cfgAnnotations = machcode_controlflow_graph::annotations IR
 
       /*
        * For each gc-point, invoke the callback to generate GC code.
        */
       fun process (b, b' as machcode_controlflow_graph::BLOCK { annotations, instructions, ... } ) =
           case lowhalf_notes::HEAPCLEANER_SAFEPOINT.get *annotations of
             NULL => ()
           | THE msg =>
           let my { liveIn, liveOut } = a::sub (table, b)
               roots = liveIn
               return = mcg.node_info (hd (mcg.next b))
           in  machcode_controlflow_graph::changed IR;
               gc_call_back::callgcCallback
               { id          = b,
                 msg         = msg,
                 gcLabel     = machcode_controlflow_graph::put_private_label b',
                 returnLabel = machcode_controlflow_graph::put_private_label return,
                 roots       = liveIn,
                 stream      = stream
               } except _ => gc_bug := *gc_bug + 1 #  Continue on error 
           end
           
   in  start_new_cccomponent 0;
       mcg.forall_nodes process;
       get_completed_cccomponent [];
       IR
   end

}
