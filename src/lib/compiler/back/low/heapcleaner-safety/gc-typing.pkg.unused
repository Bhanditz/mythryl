
# This module is responsible for propagating gc type information.

generic package GCTyping
   (package ir:  LOWHALF_IR
    package gc_props:  GC_PROPERTIES
    package gc_map:  GC_MAP
    package machcode_universals:  Machcode_Universals
       sharing GCMap::GC = GCProps::GC
       sharing ir::I = GCProps::I = Machcode_Universals::I
   )

: GC_TYPING

{
   package ir  = IR
   package machcode_controlflow_graph = ir::machcode_controlflow_graph
   package gc  = GCProps::GC
   package g   = graph
   package an  = Annotations 

   fun gcTyping (IR as g::GRAPH mcg) =
       case GCMap::GCMAP.get (machcode_controlflow_graph::get_notes IR)
       of NULL => IR #  no gc map; do nothing 
        | THE gcmap =>
       let lookup = int_map::map gcmap
           add    = int_map::add gcmap
           fun update (dst, type) = 
               (lookup dst; ()) except _ => add (dst, type)
           fun move (dst, src) = 
               (lookup dst; ()) except _ => 
                   (add (dst, lookup src) except _ => ())
           prop = GCProps::propagate { lookup=lookup, update=update } 
           fun process (b, machcode_controlflow_graph::BLOCK { instructions, ... } ) = 
           let fun scan [] = ()
                 | scan (i . is) =
                   (case Machcode_Universals::instrKind i of
                      Machcode_Universals::IK_COPY =>
                        let my (dst, src) = Machcode_Universals::moveDstSrc i
                            fun copy (d . ds, s . ss) = (move (d, s); copy (ds, ss))
                              | copy _ = ()
                        in  copy (dst, src)
                        end
                    | _ => prop i except _ => ();
                    scan is
                   )
           in  scan (reverse *instructions)
           end
       in  mcg.forall_nodes process;
           IR
       end 

}
