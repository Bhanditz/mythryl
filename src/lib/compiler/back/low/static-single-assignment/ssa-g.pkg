
# This module can be used to build a stripped down SSA graph directly from
# a Treecode stream.



###               "I get into the meanest, nastiest frame of mind I can manage,
###                and I write the nastiest [testing] code I can think of.
###
###                Then I turn around and embed that in even nastier
###                constructions that are nearly obscene."
###
###                                        -- Donald Knuth on software testing.



generic package SSAGen
   (package treecode:  Treecode
    package machcode_controlflow_graph:     Machcode_Controlflow_Graph
    package machcode_universals:  Machcode_Universals
    package ssa:     SSA 
      where machcode_controlflow_graph = machcode_controlflow_graph
      where i::Constant = treecode::Constant
      sharing machcode_universals::I = machcode_controlflow_graph::I
      sharing treecode::Stream::P = machcode_controlflow_graph::P
   ) : FLOWGRAPH_GEN =
pkg
   package t = treecode
   package i = SSA::I
   package c = i::C
   package s = t::Stream
   package builder = ControlFlowGraphGen
      (package machcode_controlflow_graph = machcode_controlflow_graph
       package stream = S
       package machcode_universals = machcode_universals
      )
 
   type flowgraph = machcode_controlflow_graph::mcg

   fun error msg = lowhalf_error_message::error("SSAGen", msg)
   
   fun newStream { compile, flowgraph } =
   let mcg = case flowgraph of
                   THE mcg => mcg
                 | NULL => machcode_controlflow_graph::new (c::regmap())
       my { stream, next } = Builder::builder mcg
       my s::STREAM { start_new_cccomponent, get_completed_cccomponent, pseudoOp,
                    emit, put_fn_liveout_info, comment, annotation, put_private_label,
                    put_public_label, alias, ... } = stream

       fun endCFG a = (get_completed_cccomponent a;
                       next (machcode_controlflow_graph::new (c::regmap()));
                       compile mcg
                      )

       fun phi   _ = error "phi"
   in  s::STREAM { start_new_cccomponent,
                get_completed_cccomponent  = endCFG,
                pseudoOp,
                emit,
                put_fn_liveout_info,
                comment,
                annotation,
                put_private_label,
                put_public_label,
                alias,
                phi
               }
   end
end

