#
# This module is responsible for generating new instructions from 
# Treecode and inserting them into the SSA graph.  This is useful for
# patching in new instructions as the SSA graph is being transformed.
#
# Special lowhalf Magic (tm) for invoking the instruction selection 
# module and ssa-ifying the output code are all hidden here.
# 
# -- Allen Leung (leunga@cs.nyu.edu)


###         "If you have a procedure with ten parameters,
###          you probably missed some."
###                                   -- Alan Perlis



generic package SSAInstrGen (SSA:  SSA) : SSA_INSTRGEN =
pkg

   package ssa = SSA
   package translate_treecode_to_machcode = SSA::translate_treecode_to_machcode
   package rtl = SSA::RTL
   package t   = translate_treecode_to_machcode::T
   package t'  = RTL::T
   package s   = t::Stream
   package sp  = SSA::SP
   package p   = sp::RTLProps
   package g   = graph
   package r   = t::region
   package a   = rw_vector
   package w8a = rw_unt8_vector

   fun error msg = lowhalf_error_message::error("SSAInstrGen", msg)

   exception Illegal

   #  Translate RTL treecode into the normal SSA form 
   fun translate SSA { defs, uses, rtl } = 
   let fun defOf (x) = list::nth (defs, x)
       const = SSA::const SSA
       fun useOf (type, x) = 
           let v = list::nth (uses, x)
           in  if v < 0 then 
                  (case const v of
                     sp::ot::INT i => t::LITERAL i
                   | sp::ot::INTINF i => t::LIInf i
                   | sp::ot::OPERAND operand => error "useOf"
                  )
               else t::REG (type, v) 
           end
       fun /* statement (T'.MOVE_INT (type, x, e)) = t::MOVE_INT (type, defOf x, int_expression e)
         | statement (T'.STORE (type, a, b, mem)) = t::STORE (type, int_expression a, int_expression b, r::memory) 
         | */ statement (T'.RTL { e, ... } ) = statement e 
         | statement s = error("statement: "$RTL::rtlToString s)
       and /* int_expression (T'.REG (type, x)) = useOf (type, x)
         | int_expression (T'.LITERAL i) = t::LITERAL i
         | int_expression (T'.LI32 i) = t::LI32 i
         | int_expression (T'.ADD (type, a, b)) = t::ADD (type, int_expression a, int_expression b)
         | int_expression (T'.SUB (type, a, b)) = t::SUB (type, int_expression a, int_expression b)
         | int_expression (T'.MULS (type, a, b)) = t::MULS (type, int_expression a, int_expression b)
         | int_expression (T'.DIVS (type, a, b)) = t::DIVS (type, int_expression a, int_expression b)
         | int_expression (T'.QUOTS (type, a, b)) = t::QUOTS (type, int_expression a, int_expression b)
         | int_expression (T'.REMS (type, a, b)) = t::REMS (type, int_expression a, int_expression b)
         | int_expression (T'.MULU (type, a, b)) = t::MULU (type, int_expression a, int_expression b)
         | int_expression (T'.DIVU (type, a, b)) = t::DIVU (type, int_expression a, int_expression b)
         | int_expression (T'.REMU (type, a, b)) = t::REMU (type, int_expression a, int_expression b)
         | int_expression (T'.ADDT (type, a, b)) = t::ADDT (type, int_expression a, int_expression b)
         | int_expression (T'.SUBT (type, a, b)) = t::SUBT (type, int_expression a, int_expression b)
         | int_expression (T'.MULT (type, a, b)) = t::MULT (type, int_expression a, int_expression b)
         | int_expression (T'.DIVT (type, a, b)) = t::DIVT (type, int_expression a, int_expression b)
         | int_expression (T'.QUOTT (type, a, b)) = t::QUOTT (type, int_expression a, int_expression b)
         | int_expression (T'.REMT (type, a, b)) = t::REMT (type, int_expression a, int_expression b)
         | int_expression (T'.BITWISE_AND (type, a, b)) = t::BITWISE_AND (type, int_expression a, int_expression b)
         | int_expression (T'.BITWISE_OR (type, a, b))  = t::BITWISE_OR (type, int_expression a, int_expression b)
         | int_expression (T'.BITWISE_XOR (type, a, b)) = t::BITWISE_XOR (type, int_expression a, int_expression b)
         | int_expression (T'.BITWISE_NOT (type, a)) = t::BITWISE_NOT (type, int_expression a)
         | int_expression (T'.RIGHT_SHIFT (type, a, b)) = t::RIGHT_SHIFT (type, int_expression a, int_expression b)
         | int_expression (T'.RIGHT_SHIFT_U (type, a, b)) = t::RIGHT_SHIFT_U (type, int_expression a, int_expression b)
         | int_expression (T'.LEFT_SHIFT (type, a, b)) = t::LEFT_SHIFT (type, int_expression a, int_expression b)
         | int_expression (T'.CVTI2I (type, ext, type', a)) = t::CVTI2I (type, ext, type', int_expression a)
         | int_expression (T'.LOAD (type, a, mem)) = t::LOAD (type, int_expression a, r::memory) 
         | */ int_expression e = error("int_expression: "$RTL::expToString e) 
   in  statement rtl end

   /* 
    * Translate treecode into instructions
    */
   fun instrGen (SSA as g::GRAPH ssa) = 
   let instrs = REF []
       fun emit i = instrs := i . *instrs
       fun can'tUse _ = raise exception Illegal
       codestream = 
           s::STREAM
           { begin_connected_component = can'tUse,
             end_connected_component   = can'tUse,
             emit         = emit,
             pseudoOp     = can'tUse,
             emit_private_label  = can'tUse,
             emit_public_label   = can'tUse,
             comment      = can'tUse,
             annotation   = can'tUse,
             emit__end_of_fn__mark    = can'tUse
           }

       my s::STREAM { emit, ... } = translate_treecode_to_machcode::translate_treecode_to_machcode codestream

       #  Translate instructions into SSA form 
       fun translate instrs = ()

       #  Generate instructions 
       fun gen treecode
           =
          (instrs := [];
           emit treecode;
           reverse *instrs
          )

   in  gen
   end

   /*
    * Replace the instruction with a new treecode
    */
   fun replace (SSA as g::GRAPH ssa) =
   let instrGen = instrGen SSA
       ssaOpTable = SSA::ssaOpTable SSA
       fun do_it { id, treecode } = 
           case instrGen treecode of 
              [i] => (a::update (ssaOpTable, id, i); TRUE)
           | _ => FALSE
   in  do_it
   end

   /* 
    * Insert instructions into the SSA graph
    */
   fun insert (SSA as g::GRAPH ssa) = 
   let getOperands =
           p::defUse (sp::ot::makeNewValueNumbers (SSA::operandTable SSA))
       pinnedUseTable = SSA::pinnedUseTable
       pinnedDefTable = SSA::pinnedDefTable
       fun isPinnedUse r = w8a::sub (pinnedUseTable, r) != 0w0 except _ => FALSE
       fun isPinnedDef r = w8a::sub (pinnedDefTable, r) != 0w0 except _ => FALSE
       fun hasPinnedUse [] = FALSE
         | hasPinnedUse (r . rs) = isPinnedUse r or hasPinnedUse rs
       fun hasPinnedDef [] = FALSE
         | hasPinnedDef (r . rs) = isPinnedDef r or hasPinnedDef rs

       fun isZero r = w8a::sub (SSA::zeroRegs, r) != 0w0 except _ => FALSE

       renameVariable = SSA::newRenamedVariable SSA

       exception Renaming
       renameMap = int_hashtable::make_hashtable (32, Renaming)
       lookupRenaming = int_hashtable::lookup renameMap
       addRenaming = int_hashtable::set renameMap

       fun addInstrs (block, instrs) = 
       let n = length instrs
           m = ssa.capacity ()
           SSA::reserve SSA (n+m)
           newOp = SSA::newOp SSA

           fun renameUse v = if v < 0 then v else lookupRenaming v
           fun renameDef v = 
           let v' = renameVariable v
           in  if isZero v then v' 
               else (addRenaming (v, v'); v')
           end
 
           fun scan ([], id, pos) = ()
             | scan (instruction . rest, id, pos) = 
               let my (defs, uses) = getOperands instruction
                   rtl = p::rtl instruction
                   rtl = if hasPinnedUse uses or
                                hasPinnedDef defs then
                             RTL::pin rtl else rtl
                   uses = map renameUse uses
                   defs = map renameDef defs
               in  newOp { id=id, instruction=instr, pos=pos, rtl=rtl, 
                         block=block, defs=defs, uses=uses };
                   scan (rest, id+1, pos+128)
               end
       in  scan (instrs, m, 0 /* XXX */)
       end
   in  ()
   end

end
