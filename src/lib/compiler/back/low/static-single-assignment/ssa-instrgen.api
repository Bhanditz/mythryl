#
# This module is responsible for generating new instructions from 
# Treecode and inserting them into the SSA graph.  This is useful for
# patching in new instructions as the SSA graph is being transformed.
#
# Special lowhalf Magic (tm) for invoking the instruction selection 
# module and ssa-ifying the output code are all hidden here.
# 
# -- Allen Leung (leunga@cs.nyu.edu)



###        "One is always a long way from solving a problem
###         until one actually has the answer."
###
###                            -- Stephen Hawking



api SSA_INSTRGEN =
api

   package ssa:  SSA
   package rtl:  Treecode_Rtl
   package translate_treecode_to_machcode:  Translate_Treecode_To_Machcode
      sharing SSA::translate_treecode_to_machcode = translate_treecode_to_machcode
      sharing SSA::RTL = RTL

    exception Illegal

   #  Convert internal RTL into a treecode term 
   my translate:  SSA::ssa ->
                   { rtl: RTL::rtl, defs: List( SSA::value ), uses: List( SSA::value ) } ->
                      translate_treecode_to_machcode::T.statement
   #  Convert an treecode term into a list of instructions 
   my instrGen:   SSA::ssa -> translate_treecode_to_machcode::T.statement -> List( SSA::I.instruction )

   #  Insert instructions into the SSA graph 

   #  Replace the instruction at id 
   my replace:  SSA::ssa -> { id: SSA::ssa_id, treecode: translate_treecode_to_machcode::T.statement } -> Bool

end
