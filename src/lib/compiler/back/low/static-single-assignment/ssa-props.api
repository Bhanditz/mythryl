#
# Instruction properties for utilizing the SSA form
#
# -- Allen Leung (leunga@cs.nyu.edu)

api SSA_PROPERTIES =
api

   package i:         Machcode
   package c:         Registers
   package rtl:       Treecode_Rtl
   package gc_rtl_props:  RTL_PROPERTIES
   package ot:        OPERAND_TABLE
      sharing RTLProps::I   = ot::I = I
      sharing i::C          = C
      sharing RTLProps::RTL = RTL

   #  Create special nodes 
   my source:  i::instruction
   my sink:    i::instruction
   my phi:     i::instruction

   #  Physical registers whose value are volatile 
   my volatile:  List(  c::register )

   # Instructions with definitions (or use) of these registers will not
   # be moved

   my pinnedDef:  List(  c::register )
   my pinnedUse:  List( c::register )

   #  Definitions (or use) of these registers will not be renamed 
   my fixedDef:  List(  c::register )
   my fixedUse:  List( c::register )

   #  Extract the naming constraints on the operands 
   my namingConstraints:    
        { instruction:  i::instruction, dst:  List( c::register ), src:  List( c::register ) } -> 
        { dst:     List( RTL::T::var * c::register ),  #  Destination is fixed 
          src:     List( RTL::T::var * c::register ),  #  source is fixed 
          dstsrc:  List( RTL::T::var * RTL::T::var )    #  Dst = src 
        }

   #  Rewrite the operands of an instruction 
   my rewriteOperands:    
        { const:  Int -> ot::const } ->
        { instruction:  i::instruction, dst:  List( c::register ), src:  List( c::register ) } -> 
        i::instruction

   #  Make copies 
   my copies:   List { kind: c::registerkind, dst: c::register, src: c::register } -> 
                   List i::instruction
end

