# 
# The basis seems to be missing a string (out)stream type.
# This is it.
#
# -- Allen Leung.

# Compiled by:
#     src/lib/compiler/back/low/lib/lib.lib


###              "Then anyone who leaves behind him a written manual,
###               and likewise anyone who receives it, in the belief
###               that such writing will be clear and certain,
###               must be exceedingly simple-minded."
###
###                                            -- Plato


stipulate
    package fil =  file;				# file			is from   src/lib/std/src/posix/file.pkg
    package iox =  io_exceptions;			# io_exceptions		is from   src/lib/std/src/io/io-exceptions.pkg
    package lst =  list;				# list			is from   src/lib/std/src/list.pkg
    package str =  string;				# string		is from   src/lib/std/string.pkg
    package tbi =  text_base_io;			# text_base_io		is from   src/lib/std/src/io/text-base-io.pkg
herein

    # This package is referenced (only) in:
    #
    #     src/lib/compiler/back/low/display/lowhalf-format-instruction-g.pkg
    #     src/lib/compiler/back/low/mcg/machcode-controlflow-graph-g.pkg
    #     src/lib/compiler/back/low/intel32/treecode/floating-point-code-intel32-g.pkg
    #
    package string_outstream
    :       String_Outstream					# String_Outstream	is from   src/lib/compiler/back/low/library/string-out-stream.api
    {
	Streambuf = Ref( List( String ) );


	fun make_stream_buf ()
	    =
	    REF [] : Streambuf;


	fun get_string (REF s)
	    =
	    str::cat  (lst::reverse  s);


	fun set_string (r, s)
	    =
	    r :=  [s];     


	fun open_string_out  buffer
	    =
	    output_stream
	    where 
		fun write_vector sl
		    =
		    {   buffer :=  vector_slice_of_chars::to_vector sl ! *buffer;
			#
			vector_slice_of_chars::length sl;
		    };

		fun write_rw_vector sl
		    =
		    {   buffer := rw_vector_slice_of_chars::to_vector sl ! *buffer;
			#
			rw_vector_slice_of_chars::length sl;
		    };

		writer
		    =
		    tbi::WRITER 
			{ name       => "string stream",
			  chunk_size  => 512,
			  write_vector   => THE write_vector,
			  write_rw_vector   => THE write_rw_vector,
			  write_vector_nonblocking => THE (THE o write_vector),
			  write_rw_vector_nonblocking => THE (THE o write_rw_vector),
			  block      => NULL,
			  can_output  => NULL,
			  get_position     => NULL,
			  set_position     => NULL,
			  end_position     => NULL,
			  verify_position  => NULL,
			  close      => fn () => (); end ,
			  io_descriptor     => NULL
			};

		output_stream
		    =
		    fil::make_outstream 
		       (fil::pio::make_outstream (writer, iox::NO_BUFFERING));
	    end;
    };
end;
