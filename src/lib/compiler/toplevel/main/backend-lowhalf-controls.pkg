## backend-lowhalf-controls.pkg 

# Compiled by:
#     src/lib/compiler/core.sublib



stipulate
    package ci  =  control_index;					# control_index			is from   src/lib/controls/control-index.pkg
    package cs  =  control_junk;					# control_junk			is from   src/lib/controls/control-junk.pkg
    package ctl =  control;						# control			is from   src/lib/controls/control.pkg
herein

    package   backend_lowhalf_controls
    : (weak)  Backend_Lowhalf_Controls					# Backend_Lowhalf_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
    {
	priority  =  [10, 11, 2];	# XXX BUGGO FIXME "priority" should be renamed something like "menu_position" or "menu_slot" or "menu_location".
	obscurity =  6;			# XXX BUGGO FIXME obscurity values should be given intelligible names like "high" "medium" "low". Who knows what 6 means? 
	prefix    =  "cg";		# XXX BUGGO FIXME "cg" does not count as a "long descriptive variable name".

	registry  =  ci::make { help => "code generator settings" };
									    my _ = 
	basic_control::note_subindex
	    (prefix, registry, priority);		# XXX BUGGO FIXME more stuff which should be part of a state record, not global mutable state.

						 			# control_index			is from   src/lib/controls/control-index.pkg
						 			# basic_control			is from   src/lib/compiler/front/basics/main/basic-control.pkg
						 			# control_junk			is from   src/lib/controls/control-junk.pkg
	b  =  cs::convert::bool;
	i  =  cs::convert::int;
	r  =  cs::convert::float;
	sl =  cs::convert::string_list;

	nextpri =  REF 0;

	fun make (control_type, name, help, initial_value)
	    =
	    {   val_ref =  REF  initial_value;
		pri     =  *nextpri;

		control
		    =
		    ctl::make_control {		# control		is from   src/lib/controls/control.pkg
		      name,
		      help,
		      pri       =>  [pri],
		      obscurity,
		      control   =>  val_ref
		    };

		nextpri := pri + 1;

		ci::note_control
		    registry
		    { control         =>  ctl::make_string_control  control_type  control,
		      dictionary_name =>  THE (cs::dictionary_name::to_upper "CG_" name)
		    };
		val_ref;
	    };

	tailrecur		= make (b, "tailrecur", "?", TRUE);
	recordopt		= make (b, "recordopt", "?", TRUE);
	tail			= make (b, "tail", "?", TRUE);

	allocprof		= make (b, "allocprof", "?", FALSE);
	closureprint		= make (b, "closureprint", "?", FALSE);
	closure_strategy	= make (i, "closure_strategy", "?", 0);

	lambdaopt		= make (b, "lambdaopt", "?", TRUE);

	optional_fatecode_improvers		= make (sl, "optional_fatecode_improvers", "fatecode optimizer phases", ["zeroexpand", "last_contract"]);

    #    ["first_contract", "eta", "uncurry", "split_known_escaping_functions",
    #	"cycle_expand", "eta", "last_contract" ]

	rounds			= make (i, "rounds", "max # of optional_fatecode_improvers rounds", 10);
	path			= make (b, "path", "?", FALSE);
	beta_contract		= make (b, "beta_contract", "?", TRUE);

	eta			= make (b, "eta", "?", TRUE);
	selectopt		= make (b, "selectopt", "?", TRUE);
	dropargs		= make (b, "dropargs", "?", TRUE);

	deadvars		= make (b, "deadvars", "?", TRUE);
	flattenargs		= make (b, "flattenargs", "?", FALSE);
	extraflatten		= make (b, "extraflatten", "?", FALSE);

	switchopt		= make (b, "switchopt", "?", TRUE);
	handlerfold		= make (b, "handlerfold", "?", TRUE);
	branchfold		= make (b, "branchfold", "?", FALSE);

	arithopt		= make (b, "arithopt", "?", TRUE);
	beta_expand		= make (b, "beta_expand", "?", TRUE);
	unroll			= make (b, "unroll", "?", TRUE);

	knownfiddle		= make (b, "knownfiddle", "?", FALSE);
	invariant		= make (b, "invariant", "?", TRUE);
	targeting		= make (i, "targeting", "?", 0);

	lambdaprop		= make (b, "lambdaprop", "?", FALSE);
	newconreps		= make (b, "newconreps", "?", TRUE);

	boxedconstconreps	= typer_control::boxedconstconreps;

	unroll_recursion	= make (b, "unroll_recursion", "?", TRUE);
	sharepath		= make (b, "sharepath", "?", TRUE);

	static_closure_size_profiling	=  make (b, "static_closure_size_profiling", "?", FALSE);

	hoistup			= make (b, "hoistup", "?", FALSE);
	hoistdown		= make (b, "hoistdown", "?", FALSE);

	recordcopy		= make (b, "recordcopy", "?", TRUE);
	recordpath		= make (b, "recordpath", "?", TRUE);

	verbose			= make (b, "verbose", "?", FALSE);
	debugfatecode		= make (b, "debugfatecode", "?", FALSE);
	misc4			= make (i, "misc4", "?", 0);

	argrep			= make (b, "argrep", "?", TRUE);
	bodysize		= make (i, "bodysize", "?", 20);
	reducemore		= make (i, "reducemore", "?", 15);

	alphac				= make (b, "alphac", "?", TRUE);
	comment				= make (b, "comment", "?", FALSE);

	known_function			= make (i, "known_function", "?", 0);
	known_cl_function		= make (i, "known_cl_function", "?", 0);

	escape_function			= make (i, "escape_function", "?", 0);
	callee_function			= make (i, "callee_function", "?", 0);

	spill_function			= make (i, "spill_function", "?", 0);
	foldconst			= make (b, "foldconst", "?", TRUE);

	printit				= make (b, "printit", "whether to show fatecode", FALSE);
	printsize			= make (b, "printsize", "?", FALSE);

	scheduling			= make (b, "scheduling", "?", TRUE);
	cse				= make (b, "cse", "?", FALSE);				# "cse" might be "common subexpression elimination"

	split_known_escaping_functions	= make (b, "split_known_escaping_functions", "?", TRUE);
	improve_after_closure		= make (b, "improve_after_closure", "?", FALSE);

	uncurry			= make (b, "uncurry", "?", TRUE);
	if_idiom		= make (b, "if_idiom", "?", TRUE);
	comparefold		= make (b, "comparefold", "?", TRUE);
	csehoist		= make (b, "csehoist", "?", FALSE);
	rangeopt		= make (b, "rangeopt", "?", FALSE);
	icount			= make (b, "icount", "?", FALSE);

	debug_representation	= make (b, "debug_representation", "?", FALSE);

	checklty1		= make (b, "checklty1",      "?", FALSE);
	checklty2		= make (b, "checklty2",      "?", FALSE);
	checklty3		= make (b, "checklty3",      "?", FALSE);
	checkfatecode1		= make (b, "checkfatecode1", "?", FALSE);
	checkfatecode2		= make (b, "checkfatecode2", "?", FALSE);
	checkfatecode3		= make (b, "checkfatecode3", "?", FALSE);
	checkfatecode		= make (b, "checkfatecode",  "?", FALSE);

	flatfblock		= make (b, "flatfblock", "?", TRUE);
	deadup			= make (b, "deadup", "?", TRUE);

	poll_checks		=  make (b, "poll_checks", "?", FALSE);
	poll_ratio_a_to_i	=  make (r, "poll_ratio_a_to_i", "?", 1.0);

	print_flowgraph_stream = REF file::stdout;

	disambiguate_memory	=  make (b, "disambiguate_memory", "?", FALSE);
	control_dependence	=  make (b, "control_dependence", "?", FALSE);
	highcodeon		=  make (b, "highcodeon", "?", TRUE);

	comp_debugging				= make (b, "comp_debugging", "?", FALSE);

	module_junk_debugging			= typer_data_controls::module_junk_debugging;
	translate_to_anormcode_debugging	= typer_data_controls::translate_to_anormcode_debugging;
	type_junk_debugging			= typer_data_controls::type_junk_debugging;

	types_debugging				= typer_data_controls::types_debugging;
	expand_generics_g_debugging		= typer_data_controls::expand_generics_g_debugging;
	typerstore_debugging			= typer_data_controls::typerstore_debugging;

	generics_expansion_junk_debugging	= typer_control::generics_expansion_junk_debugging;
	api_match_debugging			= typer_control::api_match_debugging;
	type_package_language_debugging		= typer_control::type_package_language_debugging;

	typer_junk_debugging			= typer_control::typer_junk_debugging;
	type_api_debugging			= typer_control::type_api_debugging;
	typecheck_type_debugging		= typer_control::typecheck_type_debugging;

	unify_types_debugging			= typer_control::unify_types_debugging;
	expand_oop_syntax_debugging		= typer_control::expand_oop_syntax_debugging;
	translate_types_debugging		= make (b, "translate_types_debugging", "?", FALSE);
    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
