## compiler-state.pkg

# Compiled by:
#     src/lib/compiler/core.sublib




###            "There is no practical obstacle whatsoever now
###             to the creation of an efficient index to all
###             human knowledge, ideas and achievements,
###             to the creation, that is, of a complete
###             planetary memory for all mankind."
###
###                                  -- H G Wells



stipulate
    package cms =  compiler_mapstack_set;				# compiler_mapstack_set			is from   src/lib/compiler/toplevel/compiler-state/compiler-mapstack-set.pkg
herein

    package   compiler_state
    : (weak)  Compiler_State						# Compiler_State	is from   src/lib/compiler/toplevel/interact/compiler-state.api
    {
	Compiler_Mapstack_Set
	    =
	    cms::Compiler_Mapstack_Set;					# compiler_mapstack_set	is from   src/lib/compiler/toplevel/compiler-state/compiler-mapstack-set.pkg

	Compiler_Mapstack_Set_Reference
	    =
	    { get:  Void -> Compiler_Mapstack_Set,
	      set:          Compiler_Mapstack_Set -> Void
	    };

	Compiler_State
	    =
	    { top_level:     Compiler_Mapstack_Set_Reference,
	      base:          Compiler_Mapstack_Set_Reference,
	      property_list: property_list::Property_List		# property_list		is from   src/lib/src/property-list.pkg
	    }; 

	fun make_compiler_mapstack_set_reference
		table_set
	    =
	    {   table_set_ref
		    =
		    REF  table_set;

		fun get ()         =  *table_set_ref;
		fun set table_set  =   table_set_ref := table_set;

		{ get, set };
	    };

	pervasive		# XXX BUGGO FIXME more thread-hostile mutable global state :(
	    =
	    make_compiler_mapstack_set_reference

		cms::null_compiler_mapstack_set;


	my compiler_state_stack 
	    :
	    Ref( (Compiler_State, List( Compiler_State )) )
	    =
	    {   top_level
		    =
		    make_compiler_mapstack_set_reference

			cms::null_compiler_mapstack_set;

		property_list
		    =
		    property_list::make_property_list ();

		REF ( { top_level,
			property_list,
			base       =>  pervasive
		      },
		      []
		    );
	    };

	fun compiler_state ()
	    =
	    #1 *compiler_state_stack;

	top_level      =  .top_level     o compiler_state;
	base           =  .base          o compiler_state;
	property_list  =  .property_list o compiler_state;

	fun combined ()
	    =
	    cms::layer_compiler_mapstack_sets (
		.get (top_level ()) (),
		.get (base      ()) ()
	    );

	fun run_thunk_in_compiler_state
		(thunk, compiler_state)
	    =
	    {   old_stack =  *compiler_state_stack;

		compiler_state_stack
		    :=
		    (compiler_state, (!) old_stack);

		thunk ()
		before
		    compiler_state_stack :=  old_stack;
	    };

	fun list_bound_symbols ()
	    =
	    symbolmapstack::symbols (				# symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
		symbolmapstack::atop (
		    .symbolmapstack (.get (top_level ()) ()),
		    .symbolmapstack (.get (base      ()) ())
		)
	    );
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
