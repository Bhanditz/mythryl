## compiler-state.pkg

# Compiled by:
#     src/lib/compiler/core.sublib




###            "There is no practical obstacle whatsoever now
###             to the creation of an efficient index to all
###             human knowledge, ideas and achievements,
###             to the creation, that is, of a complete
###             planetary memory for all mankind."
###
###                                  -- H G Wells



stipulate
    package cms =  compiler_mapstack_set;						# compiler_mapstack_set		is from   src/lib/compiler/toplevel/compiler-state/compiler-mapstack-set.pkg
    package pl  =  property_list;							# property_list			is from   src/lib/src/property-list.pkg
    package syx =  symbolmapstack;							# symbolmapstack		is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
herein

    package   compiler_state
    : (weak)  Compiler_State								# Compiler_State		is from   src/lib/compiler/toplevel/interact/compiler-state.api
    {
	Compiler_Mapstack_Set
	    =
	    cms::Compiler_Mapstack_Set;							# compiler_mapstack_set		is from   src/lib/compiler/toplevel/compiler-state/compiler-mapstack-set.pkg

	Compiler_Mapstack_Set_Jar
	  =
	  { get_mapstack_set:  Void -> Compiler_Mapstack_Set,
	    set_mapstack_set:          Compiler_Mapstack_Set -> Void
	  };

	Compiler_State
	  =
	  { top_level_pkg_etc_defs_jar:	Compiler_Mapstack_Set_Jar,
	    baselevel_pkg_etc_defs_jar:	Compiler_Mapstack_Set_Jar,
	    #	
	    property_list:		pl::Property_List
	  }; 

	fun make_compiler_mapstack_set_jar
		#
		table_set
	    =
	    {   table_set_ref      =  REF  table_set;
		#
		fun get_mapstack_set ()         =  *table_set_ref;
		fun set_mapstack_set table_set  =   table_set_ref := table_set;

		{ get_mapstack_set,
		  set_mapstack_set
		};
	    };

	pervasive_fun_etc_defs_jar							# XXX SUCKO FIXME more icky thread-hostile mutable global state :(
	    =
	    make_compiler_mapstack_set_jar
		#
		cms::null_compiler_mapstack_set;


	my compiler_state_stack 							# More icky thread-hostile global mutable state.
	    :
	    Ref ((Compiler_State, List(Compiler_State)))
	    =
	    {   top_level_pkg_etc_defs_jar
		    =
		    make_compiler_mapstack_set_jar
			#
			cms::null_compiler_mapstack_set;

		property_list
		    =
		    pl::make_property_list ();

		REF ( { top_level_pkg_etc_defs_jar,
			baselevel_pkg_etc_defs_jar =>  pervasive_fun_etc_defs_jar,
			property_list
		      },
		      []
		    );
	    };

	fun compiler_state ()
	    =
	    #1 *compiler_state_stack;

	get_top_level_pkg_etc_defs_jar	=  .top_level_pkg_etc_defs_jar  o  compiler_state;
	get_baselevel_pkg_etc_defs_jar	=  .baselevel_pkg_etc_defs_jar  o  compiler_state;
	property_list			=  .property_list               o  compiler_state;

	fun combined ()
	    =
	    cms::layer_compiler_mapstack_sets
	      (
		(get_top_level_pkg_etc_defs_jar ()).get_mapstack_set (),
		(get_baselevel_pkg_etc_defs_jar ()).get_mapstack_set ()
	      );

	fun run_thunk_in_compiler_state
		(thunk, compiler_state)
	    =
	    {   old_stack =  *compiler_state_stack;

		compiler_state_stack
		    :=
		    (compiler_state, (!) old_stack);

		thunk ()
		then
		    compiler_state_stack :=  old_stack;
	    };

	fun list_bound_symbols ()
	    =
	    syx::symbols (
		syx::atop (
		     ((get_top_level_pkg_etc_defs_jar ()).get_mapstack_set ()).symbolmapstack,
		     ((get_baselevel_pkg_etc_defs_jar ()).get_mapstack_set ()).symbolmapstack
		)
	    );
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
