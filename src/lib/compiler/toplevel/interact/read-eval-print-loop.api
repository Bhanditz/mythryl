## read-eval-print-loop.api 
 
# Compiled by:
#     src/lib/compiler/core.sublib



###        "The price of reliability is the pursuit of the utmost simplicity.
###         It is a price which the very rich find most hard to pay."
###
###                                                 -- E.W. Dijkstra



stipulate
    package fil =  file__premicrothread;								# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package cs  =  compiler_state;									# compiler_state		is from   src/lib/compiler/toplevel/interact/compiler-state.pkg
    package ds  =  deep_syntax;										# deep_syntax			is from   src/lib/compiler/front/typer-stuff/deep-syntax/deep-syntax.pkg
    package sci =  sourcecode_info;									# sourcecode_info		is from   src/lib/compiler/front/basics/source/sourcecode-info.pkg
    package pp  =  standard_prettyprinter;								# standard_prettyprinter	is from   src/lib/prettyprint/big/src/standard-prettyprinter.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
    #
    api Read_Eval_Print_Loop {
	#
	exception CONTROL_C_SIGNAL; 

	read_eval_print_from_script
	  :
	  String -> Void;										# 'String' is "<stdin>" else filename for script.

	read_eval_print_from_user
	  :
	  Void -> Void;

	read_eval_print_from_stream
	  :
	  ( String,
	    fil::Input_Stream
	  )
	  ->
	  Void;

	with_exception_trapping
	  :
	  { treat_as_user:		Bool,
	    pp:				Null_Or( pp::Prettyprinter )					# Evaluation results will be prettyprinted into this.
	  }												# TRUE means to treat all exceptionns like usercode exceptions.
	  ->
	  { thunk:			Void -> Void,
	    flush:			Void -> Void,
	    fate:			Exception -> Void
	  }
	  ->
	  Void;

	compile_and_eval_string_in_given_compiler_state							# Created for use in   src/lib/x-kit/widget/edit/eval-mode.pkg
	  :
	  {
	    sourcecode_info:		sci::Sourcecode_Info,
	    pp:				pp::Prettyprinter,						# Evaluation results will be prettyprinted into this.
	    compiler_state_stack:	(cs::Compiler_State, List(cs::Compiler_State)),			# Compiler symbol-tables to use for this compile.
	    options:			List( cs::Compile_And_Eval_String_Option )			# This is mainly future-proofing -- it allows us to add parameters in future without (mostly) breaking code using the previous API.
	  }
	  ->
	  (cs::Compiler_State, List(cs::Compiler_State));						# Updated symbol tables containing any new definitions from compile.  Caller can choose to retain or discard.
    };
end;

## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
