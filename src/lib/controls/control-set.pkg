## control-set.pkg

# Compiled by:
#     src/lib/controls/controls.lib


stipulate
    package ctl =  control;						# control			is from   src/lib/controls/control.pkg
    package rep =  control_reps;					# control_reps			is from   src/lib/controls/control-reps.pkg
    package qht =  quickstring_hashtable;				# quickstring_hashtable		is from   src/lib/src/quickstring-hashtable.pkg
herein

    package   control_set
    : (weak)  Control_Set						# Control_Set	is from   src/lib/controls/control-set.api
    {


	Control(X)         =  ctl::Control(X);
	Control_Set (X, Y) =  control_reps::Control_Set( X, Y ); 

	fun make_control_set ()
	    =
	    qht::make_hashtable  { size_hint => 16,  not_found_exception => FAIL "control set" };

	fun member (cset, name)
	    =
	    case (qht::find cset name)
		#
		NULL =>  FALSE;
		_    =>  TRUE;
	    esac;

	fun find (cset, name)
	    =
	    qht::find cset name;

	fun set (cset, control as rep::CONTROL { name, ... }, info)
	    =
	    qht::set cset (name, { control, info } );

	fun remove (cset, name)
	    =
	    case (qht::find cset name)
		#
		NULL =>  ();
		_    =>  ignore (qht::remove cset name);
	    esac;

	fun info_of (cset:   Control_Set(X, Y)) (rep::CONTROL { name, ... } )
	    =
	    null_or::map .info (qht::find cset name);

	# list the members; the list is ordered by descreasing priority.  The
	# listControls' function allows one to specify an obscurity level; controls
	# with equal or higher obscurioty are omitted from the list.

	stipulate

	    fun priority_of { control=>rep::CONTROL { priority, ... }, info }
		=
		priority;

	    fun gt (a, b)
		=
		rep::priority_gt (priority_of a, priority_of b);

	herein
	    fun list_controls cset
		=
		list_mergesort::sort gt (qht::vals_list cset);

	    fun list_controls' (cset, obs)
		=
		list_mergesort::sort gt (qht::fold add [] cset)
		where
		    fun add (item as { control=>rep::CONTROL { obscurity, ... }, info }, l)
			=
			if (obs > obscurity)   item ! l;
			else                          l;
			fi;

		end;

	end;

	fun apply f cset
	    =
	    qht::apply f cset;

	# Convert the controls in a set
	# to string controls and create
	# a new set for them:
	#
	fun convert_to_string_controls
		convert
		control_set
	    =
	    {   string_control
		    =
		    ctl::make_string_control   convert;

		fun convert_control { control, info }
		  =
		  { control => string_control control,
		    info
		  };

		qht::map convert_control   control_set;
	    };

    };
end;


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
