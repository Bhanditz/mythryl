## control.pkg

# Compiled by:
#     src/lib/controls/controls.lib

stipulate
    package cf  =  control_forms;						# control_forms			is from   src/lib/controls/control-forms.pkg
    package qs  =  quickstring;							# quickstring			is from   src/lib/src/quickstring.pkg
herein

    package    control
    : (weak)   Control								# Control			is from   src/lib/controls/control.api
    {
	Priority	    =  cf::Priority;
	Control(X) 	    =  cf::Control(X);
	Value_Converter(X)  =  cf::Value_Converter(X);

	fun make_control { name, pri, obscurity, help, control }
	    =
	    cf::CONTROL
	      {
		name =>  qs::from_string name,
		get  =>  fn () = *control,
		set  =>  fn THE v =>  (fn () =  control := v);
			    NULL  =>  { v = *control;   fn () = control := v; };
			 end,
		priority => pri,
		obscurity,
		help
	      };

	# This exception is raised to announce
	# that there is a syntax error in a
	# string representation of a control value:
	#
	exception
	    BAD_VALUE_SYNTAX  {
	      type_name:     String,
	      control_name:  String,
	      value:         String
	    };

	fun make_string_control
	      #
	      { type_name, from_string, to_string }
	      #
	      (cf::CONTROL c)
	    =
	    {   c ->   { name, get, set, priority, obscurity, help };

		fun from_string' s
		    =
		    case (from_string s)
			#		  
			THE v => v;
			#		  
			NULL  =>
			    raise exception BAD_VALUE_SYNTAX { type_name,
							       control_name =>  qs::to_string name,
							       value        =>  s
							     };
		    esac;

		cf::CONTROL
		  {
		    name,
		    get => to_string o get,
		    set => set o null_or::map from_string',
		    priority,
		    obscurity,
		    help
		  };
	    };

	fun name (cf::CONTROL { name, ... }  ) =  qs::to_string name;
	fun get  (cf::CONTROL { get, ... }   ) =  get ();
	fun set  (cf::CONTROL { set, ... }, v) =  set (THE v) ();
	fun set' (cf::CONTROL { set, ... }, v) =  set (THE v);

	fun info (cf::CONTROL { priority, obscurity, help, ... } )
	    =
	    { priority, obscurity, help };

	fun save_controller_state (cf::CONTROL { set, ... } )					# Generate a thunk containing current controller state, which when run will restore the controller to that state.
	    =
	    set NULL;

	fun compare
	      (
		cf::CONTROL { priority=>p1, ... },
		cf::CONTROL { priority=>p2, ... }
	      )
	    =
	    list::collate  int::compare (p1, p2);

    };
end;

## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
