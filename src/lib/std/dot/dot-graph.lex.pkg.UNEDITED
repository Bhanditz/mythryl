generic package dotgraph_lex_g(package tokens: Graph_Tokens;){
   
    package user_declarations {
      
## dot-graph.lex
## COPYRIGHT (c) 1994 AT&T Bell Labortories.

# Scanner specification for "dot" graph files.

Source_Position = Int;
Semantic_Value = tokens::Semantic_Value;
Token (X,Y)  = tokens::Token(X,Y);
Lex_Result = Token (Semantic_Value, Source_Position);

Lexstate
    =
    { line_num:       Ref(Int),
      stringstart:    Ref(Int),
      comment_state:  Ref(Null_Or(Int)),
      charlist:       Ref(List(String)),
      complain:       String -> Void
    };

Arg = Lexstate;
       

fun make_symbol (s,i)
    =
    tokens::symbol(s,i,i+(size s));


fun add_string (charlist, s: String)
    =
    charlist :=  s ! *charlist;


fun make_string charlist
    =
    cat (reverse *charlist)
    then
        charlist := [];


fun eof ({ line_num, stringstart, comment_state, charlist, complain }: Lexstate)
    =
    {   case *comment_state
	    #
	    THE l =>  complain (sprintf "warning: non-terminated comment in line %d\n" l);
	    _     =>  ();
	esac;

	tokens::eof(0,0);
    };


}; #  end of user routines 
exception LEX_ERROR; # Raised if illegal leaf action tried.
package internal {
	 

Yyfinstate = NN Int;
Statedata = { fin:  List( Yyfinstate ), trans: String };
#  transition & final state table 
tab = {
    s = [ 
 (0,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (1,  
"\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x46\x48\x0a\x0a\x0a\x0a\x0a\
\\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\
\\x46\x0a\x45\x0a\x0a\x0a\x0a\x0a\x44\x43\x0a\x0a\x42\x3e\x3d\x3a\
\\x36\x36\x36\x36\x36\x36\x36\x36\x36\x36\x35\x34\x0a\x33\x0a\x0a\
\\x32\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\
\\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x31\x0a\x30\x0a\x0d\
\\x0a\x0d\x0d\x0d\x29\x25\x0d\x20\x0d\x0d\x0d\x0d\x0d\x0d\x1c\x0d\
\\x0d\x0d\x0d\x0f\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0c\x0a\x0b\x0a\x0a\
\\x09"
),
 (3,  
"\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x4f\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x4e\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x4a\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49"
),
 (5,  
"\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x53\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x51\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\
\\x50"
),
 (7,  
"\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x55\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\
\\x54"
),
 (13,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (15,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x17\x10\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (16,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x11\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (17,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x12\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (18,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x13\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (19,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x14\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (20,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x15\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (21,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x16\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (23,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x18\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (24,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x19\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (25,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x1a\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (26,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x1b\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (28,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x1d\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (29,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x1e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (30,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x1f\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (32,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x21\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (33,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x22\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (34,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x23\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (35,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x24\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (37,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x26\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (38,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x27\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (39,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x28\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (41,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x2a\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (42,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x2b\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (43,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x2c\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (44,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x2d\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (45,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x2e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (46,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\x00\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x0e\
\\x00\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x2f\x0e\x0e\x0e\x0e\x0e\x0e\x0e\
\\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x00\x00\x00\x00\x00\
\\x00"
),
 (54,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\x00\
\\x37\x37\x37\x37\x37\x37\x37\x37\x37\x37\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (56,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x39\x39\x39\x39\x39\x39\x39\x39\x39\x39\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (58,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x3b\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (62,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x40\x00\
\\x37\x37\x37\x37\x37\x37\x37\x37\x37\x37\x00\x00\x00\x00\x3f\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (70,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x47\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x47\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (73,  
"\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x00\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x00\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x00\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\
\\x49"
),
 (74,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
 (81,  
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\\x00"
),
    (0, "")];
    fun f x = x;
    s = map f (reverse (tail (reverse s)));
    exception LEX_HACKING_ERROR;
    fun get ((j, x) ! r, i: Int)
            =>
            if (i == j)  x;   else get (r, i); fi;

        get ([], i)
            =>
            raise exception LEX_HACKING_ERROR;
    end;
fun g {   fin => x,   trans => i   }
    =
    {   fin => x,   trans => get (s, i)   };
 vector::from_list (map g 
[{ fin => [], trans => 0},
{ fin => [], trans => 1},
{ fin => [], trans => 1},
{ fin => [(NN 118)], trans => 3},
{ fin => [(NN 118)], trans => 3},
{ fin => [], trans => 5},
{ fin => [], trans => 5},
{ fin => [], trans => 7},
{ fin => [], trans => 7},
{ fin => [(NN 99), (NN 101)], trans => 0},
{ fin => [(NN 101)], trans => 0},
{ fin => [(NN 24), (NN 101)], trans => 0},
{ fin => [(NN 30), (NN 101)], trans => 0},
{ fin => [(NN 85), (NN 101)], trans => 13},
{ fin => [(NN 85)], trans => 13},
{ fin => [(NN 85), (NN 101)], trans => 15},
{ fin => [(NN 85)], trans => 16},
{ fin => [(NN 85)], trans => 17},
{ fin => [(NN 85)], trans => 18},
{ fin => [(NN 85)], trans => 19},
{ fin => [(NN 85)], trans => 20},
{ fin => [(NN 85)], trans => 21},
{ fin => [(NN 82), (NN 85)], trans => 13},
{ fin => [(NN 85)], trans => 23},
{ fin => [(NN 85)], trans => 24},
{ fin => [(NN 85)], trans => 25},
{ fin => [(NN 85)], trans => 26},
{ fin => [(NN 59), (NN 85)], trans => 13},
{ fin => [(NN 85), (NN 101)], trans => 28},
{ fin => [(NN 85)], trans => 29},
{ fin => [(NN 85)], trans => 30},
{ fin => [(NN 52), (NN 85)], trans => 13},
{ fin => [(NN 85), (NN 101)], trans => 32},
{ fin => [(NN 85)], trans => 33},
{ fin => [(NN 85)], trans => 34},
{ fin => [(NN 85)], trans => 35},
{ fin => [(NN 65), (NN 85)], trans => 13},
{ fin => [(NN 85), (NN 101)], trans => 37},
{ fin => [(NN 85)], trans => 38},
{ fin => [(NN 85)], trans => 39},
{ fin => [(NN 47), (NN 85)], trans => 13},
{ fin => [(NN 85), (NN 101)], trans => 41},
{ fin => [(NN 85)], trans => 42},
{ fin => [(NN 85)], trans => 43},
{ fin => [(NN 85)], trans => 44},
{ fin => [(NN 85)], trans => 45},
{ fin => [(NN 85)], trans => 46},
{ fin => [(NN 73), (NN 85)], trans => 13},
{ fin => [(NN 22), (NN 101)], trans => 0},
{ fin => [(NN 28), (NN 101)], trans => 0},
{ fin => [(NN 14), (NN 101)], trans => 0},
{ fin => [(NN 18), (NN 101)], trans => 0},
{ fin => [(NN 34), (NN 101)], trans => 0},
{ fin => [(NN 36), (NN 101)], trans => 0},
{ fin => [(NN 90), (NN 101)], trans => 54},
{ fin => [(NN 90)], trans => 54},
{ fin => [(NN 90)], trans => 56},
{ fin => [(NN 97)], trans => 56},
{ fin => [(NN 101)], trans => 58},
{ fin => [(NN 12)], trans => 0},
{ fin => [(NN 9)], trans => 0},
{ fin => [(NN 16), (NN 101)], trans => 56},
{ fin => [(NN 101)], trans => 62},
{ fin => [(NN 39)], trans => 0},
{ fin => [], trans => 56},
{ fin => [(NN 42)], trans => 0},
{ fin => [(NN 32), (NN 101)], trans => 0},
{ fin => [(NN 20), (NN 101)], trans => 0},
{ fin => [(NN 26), (NN 101)], trans => 0},
{ fin => [(NN 6), (NN 101)], trans => 0},
{ fin => [(NN 4), (NN 101)], trans => 70},
{ fin => [(NN 4)], trans => 70},
{ fin => [(NN 1)], trans => 0},
{ fin => [(NN 118)], trans => 73},
{ fin => [(NN 129)], trans => 74},
{ fin => [(NN 124)], trans => 0},
{ fin => [(NN 127)], trans => 0},
{ fin => [(NN 121)], trans => 0},
{ fin => [(NN 114)], trans => 0},
{ fin => [(NN 116)], trans => 0},
{ fin => [(NN 108)], trans => 0},
{ fin => [(NN 108)], trans => 81},
{ fin => [(NN 106)], trans => 0},
{ fin => [(NN 103)], trans => 0},
{ fin => [(NN 112)], trans => 0},
{ fin => [(NN 110)], trans => 0}]);
};
package start_states {
	 
	 Yystartstate = STARTSTATE Int;

#  start state definitions 

my com = STARTSTATE 5;
my eolcom = STARTSTATE 7;
my initial = STARTSTATE 1;
my qs = STARTSTATE 3;

 };
Result = user_declarations::Lex_Result;
	 exception LEXER_ERROR; # Raised if illegal leaf action tried */
};

fun make_lexer yyinput =
{	 my yygone0=1;
	 yyb = REF "\n"; 		#  Buffer 
	 yybl = REF 1;		# Buffer length 
	 yybufpos = REF 1;		#  location of next character to use 
	 yygone = REF yygone0;	#  position in file of beginning of buffer 
	 yydone = REF FALSE;		#  eof found yet? 
	 yybegin_i = REF 1;		# Current 'start state' for lexer 

	 yybegin = \\ (internal::start_states::STARTSTATE x) =
		 yybegin_i := x;

fun lex (yyarg as ({ line_num, stringstart, comment_state, charlist, complain })) =
 { fun continue () : internal::Result = 
  { fun scan (s, accepting_leaves:  List( List( internal::Yyfinstate ) ), l, i0) =
	 { fun action (i, NIL) => raise exception LEX_ERROR;
	 action (i, NIL ! l)     => action (i - 1, l);
	 action (i, (node ! acts) ! l) => 
		 case node
		 
		    internal::NN yyk => 
			 ( { fun yymktext () = substring(*yyb, i0, i-i0);
			     yypos = i0 + *yygone;
			 include package   user_declarations;
			 include package   internal::start_states;
  {   yybufpos := i;
      case yyk
 

			#  Application actions 

  1 => { line_num := *line_num + 1; continue(); };
  101 => {   yytext=yymktext();
complain ("illegal token: " + (string::to_string yytext));
                    	    continue(); };
  103 => { line_num := *line_num + 1; continue(); };
  106 => { comment_state := NULL; yybegin initial; continue(); };
  108 => { continue(); };
  110 => { line_num := *line_num + 1; yybegin initial; continue(); };
  112 => { continue(); };
  114 => { yybegin initial; 
                            make_symbol(make_string charlist,*stringstart); };
  116 => { complain "unclosed string";
			    yybegin initial;
                            make_symbol(make_string charlist,*stringstart); };
  118 => {   yytext=yymktext();
add_string(charlist,yytext); continue(); };
  12 => { yybegin eolcom; 
                            continue(); };
  121 => { continue(); };
  124 => { add_string(charlist,"\\\\"); continue(); };
  127 => { add_string(charlist,"\""); continue(); };
  129 => { add_string(charlist,"\\"); continue(); };
  14 => { tokens::at(yypos,yypos+1); };
  16 => { tokens::dot(yypos,yypos+1); };
  18 => { tokens::equal(yypos,yypos+1); };
  20 => { tokens::rparen(yypos,yypos+1); };
  22 => { tokens::rbracket(yypos,yypos+1); };
  24 => { tokens::rbrace(yypos,yypos+1); };
  26 => { tokens::lparen(yypos,yypos+1); };
  28 => { tokens::lbracket(yypos,yypos+1); };
  30 => { tokens::lbrace(yypos,yypos+1); };
  32 => { tokens::comma(yypos,yypos+1); };
  34 => { tokens::semicolon(yypos,yypos+1); };
  36 => { tokens::colon(yypos,yypos+1); };
  39 => { tokens::edgeop(yypos,yypos+2); };
  4 => { continue(); };
  42 => { tokens::edgeop(yypos,yypos+2); };
  47 => { tokens::edge(yypos,yypos+4); };
  52 => { tokens::node(yypos,yypos+4); };
  59 => { tokens::strict(yypos,yypos+6); };
  6 => { charlist := [];
                            stringstart := yypos;
                            yybegin qs;
                            continue(); };
  65 => { tokens::graph(yypos,yypos+5); };
  73 => { tokens::digraph(yypos,yypos+7); };
  82 => { tokens::subgraph(yypos,yypos+8); };
  85 => {   yytext=yymktext();
make_symbol(yytext,yypos); };
  9 => { comment_state := THE(*line_num); 
                            yybegin com; 
                            continue(); };
  90 => {   yytext=yymktext();
make_symbol(yytext,yypos); };
  97 => {   yytext=yymktext();
make_symbol(yytext,yypos); };
  99 => { complain "non-Ascii character";
                   	    continue(); };
  _ => raise exception internal::LEXER_ERROR;

		 esac; }; } ); esac; end;    # fun action

	 my { fin, trans } = unsafe::vector::get (internal::tab, s);
	 new_accepting_leaves = fin ! accepting_leaves;
	 if (l == *yybl)
	     if (trans == .trans (vector::get (internal::tab, 0)))
	       action (l, new_accepting_leaves);
	 else	     newchars= if *yydone ""; else yyinput 1024; fi;
	     if ((size newchars) == 0)
		        yydone := TRUE;
		        if (l == i0)  user_declarations::eof yyarg;
		                  else action (l, new_accepting_leaves); fi;
		  else if (l == i0)  yyb := newchars;
			     else yyb := substring(*yyb, i0, l-i0) + newchars; fi;
		       yygone := *yygone+i0;
		       yybl := size *yyb;
		       scan (s, accepting_leaves, l-i0, 0);
	     fi;   # (size newchars) == 0
	     fi;   # trans == $trans ...
	  else new_char = char::to_int (unsafe::vector_of_chars::get(*yyb, l));
		 new_char = if (new_char < 128) new_char; else 128; fi;
		 new_state = char::to_int (unsafe::vector_of_chars::get (trans, new_char));
		 if (new_state == 0) action (l, new_accepting_leaves);
		 else scan (new_state, new_accepting_leaves, l+1, i0); fi;
	 fi;
  };    # fun scan
/*
	 start= if (substring(*yyb,*yybufpos - 1, 1)=="\n") *yybegin_i+1; else *yybegin_i; fi;
*/
	 scan(*yybegin_i /* start */ , NIL, *yybufpos, *yybufpos);   # fun continue
    };   # fun continue
 continue; };    # fun lex
  lex; 
  };   # fun make_lexer
};
