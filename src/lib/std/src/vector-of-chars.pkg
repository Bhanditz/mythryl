## vector-of-chars.pkg
## Vectors of characters (also known as "strings").

# Compiled by:
#     src/lib/std/src/standard-core.sublib

package vector_of_chars: (weak)  Typelocked_Vector {		# Typelocked_Vector	is from   src/lib/std/src/typelocked-vector.api

								# inline_t		is from   src/lib/core/init/built-in.pkg
								# string_guts		is from   src/lib/std/src/string-guts.pkg
    package string= string_guts;

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val  --- +++ ;
    #
    fun x --- y = inline_t::tu::copyt_tagged_int (inline_t::tu::copyf_tagged_int x - inline_t::tu::copyf_tagged_int y);
    fun x +++ y = inline_t::tu::copyt_tagged_int (inline_t::tu::copyf_tagged_int x + inline_t::tu::copyf_tagged_int y);

#    my (op <)  = inline_t::default_int::(<)
#    my (op >=) = inline_t::default_int::(>=)
#    my (op +)  = inline_t::default_int::(+)

    unsafe_get =  inline_t::vector_of_chars::get;
    unsafe_set =  inline_t::vector_of_chars::set;

    Element =  Char;
    Vector  =  String;

    max_len = string::max_size;

    from_list = string::implode;

    fun tabulate (0, _)
            =>
            "";

	tabulate (n, f)
	    =>
	    {   if (inline_t::default_int::ltu (max_len, n))
		    #
                    raise exception exceptions_guts::SIZE;
		fi;

		ss  =  runtime::asm::make_string  n;

		fun fill i
		    =
		    if (i < n)
			unsafe_set (ss, i, f i); fill (i +++ 1);
		    fi;

		fill 0;

                ss;
	    };
    end;

    length  = inline_t::vector_of_chars::length;
    cat     = string::cat;

    get     = inline_t::vector_of_chars::check_sub;


    fun set (v, i, x)
        =
        tabulate
         ( length v,
	   fn i' =    if (i == i')   x;
		      else           unsafe_get (v, i');
                      fi
         );


    fun keyed_apply f vec
        =
	apply 0
        where
            len = length vec;

	    fun apply i
                =
	        if (i < len)
                    f (i, unsafe_get (vec, i));
                    apply (i +++ 1);
                fi;
	end;


    fun apply f vec
        =
	apply 0
        where
            len = length vec;

	    fun apply i
                =
	        if (i < len)
                    f (unsafe_get (vec, i));
                    apply (i +++ 1);
                fi;
	end;


    fun keyed_map f vec
        =
        tabulate
          ( length vec,
            fn i =  f (i, unsafe_get (vec, i))
          );


    map = string::map;


    fun keyed_fold_left f init vec
        =
	fold (0, init)
        where
            len = length vec;

	    fun fold (i, a)
                =
		if (i >= len)  a;
                else           fold (i +++ 1, f (i, unsafe_get (vec, i), a));
                fi;
        end;

    fun keyed_fold_right f init vec
        =
	fold (length vec --- 1, init)
        where
            fun fold (i, a)
                =
	        if (i < 0)   a;
                else         fold (i --- 1, f (i, unsafe_get (vec, i), a));
                fi;
	end;

    fun fold_left f init vec
        =
	fold (0, init)
        where
            len = length vec;

	    fun fold (i, a)
                =
	        if (i >= len)  a;
                else           fold (i +++ 1, f (unsafe_get (vec, i), a));
                fi;
	end;

    fun fold_right f init vec
        =
	fold (length vec --- 1, init)
        where
	    fun fold (i, a)
                =
	        if (i < 0)   a;
                else         fold (i --- 1, f (unsafe_get (vec, i), a));
                fi;
	end;

    fun findi p vec
        =
	fnd 0
        where
            len = length vec;

	    fun fnd i
                =
	        if (i >= len)
                    NULL;
	        else
                    x = unsafe_get (vec, i);
		 
		    if (p (i, x))   THE (i, x);
                    else            fnd (i +++ 1);
                    fi;
		fi;
	end;

    fun find p vec
        =
	fnd 0
        where
            len = length vec;

	    fun fnd i
                =
		if (i >= len)
                    NULL;
		else
                    x = unsafe_get (vec, i);
		    #
		    if (p x)  THE x;
                    else      fnd (i +++ 1);
                    fi;
		fi;
	end;

    fun exists p vec
        =
	ex 0
        where
            len = length vec;

	    fun ex i
                =
                i < len
                and
                (   p (unsafe_get (vec, i))
                    or
                    ex (i +++ 1)
                );
	end;

    fun all p vec
        =
	al 0
        where
            len = length vec;

	    fun al i
                =
                i >= len
                or
                (   p (unsafe_get (vec, i))
                    and
                    al (i +++ 1)
                );
	end;

    fun collate c (v1, v2)
        =
	col 0
        where
            l1 = length v1;
	    l2 = length v2;

	    l12 = inline_t::ti::min (l1, l2);

	    fun col i
                =
	        if (i >= l12)
                    int_guts::compare (l1, l2);
	        else
                    case (c (unsafe_get (v1, i), unsafe_get (v2, i)))
		        EQUAL   =>  col (i +++ 1);
		        unequal =>  unequal;
                    esac;
                fi;
	end;

};					# package vector_of_chars 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
