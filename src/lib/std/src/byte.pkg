## byte.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

###               "Cooking is like love. It should be
###                entered into with abandon or not at all."
###
###                           -- Harriet Van Horne


stipulate
    package w8  =  one_byte_unt_guts;			# one_byte_unt_guts		is from   src/lib/std/src/one-byte-unt-guts.pkg
    package v1u =  vector_of_one_byte_unts;		# vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
herein

    package   byte
    : (weak)  Byte					# Byte		is from   src/lib/std/src/byte.api
    {						# inline_t	is from   src/lib/core/init/built-in.pkg

	byte_to_char    =   inline_t::cast:  one_byte_unt::Unt -> Char;
	char_to_byte    =   inline_t::cast:  Char              -> one_byte_unt::Unt;

	bytes_to_string =   inline_t::cast:  vector_of_one_byte_unts::Vector -> String;
	string_to_bytes =   inline_t::cast:  String                          -> vector_of_one_byte_unts::Vector;

	unpack_string_vector =  bytes_to_string o    vector_slice_of_one_byte_unts::to_vector;
	unpack_string        =  bytes_to_string o rw_vector_slice_of_one_byte_unts::to_vector;

	stipulate

	    package wu =  inline_t::rw_vector_of_one_byte_unts;	# inline_t	is from   src/lib/core/init/built-in.pkg
	    package vc =  inline_t::vector_of_chars;
	    package ss =  substring;

	    Substring' = SS  ((String, Int, Int));

	    # The substring type is abstract,
	    # so we use a cast to an equivalent type
	    # to get around this problem.				# =8-0   Cursed by ye C gods!!   XXX SUCKO FIXME

	    to_ss =   inline_t::cast:  ss::Substring -> Substring';


	herein

	    fun pack_string (rw_vector_of_one_byte_unts: wu::Rw_Vector, i, substring: ss::Substring):   Void
		=
		{   (to_ss  substring) ->   SS (src, src_start, src_len);
		    #
		    dst_len =  wu::length  rw_vector_of_one_byte_unts;

		    if  (i  <  0
		    or   i  >  dst_len - src_len
		    )
			 raise exception INDEX_OUT_OF_BOUNDS;
		    fi;

		    cpy (src_start, i, src_len)
		    where
			fun cpy (_, _, 0) =>   ();
			    #
			    cpy (src_index, dst_index, n)
				=>
				{   wu::set (rw_vector_of_one_byte_unts, dst_index, inline_t::cast (vc::get (src, src_index)));
				    #
				    cpy (src_index+1, dst_index+1, n - 1);
				};
			end;
		    end;
		};
	end;

	 stipulate
	    reverse_table =  string_to_bytes "\000\128\064\192\032\160\096\224\
					      \\016\144\080\208\048\176\112\240\
					      \\008\136\072\200\040\168\104\232\
					      \\024\152\088\216\056\184\120\248\
					      \\004\132\068\196\036\164\100\228\
					      \\020\148\084\212\052\180\116\244\
					      \\012\140\076\204\044\172\108\236\
					      \\028\156\092\220\060\188\124\252\
					      \\002\130\066\194\034\162\098\226\
					      \\018\146\082\210\050\178\114\242\
					      \\010\138\074\202\042\170\106\234\
					      \\026\154\090\218\058\186\122\250\
					      \\006\134\070\198\038\166\102\230\
					      \\022\150\086\214\054\182\118\246\
					      \\014\142\078\206\046\174\110\238\
					      \\030\158\094\222\062\190\126\254\
					      \\001\129\065\193\033\161\097\225\
					      \\017\145\081\209\049\177\113\241\
					      \\009\137\073\201\041\169\105\233\
					      \\025\153\089\217\057\185\121\249\
					      \\005\133\069\197\037\165\101\229\
					      \\021\149\085\213\053\181\117\245\
					      \\013\141\077\205\045\173\109\237\
					      \\029\157\093\221\061\189\125\253\
					      \\003\131\067\195\035\163\099\227\
					      \\019\147\083\211\051\179\115\243\
					      \\011\139\075\203\043\171\107\235\
					      \\027\155\091\219\059\187\123\251\
					      \\007\135\071\199\039\167\103\231\
					      \\023\151\087\215\055\183\119\247\
					      \\015\143\079\207\047\175\111\239\
					      \\031\159\095\223\063\191\127\255"
			     ;
	herein
	    fun reverse_byte_bits b												# Reverse the bit-order of a byte 
		=
		v1u::get (reverse_table, w8::to_int b);
	end;
    };
end;


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2014,
## released per terms of SMLNJ-COPYRIGHT.
