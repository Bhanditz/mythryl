## internet-socket.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package sg =  socket_guts;					# socket_guts				is from   src/lib/std/src/socket/socket-guts.pkg
    package gs =  plain_socket;				# plain_socket			is from   src/lib/std/src/socket/plain-socket.pkg
    package ps =  pre_socket;					# pre_socket				is from   src/lib/std/src/socket/pre-socket.pkg
    package ci =  mythryl_callable_c_library_interface;		# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
herein

    package   internet_socket
    : (weak)  Internet_Socket					# Internet_Socket			is from   src/lib/std/src/socket/internet-socket.api
    {
	fun socket_fn  fun_name
	    =
	    ci::find_c_function { lib_name => "socket", fun_name };

	Inet = INET;

	Socket(X) =  ps::Socket( Inet, X ); 

	Stream_Socket(X) =  Socket( sg::Stream(X) );
	Datagram_Socket  =  Socket( sg::Datagram  );

	Socket_Address   =  ps::Socket_Address( Inet );

	inet_af = null_or::the (sg::af::from_string "INET");

	stipulate
	    my to_inet_addr:   (ps::Internet_Address, Int) ->  ps::Internet_Address       =  socket_fn "toInetAddr";		# toInetAddr		def in    src/c/lib/socket/to-inetaddr.c
	    my from_inet_addr:  ps::Internet_Address       -> (ps::Internet_Address, Int) =  socket_fn "fromInetAddr";		# fromInetAddr		def in    src/c/lib/socket/from-inetaddr.c
	    my inet_any:        Int                        ->  ps::Internet_Address       =  socket_fn "inetany";		# inetany		def in    src/c/lib/socket/inetany.c
	herein

	    fun to_address (ina, port)
		=
		ps::ADDRESS (to_inet_addr (dns_host_lookupinternal::un_internet_address ina, port));

	    fun from_address (ps::ADDRESS address)
		=
		{   my (a, port)  =  from_inet_addr  address;

		    (dns_host_lookupinternal::internet_address a, port);
		};

	    fun any port
		=
		ps::ADDRESS  (inet_any  port);
	end;

											    # plain_socket	is from   src/lib/std/src/socket/plain-socket.pkg
	package udp {
	    #
	    fun socket ()     = gs::socket  (inet_af, sg::socket::datagram       );
	    fun socket' proto = gs::socket' (inet_af, sg::socket::datagram, proto);
	};

	package tcp {
	    #
	    fun socket ()     = gs::socket  (inet_af, sg::socket::stream       );
	    fun socket' proto = gs::socket' (inet_af, sg::socket::stream, proto);

	    #  tcp control options 

	    stipulate
		my ctl_delay:  (Int, Null_Or(Bool)) -> Bool					# XXX BUGGO FIXME: Should 'Int' be 'Socket_Fd' here, parallel to the fns in   src/lib/std/src/socket/socket-guts.pkg
		    =
		    socket_fn "get_or_set_socket_nodelay_option";				# "get_or_set_socket_nodelay_option"		def in    src/c/lib/socket/get-or-set-socket-nodelay-option.c
	    herein

		fun get_nodelay (ps::SOCKET { file_descriptor, ... } )
		    =
		    ctl_delay (file_descriptor, NULL);

		fun set_nodelay (ps::SOCKET { file_descriptor, ... }, flag)
		    =
		    ignore (ctl_delay (file_descriptor, THE flag));
	    end;
	};

        to_string =  ps::to_string;

	my set_printif_fd:        Int -> Void
	    =
	    socket_fn "setPrintIfFd";								# setPrintIfFd		is in     src/c/lib/socket/setprintiffd.c
		#
		# Enable socket I/O debug fprintfs to given
 		# fd -- see src/c/lib/socket/setprintiffd.c
		# (There might be a better package to put this in...?)

    };
end;

## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
