## dns-host-lookup.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib


stipulate
    package one_byte_unt  =  one_byte_unt_guts;					# one_byte_unt_guts			is from   src/lib/std/src/one-byte-unt-guts.pkg
    package sys_w =  host_unt_guts;					# host_unt_guts				is from   src/lib/std/src/bind-sysword-32.pkg
    package ci    =  mythryl_callable_c_library_interface;		# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
herein
    package dns_host_lookupinternal
    :
    api {
	#  export extra element for internal use by Basis implementation 
	include Dns_Host_Lookup;		# Dns_Host_Lookup	is from   src/lib/std/src/socket/dns-host-lookup.api

	internet_address:     proto_socket::Internet_Address -> Internet_Address;
	un_internet_address:  Internet_Address -> proto_socket::Internet_Address;
    }
      where  Address_Family == proto_socket::af::Address_Family
    =
    package {

	fun netdb_fun  fun_name
	    =
	    ci::find_c_function { lib_name => "socket",  fun_name };

	Internet_Address =  IPV4_ADDRESS  proto_socket::Internet_Address;
	Address_Family   =  proto_socket::af::Address_Family;

	internet_address = IPV4_ADDRESS;

	fun un_internet_address (IPV4_ADDRESS a)
	    =
	    a;

	Entry = HOSTENT  {
	      name:  String,
	      aliases:  List( String ),
	      address_type:  Address_Family,
	      addresses:  List( Internet_Address )
	    };

	stipulate

	  fun conc field' (HOSTENT a)
	      =
	      field' a;
	herein
	    name      =  conc .name;
	    aliases   =  conc .aliases;
	    address_type =  conc .address_type;
	    addresses     =  conc .addresses;
	    address      =  list::head o addresses;
	end;

	# Host DB query functions 
	#
	stipulate

	    Hostent =  (String, List(String), proto_socket::Raw_Address_Family,  List(proto_socket::Internet_Address));

	    fun get_host_typechecked_package  NULL
		    =>
                    NULL;

	        get_host_typechecked_package  (THE (name, aliases, address_type, addresses))
		    =>
		    THE (
                        HOSTENT
                          { name,
                            aliases,
                            address_type =>  proto_socket::af::ADDRESS_FAMILY address_type,
                            addresses    =>  list::map IPV4_ADDRESS addresses
                          }
                    );
            end;

	    my get_host_by_name' : String -> Null_Or( Hostent )                       =  netdb_fun "get_host_by_name";		# "get_host_by_name"	def in    src/c/lib/socket/get-host-by-name.c
	    my get_host_by_addr' : proto_socket::Internet_Address -> Null_Or( Hostent ) =  netdb_fun "get_host_by_address";	# "get_host_by_address"	def in    src/c/lib/socket/get-host-by-address.c

	herein

	    get_by_name =  get_host_typechecked_package o get_host_by_name';

	    fun get_by_address (IPV4_ADDRESS address)
		=
		get_host_typechecked_package( get_host_by_addr' address );

	end;

	fun scan getc stream
	    =
	    {   fun w2b w = one_byte_unt::from_large_unt (sys_w::to_large_unt w);
		fun get_b (w, shft) = sys_w::bitwise_and (sys_w::(>>) (w, shft), 0uxFF);

		fun mk_addr (a, b, c, d)
		    =
		    IPV4_ADDRESS (vector_of_one_byte_unts::from_list
			[
			  w2b a, w2b b, w2b c, w2b d
			]
		    );

		case (proto_socket::to_unts getc stream)
		    #
		    THE ([a, b, c, d], stream)
			=>
			THE (mk_addr (a, b, c, d), stream);

		    THE ([a, b, c], stream)
			=>
			THE (mk_addr (a, b, get_b (c, 0u8), get_b (c, 0u0)), stream);

		    THE ([a, b], stream)
			=>
			THE (mk_addr (a, get_b (b, 0u16), get_b (b, 0u8), get_b (b, 0u0)), stream);

		    THE ([a], stream)
			=>
			THE (mk_addr (get_b (a, 0u24), get_b (a, 0u16), get_b (a, 0u8), get_b (a, 0u0)), stream);

		    _   => NULL;

		esac;
	    };

	from_string = number_string::scan_string scan;

	fun to_string (IPV4_ADDRESS address)
	    =
	    {
		fun get i
		    =
		    vector_of_one_byte_unts::get (address, i);

		proto_socket::from_bytes (get 0, get 1, get 2, get 3);
	    };

	my get_host_name:  Void -> String =   netdb_fun "get_host_name";	# "get_host_name"			def in    src/c/lib/socket/get-host-name.c

      };

    # Restrict to Dns_Host_Lookup:
    # 
    package dns_host_lookup: (weak)  Dns_Host_Lookup				# Dns_Host_Lookup		is from   src/lib/std/src/socket/dns-host-lookup.api
			   = dns_host_lookupinternal;				# dns_host_lookupinternal	is from   src/lib/std/src/socket/dns-host-lookup.pkg

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
