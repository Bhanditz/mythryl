## threadkit-proto-socket.pkg
#
# Provide some utility operations for threadkit sockets.

# Compiled by:
#     src/lib/std/standard.lib



stipulate
    package iom =  io_mailop;					# io_mailop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/io-mailop.pkg
    package md  =  maildrop;					# maildrop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.pkg
#   package mop =  mailop;					# mailop		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailop.pkg
    package skt =  socket;					# socket		is from   src/lib/std/socket.pkg
    package tk  =  threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein

    package threadkit_proto_socket
    : (weak)
	api {

	    Socket_State
	      = UNCONNECTED					# Initial state.
	      | CONNECTING					# Waiting for a connect to complete.
	      #
	      | CONNECTED					# Connected. 
	      | ACCEPTING					# Waiting for an accept to complete. 
	      #
	      | WAITING_ON_IO					# Waiting on an input and/or output operation. 
	      | CLOSED
	      ;

	    Threadkit_Socket (X, Y)
		=
		THREADKIT_SOCKET
		  {
		    state:   md::Maildrop( Socket_State ),
		    #
		    socket:  skt::Socket( X, Y )
		  };

	     make_socket:  skt::Socket( X, Y ) -> Threadkit_Socket (X, Y);

	     in_mailop:   Threadkit_Socket( X, Y ) -> tk::Mailop( Void );
	     out_mailop:  Threadkit_Socket( X, Y ) -> tk::Mailop( Void );

	}
    {
	include threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg


	Socket_State
	  = UNCONNECTED						# Initial state.
	  | CONNECTING						# Waiting for a connect to complete.
	  #	
	  | CONNECTED						# Connected.
	  | ACCEPTING						# Waiting for an accept to complete. 
	  #
	  | WAITING_ON_IO					# Waiting on an input and/or output operation.
	  | CLOSED
	  ;

	Threadkit_Socket (X, Y)
	    =
	    THREADKIT_SOCKET
	      {
		state:    Maildrop( Socket_State ),
		#
		socket:   skt::Socket( X, Y )
	      };

	fun make_socket  socket							# Given a Mythryl socket, return a threadkit socket. 
	    =
	    THREADKIT_SOCKET
	      {
		state  => make_maildrop  UNCONNECTED,				# make_maildrop	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/maildrop.pkg
		socket
	      };

	stipulate
	    include threadkit;							# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

	    fun socket_to_wait_request  { socket, readable, writable, oobdable }
		=
		{ io_descriptor =>  skt::io_descriptor  socket,
		  readable,
		  writable,
		  oobdable
		};

	herein

	    fun in_mailop  (THREADKIT_SOCKET { socket, ... } )			# This appears to be used only in	src/lib/std/src/socket/threadkit-socket.pkg
		=
		iom::io_mailop' (socket_to_wait_request { socket,
							  readable => TRUE,
							  writable => FALSE,
							  oobdable => FALSE
						        }
				)
		    ==>
		    ignore;							# ignore is declared  X -> Void   in   src/lib/core/init/built-in.pkg


	    fun out_mailop (THREADKIT_SOCKET { socket, ... } )			# This appears to be used only in	src/lib/std/src/socket/threadkit-socket.pkg	
		=
		iom::io_mailop' (socket_to_wait_request { socket,
							  readable => FALSE,
							  writable => TRUE,
							  oobdable => TRUE
                                                        }
                                )
		    ==>
		    ignore;

	end;
    };
end;

## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
