## heap-debug.api
#
# Garbage collector control and stats.

# Compiled by:
#     src/lib/std/src/standard-core.sublib




# This api is implemented in:
#
#     src/lib/std/src/nj/heapcleaner-debug.pkg
#
api Heap_Debug {
    #	
    check_agegroup0_overrun_tripwire_buffer:  String -> Void;		# 'String' is caller, logged for diagnostic purposes if the check fails.
	#
	# Heisenbug-hunting assistance.
	# Checks for allocation buffer overrun.  If any word in
	# the tripwire buffer is non-zero, logs buffer contents
	# and exits.

    # These two are used to control from the Mythryl level any extra
    # logging compiled into the C runtime.  Typically this is used when
    # the logging statements would otherwise spam the logfile with
    # gigabytes of unwanted spew.  This is normally used only during
    # debugging -- in a production system these calls will usually do nothing:
    #
    disable_debug_logging:	Void -> Void;				# Set global variable   do_debug_logging   to FALSE in   src/c/lib/heap/libmythryl-heap.c
    enable_debug_logging:	Void -> Void;				# Set global variable   do_debug_logging   to  TRUE in   src/c/lib/heap/libmythryl-heap.c

    dump_task:			String -> Void;				# Dump to a file the contents of the current Task -- see struct task in   src/c/h/runtime-base.h
    dump_gen0:			String -> Void;				# Dump to a file the contents of the current Task's heap generation zero (allocation buffer)  -- see src/c/h/heap.h
    dump_gens:			String -> Void;				# Dump to a file the contents of heap generations one to N (max active generation).
    dump_hugechunk_stuff:	String -> Void;				# Dump to a file the contents of the hugechunk datastructures. (Currently used only to hold code.)
	#
	# These dump various Mythryl-heap datastructures to
	# disk in human-readable ascii-text form.
	#
	# The autogenerated filenames look like
	#
	#     gen0dump-00006c5e-b4b1a730-1324722008.430408-0.log	# The filename fields are: processid-pthreadid-secondspartofdate-microsecondspartofdate-serialnumber.
	#     gensdump-00006c5e-b4b1a730-1324722008.454121-1.log
	#
	# The filenames are logged to the the current logfile (if any).	# To set/open a logfile do:   file::set_logger_to (file::LOG_TO_FILE "foo.log");
	# The 'String' arg in each call is the caller, logged for
	# diagnostic purposes.
};



## Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
