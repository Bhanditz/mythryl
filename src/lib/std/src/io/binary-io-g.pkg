## binary-io-g.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

# Invoked in:
#     src/lib/std/src/posix/binary-io.pkg
#     src/lib/std/src/win32/win32-binary-io.pkg

# Compare with:
#     src/lib/std/src/io/threadkit-binary-io-g.pkg



# QUESTION: What operations should raise exceptions
#           when the stream is closed?

stipulate
    package int =  int_guts;							# int_guts			is from   src/lib/std/src/bind-int-32.pkg
    package iox =  io_exceptions;						# io_exceptions			is from   src/lib/std/src/io/io-exceptions.pkg
    package pos =  file_position_guts;						# file_position_guts		is from   src/lib/std/src/bind-position-31.pkg


    package a   =  rw_vector_of_one_byte_unts;					# rw_vector_of_one_byte_unts		is from   src/lib/std/src/rw-vector-of-one-byte-unts.pkg
    package rs  =  rw_vector_slice_of_one_byte_unts;				# rw_vector_slice_of_one_byte_unts	is from   src/lib/std/src/rw-vector-slice-of-one-byte-unts.pkg
    package v   =  vector_of_one_byte_unts;						# vector_of_one_byte_unts		is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package vs  =  vector_slice_of_one_byte_unts;					# vector_slice_of_one_byte_unts		is from   src/lib/std/src/vector-slice-of-one-byte-unts.pkg
herein

    # This generic gets invoked from:
    #
    #     src/lib/std/src/posix/binary-io.pkg
    #
    generic package   binary_io_g   (
	#             ===========
	#
											# posix_binary_filereaders_and_filewriters			is from   src/lib/std/src/posix/posix-binary-filereaders-and-filewriters.pkg
	package winix_filereaders_and_filewriters:  Winix_Filereaders_And_Filewriters						# Winix_Filereaders_And_Filewriters				is from   src/lib/std/src/io/winix-filereaders-and-filewriters.api
				where
				    filereaders_and_filewriters == binary_filereaders_and_filewriters;

    )
    : (weak) Binary_Io									# Binary_Io				is from   src/lib/std/src/io/binary-io.api
    {
	package pio =  winix_filereaders_and_filewriters::filereaders_and_filewriters;

	# An element for initializing buffers:
	#
	some_element = (0u0:  one_byte_unt::Unt);

	#  # Fast, but unsafe version (from vector_of_one_byte_unts)
	#     vecSub = inline_t::vector_of_one_byte_unts::get
	#     arrUpdate = inline_t::rw_vector_of_one_byte_unts::update
	#   /* fast vector extract operation.  This should never be called with
	#    * a length of 0.
	#    */
	#     fun vecExtract (v, base, optLen) = let
	# 	  len = v::length v
	# 	  fun newVec n = let
	# 		newV = assembly::a::make_string n
	# 		fun fill i = if (i < n)
	# 		      then (
	# 			inline_t::vector_of_one_byte_unts::update (newV, i, vecSub (v, base+i));
	# 			fill (i+1))
	# 		      else ()
	# 		in
	# 		  fill 0; newV
	# 		end
	# 	  in
	# 	    case (base, optLen)
	# 	     of (0, NULL) => v
	# 	      | (_, NULL) => newVec (len - base)
	# 	      | (_, THE n) => newVec n
	# 	    #  end case 
	# 	  end
	#
	vec_extract =  vs::to_vector o vs::make_slice;
	vec_get     =  v::get;
	rw_vec_set  =  a::set;
	empty       =  v::from_list [];

	package pure_io {
	    #
	    Vector        =  v::Vector;
	    Element       =  v::Element;

	    Filereader =  pio::Filereader;
	    Filewriter =  pio::Filewriter;
	    File_Position =  pio::File_Position;

	    # *** Functional input streams ***
	    # We represent an Input_Stream by a pointer to a buffer and an offset
	    # into the buffer.  The buffers are chained by the "more" field from
	    # the beginning of the stream towards the end.  If the "more" field
	    # is EOS, then it refers to an empty buffer (consuming the EOF marker
	    # involves moving the stream from immediately in front of the EOS to
	    # to the empty buffer).  A "more" field of TERMINATED marks a
	    # terminated stream.  We also have the invariant that the "tail"
	    # field of the "info" package points to a more REF that is either
	    # NOMORE or TERMINATED.

	    Input_Stream = INPUT_STREAM  (Input_Buffer, Int)

	    also
	    Input_Buffer
		=
		INPUT_BUFFER  {
		    base_position:  Null_Or( File_Position ),
		    more:  Ref( More ),
		    data:  Vector,
		    info:  Info
		  }
	    also
	    More
	      = MORE  Input_Buffer	#  forward link to additional data 
	      | EOS  Input_Buffer	#  End of stream marker 
	      | NOMORE		#  placeholder for forward link 
	      | TERMINATED		#  termination of the stream 

	    also
	    Info = INFO { reader:                   Filereader,
			  read_vector:              Int -> Vector,
			  read_vector_nonblocking:  Null_Or (Int -> Vector),
			  is_closed:                Ref( Bool ),
			  get_position:             Void -> Null_Or( File_Position ),
			  tail:                     Ref(  Ref(  More ) ),		# Points to the 'more' cell of the last buffer.
			  clean_tag:                io_cleanup_at_shutdown::Tag
			};


	    fun info_of_ibuf (INPUT_BUFFER { info, ... } )
		=
		info;


	    fun chunk_size_of_ibuf buf
		=
		{   (info_of_ibuf  buf)
			 ->
			 INFO { reader => pio::FILEREADER { chunk_size, ... }, ... };

		    chunk_size;
		};


	    fun read_vector (INPUT_BUFFER { info=>INFO { read_vector=>f, ... }, ... } )
		=
		f;


	    fun input_exn (INFO { reader=>pio::FILEREADER { name, ... }, ... }, ml_op, exn)
		=
		raise exception iox::IO { function=>ml_op, name, cause=>exn };

	    exception WOULD_BLOCK;				# This exception is raised by  read_vector_nonblocking in the blocking case. 

	    fun extend_stream (read_g, ml_op, buf as INPUT_BUFFER { more, info, ... } )
		=
		{   info ->   INFO { get_position, tail, ... };

		    base_position =  get_position();
		    chunk    =  read_g (chunk_size_of_ibuf buf);
		    new_more =  REF NOMORE;

		    buf' = INPUT_BUFFER {
			    base_position,
			    info,
			    data => chunk,
			    more => new_more
			  };

		    next =   v::length chunk == 0   ??   EOS buf'
						    ::   MORE buf';

		    more := next;
		    tail := new_more;
		    next;
		}
		except
		    ex = input_exn (info, ml_op, ex);


	    fun get_buffer (read_g, ml_op) (buf as INPUT_BUFFER { more, info, ... } )
		=
		case *more
		    #		      
		    TERMINATED => (EOS buf);
		    NOMORE     => extend_stream (read_g, ml_op, buf);
		    more       => more;
		esac;


	    #  Read a chunk that is at least the specified size: 
	    #
	    fun read_chunk buf
		=
		{   (info_of_ibuf  buf)
			 ->
			 INFO { read_vector, reader=>pio::FILEREADER { chunk_size, ... }, ... };

		    case (chunk_size - 1)
			 #
			 0 =>  (fn n =  read_vector n);

			 k =>  (fn n			#  round up to next multiple of chunk_size 
				   =
				   read_vector (int::quot((n+k), chunk_size) * chunk_size)
			       );
		    esac;

		};

	    fun generalized_input get_buf
		=
		{   fun get (INPUT_STREAM (buf as INPUT_BUFFER { data, ... }, pos))
			=
			{   len = v::length data;

			    if   (pos < len)

				 ( vec_extract (data, pos, NULL),
				   INPUT_STREAM (buf, len)
				 );
			    else
				 case (get_buf  buf)

				      EOS buf   =>  (empty, INPUT_STREAM (buf, 0));
				      MORE rest =>  get (INPUT_STREAM (rest, 0));
				      _         =>  raise exception FAIL "bogus get_buf";
				 esac;
			    fi;
			};

		    get;
		};

	    # Terminate an input stream:
	    #
	    fun terminate (INFO { tail, clean_tag, ... } )
		=
		case *tail

		     m as REF NOMORE
			 =>
			 {   io_cleanup_at_shutdown::remove_cleaner clean_tag;
			     m := TERMINATED;
			 };

		     m as REF TERMINATED
			 =>
			 ();

		     _   =>
			 raise exception MATCH;			# To quiet the compiler.
		esac;


	    fun read (stream as INPUT_STREAM (buf, _))
		=
		generalized_input
		    (get_buffer (read_vector buf, "read"))
		    stream;


	    fun read_one (INPUT_STREAM (buf, pos))
		=
		{   buf ->  INPUT_BUFFER { data, more, ... };

		    if (pos < v::length data)
			#  
			THE (vec_get (data, pos), INPUT_STREAM (buf, pos+1));
		    else
			case *more
			    #
			    MORE buf =>   read_one (INPUT_STREAM (buf, 0));

			    EOS _    =>   NULL;

			    TERMINATED =>  NULL;

			    NOMORE =>
				case (extend_stream (read_vector buf, "read_one", buf))
				    #
				    MORE rest =>   read_one (INPUT_STREAM (rest, 0));
				    _         =>   NULL;
				esac;

			 esac;
		    fi;
		};

	    fun read_n (INPUT_STREAM (buf, pos), bytes_to_read)
		=
		{	(read_as_list_of_vectors (buf, pos, bytes_to_read))
			->
			(list_of_vectors, remaining_stream);

 # Commented out because they didn't trap the intended prey,
 # and spam mythryl.compile.log with hundreds of MB of log entries: -- 2011-12-20 CrT
 # file::log .{ "read_n/AAA-0"; };
 # heap_debug::check_agegroup0_overrun_tripwire_buffer "read_n/AAA-0";
 # file::log .{ "read_n/AAA-1"; };
 # result =
		    (v::cat list_of_vectors, remaining_stream);
 # file::log .{ "read_n/BBB-0"; };
 #  heap_debug::check_agegroup0_overrun_tripwire_buffer "read_n/BBB-0";
 # file::log .{ "read_n/BBB-1"; };
 # result;
		}
		where
		    fun join (item, (list, stream))
			=
			(item ! list, stream);

		    fun read_as_list_of_vectors (buf as INPUT_BUFFER { data, ... }, i, n)
			=
			{   len =  v::length  data;
			    #
			    remain =  len-i;

			    if (remain >= n)
				#				    
				([vec_extract (data, i, THE n)], INPUT_STREAM (buf, i+n));
			    else
				join (
				    vec_extract (data, i, NULL),
				    next_buf (buf, n-remain)
				);
			    fi;
			}

		    also
		    fun next_buf (buf as INPUT_BUFFER { more, data, ... }, n)
			=
			case *more
			    #
			    MORE buf   =>  read_as_list_of_vectors (buf, 0, n);
			    EOS buf    =>  ([], INPUT_STREAM (buf, 0));

			    TERMINATED => ([], INPUT_STREAM (buf, v::length data));

			    NOMORE     =>   case (extend_stream (read_vector buf, "read_n", buf))
						#
						MORE rest =>  read_as_list_of_vectors (rest, 0, n);
						_         =>  ([], INPUT_STREAM (buf, v::length data));
					    esac;
			esac;
		end;

	    fun read_all (stream as INPUT_STREAM (buf, _))
		=
		{   (info_of_ibuf  buf)
			->
			INFO { reader => pio::FILEREADER { avail, ... }, ... };

		    # Read a chunk that is as large
		    # as the available input:
		    #
		    fun big_chunk _
			=
			{   delta = case (avail ())

					 NULL  =>  chunk_size_of_ibuf buf;
					 THE n =>  n;
				    esac;


			    read_chunk  buf  delta;
			};

		    big_input
			=
			generalized_input (get_buffer (big_chunk, "read_all"));

		    fun loop (v, stream)
			=
			if   (v::length v == 0)

			     ([], stream);
			else
			     my (l, stream')
				 =
				 loop (big_input stream);

			     (v ! l, stream');
			fi;

		    my (data, stream')
			=
			loop (big_input stream);

		    (v::cat data, stream');
		};

	    # Return   THE k   if k <= amount characters
	    # can be read without blocking. 
	    #
	    fun can_read (stream as INPUT_STREAM (buf, pos), amount)
		=
		{
		    read_vector_nonblocking
			=
			case buf
			    #
			    INPUT_BUFFER { info as INFO { read_vector_nonblocking=>NULL, ... }, ... }
				=>
				input_exn (info, "can_read", iox::NONBLOCKING_IO_NOT_SUPPORTED);


			    INPUT_BUFFER { info=>INFO { read_vector_nonblocking=>THE f, ... }, ... }
				=>
				f;
			esac;


		    fun try_input (buf as INPUT_BUFFER { data, ... }, i, n)
			=
			{   len    =  v::length data;
			    remain =  len - i;

			    if   (remain >= n)
				 THE n;
			    else next_buf (buf, n - remain);  fi;
			}

		    also
		    fun next_buf (INPUT_BUFFER { more, ... }, n)
			=
			case *more

			     MORE buf   =>  try_input (buf, 0, n);
			     EOS _      =>  THE (amount - n);
			     TERMINATED =>  THE (amount - n);

			     NOMORE
				 =>
				 case (extend_stream (read_vector_nonblocking, "can_read", buf))
				     #
				     MORE b =>  try_input (b, 0, n);
				     _      =>  THE (amount - n);
				esac
				except
				    iox::IO { cause => WOULD_BLOCK, ... }
					=
					THE (amount - n);
			esac;


		    if   (amount < 0)
			 raise exception SIZE;
		    else try_input (buf, pos, amount);  fi;
		};

	    fun close_input (INPUT_STREAM (buf, _))
		=
		case (info_of_ibuf  buf)

		     INFO { is_closed => REF TRUE, ... }
			 =>
			 ();

		     info as INFO { is_closed, reader => pio::FILEREADER { close, ... }, ... }
			 =>
			 {   terminate info;
			     is_closed := TRUE;

			     close ()
			     except
				 ex =  input_exn (info, "close_input", ex);
			 };
		esac;


	    fun end_of_stream (INPUT_STREAM (buf, pos))
		=
		case buf
		    #
		    INPUT_BUFFER { more=>REF (MORE _), ... } =>  FALSE;
		    INPUT_BUFFER { more=>REF (EOS  _), ... } =>  TRUE;

		    INPUT_BUFFER { more, data, info=>INFO { is_closed, ... }, ... }
			=>
			if (pos == v::length  data)
			    #
			    case (*more, *is_closed)
				#
				(NOMORE, FALSE)
				    =>
				    case (extend_stream
					     (read_vector buf, "end_of_stream", buf))

					 (EOS _) =>  TRUE;
					 _       =>  FALSE;
				    esac;

				_   => TRUE;
			    esac;
			else
			    FALSE;
			fi;
		esac;


	    fun make_instream (reader, data)
		=
		{   reader ->  pio::FILEREADER { read_vector, read_vector_nonblocking, get_position, set_position, ... }; 
		    #
		    read_vector'
			=
			case read_vector
			    #
			    NULL  =>  fn _ =  raise exception  iox::BLOCKING_IO_NOT_SUPPORTED;
			    THE f =>  f;
			esac;


		    read_vector_nonblocking'
			=
			case read_vector_nonblocking
			    #
			    THE f
				=>
				THE (fn arg
					=
					case (f arg)

					     THE x =>  x;
					     NULL  =>  raise exception WOULD_BLOCK;
					esac
			       );

			     NULL  =>  NULL;
			 esac;


		    get_position
			=
			case (get_position, set_position)

			     (THE f,   THE _  ) =>  (fn () = THE (f()));
			     _                  =>  (fn () = NULL);
			esac;


		    more = REF NOMORE;

		    closed_flag = REF FALSE;

		    tag = io_cleanup_at_shutdown::add_cleaner {

			    init  =>  fn () =  closed_flag := TRUE,
			    flush =>  fn () =  (),
			    close =>  fn () =  closed_flag := TRUE
			  };

		    info =  INFO {
			      get_position,
			      reader,

			      read_vector             =>  read_vector',
			      read_vector_nonblocking =>  read_vector_nonblocking',

			      is_closed      =>  closed_flag,
			      tail        =>  REF more,
			      clean_tag   =>  tag
			    };

		    # What should we do about the position when there is initial data?? *
		    # Suggestion: When building a stream with supplied initial data,
		    # nothing can be said about the positions inside that initial
		    # data (who knows where that data even came from!).

		    base_position
			=
			if   (v::length data == 0)
			     get_position ();
			else NULL;        fi;


		    INPUT_STREAM ( INPUT_BUFFER { base_position, data, info, more },
			    0
			  );
		  };

	    fun get_reader (INPUT_STREAM (buf, pos))
		=
		{
		    buf ->
			INPUT_BUFFER { data,
			       more,
			       info as INFO { reader, ... },
			       ...
			     };


		    fun get_data (MORE (INPUT_BUFFER { data, more, ... } ))
			    =>
			    data ! get_data *more;

			get_data _
			    =>
			    [];
		    end;

		    terminate info;

		    if   (pos < v::length data)

			 ( reader,
			   v::cat (vec_extract (data, pos, NULL) ! get_data *more)
			 );
		    else
			 ( reader,
			   v::cat (get_data *more)
			 );
		    fi;
		};

	    #  Get the underlying file position of a stream: 
	    #
	    fun file_position_in (INPUT_STREAM (buf, pos))
		=
		case buf
		    #
		    INPUT_BUFFER { base_position => NULL,  info, ... }
			=>
			input_exn (info, "filePosIn", iox::RANDOM_ACCESS_IO_NOT_SUPPORTED);


		    INPUT_BUFFER { base_position => THE b, info, ... }
			=>
			pos::(+) (b, pos::from_int pos);
		esac;


	    Output_Stream
		=
		OUTPUT_STREAM
		  {
		    buffer:			a::Rw_Vector,
		    first_free_byte_in_buffer:	Ref( Int ),
		    #
		    is_closed:			Ref( Bool ),
		    buffering_mode:		Ref( iox::Buffering_Mode ),
		    writer:			Filewriter,
		    #
		    write_rw_vector:		rs::Slice -> Void,
		    write_vector:		vs::Slice -> Void,
		    #
		    clean_tag:			io_cleanup_at_shutdown::Tag
		  };


	    fun raise_io_exception (OUTPUT_STREAM { writer => pio::FILEWRITER { name, ... }, ... }, ml_op, cause)
		=
		raise exception  iox::IO { function => ml_op, name, cause };


	    fun is_closed_out (stream as OUTPUT_STREAM { is_closed=>REF TRUE, ... }, ml_op)
		    =>
		    raise_io_exception (stream, ml_op, iox::CLOSED_IO_STREAM);

		is_closed_out _
		    =>
		    ();
	    end;


	    fun flush_buffer (stream as OUTPUT_STREAM { buffer, first_free_byte_in_buffer, write_rw_vector, ... }, ml_op)
		=
		case *first_free_byte_in_buffer
		    #
		    0 => ();
		    #
		    n => {   write_rw_vector (rs::make_slice (buffer, 0, THE n));
			     first_free_byte_in_buffer := 0;
			 }
			 except
			     any_exception = raise_io_exception (stream, ml_op, any_exception);
		esac;


	    fun write (stream as OUTPUT_STREAM os, v)
		=
		{
		    is_closed_out (stream, "write");

		    os -> { buffer, first_free_byte_in_buffer, buffering_mode, ... };

		    fun flush ()
			=
			flush_buffer (stream, "write");

		    fun flush_all ()
			=
			os.write_rw_vector (rs::make_full_slice buffer)
			except
			    any_exception
				=
				raise_io_exception
				    (stream, "write", any_exception);

		    fun write_direct ()
			=
			{   case *first_free_byte_in_buffer
				#
				0 => ();
				n => {   os.write_rw_vector (rs::make_slice (buffer, 0, THE n));
					 #
					 first_free_byte_in_buffer := 0;
				     };
			    esac;

			    os.write_vector (vs::make_full_slice v);
			}
			except
			    any_exception
				=
				raise_io_exception
				    (stream, "write", any_exception);

		    fun insert copy_vec
			=
			{   buf_len  =  a::length  buffer;
			    data_len =  v::length  v;

			    if (data_len >= buf_len)
				#
				write_direct ();
			    else
				i     =  *first_free_byte_in_buffer;
				avail =  buf_len - i;

				if (avail < data_len)
				    #
				    copy_vec (v, 0, avail, buffer, i);
				    flush_all ();
				    copy_vec (v, avail, data_len-avail, buffer, 0);
				    first_free_byte_in_buffer := data_len-avail;
				else
				    copy_vec (v, 0, data_len, buffer, i);
				    first_free_byte_in_buffer := i + data_len;

				    if   (avail == data_len)   flush ();   fi;
				fi;
			    fi;
			};

		    case *buffering_mode
			#	
			iox::NO_BUFFERING
			    =>
			    write_direct ();

			_   =>
			    insert copy_vec
			    where 
				fun copy_vec (from, from_i, from_len, to, to_i)
				    =
				    rs::copy_vec
					{ to,
					  di   =>  to_i,
					  from =>  vs::make_slice (from, from_i, THE from_len)
					};
			    end;
		    esac;
		};

	    fun write_one (stream as OUTPUT_STREAM { buffer, first_free_byte_in_buffer, buffering_mode, write_rw_vector, ... }, element)
		=
		{   is_closed_out (stream, "write_one");
		    #
		    case *buffering_mode
			#
			iox::NO_BUFFERING
			    =>
			    {   rw_vec_set (buffer, 0, element);
				#	
				write_rw_vector (rs::make_slice (buffer, 0, THE 1))
				except
				    ex =  raise_io_exception (stream, "write_one", ex);
			    };

		      _     =>
			    {   i = *first_free_byte_in_buffer;
				i' = i+1;

				rw_vec_set (buffer, i, element);

				first_free_byte_in_buffer := i';

				if (i' == a::length buffer)
				    #
				    flush_buffer (stream, "write_one");
				fi;
			    };
		    esac;
		};

	    fun flush stream
		=
		flush_buffer (stream, "flush");

	    fun close_output (stream as OUTPUT_STREAM { writer => pio::FILEWRITER { close, ... }, is_closed, clean_tag, ... } )
		=
		if (not *is_closed)
		    #
		    flush_buffer (stream, "close");
		    is_closed := TRUE;
		    io_cleanup_at_shutdown::remove_cleaner clean_tag;
		    close();
		fi;

	    fun make_outstream (wr as pio::FILEWRITER { chunk_size, write_rw_vector, write_vector, ... }, mode)
		=
		{   fun iterate (f, size, subslice)
			=
			lp
			where
			    fun lp sl
				=
				if   (size sl != 0)

				     n = f sl;

				     lp (subslice (sl, n, NULL));
				fi;
			end;

		    write_rw_vector'
			=
			case write_rw_vector
			    #
			    NULL  =>  (fn _ =  raise exception iox::BLOCKING_IO_NOT_SUPPORTED);
			    THE f =>  iterate (f, rs::length, rs::make_subslice);
			esac;


		    write_vector'
			=
			case write_vector
			    #
			    NULL  =>  (fn _ =  raise exception iox::BLOCKING_IO_NOT_SUPPORTED);
			    THE f =>  iterate (f, vs::length, vs::make_subslice);
			esac;


		  # Install a dummy cleaner:
		  #
		  tag = io_cleanup_at_shutdown::add_cleaner {
			  init  => fn () =  (),
			  flush => fn () =  (),
			  close => fn () =  ()
			};

		  stream = OUTPUT_STREAM {
			  buffer         =>  a::make_rw_vector (chunk_size, some_element),
			  first_free_byte_in_buffer         =>  REF 0,
			  is_closed      =>  REF FALSE,
			  buffering_mode =>  REF mode,
			  writer      =>  wr,
			  write_rw_vector   =>  write_rw_vector',
			  write_vector   =>  write_vector',
			  clean_tag   =>  tag
			};

		    io_cleanup_at_shutdown::rebind_cleaner (tag, {
			init  => fn () =  close_output  stream,
			flush => fn () =  flush         stream,
			close => fn () =  close_output  stream
		      } );

		    stream;
		};

	    fun get_writer (stream as OUTPUT_STREAM { writer, buffering_mode, ... } )
		=
		{   flush_buffer (stream, "getWriter");
		    #
		    (writer, *buffering_mode);
		};


	    # Position operations on outstreams

	    Out_Position
		=
		OUT_POSITION  {
		  pos:  pio::File_Position,
		  stream:  Output_Stream
		};

	    fun get_output_position (stream as OUTPUT_STREAM { writer, ... } )
		=
		{   flush_buffer (stream, "get_output_position");
		    #
		    case writer
			#
			pio::FILEWRITER { get_position=>THE f, ... }
			    =>
			    OUT_POSITION { pos => f(), stream }
			    except
				ex = raise_io_exception (stream, "get_output_position", ex);

			_   =>
			    raise_io_exception (stream, "get_output_position", iox::RANDOM_ACCESS_IO_NOT_SUPPORTED);
		    esac;
		};

	    fun file_pos_out (OUT_POSITION { pos, stream } )
		=
		{   is_closed_out (stream, "filePosOut");
		    #
		    pos;
		};

	    fun set_output_position (OUT_POSITION { pos, stream as OUTPUT_STREAM { writer, ... } } )
		=
		{   is_closed_out (stream, "set_output_position");

		    case writer
			#
			pio::FILEWRITER { set_position=>THE f, ... }
			    =>
			    (f pos)
			    except
				ex = raise_io_exception (stream, "set_output_position", ex);

			_   =>  raise_io_exception (stream, "get_output_position", iox::RANDOM_ACCESS_IO_NOT_SUPPORTED);
		    esac;
		};

	    fun set_buffering_mode (stream as OUTPUT_STREAM { buffering_mode, ... }, iox::NO_BUFFERING)
		    =>
		    {   flush_buffer (stream, "setBufferMode");
			#
			buffering_mode := iox::NO_BUFFERING;
		    };

		set_buffering_mode (stream as OUTPUT_STREAM { buffering_mode, ... }, mode)
		    =>
		    {   is_closed_out (stream, "setBufferMode");
			#
			buffering_mode := mode;
		    };
	    end;

	    fun get_buffering_mode (stream as OUTPUT_STREAM { buffering_mode, ... } )
		=
		{   is_closed_out (stream, "get_buffering_mode");
		    #
		    *buffering_mode;
		};

	};											# package pure_io 

	Vector  = v::Vector;
	Element = v::Element;

	Input_Stream  =  Ref( pure_io::Input_Stream  );
	Output_Stream =  Ref( pure_io::Output_Stream );

	# * Input operations *
	fun read stream
            =
            {   my (v, stream')
                    =
                    pure_io::read *stream;

		stream := stream';

                v;
	    };

	fun read_one stream
	    =
	    case (pure_io::read_one *stream)
	      
		 NULL => NULL;
		 (THE (element, stream')) => { stream := stream'; THE element;};
	    esac;


	fun read_n (stream, n)
	    =
	    {   my (v, stream')
                    =
                    pure_io::read_n  (*stream, n);

		stream := stream';

                v;
	    };

	fun read_all (stream:  Input_Stream)
            =
            {   my (v, s)
                    =
                    pure_io::read_all *stream;

		stream := s;

                v;
	    };


	fun can_read (stream, n)
            =
            pure_io::can_read (*stream, n);


	fun lookahead (stream:  Input_Stream)
	    =
	    case (pure_io::read_one *stream)
		#
		NULL => NULL;
		(THE (element, _)) => THE element;
	    esac;


	fun close_input stream
	    =
	    {   (*stream) ->  (s as pure_io::INPUT_STREAM (buf as pure_io::INPUT_BUFFER { data, ... }, _));

		# Find the end of the stream:
                #
		fun find_eos (pure_io::INPUT_BUFFER { more=>REF (pure_io::MORE buf), ... } )
			=>
			find_eos buf;

		    find_eos (pure_io::INPUT_BUFFER { more=>REF (pure_io::EOS buf), ... } )
			=>
			find_eos buf;

		    find_eos (buf as pure_io::INPUT_BUFFER { data, ... } )
			=>
			pure_io::INPUT_STREAM (buf, v::length data);
		end;

		pure_io::close_input  s;

		stream :=  find_eos buf;
	      };

	fun end_of_stream  stream
	    =
	    pure_io::end_of_stream  *stream;

	# Output operations:
	#
	fun write (stream, v)          =  pure_io::write(*stream, v);
	fun write_one (stream, c)      =  pure_io::write_one(*stream, c);
	fun flush stream               =  pure_io::flush *stream;
	fun close_output stream        =  pure_io::close_output *stream;
	fun get_output_position stream =  pure_io::get_output_position *stream;

	fun set_output_position (stream, p as pure_io::OUT_POSITION { stream=>stream', ... } )
	    =
	    {   stream := stream';
		pure_io::set_output_position p;
	    };

	fun make_instream (stream:  pure_io::Input_Stream)   =  REF stream;
	fun get_instream  (stream:  Input_Stream)            =  *stream;
	fun set_instream  (stream:  Input_Stream, stream')   =  stream := stream';

	fun make_outstream (stream:  pure_io::Output_Stream) =  REF stream;
	fun get_outstream  (stream:  Output_Stream)          =  *stream;
	fun set_outstream  (stream:  Output_Stream, stream') =  stream := stream';

	 # * Open files *
	fun open_for_read filename
	    =
	    make_instream (pure_io::make_instream (winix_filereaders_and_filewriters::open_for_read filename, empty))
	    except
		ex =  {
# print ("binary-io-g.pkg: open_for_read: failed to open for input: '" + filename + "\n");

			  raise exception iox::IO { function=>"open_for_read", name=>filename, cause=>ex };
		      };

	fun open_for_write filename
	    =
	    make_outstream (pure_io::make_outstream (winix_filereaders_and_filewriters::open_for_write filename, iox::BLOCK_BUFFERING))
	    except
		ex =  {
			  raise exception iox::IO { function=>"open", name=>filename, cause=>ex };
		      };

	fun open_for_append filename
	    =
	    make_outstream (pure_io::make_outstream (winix_filereaders_and_filewriters::open_for_append filename, iox::NO_BUFFERING))
	    except
		ex =  {

			  raise exception iox::IO { function=>"open_for_append", name=>filename, cause=>ex };
		      };

    }; #  binary_io_g 
end;



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
