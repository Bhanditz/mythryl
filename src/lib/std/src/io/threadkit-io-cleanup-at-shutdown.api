## threadkit-io-cleanup-at-shutdown.api

# Compiled by:
#     src/lib/std/standard.lib



# This module keeps track of open I/O streams
# and handles the proper cleaning of them.
#
# It is a modified version of the monothread library package
#
#     src/lib/std/src/io/io-cleanup-at-shutdown.pkg
#
# Unlike the monothread version, we only do cleanup at
# shutdown/exit time:  We do not try to support the
# persistence of threadkit streams across invocations
# of run_threadkit::run_threadkit).
#
# Also, we only require a single clean-up function, which
# flushes the standard streams and closes all others.
#
# These operations should only be called while threadkit
# is running, since they use synchronization primitives.
#
# NOTE: There is currently a problem with removing the
# cleaners for streams that get dropped by the application,
# but the system limit on open files will limit this.


							# threadkit_startup_and_shutdown_hooks	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit-startup-and-shutdown-hooks.pkg
# This api is implemented in:
#
#     src/lib/std/src/io/threadkit-io-cleanup-at-shutdown.pkg
# 
api Threadkit_Io_Cleanup_At_Shutdown {
    #
    Tag;

    os_init_hook:   Ref( Void -> Void );
	#
	# This function gets invoked as the first
	# action during the IO initialization.
	#
	# It is meant to support any OS specific
	# initialization needed.

     std_stream_hook:  Ref( Void -> Void );
	#
	# This function is defined in file_g
	# and is called after the os_hook.
	#
	# It is used to rebuild the standard streams.

     add_cleaner:  (Void -> Void) -> Tag;

     rebind_cleaner:  ((Tag, (Void -> Void))) -> Void;

     remove_cleaner:  Tag -> Void;


     # Link the master IO cleaner fn
     # into the list of cleanup hooks:
     #
     io_cleaner
	:
	( String,
	  List( threadkit_startup_and_shutdown_hooks::When ),
	  (     threadkit_startup_and_shutdown_hooks::When -> Void)
	);

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
