## stream-readers-and-writers.api

# Compiled by:
#     src/lib/std/src/standard-core.sublib

# Included by:
#     src/lib/std/src/io/winix-stream-readers-and-writers.api

stipulate
    package wt  =  winix_types;				# winix_types		is from   src/lib/std/src/posix/winix-types.pkg
herein

    # This api is implemented by:
    #
    #     src/lib/std/src/io/stream-readers-and-writers-g.pkg
    #
    api Stream_Readers_And_Writers {
	#
	Element;
	Vector;
	Vector_Slice;
	Rw_Vector;
	Rw_Vector_Slice;

	eqtype File_Position;

	compare:  (File_Position, File_Position) -> Order;

	Stream_Reader
	    =
	    STREAM_READER
	      {
		name:        String, 
		chunk_size:  Int,

		# Read methods.  Any given READER is allowed to
		# omit some (which? all??) methods, in which case
		# that field will be NULL:
		#
		read_vector:                Null_Or( Int -> Vector ),				# Read up to 'Int' elements from the stream and return them packed in a fresh read-only vector.
		read_vector_nonblocking:    Null_Or( Int -> Null_Or( Vector ) ),		# Same, but return NULL immediately if no input is available at the moment.
		#
		read_rw_vector:             Null_Or( Rw_Vector_Slice -> Int ),			# Read into given rw_vector_slice, return number of elements read.
		read_rw_vector_nonblocking: Null_Or( Rw_Vector_Slice -> Null_Or( Int ) ),	# Same, but return NULL immediately if no input is available at the moment.

		block:            Null_Or( Void -> Void ),
		can_read:         Null_Or( Void -> Bool ),
		avail:            Void -> Null_Or( Int ),

		get_position:     Null_Or( Void -> File_Position ),
		set_position:     Null_Or( File_Position -> Void ),
		#
		end_position:     Null_Or( Void -> File_Position ),
		verify_position:  Null_Or( Void -> File_Position ),

		close:            Void -> Void,
		io_descriptor:    Null_Or( wt::io::Io_Descriptor )
	      };

	Stream_Writer
	    =
	    STREAM_WRITER
	      {
		name:          String,
		chunk_size:    Int,

		# Write methods.  Any given WRITER is allowed to
		# omit some (which? all??) methods, in which case
		# that field will be NULL:
		#
		write_vector:                 Null_Or( Vector_Slice    -> Int ),		# Write elements from given read-only slice, return number written.
		write_vector_nonblocking:     Null_Or( Vector_Slice    -> Null_Or( Int ) ),	# Same, but return NULL immediately if writing would otherwise block.
		#
		write_rw_vector:              Null_Or( Rw_Vector_Slice -> Int ),		# Write elements from given read-write slice, return number written.
		write_rw_vector_nonblocking:  Null_Or( Rw_Vector_Slice -> Null_Or( Int ) ),	# Same, but return NULL immediately if writing would otherwise block.

		block:              Null_Or( Void -> Void ),
		can_output:         Null_Or( Void -> Bool ),

		get_position:       Null_Or( Void -> File_Position  ),
		set_position:       Null_Or( File_Position  -> Void ),
		end_position:       Null_Or( Void -> File_Position  ),
		verify_position:    Null_Or( Void -> File_Position  ),

		close:              Void -> Void,
		io_descriptor:      Null_Or( wt::io::Io_Descriptor )
	      };

	 open_vector:  Vector -> Stream_Reader;

	 null_reader:  Void -> Stream_Reader;
	 null_writer:  Void -> Stream_Writer;

	 augment_reader:  Stream_Reader -> Stream_Reader;
	 augment_writer:  Stream_Writer -> Stream_Writer;

    };
end;

## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
