This is the main directory for the Mythryl "winix" cross-platform I/O library.

(The main alternative is the posix-specific I/O library centered on src/lib/std/src/posix-1003.1b.)



Here we implement the "winix" (windows/posix cross-platform)
file I/O stack for Mythryl.  The two main top-level files here are

    winix-text-file-for-os-g.pkg
    winix-data-file-for-os-g.pkg

These generic packages combine platform-specific drivers
(passed as args to the generic) with platform-agnostic code
in their body to produce complete platform-specific file
I/O implementations.




The basic design here is:

  o Files with "file-io-driver" in the name are low-level platform-specific support.

  o File ending in "for-os-g" contain high-level platform-agnostic generic packages
    which take "file-io-driver" packages as arguments, yielding complete high-level 
    platform-specific file I/O implementations.

 o The high-level file I/O implementations support two styles of input,
     * "Pure" input which is conceptually side-effect free.
     * Plain traditional style imperative I/O in which each read()
       type function call advances an implicit file pointer.
   All output it imperative, even that done via the "pure" interface.

 o We provide separate "text" and "data" versions of each package,
   intended respectively for ascii file I/O and binary data I/O.
   On Linux these are largely identical except that the "text"
   versions support line-oriented calls missing from from the "data"
   ones.  On Windows and MacOs the "text" versions would also convert
   newlines to standard posix form of one '\n' per line.  (MacOs likes
   to use one '\r' per line, and Windows to use a "\r\n" pair per line.)



As of 2012-03-10, in order to impose some measure of order and clarity,
these files (should) all adhere to the following naming conventions:

 o "winix" (cross-platform) files contain "winix-" in the name, to maintain a clear 
   distinction from the platform-specific posix I/O library. 
 
 o threadkit versions start with "threadkit-".  (Eventually these will become 
   the standard versions, and the prefix will be dropped.) 
 
 o binary vs text I/O is consistently distinguished by "-data-" vs "-text-" 
   in the name. 
 
 o posix- and the win32-specific versions are consistently distinguished by 
   "-for-posix" vs "-for-win32" suffixes. 
 
 o Low-level platform-specific drivers are consistently distinguished by 
   "-io-driver" in the name. 
 
 o All of the file I/O stuff has 'file' in the name. 
