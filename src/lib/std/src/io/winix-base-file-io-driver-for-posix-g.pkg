## winix-base-file-io-driver-for-posix-g.pkg
#
# Code common to text and binary file-io drivers on posix.
#
# This is the bottom layer on our file stack;
#
# See also:
#
#     src/lib/std/src/io/threadkit-winix-base-file-io-driver-for-posix-g.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package wxt =  winix_types;							# winix_types			is from   src/lib/std/src/posix/winix-types.pkg
										# winix_types			is from   src/lib/std/src/win32/winix-types.pkg
herein

    # This generic is invoked (only) in:
    #
    #     src/lib/std/src/io/winix-base-text-file-io-driver-for-posix.pkg
    #     src/lib/std/src/io/winix-base-binary-file-io-driver-for-posix.pkg
    #
    generic package   winix_base_file_io_driver_for_posix_g   (
	#             =====================================
	#
	# These will be vectors/slices of
	# characters for text   file I/O, but of
	# 8-bit unts for binary file I/O:
	#
	package    vector:          Typelocked_Vector;				# Typelocked_Vector		is from   src/lib/std/src/typelocked-vector.api
	package    vector_slice:    Typelocked_Vector_Slice;			# Typelocked_Vector_Slice	is from   src/lib/std/src/typelocked-vector-slice.api
	package rw_vector:          Typelocked_Rw_Vector;			# Typelocked_Rw_Vector		is from   src/lib/std/src/typelocked-rw-vector.api
	package rw_vector_slice:    Typelocked_Rw_Vector_Slice;			# Typelocked_Rw_Vector_Slice	is from   src/lib/std/src/typelocked-rw-vector-slice.api

	    sharing vector::Element == vector_slice::Element == rw_vector::Element == rw_vector_slice::Element;
	    sharing vector::Vector  == vector_slice::Vector  == rw_vector::Vector  == rw_vector_slice::Vector;

	    sharing vector_slice::Slice  == rw_vector_slice::Vector_Slice;
	    sharing rw_vector::Rw_Vector == rw_vector_slice::Rw_Vector;

	eqtype File_Position;

	some_element:  vector::Element;
	compare:       (File_Position, File_Position) -> Order;

    )
    : Winix_Base_File_Io_Driver_For_Os						# Winix_Base_File_Io_Driver_For_Os	is from   src/lib/std/src/io/winix-base-file-io-driver-for-os.api
	    where  Element == vector::Element
	    where  Vector == vector::Vector
	    where  Vector_Slice == vector_slice::Slice
	    where  Rw_Vector == rw_vector::Rw_Vector
	    where  Rw_Vector_Slice == rw_vector_slice::Slice
	    where  File_Position == File_Position
    =
    package {

	package wv  = rw_vector;						# rw_vector		is from   src/lib/std/src/rw-vector.pkg			# "wv"  == "writable vector".
	package wvs = rw_vector_slice;						# rw_vector_slice	is from   src/lib/std/src/rw-vector-slice.pkg		# "wvs" == "writable vector slice".
	package rv  = vector;							# vector		is from   src/lib/std/src/vector.pkg			# "rv"  == "read-only vector".
	package rvs = vector_slice;						# vector_slice		is from   src/lib/std/src/vector-slice.pkg		# "rvw" == "read-only vector slice".

	Element =  wv::Element;
	Vector  =  rv::Vector;

	Vector_Slice    =  rvs::Slice;
	Rw_Vector       =  wv::Rw_Vector;
	Rw_Vector_Slice =  wvs::Slice;

	File_Position = File_Position;

	compare = compare;

	Filereader								# For background see comments in   src/lib/std/src/io/winix-base-file-io-driver-for-os.api
	    =
	    FILEREADER
	      {
		name:				String,
		best_io_quantum:			Int,

		read_vector:			Null_Or( Int -> Vector ),
		read_rw_vector:			Null_Or( Rw_Vector_Slice -> Int ),

		read_vector_nonblocking:	Null_Or( Int -> Null_Or( Vector ) ),
		read_rw_vector_nonblocking:	Null_Or( Rw_Vector_Slice -> Null_Or( Int ) ),

		blockx:        			Null_Or( Void -> Void ),
		can_readx:    			Null_Or( Void -> Bool ),

		avail:        			Void -> Null_Or( Int ),

		get_file_position:		Null_Or( Void -> File_Position ),
		set_file_position:		Null_Or( File_Position -> Void ),

		end_file_position:		Null_Or( Void -> File_Position ),
		verify_file_position:		Null_Or( Void -> File_Position ),

		close:				Void -> Void,

		io_descriptor:			Null_Or( wxt::io::Io_Descriptor )
	      };

	Filewriter									# For background see comments in   src/lib/std/src/io/winix-base-file-io-driver-for-os.api
	    =
	    FILEWRITER
	      {
		name:				String,
		best_io_quantum:		Int,

		write_vector:			Null_Or(    Vector_Slice -> Int ),
		write_rw_vector:		Null_Or( Rw_Vector_Slice -> Int ),
		write_vector_nonblocking:	Null_Or(    Vector_Slice -> Null_Or( Int ) ),
		write_rw_vector_nonblocking:	Null_Or( Rw_Vector_Slice -> Null_Or( Int ) ),

		blockx:				Null_Or( Void -> Void ),
		can_output:			Null_Or( Void -> Bool ),

		get_file_position:		Null_Or( Void -> File_Position ),
		set_file_position:		Null_Or( File_Position -> Void ),
		end_file_position:		Null_Or( Void -> File_Position ),
		verify_file_position:		Null_Or( Void -> File_Position ),

		close:				Void -> Void,
		io_descriptor:			Null_Or( wxt::io::Io_Descriptor )
	      };

	fun blocking_operation  (f, blockx)  x
	    =
	    {   blockx ();
		#
		null_or::the (f x);
	    };


	fun nonblocking_operation  (read, can_readx)  x
	    =
	    if (can_readx())     THE (read x);
	    else                 NULL;
	    fi;

	fun augment_reader (FILEREADER rd)
	    =
	    {
		fun readrw_to_readro  readrw  n
		    =
		    {   a =  wv::make_rw_vector (n, some_element);
			#
			n =  readrw (wvs::make_full_slice a);
			#
			wvs::to_vector (wvs::make_slice (a, 0, THE n));
		    };

		fun readrw_to_readro_nonblocking  readrw_nonblocking  n
		    =
		    {   a =  wv::make_rw_vector (n, some_element);
			#
			case (readrw_nonblocking (wvs::make_full_slice a))
			    #		      
			    THE n' =>  THE (wvs::to_vector (wvs::make_slice (a, 0, THE n')));
			    NULL   =>  NULL;
			esac;  
		    };

		fun readro_to_readrw  readro  asl
		    =
		    {   (wvs::base asl) ->  (a, start, nelems);
			#
			v = readro nelems;
			len = rv::length v;

			wv::copy_vec { to=>a, di=>start, from=>v };
			len;
		    };

		fun readro_to_readrw_nonblocking  readro_nonblocking  asl
		    =
		    {   (wvs::base asl) ->   (a, start, nelems);
			#
			case (readro_nonblocking  nelems)
			    #		      
			    THE v =>    {   len = rv::length v;
					    #
					    wv::copy_vec { to=>a, di=>start, from=>v };
					    THE len;
					};

			    NULL => NULL;
			esac;
		    };

		read_vector'
		    =
		    case rd
			#		  
			{ read_vector    => THE f, ... } =>  THE f;
			{ read_rw_vector => THE f, ... } =>  THE (readrw_to_readro f);

			{ read_vector_nonblocking => THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (f, b));

			{ read_rw_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (readrw_to_readro_nonblocking f, b));

			_ => NULL;
		    esac;


		read_rw_vector'
		    =
		    case rd
			#		  
			{ read_rw_vector => THE f, ... } =>  THE f;
			{ read_vector    => THE f, ... } =>  THE (readro_to_readrw f);

			{ read_rw_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (f, b));

			{ read_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (readro_to_readrw_nonblocking f, b));

			_ => NULL;
		    esac;


		read_vector_nonblocking'
		    =
		    case rd
			#		  
			{ read_vector_nonblocking    => THE f, ... } =>  THE f;
			{ read_rw_vector_nonblocking => THE f, ... } =>  THE (readrw_to_readro_nonblocking f);

			{ read_vector=>THE f, can_readx => THE can, ... }
			    =>
			    THE (nonblocking_operation (f, can));

			{ read_rw_vector=>THE f, can_readx=>THE can, ... }
			    =>
			    THE (nonblocking_operation (readrw_to_readro f, can));

			_ => NULL;
		    esac;


		read_rw_vector_nonblocking'
		    =
		    case rd
			#		  
			{ read_rw_vector_nonblocking => THE f, ... } =>  THE f;
			{ read_vector_nonblocking    => THE f, ... } =>  THE (readro_to_readrw_nonblocking f);

			{ read_rw_vector=>THE f, can_readx=>THE can, ... }
			    =>
			    THE (nonblocking_operation (f, can));

			{ read_vector=>THE f, can_readx=>THE can, ... }
			    =>
			    THE (nonblocking_operation (readro_to_readrw f, can));

			_ => NULL;
		    esac;


		FILEREADER
		  {
		    read_vector	=>  read_vector',
		    read_rw_vector	=>  read_rw_vector',

		    read_vector_nonblocking    =>  read_vector_nonblocking',
		    read_rw_vector_nonblocking =>  read_rw_vector_nonblocking',

		    # The remainder are inherited unchanged:

		    name		=>  rd.name,
		    best_io_quantum	=>  rd.best_io_quantum,

		    blockx		=>  rd.blockx,
		    can_readx		=>  rd.can_readx,
		    avail		=>  rd.avail,

		    get_file_position	=>  rd.get_file_position,
		    set_file_position	=>  rd.set_file_position,
		    end_file_position	=>  rd.end_file_position, 
		    verify_file_position	=>  rd.verify_file_position,

		    close		=>  rd.close,
		    io_descriptor	=>  rd.io_descriptor
		  };
	      };

	fun augment_writer (FILEWRITER wr)
	    =
	    {   fun writev_to_writea  writev  asl
		    =
		    writev (rvs::make_full_slice (wvs::to_vector asl));


		fun writea_to_writev  writea  vsl
		    =
		    case (rvs::length  vsl)
			#
			0 => 0;

			n => {  a = wv::make_rw_vector (n, rvs::get (vsl, 0));
				#
				wvs::copy_vec
				    {
				      from =>  rvs::make_subslice (vsl, 1, NULL),
				      to   =>  a,
				      di   => 1
				    };

				writea (wvs::make_full_slice a);
			    };
		    esac;


		fun writea_to_writev_nonblocking  writea_nonblocking  vsl
		    =
		    case (rvs::length  vsl)
			#
			0 => THE 0;
			#
			n => {  a = wv::make_rw_vector (n, rvs::get (vsl, 0));

				wvs::copy_vec { from => rvs::make_subslice (vsl, 1, NULL),
					       to   => a,
					       di   => 1
					     };

				writea_nonblocking (wvs::make_full_slice a);
			    };
		    esac;


		write_vector'
		    =
		    case wr
			#
			{ write_vector=>THE f, ... } =>  THE f;
			{ write_rw_vector=>THE f, ... } =>  THE (writea_to_writev f);

			{ write_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    => 
			    THE (fn i = { b(); null_or::the (f i);} );

			{ write_rw_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (fn x =  { b(); writea_to_writev (null_or::the o f) x;});

			_ => NULL;
		    esac;


		write_rw_vector'
		    =
		    case wr
			#
			{ write_rw_vector => THE f, ... } =>  THE f;
			{ write_vector => THE f, ... } =>  THE (writev_to_writea  f);

			{ write_rw_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (f, b));

			{ write_vector_nonblocking=>THE f, blockx=>THE b, ... }
			    =>
			    THE (blocking_operation (writev_to_writea f, b));

			_ => NULL;
		    esac;


		write_vector_nonblocking'
		    =
		    case wr
			#
			{ write_vector_nonblocking=>THE f, ... } =>  THE f;
			{ write_rw_vector_nonblocking=>THE f, ... } =>  THE (writea_to_writev_nonblocking f);

			{ write_vector=>THE f, can_output=>THE can, ... }
			    =>
			    THE (nonblocking_operation (f, can));

			{ write_rw_vector=>THE f, can_output=>THE can, ... }
			    =>
			    THE (nonblocking_operation (writea_to_writev f, can));
			_ => NULL;
		    esac;


		write_rw_vector_nonblocking'
		    =
		    case wr
			#
			{ write_rw_vector_nonblocking=>THE f, ... } =>  THE f;
			{ write_vector_nonblocking=>THE f, ... } =>  THE (writev_to_writea f);

			{ write_rw_vector=>THE f, can_output=>THE can, ... }
			    =>
			    THE (nonblocking_operation (f, can));

			{ write_vector=>THE f, can_output=>THE can, ... }
			    =>
			    THE (nonblocking_operation (writev_to_writea f, can));

			_ => NULL;
		    esac;


		FILEWRITER
		  {
		    write_vector	=>  write_vector',
		    write_rw_vector	=>  write_rw_vector',

		    write_vector_nonblocking	=>  write_vector_nonblocking',
		    write_rw_vector_nonblocking	=>  write_rw_vector_nonblocking',

		    # The remainder are inherited unchanged:

		    name		=>  wr.name,
		    best_io_quantum		=>  wr.best_io_quantum,

		    blockx		=>  wr.blockx,
		    can_output		=>  wr.can_output,

		    get_file_position	=>  wr.get_file_position,
		    set_file_position	=>  wr.set_file_position,
		    end_file_position	=>  wr.end_file_position,
		    verify_file_position	=>  wr.verify_file_position,

		    close		=>  wr.close,
		    io_descriptor	=>  wr.io_descriptor
		  };
	      };

	fun open_vector v
	    =
	    {   position = REF 0;
		closed = REF FALSE;

		fun raise_exception_if_closed ()
		    =
		    if   *closed      raise exception io_exceptions::CLOSED_IO_STREAM;   fi;

		len = rv::length v;

		fun avail ()
		    =
		    len - *position;

		fun read_ro n
		     =
		     {
			p = *position;
			m = tagged_int_guts::min (n, len - p);

			raise_exception_if_closed ();
			position := p + m;
			rvs::to_vector (rvs::make_slice (v, p, THE m));
		    };

		fun read_rw asl
		    =
		    {
			p = *position;

			(wvs::base asl) ->  (buf, i, n);

			m = tagged_int_guts::min (n, len - p);

			raise_exception_if_closed ();

			position := p + m;

			wvs::copy_vec { from => rvs::make_slice (v, p, THE m),
				       to   => buf,
				       di   => i
				     };
			m;
		    };

		fun checked k ()
		    =
		    {   raise_exception_if_closed ();
			k;
		    };

		# Random access not supported because position type is abstract:
		#
		FILEREADER
		  {
		    name		=>  "<vector>",
		    best_io_quantum	=>  len,

		    read_vector		=>  THE read_ro,
		    read_rw_vector	=>  THE read_rw,

		    read_vector_nonblocking    =>  THE (THE o read_ro),
		    read_rw_vector_nonblocking =>  THE (THE o read_rw),

		    blockx		=>  THE raise_exception_if_closed,
		    can_readx		=>  THE (checked TRUE),
		    avail		=>  THE o avail,

		    get_file_position	=>  NULL,
		    set_file_position	=>  NULL,
		    end_file_position	=>  NULL,
		    verify_file_position	=>  NULL,

		    close		=>  fn () = closed := TRUE,
		    io_descriptor	=>  NULL
		};
	    };

	fun null_reader ()
	    =
	    {   closed = REF FALSE;

		fun raise_exception_if_closed ()
		    =
		    if   *closed      raise exception io_exceptions::CLOSED_IO_STREAM;   fi;

		fun checked k _
		    =
		    {   raise_exception_if_closed ();
			k;
		    };

		FILEREADER
		  {
		    name		=>  "<null>",
		    best_io_quantum	=>  1,

		    read_vector		=>  THE (checked (rv::from_list [])),
		    read_rw_vector	=>  THE (checked 0),

		    read_vector_nonblocking	=>  THE (checked (THE (rv::from_list []))),
		    read_rw_vector_nonblocking	=>  THE (checked (THE 0)),

		    blockx		=>  THE raise_exception_if_closed,
		    can_readx		=>  THE (checked TRUE),
		    avail		=>  fn () = THE 0,

		    get_file_position	=>  NULL,
		    set_file_position	=>  NULL,

		    end_file_position	=>  NULL,
		    verify_file_position	=>  NULL,

		    close		=>  fn () =  closed := TRUE,
		    io_descriptor	=>  NULL
		};
	    };

	fun null_writer ()
	    =
	    {   closed = REF FALSE;

		fun raise_exception_if_closed ()
		    =
		    if  *closed    raise exception io_exceptions::CLOSED_IO_STREAM;  fi;

		fun checked k ()
		    =
		    k;

		fun write_vector    vsl =  { raise_exception_if_closed ();   rvs::length vsl; };
		fun write_rw_vector asl =  { raise_exception_if_closed ();   wvs::length asl; };

		FILEWRITER
		  {
		    name		=>  "<null>",
		    best_io_quantum		=>  1,

		    write_vector	=>  THE write_vector,
		    write_rw_vector	=>  THE write_rw_vector,

		    write_vector_nonblocking	=> THE (THE o write_vector),
		    write_rw_vector_nonblocking	=> THE (THE o write_rw_vector),

		    blockx		=>  THE raise_exception_if_closed,
		    can_output		=>  THE (checked TRUE),

		    get_file_position	=>  NULL,
		    set_file_position	=>  NULL,
		    end_file_position	=>  NULL,
		    verify_file_position =>  NULL,

		    close		=>  fn () =  closed := TRUE,

		    io_descriptor	=>  NULL
		  };
	    };
    };									# generic package   winix_base_file_io_driver_for_posix_g
end;



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
