## winix-process.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

# The Posix-based implementation of the
# portable (cross-platform) process control
# interface Winix_Process from
#
#     src/lib/std/src/winix/winix-process.api

# This is a subpackage of winix_guts:
#
#     src/lib/std/src/posix/winix-guts.pkg



###              "Men pass in front of our eyes like butterflies,
###               creatures of a brief season. We love them;
###               they are brave, proud, beautiful, clever;
###               and they die almost at once. They die so soon
###               that our hearts are continually racked with pain."
###
###                  -- Philip Pullman, "The Golden Compass"




stipulate
    package u1b =  one_byte_unt_guts;				# one_byte_unt_guts	is from   src/lib/std/src/one-byte-unt-guts.pkg
    package psx =  posix_1003_1b;				# posix_1003_1b		is from   src/lib/std/src/posix-1003.1b/posix-1003-1b.pkg
    package ps  =  posix_signals;				# posix_signals		is from   src/lib/std/src/posix/posix-signals.pkg
    package rs  =  runtime_signals;				# runtime_signals	is from   src/lib/std/src/nj/runtime-signals.pkg
herein
    package   winix_process
    : (weak)  Winix_Process					# Winix_Process		is from   src/lib/std/src/winix/winix-process.api
    {
	package proc =  posix_1003_1b;				# posix_1003_1b		is from   src/lib/std/src/posix-1003.1b/posix-1003-1b.pkg

								# winix_types		is from   src/lib/std/src/posix/winix-types.pkg
	Status =  winix_types::process::Status;	 		# Int 

	success = 0;
	failure = 1;

	fun successful 0 => TRUE;
	    successful _ => FALSE;
	end;

	fun system command
	    =
	    case (proc::fork ())
		#	  
		NULL => (
		     proc::exec ("/bin/sh", ["sh", "-c", command])
		     proc::exit 0u127);

		THE pid
		    =>
		    {   fun save_signal s
			    =
			    rs::set_signal_handler
				(s, rs::IGNORE);

			save_signal_int  = save_signal ps::interrupt_signal;
			save_signal_quit = save_signal ps::sig_quit;

			fun restore ()
			    =
			    {   rs::set_signal_handler (ps::interrupt_signal,  save_signal_int);
				rs::set_signal_handler (ps::sig_quit,          save_signal_quit);
				();
			    };

			fun wait ()
			    =
			    case (#2 (proc::waitpid (proc::W_CHILD pid, [])))
				#
				proc::W_EXITED       =>  success;
				proc::W_EXITSTATUS w =>  u1b::to_int w;
				proc::W_SIGNALED   s =>  failure;	 #  ?? 
				proc::W_STOPPED    s =>  failure;	 #  this shouldn't happen
			    esac;


			(wait() before restore())
			except
			    any_exception
				=
				{   restore ();
				    raise exception any_exception;
				};
		    };
	    esac;

	at_exit = at_exit::at_exit;

	fun terminate status
	    =
	    proc::exit  (u1b::from_int  status);

	fun exit status
	    =
	    {   at::run_functions_scheduled_to_run at::SHUTDOWN;
		terminate status;
	    };
								    # at		is from   src/lib/std/src/nj/at.pkg
								    # time_guts	is from   src/lib/std/src/time-guts.pkg
	get_env = psx::getenv;

	fun sleep secs
	    =
	    {   winix_io::wait_for_io_opportunity
		  {
		    wait_requests => [],
		    timeout => THE (time_guts::from_float_seconds secs)
		  };
		#
		();
	    };
	    # By calling poll() we allow sleeping with sub-second accuracy;
	    # Calling psx::sleep allows sleeping only to a
	    # resolution of seconds.

	get_process_id =  psx::get_process_id;

    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
