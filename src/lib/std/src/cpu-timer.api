## cpu-timer.api

# Compiled by:
#     src/lib/std/src/standard-core.sublib

# See also:
#     src/lib/std/src/wallclock-timer.api
#     src/lib/std/src/nj/set-sigalrm-frequency.api
#     src/lib/compiler/debugging-and-profiling/profiling/profiling-control.api


###           "All we have to decide
###            is what to do with the
###            time that is given us."
###
###                    -- Gandalf



# This api is implemented in:
#
#     src/lib/std/src/cpu-timer.pkg
#
api Cpu_Timer {

    Cpu_Timer;									# Measures CPU time actually used, broken down by user-mode / kernel-mode / garbage-collection.

    make_cpu_timer:  Void -> Cpu_Timer;						# Make timer whose time-zero is now.
    get_cpu_timer:   Void -> Cpu_Timer;						# Get  timer whose time-zero was set at process start-up.



    # The following calls return total CPU
    # consumption in this process since
    # creation time of the Cpu_Timer.
    #
    # Thus, successive calls to these functions
    # will return monotonically increasing values.

    get_elapsed_cpu_time:	Cpu_Timer -> time::Time;			# Sum of times from following call.

    get_elapsed_usr_and_sys_cpu_time						# CPU time including that used by garbage collector.
	:
	Cpu_Timer -> { usr: time::Time,						# User-mode CPU time.
                       sys: time::Time						# Kernel-mode CPU time.
                     };

    get_elapsed_gc_and_nongc_usr_and_sys_cpu_times				# As above, but also broken down by user-code CPU time and garbage-collector CPU time.
	:
	Cpu_Timer
	->
	{ nongc: { usr: time::Time,  sys: time::Time },				# CPU time excluding that used by garbage collector.
	     gc: { usr: time::Time,  sys: time::Time }				# CPU time                used by garbage collector.
	};


    get_elapsed_cleaner_time:    Cpu_Timer -> time::Time;			# CPU time used by garbage collector since creation of Cpu_Timer.



    # The following calls return total CPU
    # consumption in this process since
    # the previous '*added*' call.
    #
    # Thus, successive calls to these functions
    # will NOT return monotonically increasing values.

    get_added_cpu_time:	Cpu_Timer -> time::Time;				# Sum of times from following call.

    get_added_usr_and_sys_cpu_time						# CPU time including that used by garbage collector.
	:
	Cpu_Timer -> { usr: time::Time,						# User-mode CPU time.
                       sys: time::Time						# Kernel-mode CPU time.
                     };

    get_added_gc_and_nongc_usr_and_sys_cpu_times				# As above, but also broken down by user-code CPU time and garbage-collector CPU time.
	:
	Cpu_Timer
	->
	{ nongc: { usr: time::Time,  sys: time::Time },				# CPU time excluding that used by garbage collector.
	     gc: { usr: time::Time,  sys: time::Time }				# CPU time                used by garbage collector.
	};


};


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
