# multicore.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package ci  =  mythryl_callable_c_library_interface;		# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
    #
    cfun = ci::find_c_function;
herein

    package   multicore
    : (weak)  Multicore							# Multicore				is from   src/lib/std/src/multicore.api
    {
	my initscr:      Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "initscr"     };
	my nl:           Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "nl"          };
	my nonl:         Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "nonl"        };
	my cbreak:       Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "cbreak"      };
	my noecho:       Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "noecho"      };
	my start_color:  Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "start_color" };
	my endwin:       Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "endwin"      };
	my refresh:      Void       -> Void   =        cfun { lib_name => "ncurses", fun_name => "refresh"     };
	my has_colors:   Void       -> Bool   =        cfun { lib_name => "ncurses", fun_name => "has_colors"  };
	my getch:        Void       -> Char   =        cfun { lib_name => "ncurses", fun_name => "getch"       };
	my addch:        Char       -> Void   =        cfun { lib_name => "ncurses", fun_name => "addch"       };
	my move:         (Int, Int) -> Void   =        cfun { lib_name => "ncurses", fun_name => "addch"       };	# (Y,X) where (0,0) is upper-left.  # Surely "addch" here should be "move" XXX BUGGO FIXME
    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
