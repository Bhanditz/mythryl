# multicore.pkg
#
# Mythryl-level interface to support for parallel computation
# via kernel threads (on Linux, Posix threads).
#
# We are the Mythryl side of the
#
#     src/c/lib/multicore/libmythryl-multicore.c
#
# interface to functionality defined in
#
#     src/c/h/runtime-multicore.h   
#
# and implemented in the platform-specific files
#
#     src/c/multicore/sgi-multicore.c
#     src/c/multicore/solaris-multicore.c


# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package ci  =  mythryl_callable_c_library_interface;		# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
    #
    cfun = ci::find_c_function;
herein

    package   multicore
    : (weak)  Multicore							# Multicore				is from   src/lib/std/src/multicore.api
    {
	# Here we're looking up fns in
	# the table constructed in
	#
	#     src/c/lib/multicore/cfun-list.h
	#
	my acquire_pthread:      Void       -> Void   =        cfun { lib_name => "multicore", fun_name => "acquire_pthread"     };
	my max_pthreads:         Void       -> Void   =        cfun { lib_name => "multicore", fun_name => "max_pthreads"        };
	my release_pthread:      Void       -> Void   =        cfun { lib_name => "multicore", fun_name => "release_pthread"     };
	my spin_lock:            Void       -> Void   =        cfun { lib_name => "multicore", fun_name => "spin_lock"           };
    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
