## io-wait-hostthread-unit-test.pkg
#
# Unit/regression test functionality for
#
#    src/lib/std/src/hostthread/io-wait-hostthread.pkg
#
# (The io_wait_hostthread server offloads C select() waits on
# file descriptors from the main thread-scheduler hostthread.)

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg


stipulate
#   package hth =  hostthread;													# hostthread			is from   src/lib/std/src/hostthread.pkg
    package iwp =  io_wait_hostthread;												# io_wait_hostthread		is from   src/lib/std/src/hostthread/io-wait-hostthread.pkg
    #
    sleep = makelib::scripting_globals::sleep;
herein

    package io_wait_hostthread_unit_test {
	#
 	include unit_test;													# unit_test			is from   src/lib/src/unit-test.pkg
 
 	name =  "src/lib/std/src/hostthread/io-wait-hostthread-unit-test.pkg";
 
	fun verify_basic__is_running__operation ()
	    =
	    {   # Pretty minimal test:  :-)
		#
# log::note_in_ramlog .{ sprintf "%s\t   calling iwp::is_running    -- verify_basic__is_running__operation/AAA in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
		is_running = iwp::is_running ();
# log::note_in_ramlog .{ sprintf "%s\t   back from iwp::is_running    -- verify_basic__is_running__operation/BBB in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
		assert( is_running );
# log::note_in_ramlog .{ sprintf "%s\t   done assert()   -- verify_basic__is_running__operation/ZZZ in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
	    };

	fun verify_basic__echo__operation ()
	    =
	    {   echoed_text = REF "";
		#
# log::note_in_ramlog .{ sprintf "%s\t   calling iwp::echo    -- verify_basic__echo__operation/AAA in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
		iwp::echo  { what => "foo",  reply => (fn what = (echoed_text := what)) };
# log::note_in_ramlog .{ sprintf "%s\t   calling sleep    -- verify_basic__echo__operation/BBB in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
		#
		sleep 0.01;
# log::note_in_ramlog .{ sprintf "%s\t   calling assert    -- verify_basic__echo__operation/CCC in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
		#
		assert( *echoed_text == "foo" );
# log::note_in_ramlog .{ sprintf "%s\t   done assert    -- verify_basic__echo__operation/ZZZ in io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
	    };

	fun verify_basic__stop__operation ()
	    =
	    {   iwp::stop_server_hostthread_if_running  { per_who => "io-wait-hostthread-unit-test",  reply => (fn _ = ()) };
		#
		sleep 0.01;
		#
		assert (not (iwp::is_running ()));
		#
		iwp::start_server_hostthread_if_not_running  "io-wait-hostthread-unit-test";
		sleep 0.01;
		#
		assert( iwp::is_running () );
	    };

 	fun run ()
 	    =
	    {   printf "\nDoing %s:\n" name;
 		#
		iwp::start_server_hostthread_if_not_running  "io-wait-hostthread-unit-test";					# This will be a no-op if it is already running.
		#
# log::note_in_ramlog .{ sprintf "%s\t   run/AAA calling verify_basic__is_running__operation()    -- io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
printf "\nrun/AAA: verify_basic__is_running__operation () --  io_wait_hostthread_unit_test\n";
 		verify_basic__is_running__operation ();
# log::note_in_ramlog .{ sprintf "%s\t   run/BBB calling verify_basic__echo__operation()    -- io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
printf "\nrun/BBB: verify_basic__echo__operation () --  io_wait_hostthread_unit_test\n";
 		verify_basic__echo__operation ();
# log::note_in_ramlog .{ sprintf "%s\t   run/CCC calling verify_basic__stop__operation()    -- io_wait_hostthread_unit_test" (thread_scheduler::thread_scheduler_statestring()); };
printf "\nrun/CCC: verify_basic__stop__operation () --  io_wait_hostthread_unit_test\n";
 		verify_basic__stop__operation ();
printf "\nrun/ZZZ --  io_wait_hostthread_unit_test\n";
# log::note_in_ramlog .{ sprintf "%s\t   run/DDD calling summarize_unit_tests" (thread_scheduler::thread_scheduler_statestring()); };
 		#
 		summarize_unit_tests  name;
 	    };
    };
end;
