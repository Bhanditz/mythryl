## thread-scheduler-inter-hostthreads-unit-test.pkg
#
# Unit/regression test functionality for interactions between
# the primary-hostthread threadkit stuff implemented in
#
#    src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
#
# and the secondary-hostthread threadkit stuff implemented in
#
#    src/lib/std/src/hostthread/io-wait-hostthread.pkg
#    src/lib/std/src/hostthread/io-bound-task-hostthreads.pkg
#    src/lib/std/src/hostthread/cpu-bound-task-hostthreads.pkg

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg


stipulate
    package pth =  hostthread;									# hostthread			is from   src/lib/std/src/hostthread.pkg
    package ts  =  thread_scheduler;								# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    #
    sleep = makelib::scripting_globals::sleep;
herein

    package thread_scheduler_inter_hostthreads_unit_test {
	#
 	include unit_test;									# unit_test			is from   src/lib/src/unit-test.pkg
 
 	name =  "src/lib/std/src/hostthread/thread-scheduler-inter-hostthreads-unit-test.pkg";
 
 
	fun verify_basic__echo__operation ()
	    =
	    {
											log::note .{ "=>  verify_basic__echo__operation/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		echoed_text = REF "";
		#
		ts::echo  { what => "foo",  reply => (fn what = (echoed_text := what)) };
		#
		sleep 0.1;
		#
											log::note .{ sprintf "=>  verify_basic__echo__operation/YYY (): *echoed_text==\"foo\" == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*echoed_text == "foo" ?? "TRUE" :: "FALSE"); };
		assert( *echoed_text == "foo" );
											log::note .{ "=>  verify_basic__echo__operation/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_basic__do__operation ()
	    =
	    {
											log::note .{ "=>  verify_basic__do__operation/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result1 = REF 0;
	        result2 = REF 0;
		#
		ts::do  (fn () =  result1 := 1);
		ts::do  (fn () =  result2 := 2);
		#
		sleep 0.1;
		#
											log::note .{ sprintf "=>  verify_basic__do__operation/XXX (): *result1==1 == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*result1 == 1 ?? "TRUE" :: "FALSE"); };
											log::note .{ sprintf "=>  verify_basic__do__operation/YYY (): *result2==2 == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*result2 == 2 ?? "TRUE" :: "FALSE"); };
		assert( *result1 == 1 );
		assert( *result2 == 2 );
											log::note .{ "=>  verify_basic__do__operation/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

 	fun run ()
 	    =
 	    {   printf "\nDoing %s:\n" name;   
 		#
											log::note .{ "=>  run/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
 		verify_basic__echo__operation ();
 		verify_basic__do__operation ();
 		#
 		summarize_unit_tests  name;
											log::note .{ "=>  run/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
 	    };
    };
end;
