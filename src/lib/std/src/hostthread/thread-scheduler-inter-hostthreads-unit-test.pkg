## thread-scheduler-inter-hostthreads-unit-test.pkg
#
# Unit/regression test functionality for interactions between
# the primary-hostthread threadkit stuff implemented in
#
#    src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
#
# and the secondary-hostthread threadkit stuff implemented in
#
#    src/lib/std/src/hostthread/io-wait-hostthread.pkg
#    src/lib/std/src/hostthread/io-bound-task-hostthreads.pkg
#    src/lib/std/src/hostthread/cpu-bound-task-hostthreads.pkg

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg

#DO set_control "compiler::trap_int_overflow" "TRUE";

stipulate
    include threadkit;										# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package cpu =  cpu_bound_task_hostthreads;							# cpu_bound_task_hostthreads	is from   src/lib/std/src/hostthread/cpu-bound-task-hostthreads.pkg
    package io  =   io_bound_task_hostthreads;							#  io_bound_task_hostthreads	is from   src/lib/std/src/hostthread/io-bound-task-hostthreads.pkg
#   package hth =  hostthread;									# hostthread			is from   src/lib/std/src/hostthread.pkg
    package ts  =  thread_scheduler;								# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    #
    sleep = makelib::scripting_globals::sleep;
herein

    package thread_scheduler_inter_hostthreads_unit_test {
	#
 	include unit_test;									# unit_test			is from   src/lib/src/unit-test.pkg
 
 	name =  "src/lib/std/src/hostthread/thread-scheduler-inter-hostthreads-unit-test.pkg";
 
	zero = REF 0;
	k64  = REF (256 * 256);
 
	fun verify_basic__echo__operation ()
	    =
	    {
											log::note .{ "=>  verify_basic__echo__operation/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		echoed_text = REF "";
		#
		ts::echo  { what => "foo",  reply => (fn what = (echoed_text := what)) };
		#
		sleep 0.1;
		#
											log::note .{ sprintf "=>  verify_basic__echo__operation/YYY (): *echoed_text==\"foo\" == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*echoed_text == "foo" ?? "TRUE" :: "FALSE"); };
		assert( *echoed_text == "foo" );
											log::note .{ "=>  verify_basic__echo__operation/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_basic__do__operation ()
	    =
	    {
											log::note .{ "=>  verify_basic__do__operation/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result1 = REF 0;
	        result2 = REF 0;
		#
		ts::do  (fn () =  result1 := 1);
		ts::do  (fn () =  result2 := 2);
		#
		sleep 0.1;
		#
											log::note .{ sprintf "=>  verify_basic__do__operation/XXX (): *result1==1 == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*result1 == 1 ?? "TRUE" :: "FALSE"); };
											log::note .{ sprintf "=>  verify_basic__do__operation/YYY (): *result2==2 == %s;   -- thread-scheduler-inter-hostthreads-unit-test.pkg" (*result2 == 2 ?? "TRUE" :: "FALSE"); };
		assert( *result1 == 1 );
		assert( *result2 == 2 );
											log::note .{ "=>  verify_basic__do__operation/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_do_to_maildrop ()
	    =
	    {
		# The above test sets a refcell and uses a timeout
		# to wait for completion -- very primitive.  Here
		# we use a maildrop to sychronize -- much more realistic:
											log::note .{ "=>  verify_do_to_maildrop/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		drop = make_empty_maildrop ():   Maildrop(Int);

		worked = REF TRUE;

		ts::do  (fn () =    {   fill (drop, 17)
					except
					    MAY_NOT_FILL_ALREADY_FULL_MAILDROP
						=
						worked := FALSE;
				    }
                        );

		assert (empty drop  ==  17);

		assert  *worked;
											log::note .{ "=>  verify_do_to_maildrop/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_do_to_mailqueue ()
	    =
	    {
		# Same as above, but using a mailqueue instead of a maildrop:
											log::note .{ "=>  verify_do_to_mailqueue/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		q = make_mailqueue ():   Mailqueue(Int);

		ts::do  (fn () =  push (q, 13));

		assert (pull q  ==  13);
											log::note .{ "=>  verify_do_to_mailqueue/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_do_via_cpu_bound_hostthread ()
	    =
	    {
		# First nontrivial test:  Submit a job to
		# cpu server with reply via thread scheduler
		# inter-hostthread interface:
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/TOP: creating mailqueue   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		q = make_mailqueue ():   Mailqueue(Int);				# Mailqueue for reply.
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/AAA: calling cpu::do  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };

		cpu::do    .{								# This block of code will be executed on one of the cpu-bound-task hostthreads.
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/BBB: in cpu::do, calling ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
				ts::do .{						# This block of code will be executed back on the thread-scheduler hostthread.
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/CCC: in ts::do, calling push(q,19)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					    push (q, 19);
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/DDD: in ts::do, done    push(q,19)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					};
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/EEE: in cpu::do, done    ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
			    };

											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/FFF: in original thread, doing result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result = pull q;
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/GGG: in original thread, done  result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		assert (result  ==  19);
											log::note .{ "=>  verify_do_via_cpu_bound_hostthread/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
	    };

	fun verify_do_via_io_bound_hostthread ()
	    =
	    {
		q = make_mailqueue ():   Mailqueue(Int);

		io::do .{
			    ts::do .{
					push (q, 23);
				    };
			};

		result = pull q;

		assert (result  ==  23);
	    };

	fun verify_divide_by_zero_in_cpu_bound_hostthread ()
	    =
	    {
		##############################################################
		# First, check that it works locally:  :-)
		# 
		foo =   12 / *zero							# The '*zero' bit is just to guard against compiler optimizers.
		        except
				DIVIDE_BY_ZERO = 13;
			    
		assert( foo == 13 );


		##############################################################
		# Now do the same thing in a CPU server to verify that
		# exceptions get processed properly in secondary hostthreads:

		q = make_mailqueue ():   Mailqueue(Int);

		cpu::do    .{
											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/BBB: in cpu::do, calling ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
				foo =   12 / *zero					# *zero just to guard against compiler optimizers.
					except
						DIVIDE_BY_ZERO = 13;

				ts::do .{
											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/CCC: in ts::do, calling push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					    push (q, foo);
											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/DDD: in ts::do, done    push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					};
											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/EEE: in cpu::do, done    ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
			    };

											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/FFF: in original thread, doing result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result = pull q;
											log::note .{ "=>  verify_divide_by_zero_in_cpu_bound_hostthread/GGG: in original thread, done  result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		assert (result  ==  13);
	    };

	fun verify_int_overflow_in_cpu_bound_hostthread ()
	    =
	    {
		##############################################################
		# First, check that it works locally:
		# 
		foo =   *k64 * *k64							# The '*k64' bit is just to guard against compiler optimizers.
		        except
				OVERFLOW = 23;
			    
		assert( foo == 23 );


		##############################################################
		# Now do the same thing in a CPU server to verify that
		# exceptions get processed properly in secondary hostthreads:

		q = make_mailqueue ():   Mailqueue(Int);

		cpu::do    .{
											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/BBB: in cpu::do, calling ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
				foo =   *k64 * *k64					# *k64 just to guard against compiler optimizers.
					except
						OVERFLOW = 23;

				ts::do .{
											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/CCC: in ts::do, calling push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					    push (q, foo);
											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/DDD: in ts::do, done    push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					};
											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/EEE: in cpu::do, done    ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
			    };

											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/FFF: in original thread, doing result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result = pull q;
											log::note .{ "=>  verify_int_overflow_in_cpu_bound_hostthread/GGG: in original thread, done  result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		assert (result  ==  23);
	    };

	fun verify_bounds_check_in_cpu_bound_hostthread ()
	    =
	    {
		# Currently, at least, bounds-checking doesn't involve any
		# signals sorts of stuff, so this one isn't much of a test
		# of hostthread signals support.  But it doesn't hurt to have
		# have it around...                    -- CrT 2012-10-09

		##############################################################
		# First, check that it works locally:
		# 
		foo =   vector::from_list [ 0, 1, 2 ];

		bar =   vector::get (foo, 3)   except SUBSCRIPT = 29;
			    
		assert( bar == 29 );


		##############################################################
		# Now do the same thing in a CPU server to verify that
		# exceptions get processed properly in secondary hostthreads:

		q = make_mailqueue ():   Mailqueue(Int);

		cpu::do    .{
											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/BBB: in cpu::do, calling ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
				bar =   vector::get (foo, 3)
					except
						SUBSCRIPT = 29;

				ts::do .{
											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/CCC: in ts::do, calling push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					    push (q, bar);
											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/DDD: in ts::do, done    push(q,foo)   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
					};
											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/EEE: in cpu::do, done    ts::do   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
			    };

											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/FFF: in original thread, doing result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		result = pull q;
											log::note .{ "=>  verify_bounds_check_in_cpu_bound_hostthread/GGG: in original thread, done  result = (pull q)  -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
		assert (result  ==  29);
	    };

 	fun run ()
 	    =
 	    {   printf "\nDoing %s:\n" name;   
 		#
											log::note .{ "=>  run/TOP ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
 		verify_basic__echo__operation ();
 		verify_basic__do__operation ();
 		verify_do_to_maildrop ();
 		verify_do_to_mailqueue ();
		verify_do_via_cpu_bound_hostthread ();
		verify_do_via_io_bound_hostthread ();
		verify_divide_by_zero_in_cpu_bound_hostthread ();
		verify_int_overflow_in_cpu_bound_hostthread ();
		verify_bounds_check_in_cpu_bound_hostthread ();
 		#
 		summarize_unit_tests  name;
											log::note .{ "=>  run/ZZZ ();   -- thread-scheduler-inter-hostthreads-unit-test.pkg"; };
 	    };
    };
end;
