# pthread.pkg
#
# Mythryl-level interface to support for parallel computation
# via kernel threads (on Linux, Posix threads).
#
# We are the Mythryl side of the
#
#     src/c/lib/pthread/libmythryl-pthread.c
#
# interface to functionality defined in
#
#     src/c/h/runtime-pthread.h   
#
# and implemented in the platform-specific files
#
#     src/c/pthread/pthread-on-posix-threads.c				# pthread build on top of modern posix threads interface.
#     src/c/pthread/pthread-on-sgi.c					# pthread built on top of 1994-era SGI Irix interface.
#     src/c/pthread/pthread-on-solaris.c				# pthread build on top of 1994-era Solaris   interface.
#
# http://handle.dtic.mil/100.2/ADA255639

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package ci  =  mythryl_callable_c_library_interface;		# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg
    package fat =  fate;						# fate					is from   src/lib/std/src/nj/fate.pkg
    #
    fun cfun fun_name
	=
	ci::find_c_function { lib_name => "pthread", fun_name };
herein

    package   pthread
    : (weak)  Pthread											# Pthread				is from   src/lib/std/src/pthread.api
    {
	Pthread_Datum = Int;										# Dummy value to get things compiling first time around.
	Pthread_State =  PTHREAD_STATE (fat::Fate(Void), Pthread_Datum);

	Spinlock = Int;											# Dummy def to get things compiling first time around.

	exception SPINLOCK;
	exception MAKE_PTRHEAD;

	# Here we're looking up fns in
	# the table constructed in
	#
	#     src/c/lib/pthread/cfun-list.h
	#
	my spawn_pthread:	Pthread_State -> Void   =        cfun   "spawn_pthread"     ;
	my get_pthread_id:	Void -> Int             =        cfun   "get_pthread_id"      ;

	stipulate											# (We'll get complaints from the typechecker (due to the "value restriction")
	    foo =  cfun   "release_pthread";								# if we just do    my release_pthread:   Void -> X =   cfun "release_pthread"
	herein												# here, hence this little two-step.)
	    release_pthread =        (unsafe::cast foo):	Void -> X ;
	end;

	my max_pthreads:        Void -> Int             =        cfun   "max_pthreads"        ;
	my spinlock:		Void -> Spinlock	=        cfun   "spin_lock"           ;

	fun active_pthreads () = 0;					# Dummy def to get things compiling first time around.

	initial_datum = 0;						# Dummy def to get things compiling first time around.

	fun get_datum () = 0;						# Dummy def to get things compiling first time around.
	fun set_datum d  = ();						# Dummy def to get things compiling first time around.



	fun try_lock l  = TRUE;						# Dummy def to get things compiling first time around.
	fun lock     l  = ();						# Dummy def to get things compiling first time around.
	fun unlock   l  = ();						# Dummy def to get things compiling first time around.

    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
