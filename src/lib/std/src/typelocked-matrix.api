## typelocked-matrix.api

# Compiled by:
#     src/lib/std/src/standard-core.sublib

# There do not appear to be any implementations of this API at present.



###                        "We are faced with the paradoxical fact that education has become
###                         one of the chief obstacles to intelligence and freedom of thought."
###
###                                                             -- Bertrand Russell



api Typelocked_Matrix {

    eqtype Matrix;
    Vector;
    Element;
    Region = {
	base:  Matrix,
	row:  Int, col:  Int,
	nrows:  Null_Or( Int ), ncols:  Null_Or( Int )
      };

    Traversal == rw_matrix::Traversal;

    from_rw_vector:  (Int, Int, Element) -> Matrix;
    from_list:  List( List( Element ) ) -> Matrix;
    from_fn:    Traversal -> (Int, Int, ((Int, Int) -> Element)) -> Matrix;

    get:  (Matrix, Int, Int) -> Element;
    set:  (Matrix, Int, Int, Element) -> Void;

    dimensions:  Matrix -> (Int, Int);

    columns:  Matrix -> Int;
    rows:  Matrix -> Int;

    row:     (Matrix, Int) -> Vector;
    column:  (Matrix, Int) -> Vector;

    copy:     { src:  Region,
		dst:  Matrix,
		dst_row:  Int,
		dst_col:  Int
	      }
	      -> Void;

    keyed_apply:     Traversal -> (((Int, Int, Element)) -> Void) -> Region -> Void;
    apply:      Traversal -> (Element -> Void) -> Matrix -> Void;

    keyed_map_in_place:  Traversal -> ((Int, Int, Element) -> Element) -> Region -> Void;
    map_in_place:    Traversal -> (Element -> Element) -> Matrix -> Void;

    foldi:    Traversal -> ((Int, Int, Element, X) -> X) -> X -> Region -> X;
    fold:     Traversal -> ((Element, X) -> X) -> X -> Matrix -> X;

  };




## COPYRIGHT (c) 1997 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released per terms of SMLNJ-COPYRIGHT.
