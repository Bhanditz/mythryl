# select-pthread.pkg
#
# For background, see "Overview" comments in    src/lib/std/src/pthread/select-pthread.api
#

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package psx =  posix_1003_1b;						# posix_1003_1b			is from   src/lib/std/src/posix-1003.1b/posix-1003-1b.pkg
    package pth =  pthread;							# pthread			is from   src/lib/std/src/pthread.pkg
herein

    package   select_pthread
    : (weak)  Select_Pthread							# Select_Pthread		is from   src/lib/std/src/pthread/select-pthread.api
    {
	mutex   =  pth::make_mutex   (); 
	condvar =  pth::make_condvar ();  
	pipe    =  psx::make_pipe    ();					# See Note[1] at bottom of file.

	# One record type for each request
	# supported by the server:
	#
	Do_This =  { input: Int,	reply: Int    -> Void };		# Edit to suit. The 'reply' thunks will typically send a do_something() request back to the originating pthread.
	Do_Echo =  { input: String,	reply: String -> Void };

	Request =  DO_THIS  Do_This						# Union of above record types, so that we can keep them all in one queue.
		|  DO_ECHO  Do_Echo
		; 

	request_queue =  REF ([]: List(Request)); 

	fun request_queue_is_empty ()						# We cannot write just    fun request_queue_is_empty () =  (*request_queue == []);
	    =									# because Request is not an equality type. (The 'reply' fields are functions
	    case *request_queue    [] => TRUE;					# and Mythryl does not support comparison of thunks for equality.)
	                           _  => FALSE;
	    esac;



	fun do_this' (r: Do_This)						# Internal fn -- will execute in context of server pthread.
	    =
	    {   # Edit to do actual work before replying.
		# This is the meat of the server:
		#
		r.reply r.input;
	    };

	fun do_echo' (r: Do_Echo)						# Internal fn -- will execute in context of server pthread.
	    =
	    {   # Edit to do actual work before replying.
		# This is the meat of the server:
		#
		r.reply r.input;
	    };



	###############################################
	# The rest of the file is mostly boilerplate:
	###############################################

	fun do_this  (request: Do_This)						# External fn -- will execute in context of client pthread.
	    = 
	    { 
		pth::acquire_mutex mutex;  
		    # 
		    request_queue :=  (DO_THIS request)  !  *request_queue; 
		    # 
		    pth::broadcast_condvar condvar;  
		    # 
		pth::release_mutex mutex;  
	    };           

	fun do_echo  (request: Do_Echo)						# External fn -- will execute in context of client pthread.
	    = 
	    { 
		pth::acquire_mutex mutex;  
		    # 
		    request_queue :=  (DO_ECHO request)  !  *request_queue; 
		    # 
		    pth::broadcast_condvar condvar;  
		    # 
		pth::release_mutex mutex;  
	    };           

	fun get_new_requests  () 
	    = 
	    { 
		pth::acquire_mutex mutex;  
		    # 
		    for (request_queue_is_empty()) {
			#
			pth::wait_on_condvar (condvar, mutex);
		    };

		    new_requests  = reverse  *request_queue; 			# 'reverse' to restore original request ordering.
		    # 
		    request_queue := []; 
		    # 
		pth::release_mutex  mutex;  
		# 
		new_requests; 
	    };           

	fun server_loop () 
	    = 
	    {   service_requests (get_new_requests()); 
		#
		server_loop (); 
	    } 
	   where 
		fun service_requests  [] 
			=> 
			(); 

		    service_requests  (request ! rest) 
			=> 
			{   service_request request; 
			    #
			    service_requests rest; 
			} 
			where 
			    fun service_request (DO_THIS r) =>  do_this' r; 
				service_request (DO_ECHO r) =>  do_echo' r;
			    end; 
			end;
		end; 
	    end; 

                                                                my _ = 		# "my _ =" needed because only declarations are syntactically allowable here.
        pth::spawn_pthread  server_loop;
    };
end;

#######################################################################
# Note[1]
# Most pthread servers block on their request_queue when not busy,
# and thus can be woken by a simple pth::broadcast_condvar, but
# here we will be spending almost all our time blocked in a select(),
# so that will not work.
#
# Consequently we use a dedicated pipe to wake our server pthread.
# By always including a read of this pipe in our select() we ensureq
# that the server pthread can always we woken just by writing one
# byte to the pipe.

## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
