## cpu-bound-task-pthreads-unit-test.pkg
#
# Unit/regression test functionality for
#
#    src/lib/std/src/pthread/cpu-bound-task-pthreads.pkg
#
# (The cpu_bound_task_pthreads server offloads cpu-intensive
# tasks from the main pthread pthread.)

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg


stipulate
    package pth =  pthread;							# pthread			is from   src/lib/std/src/pthread.pkg
    package csp =  cpu_bound_task_pthreads;					# cpu_bound_task_pthreads	is from   src/lib/std/src/pthread/cpu-bound-task-pthreads.pkg
    #
    sleep = makelib::scripting_globals::sleep;
herein

    package cpu_bound_task_pthreads_unit_test {
	#
 	include unit_test;							# unit_test			is from   src/lib/src/unit-test.pkg
 
 	name =  "src/lib/std/src/pthread/cpu-bound-task-pthreads-unit-test.pkg";
 
 
	fun verify_basic__servercount__operation ()
	    =
	    {   # Pretty minimal test:  :-)
		#
		assert(  csp::get_count_of_live_pthreads () >= 0  );
	    };

	fun verify_basic__start__operation ()
	    =
	    {   initial_servercount
		    =
		    csp::get_count_of_live_pthreads ();

		count2 =  csp::start  "cycleserver-pthread-unit-test";
		count3 =  csp::start  "cycleserver-pthread-unit-test";
		#
		sleep 0.01;
		#
		assert (count3 == initial_servercount + 2);
	    };

	fun verify_basic__echo__operation ()
	    =
	    {   echoed_text = REF "";
		#
		csp::echo  { what => "foo",  reply => (fn what = (echoed_text := what)) };
		#
		sleep 0.01;
		#
		assert( *echoed_text == "foo" );
	    };

	fun verify_basic__do__operation ()
	    =
	    {   result1 = REF 0;
	        result2 = REF 0;
		#
		csp::do  (fn () =  result1 := 1);
		csp::do  (fn () =  result2 := 2);
		#
		sleep 0.01;
		#
		assert( *result1 == 1 );
		assert( *result2 == 2 );
	    };

	fun verify_basic__stop__operation ()
	    =
	    {   initial_servercount
		    =
		    csp::get_count_of_live_pthreads ();

		csp::stop  { who => "cycleserver-pthread-unit-test",  reply => (fn _ = ()) };
		csp::stop  { who => "cycleserver-pthread-unit-test",  reply => (fn _ = ()) };
		#
		sleep 0.01;
		#
	        final_servercount
		    =
		    csp::get_count_of_live_pthreads ();

		assert (final_servercount == initial_servercount - 2);
	    };

 	fun run ()
 	    =
 	    {   printf "\nDoing %s:\n" name;   
 		#
 		verify_basic__servercount__operation ();
 		verify_basic__start__operation ();
 		verify_basic__echo__operation ();
 		verify_basic__do__operation ();
 		verify_basic__stop__operation ();
 		#
 		summarize_unit_tests  name;
 	    };
    };
end;
