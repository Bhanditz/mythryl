# select-pthread.api
#
# Interface to a server pthread designed to basically just
# sit in a loop doing select() over and over on whatever
# file/pipe/socket descriptors are of current interest.
#
# Our main purpose is to offload I/O blocking from the
# main threadkit pthread so that it can run full speed				# Threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.api
# while we sit around waiting for network packets to arrive.			# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
#
# A secondary purpose of select_pthread is to provide the
# clock threadkit needs to drive its pre-emptive timeslicing.
# Reppy's original CML implementation uses SIGALRM for this,
# but this has two critical disadvantages:
#
#  o  SIGALRM is a bottleneck resource which everyone wants
#     to control.
#
#  o  Worse, SIGALRM interrupts "slow" system calls, causing
#     them to return EINTR instead of a useful result, requiring
#     the relevant C code to re-try.  We can ensure that our own
#     C support code does this, but one call -- connect() --
#     *cannot* be retried, and we cannot be sure that all C
#     libraries linked into the runtime will retry properly
#     on EINTR. (In fact, I'd bet good odds that some will not.)
#
# By having our select() time out regularly and generate
# a timeslice clock for threadkit based on those timeouts
# we avoid those problems completely.

# Compiled by:
#     src/lib/std/standard.lib

stipulate
    package pth =  pthread;							# pthread			is from   src/lib/std/src/pthread.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/std/src/pthread/select-pthread.pkg
    #
    api Select_Pthread {
	#
	is_running: Void -> Bool;						# Returns TRUE iff the server pthread is running.
	#
	start:      String -> Bool;						# 'String' will be logged as the client requesting startup.
	#									# Returns TRUE if it started the server pthread, FALSE if server pthread was already running.

	Do_Stop = { who:   String,
		    reply: Void -> Void
		  };
        stop:     Do_Stop -> Void;

	Do_Echo = { what:  String,						# Primarily to test that the server is running.
		    reply: String -> Void
		  };
        echo:     Do_Echo -> Void;

    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
