## vector-of-one-byte-unts.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

###               "Humor cannot do credit to itself without a
###                good background of gravity & of earnestness.
###
###               "Humor unsupported rather hurts its author
###                in the estimation of the reader."
###
###                                    -- Mark Twain,
###                                       Letter to Michael Simons,
###                                       January 1873



package vector_of_one_byte_unts: (weak)  Typelocked_Vector {		# Typelocked_Vector	is from   src/lib/std/src/typelocked-vector.api
    #
    package v =  inline_t::vector_of_one_byte_unts;				# inline_t		is from   src/lib/core/init/built-in.pkg

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y =  inline_t::tu::copyt_tagged_int (inline_t::tu::copyf_tagged_int x - inline_t::tu::copyf_tagged_int y);
    fun x +++ y =  inline_t::tu::copyt_tagged_int (inline_t::tu::copyf_tagged_int x + inline_t::tu::copyf_tagged_int y);

    # Unchecked access operations:
    #
    unsafe_get = v::get;
    unsafe_set = v::set;

    Vector  = v::Vector;
    Element = one_byte_unt::Unt;

    my zero_length_vector:  Vector
	=
	inline_t::cast "";

    my create_vec:  Int -> Vector
	=
	inline_t::cast  runtime::asm::make_string;

    max_len = core::max_length;

    my from_list:  List(Element) -> Vector
	=
        inline_t::cast  vector_of_chars::from_list;

    my tabulate:  (Int, (Int -> Element)) -> Vector
	=
        inline_t::cast  vector_of_chars::tabulate;

    length   =  v::length;
    get      =  v::check_sub;

    my cat:  List(Vector) -> Vector
        =
	inline_t::cast vector_of_chars::cat;

    my keyed_apply:  ((Int, Element) -> Void) -> Vector -> Void		=  inline_t::cast  vector_of_chars::keyed_apply;
    my apply:        (Element        -> Void) -> Vector -> Void		=  inline_t::cast  vector_of_chars::apply;

    my set:          (Vector, Int, Element) -> Vector			=  inline_t::cast  vector_of_chars::set;
    my keyed_map:    ((Int, Element) -> Element) -> Vector -> Vector	=  inline_t::cast  vector_of_chars::keyed_map;

    my map:          (Element -> Element) -> Vector -> Vector		=  inline_t::cast  vector_of_chars::map;
    my v2cv:         Vector -> vector_of_chars::Vector			=  inline_t::cast;

    fun keyed_fold_left f init vec
	=
	fold (0, init)
	where
	    len = length vec;
	    #
	    fun fold (i, a)
		=
		if (i >= len)  a;
		else          fold (i +++ 1, f (i, unsafe_get (vec, i), a));
		fi;
	end;

    fun fold_left f init vec
	=
	fold (0, init)
	where
	    len = length vec;
	    #
	    fun fold (i, a)
		=
		if (i >= len)   a;
		else		fold (i +++ 1, f (unsafe_get (vec, i), a));
		fi;
	end;    

    fun keyed_fold_right f init vec
	=
	fold (length vec --- 1, init)
	where
	    fun fold (i, a)
		=
		if (i < 0)   a;
		else	     fold (i --- 1, f (i, unsafe_get (vec, i), a));
		fi;
	end;

    fun fold_right f init vec
	=
	fold (length vec --- 1, init)
	where
	    fun fold (i, a)
		=
		if (i < 0)   a;
		else         fold (i --- 1, f (unsafe_get (vec, i), a));
		fi;
	end;


    my findi:  ((Int, Element) -> Bool) -> Vector -> Null_Or( (Int, Element) )
	=
	inline_t::cast vector_of_chars::findi;


    my find:  (Element -> Bool) -> Vector -> Null_Or( Element )
	=
	inline_t::cast vector_of_chars::find;


    my exists:  (Element -> Bool) -> Vector -> Bool
	=
	inline_t::cast vector_of_chars::exists;


    my all:  (Element -> Bool) -> Vector -> Bool
	=
	inline_t::cast vector_of_chars::all;


    my collate:  ((Element, Element) -> Order) -> (Vector, Vector) -> Order
        =
	inline_t::cast vector_of_chars::collate;
};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
