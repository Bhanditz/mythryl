## posix-io-unit-test.pkg
#
# Unit/regression test functionality for
#
#     src/lib/std/src/psx/posix-io.pkg

# Compiled by:
#     src/lib/test/unit-tests.lib

# Run by:
#     src/lib/test/all-unit-tests.pkg


stipulate
    include threadkit;										# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package psx =  posixlib;									# posixlib			is from   src/lib/std/src/psx/posixlib.pkg
#   package cpu =  cpu_bound_task_hostthreads;							# cpu_bound_task_hostthreads	is from   src/lib/std/src/hostthread/cpu-bound-task-hostthreads.pkg
#   package io  =   io_bound_task_hostthreads;							#  io_bound_task_hostthreads	is from   src/lib/std/src/hostthread/io-bound-task-hostthreads.pkg
#   package pth =  hostthread;									# hostthread			is from   src/lib/std/src/hostthread.pkg
#   package ts  =  thread_scheduler;								# thread_scheduler		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    package v1b =        vector_of_one_byte_unts;						#       vector_of_one_byte_unts	is from   src/lib/std/src/vector-of-one-byte-unts.pkg
    package vbs =  vector_slice_of_one_byte_unts;						# vector_slice_of_one_byte_unts	is from   src/lib/std/src/vector-slice-of-one-byte-unts.pkg
#    package vsc =     vector_slice_of_chars;							#    vector_slice_of_chars	is from   src/lib/std/src/vector-slice-of-chars.pkg
    #
#    sleep = makelib::scripting_globals::sleep;

    (_[]) = v1b::(_[]);
herein

    package posix_io_unit_test {
	#
 	include unit_test;									# unit_test			is from   src/lib/src/unit-test.pkg
 
 	name =  "src/lib/std/src/psx/posix-io-unit-test.pkg";
 
 
	fun verify_foo ()
	    =
	    {   filename = "fee-fie-foe-fum.log";						# ".log" so that 'make clean' will remove it.
		#
		fd = psx::creat (filename, psx::mode_0644);
											log::note .{ "=>  verify_foo/TOP ();   -- posix-io-unit-test.pkg"; };
		a =  one_byte_unt::from_int  11;
		b =  one_byte_unt::from_int  13;
		c =  one_byte_unt::from_int  17;
		d =  one_byte_unt::from_int  19;

		vector_of_one_byte_unts
		    =
		    v1b::from_list   [ a, b, c, d ];

		slice_of_vector_of_one_byte_unts
		    =	
		    vbs::make_full_slice   vector_of_one_byte_unts;


		psx::write_vector (fd, slice_of_vector_of_one_byte_unts);

		psx::close fd;



		file_descriptor = psx::openf (filename, psx::O_RDONLY, psx::o::flags []);

		readback_vector =  psx::read_as_vector { file_descriptor, max_bytes_to_read => 8 };

		assert( v1b::length readback_vector == 4 );				# Length of [ a, b, c, d ] above.

		psx::close file_descriptor;

		assert( readback_vector[0] == a );
		assert( readback_vector[1] == b );
		assert( readback_vector[2] == c );
		assert( readback_vector[3] == d );



		(psx::make_pipe ()) ->   { infd, outfd }; 


		psx::setfd ( infd, psx::fd::cloexec  );
		psx::setfd (outfd, psx::fd::flags [] );

		assert( psx::getfd  infd  ==  psx::fd::cloexec  );
		assert( psx::getfd outfd  ==  psx::fd::flags [] );


		psx::setfd ( infd, psx::fd::flags [] );
		psx::setfd (outfd, psx::fd::cloexec  );

		assert( psx::getfd  infd  ==  psx::fd::flags [] );
		assert( psx::getfd outfd  ==  psx::fd::cloexec  );

		{   include psx;
		    include psx::flags;


		    setfl ( infd, flags [ append, nonblock ] );
		    setfl (outfd, flags [                  ] );

		    assert(  #1 (getfl  infd)  ==  flags [ append, nonblock ] );
		    assert(  #1 (getfl outfd)  ==  flags [                  ] );


		    setfl ( infd, flags [                  ] );
		    setfl (outfd, flags [ append, nonblock ] );

		    assert(  #1 (getfl  infd)  ==  flags [                  ] );
		    assert(  #1 (getfl outfd)  ==  flags [ append, nonblock ] );


		    assert(  #2 (getfl  infd)  ==  O_RDONLY  );
		    assert(  #2 (getfl outfd)  ==  O_WRONLY  );
		};

		psx::close  infd;
		psx::close outfd;
											log::note .{ "=>  verify_foo/ZZZ ();   -- posix-io-unit-test.pkg"; };
	    };


 	fun run ()
 	    =
 	    {   printf "\nDoing %s:\n" name;   
 		#
											log::note .{ "=>  run/TOP ();   -- posix-io-unit-test.pkg"; };
 		verify_foo ();
 		#
 		summarize_unit_tests  name;
											log::note .{ "=>  run/ZZZ ();   -- posix-io-unit-test.pkg"; };
 	    };
    };
end;
