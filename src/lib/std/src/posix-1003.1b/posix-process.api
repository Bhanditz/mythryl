## posix-process.api

# Compiled by:
#     src/lib/std/src/standard-core.sublib



# Api for POSIX 1003.1 process submodule



###         "I wanted to have virtual memory, at least
###          as it's coupled with file systems.
###
###                               -- Ken Thompson 



###         "The world is changing:
###          I feel it in the water,
###          I feel it in the earth,
###          and I smell it in the air."
###
###                  -- Treebeard
###
###                   [J.R.R. Tolkein, "Lord of the Rings"]



api Posix_Process {
    #
    eqtype Signal;
    eqtype Process_Id;

    unt_to_pid:      host_unt::Unt -> Process_Id;
    pid_to_unt:      Process_Id -> host_unt::Unt;

	
    fork:  Void -> Null_Or( Process_Id );
	#
	# This is essentially the unix-level fork().
	# For a higher-level fork() see fork_process() in
	#
	#     src/lib/std/src/posix/spawn.api
	#     src/lib/std/src/posix/spawn.pkg
    
    exec:   (String, List( String )) -> X;
    exece:  (String, List( String ), List( String )) -> X;
    execp:  (String, List( String )) -> X;
    
    Waitpid_Arg
      = W_ANY_CHILD
      | W_CHILD  Process_Id
      | W_SAME_GROUP
      | W_GROUP  Process_Id
      ;
    
    Exit_Status
      = W_EXITED
      | W_EXITSTATUS  one_byte_unt::Unt
      | W_SIGNALED  Signal
      | W_STOPPED  Signal
      ;

    from_status:  winix_types::process::Status -> Exit_Status;
    
    package w:
    api {
        include Bit_Flags;		# Bit_Flags	is from   src/lib/std/src/bit-flags.api

        untraced:  Flags;
    };

    wait:         Void -> (Process_Id, Exit_Status);
    waitpid:     (Waitpid_Arg, List( w::Flags )) -> (Process_Id, Exit_Status);
    waitpid_nh:  (Waitpid_Arg, List( w::Flags )) -> Null_Or ((Process_Id, Exit_Status));
    
    exit:  one_byte_unt::Unt -> X;
    
    Killpid_Arg
      = K_PROC  Process_Id
      | K_GROUP Process_Id
      | K_SAME_GROUP;

    kill:  (Killpid_Arg, Signal) -> Void;
    
    alarm:  time::Time -> time::Time;
    pause:  Void -> Void;
    sleep:  time::Time -> time::Time;		# Sleeps only to a resolution of seconds:  You can sleep with sub-second resolution via winix::process::sleep or winix::io::poll.

}; #  Api Posix_Process 



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
