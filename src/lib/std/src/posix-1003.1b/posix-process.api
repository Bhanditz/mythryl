## posix-process.api
#
# Api for POSIX 1003.1 process submodule

# Compiled by:
#     src/lib/std/src/standard-core.sublib






###         "I wanted to have virtual memory, at least
###          as it's coupled with file systems.
###
###                               -- Ken Thompson 



###         "The world is changing:
###          I feel it in the water,
###          I feel it in the earth,
###          and I smell it in the air."
###
###                  -- Treebeard
###
###                   [J.R.R. Tolkein, "Lord of the Rings"]



stipulate
    package hu  =  host_unt;						# host_unt		is from   src/lib/std/host-unt.pkg
    package tim =  time;						# time			is from   src/lib/std/time.pkg
    package u1b =  one_byte_unt;					# one_byte_unt		is from   src/lib/std/one-byte-unt.pkg
    package wt  =  winix_types;						# winix_types		is from   src/lib/std/src/posix/winix-types.pkg
									# winix_types		is from   src/lib/std/src/win32/winix-types.pkg
herein

    api Posix_Process {
	#
	eqtype Signal;
	eqtype Process_Id;

	unt_to_pid:      hu::Unt -> Process_Id;
	pid_to_unt:      Process_Id -> hu::Unt;


	fork:  Void -> Null_Or( Process_Id );
	    #
	    # This is essentially the unix-level fork().
	    # For a higher-level fork() see fork_process() in
	    #
	    #     src/lib/std/src/posix/spawn.api
	    #     src/lib/std/src/posix/spawn.pkg

	exec:   (String, List( String )) -> X;
	exece:  (String, List( String ), List( String )) -> X;
	execp:  (String, List( String )) -> X;

	Waitpid_Arg
	  = W_ANY_CHILD
	  | W_CHILD  Process_Id
	  | W_SAME_GROUP
	  | W_GROUP  Process_Id
	  ;

	Exit_Status
	  = W_EXITED
	  | W_EXITSTATUS  u1b::Unt
	  | W_SIGNALED  Signal
	  | W_STOPPED  Signal
	  ;

	from_status:  wt::process::Status -> Exit_Status;

	package w:  api {
			include Bit_Flags;		# Bit_Flags	is from   src/lib/std/src/bit-flags.api
			#
			untraced:  Flags;
		    };

	wait:         Void -> (Process_Id, Exit_Status);
	waitpid:     (Waitpid_Arg, List( w::Flags )) -> (Process_Id, Exit_Status);
	waitpid_nh:  (Waitpid_Arg, List( w::Flags )) -> Null_Or ((Process_Id, Exit_Status));

	exit:  u1b::Unt -> X;

	Killpid_Arg   = K_PROC  Process_Id
		      | K_GROUP Process_Id
		      | K_SAME_GROUP
		      ;

	kill:  (Killpid_Arg, Signal) -> Void;

	alarm:  tim::Time -> tim::Time;
	pause:  Void -> Void;
	sleep:  tim::Time -> tim::Time;			# Sleeps only to a resolution of seconds:  You can sleep with sub-second resolution via winix::process::sleep or winix::io::poll.

    }; #  Api Posix_Process 
end;


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
