# posix-thread.api
#
# Mythryl-level interface to support for parallel computation
# via kernel threads (on Linux, Posix threads).
#
# We are the Mythryl side of the
#
#     src/c/lib/pthread/libmythryl-pthread.c
#
# interface to functionality defined in
#
#     src/c/h/runtime-multicore.h   
#
# and implemented in the platform-specific files
#
#     src/c/pthread/sgi-multicore.c
#     src/c/pthread/solaris-multicore.c

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package fat =  fate;						# fate					is from   src/lib/std/src/nj/fate.pkg
herein

    # This api is implemented in:
    #
    #     src/lib/std/src/posix-thread.pkg
    #
    api Posix_Thread {
	#
	# For the momeent this is translated directly from p7 of
	#
	#       A Portable Multiprocessor Interface for Standard ML of New Jersey 
	#       Morrisett + Tolmach 1992 31p 
	#       http://handle.dtic.mil/100.2/ADA255639
	#       http://mythryl.org/pub/pml/a-portable-multiprocessor-interface-for-smlnj-morrisett-tolmach-1992.ps 
	#
	#
	Pthread_Datum;
	Pthread_State =  PTHREAD_STATE (fat::Fate(Void), Pthread_Datum);

	exception ACQUIRE_PTRHEAD;

	acquire_pthread:	Pthread_State -> Void;
	release_pthread:	Void -> X;

	active_pthreads:	Void -> Int;
	max_pthreads:       Void -> Int;

	initial_datum:	Pthread_Datum;

	get_datum:		Void -> Pthread_Datum;
	set_datum:		Pthread_Datum -> Void;

	Spinlock;
	exception SPINLOCK;

	spinlock:		Void       -> Spinlock;
	try_lock:		Spinlock  -> Bool;
	lock:		Spinlock  -> Void;	
	unlock:		Spinlock  -> Void;
    };
end;

## Code by Jeff Prothero: Copyright (c) 2010-2011,
## released under Gnu Public Licence version 3.
