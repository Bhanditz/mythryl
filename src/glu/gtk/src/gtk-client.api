# gtk-client.api
#
# Here we define the primary low-level end-user
# api for constructing Gtk GUI interfaces.
#
# This api is implemented by the generic package
#
#     src/glu/gtk/src/gtk-client-g.pkg
#
# which is instantiated twice:
#
#     src/glu/gtk/src/gtk-client-for-library-in-main-process.pkg
#     src/glu/gtk/src/gtk-client-for-library-in-c-subprocess.pkg
#
# The former puts the Gtk library code in our main
# Mythryl process address space; the latter puts it
# in a subprocess, controlled via a pipe.
#
# Putting the Gtk code in the main process is potentially
# faster but carries the risk that loose pointers in the
# Gtk C code can corrupt the delicate and dynamic Mythryl
# heap.  Pointer bugs have always been endemic in C code
# so this is a nontrivial risk.
#
# Putting the Gtk code in a subprocess yields the opposite
# cost/benefit tradeoff:  Passing control back and forth
# through the control pipe may potentially slow down the
# GUI, but bugs in the Gtk C code cannot possible crash
# the main Mythryl application; at most they can crash
# the Gtk subprocess.  (Note that on a multicore machine
# putting the Gtk display code in a subprocess may actually
# improve performance, by allowing the Gtk code to run in
# parallel with the main Mythyrl process.)
#
#
# A alternative higher-level interface to Gtk functionality
# which is intended to make easy stuff easier at the cost of
# being somewhat less flexible is defined in
#
#     src/glu/gtk/src/easy-gtk.api

# Compiled by:
#     src/lib/std/standard.lib

# Implemented in:
#     src/glu/gtk/src/gtk-client-for-library-in-main-process.pkg
#     src/glu/gtk/src/gtk-client-for-library-in-c-subprocess.pkg

# See also:
#     src/glu/gtk/src/easy-gtk.api



###		"Complexity is a hard global problem.
###              Efficiency is an easy local problem.
###              Solve the hard problem first."



# NB: Lines which contain a comment
#     starting with the keyword 'glue'
#     are read and analysed by
#
#         src/glu/gtk/sh/make-gtk-glue
#
#     which synthesizes code
#     in response.


api Gtk_Client {
    #
    exception GTK_ERROR String;

    Session;

    Widget;  		# This is the production def



    #################################################################################################
    # The following stuff gets copied directly from the
    #     build-a: mythryl-type
    # section of
    #     src/glu/gtk/etc/construction.plan
    # via handle_fieldset -> build_mythryl_type -> to_xxx_client_api_types in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # This section is duplicated in
    #     src/glu/gtk/src/gtk-client-g.pkg
    # Do not edit this or following lines -- they are autobuilt.  (patchname="types")
    # Do not edit this or preceding lines -- they are autobuilt.
    #################################################################################################


    set_widget_tree:             (Session, Widget)         -> Void;			# 
    make_session:		  List( String )           -> Session;			#								# http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-init
    run_eventloop_indefinitely:	  Session                  -> Void;			#								# http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-main
    run_eventloop_once:		{ session: Session, block_until_event: Bool } -> Bool;	#								# http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-main
    quit_eventloop:		  Session                  -> Void;			#								# http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-exit

    make_dialog			    	                  				# 								# http://library.gnome.org/devel/gtk/stable/GtkDialog.html#gtk-dialog-new
	:
	Session
	->
	{ dialog:       Widget,
	  vbox:         Widget,
	  action_area:  Widget
	};





    set_easy_id:                 (Session, String, Widget) -> Void;
    get_by_easy_id:              (Session, String) -> Widget;
    drop_easy_id:                (Session, String) -> Void;

    unref_object:		 (Session, Widget) -> Void;					#								# http://library.gnome.org/devel/gobject/stable/gobject-The-Base-Object-Type.html#g-object-unref


    get_widget_allocation:	(Session, Widget) -> gtk_event::Allocation;


    get_window_pointer										#								# http://library.gnome.org/devel/gdk/unstable/gdk-Windows.html#gdk-window-get-pointer
	:
	(Session, Widget)
	->
	{ x:	      Int,
	  y:          Int,
          modifiers:  List( gtk_event::Modifier )
        };

    #################################################################################################
    # The following stuff gets built from
    #     build-a: plain-fn
    #     fn-name: foo
    #     fn-type: Foo -> Bar
    # paragraphs in
    #     src/glu/gtk/etc/construction.plan
    # via build_plain_function -> build_fun_declaration_for_'xxx_client_api' -> to_xxx_client_api_funs in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # Do not edit this or following lines -- they are autobuilt.  (patchname="functions")

    set_value_changed_callback:              Session -> Widget -> Float_Callback -> Void;
    # Do not edit this or preceding lines -- they are autobuilt.
    #################################################################################################


    clamp: { min: Float, max: Float, value: Float } -> Float;

};


## Code by Jeff Prothero: Copyright (c) 2010-2012,
## released under Gnu Public Licence version 3.
