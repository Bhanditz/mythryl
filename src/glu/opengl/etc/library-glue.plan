# This file contains information read by
#
#     $ROOT/src/lib/make-library-glue/make-library-glue.pkg
#
# For documentation on the format of this file see Note[1]
# in above file.


# Putting the following declarations here avoids
# duplicating them between opengl-client.api and opengl-client-g.pkg,
# simplifying maintainance:

build-a: mythryl-type
type   :
type   :   #  

build-a: mythryl-code
code   :
code   :        #

build-a: mythryl-code
code   : 
code   : 
code   :    # Handlers for X events :		http://library.gnome.org/devel/gtk-tutorial/stable/x182.html
code   :    #

build-a: mythryl-code
code   : 
code   :    # Callbacks taking a boolean argument:
code   :    #


fn-name: glfw_open_window
libcall: glfwOpenWindow(   /*wide*/i0, /*high*/i1,   /*redbits*/i2, /*greenbits*/i3, /*bluebits*/i4,   /*alphabits*/i5, /*depthbits*/i6, /*stencilbits*/i7,   /*fullscreen*/b8 ? GLFW_FULLSCREEN : GLFW_WINDOW )
fn-type: {  session: Session,  wide: Int, high: Int,  redbits: Int, greenbits: Int, bluebits: Int,  alphabits: Int, depthbits: Int, stencilbits: Int,  fullscreen: Bool } -> Bool
build-a: plain-fn

fn-name: glfw_terminate
libcall: glfwTerminate()
fn-type: Session -> Void
build-a: plain-fn

fn-name: glfw_swap_buffers
libcall: glfwSwapBuffers()
fn-type: Session -> Void
build-a: plain-fn

fn-name: glfw_get_window_param
libcall: glfwGetWindowParam( GLFW_OPENED )
fn-type: Session -> Bool
build-a: plain-fn
# XXX SUCKO FIXME: Two dozen different properties can be tested, other properties not yet supported. See http://www.glfw.org/GLFWReference277.pdf


fn-name: gl_clear
libcall: glClear(   (/*color_buffer*/b0 ? GL_COLOR_BUFFER_BIT : 0)  |  (/*depth_buffer*/b1 ? GL_DEPTH_BUFFER_BIT : 0))
fn-type: {  session: Session,  color_buffer: Bool, depth_buffer: Bool } -> Void
build-a: plain-fn
# XXX SUCKO FIXME: Additional buffers can be cleared, including the accumulatation and stencil buffers. Not yet supported.


# The following fns are purely for selftest/checkout:

fn-name: print_hello_world
libcall: fprintf(stderr,"Hello, world!\n")
fn-type: Session -> Void
build-a: plain-fn

fn-name: negate_int
libcall: -i0
fn-type: (Session, Int) -> Int
build-a: plain-fn
	
fn-name: negate_float
libcall: -f0
fn-type: (Session, Float) -> Float
build-a: plain-fn
	
fn-name: negate_boolean
libcall: !b0
fn-type: (Session, Bool) -> Bool
build-a: plain-fn


	


# NB: Default tab-stops are every 8 chars in emacsen,
#     so by having the type-field colons in column 7
#     in this file we ensure that tab-containing code
#     in code: and type: fields looks the same in this
#     file and in its destination file.



## Code by Jeff Prothero : Copyright (c) 2010,
## released under Gnu Public Licence version 3.
