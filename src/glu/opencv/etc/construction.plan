## construction.plan
#
# This file contains information read by
#
#     $ROOT/src/lib/make-library-glue/make-library-glue.pkg
#
# For documentation on the format of this file see Note[1]
# in above file.


# Putting the following declarations here avoids
# duplicating them between opencv-client.api and opencv-client-g.pkg,
# simplifying maintainance:

	    do: mythryl_type
       cg-typs:
       cg-typs:    #  
       cg-typs:    Void_Callback              =  Void                            ->  Void;
       cg-typs:    Bool_Callback              =  Bool                            ->  Void;
       cg-typs:    Float_Callback             =  Float                           ->  Void;
       cg-typs:    Window_Size_Event_Callback =  opencv_event::Window_Size_Event ->  Void;                                             #                                                               # http://library.gnome.org/devel/gdk/stable/gdk-Event-Structures.html#GdkEventButton


	    do: mythryl_code
       cg-funs: 
       cg-funs:        #
       cg-funs:        fun note_void_callback (session: Session, callback, callback_id)
       cg-funs:            =
       cg-funs:            session.callback_map.void
       cg-funs:                :=
       cg-funs:                int_map::set (*session.callback_map.void, callback_id, callback);
       cg-funs:
       cg-funs:
       cg-funs:        #
       cg-funs:        fun note_bool_callback (session: Session, bool_callback, callback_id)
       cg-funs:            =
       cg-funs:            session.callback_map.bool
       cg-funs:                :=
       cg-funs:                int_map::set (*session.callback_map.bool, callback_id, bool_callback);
       cg-funs:
       cg-funs:
       cg-funs:        #
       cg-funs:        fun note_float_callback (session: Session, float_callback, callback_id)
       cg-funs:            =
       cg-funs:            session.callback_map.float
       cg-funs:                :=
       cg-funs:                int_map::set (*session.callback_map.float, callback_id, float_callback);
       cg-funs:
       cg-funs:
       cg-funs:        #
       cg-funs:        fun note_window_size_event_callback (session: Session, window_size_callback, callback_id)
       cg-funs:            =
       cg-funs:            session.callback_map.window_size_event
       cg-funs:                :=
       cg-funs:                int_map::set (*session.callback_map.window_size_event, callback_id, window_size_callback);


	    do: callback_fn
       fn-name: set_window_size_event_callback
       fn-type: Session -> Window_Size_Event_Callback -> Void


       # Must be called AFTER calling open_window!
	    do: plain_fn
       fn-name: glew_init
       libcall: GLenum result = glewInit();
       libcal+:    if (result != GLEW_OK) {
       libcal+:        fprintf(stderr, "Error: '%s'\n", glewGetErrorString(result));
       libcal+:        exit(1);
       libcal+:    }
       fn-type: Session -> Void


	    do: plain_fn
       fn-name: open_window'
       libcall: glfwOpenWindow(   /*wide*/i0, /*high*/i1,   /*redbits*/i2, /*greenbits*/i3, /*bluebits*/i4,   /*alphabits*/i5, /*depthbits*/i6, /*stencilbits*/i7,   /*fullscreen*/b8 ? GLFW_FULLSCREEN : GLFW_WINDOW )
       fn-type: {  session: Session,  wide: Int, high: Int,  redbits: Int, greenbits: Int, bluebits: Int,  alphabits: Int, depthbits: Int, stencilbits: Int,  fullscreen: Bool } -> Bool

       # Because the above is skin-crawlingly verbose:
	    do: plain_fn
       fn-name: open_window
       libcall: glfwOpenWindow(   /*wide*/i0, /*high*/i1,   /*redbits*/0, /*greenbits*/0, /*bluebits*/0,   /*alphabits*/0, /*depthbits*/0, /*stencilbits*/0,   /*fullscreen*/GLFW_WINDOW )
       fn-type: {  session: Session,  wide: Int, high: Int } -> Bool

	    do: plain_fn
       fn-name: terminate
       libcall: glfwTerminate()
       fn-type: Session -> Void

	    do: plain_fn
       fn-name: swap_buffers
       libcall: glfwSwapBuffers()
       fn-type: Session -> Void

	    do: plain_fn
       fn-name: get_window_param
       libcall: glfwGetWindowParam( GLFW_OPENED )
       fn-type: Session -> Bool
       # XXX SUCKO FIXME: Two dozen different properties can be tested, other properties not yet supported. See http://www.glfw.org/GLFWReference277.pdf

	    do: plain_fn
       fn-name: set_window_title
       libcall: glfwSetWindowTitle( s0 )
       fn-type: (Session, String) -> Void

	    do: plain_fn
       fn-name: set_window_size
       libcall: glfwSetWindowSize( /*wide*/i0, /*high*/i1 )
       fn-type: { session: Session, wide: Int, high: Int } -> Void

	    do: plain_fn
       fn-name: set_window_position
       libcall: glfwSetWindowPos( /*x*/i0, /*y*/i1 )
       fn-type: { session: Session, x: Int, y: Int } -> Void


	    do: plain_fn
       fn-name: clear
       libcall: glClear(   (/*color_buffer*/b0 ? GL_COLOR_BUFFER_BIT : 0)  |  (/*depth_buffer*/b1 ? GL_DEPTH_BUFFER_BIT : 0))
       fn-type: {  session: Session,  color_buffer: Bool, depth_buffer: Bool } -> Void
       # XXX SUCKO FIXME: Additional buffers can be cleared, including the accumulatation and stencil buffers. Not yet supported.


       # The following fns are purely for selftest/checkout:

	    do: plain_fn
       fn-name: print_hello_world
       libcall: fprintf(stderr,"Hello, world!\n")
       fn-type: Session -> Void

	    do: plain_fn
       fn-name: negate_int
       libcall: -i0
       fn-type: (Session, Int) -> Int

	    do: plain_fn
       fn-name: negate_float
       libcall: -f0
       fn-type: (Session, Float) -> Float

	    do: plain_fn
       fn-name: negate_boolean
       libcall: !b0
       fn-type: (Session, Bool) -> Bool


	


# NB: Default tab-stops are every 8 chars in emacsen,
#     so by having the type-field ': ' in cols 14-15
#     in this file we ensure that tab-containing code
#     in code: and type: fields looks the same in this
#     file and in its destination file.



## Code by Jeff Prothero : Copyright (c) 2010,
## released under Gnu Public Licence version 3.
