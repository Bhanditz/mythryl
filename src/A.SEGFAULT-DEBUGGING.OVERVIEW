In my experience, Mythryl segfaults have without exception been due to bugs in
the C layer -- Mythryl's typesafety prevents them in Mythryl code proper. (Since
the C layer is thin and stable, they have also been infrequent, say one per year.)

The obvious exception is vector index bounds checking -= if you have
this turned off in any package via a
    #DO set_control "compiler::check_vector_index_bounds"   "FALSE";
statement and you find your code segfaulting, your first step should
be to turn it back on.

Mythryl contains the following tools which may be used to help track down
a segfault:

1) If the runtime detects a segfault it will prompt you to attach gdb to
   the running process and examine the process state.  Looking at the
   C callstack via 'bt' to see how you got there should be your first try.
   (Remember that Mythryl code proper does not use a stack, so you will not
   see it on the backtrace.)

   This functionality is implemented by
       enter_debug_loop()
   in
       src/c/machine-dependent/posix-arithmetic-trap-handlers.c


2) Considerable support is available for logging to disk via calls in your
   code.  This is generally better than printf()ing to stdout because it
   does not clutter interaction as much and is usually much faster.

   To log at the C level look at the support in
       src/c/main/error-reporting.c
   in particular log_if.

   To log at the Mythyryl level look at the log::note support in
       src/lib/std/src/log.pkg
   and perhaps also
       src/lib/src/lib/thread-kit/src/lib/logger.pkg
   or (for xkit related work)
       src/lib/x-kit/xclient/src/stuff/xlogger.pkg

3) Calls from the Mythryl level to the C layer are too frequent to
   log to disk in many applications -- the time and space overhead
   would be excessive -- so a special circular syscall log records
   the last few hundred in a ram buffer.

   This is declared in
       src/c/h/runtime-base.h
   and defined in 
       src/c/heapcleaner/heap-debug-stuff.c
   and driven by calls to the macros 
	ENTER_MYTHRYL_CALLABLE_C_FN(__func__);
	EXIT_MYTHRYL_CALLABLE_C_FN(__func__);
   inserted throughout the C layer.

   Use the   debug_syscall_log(30)   call (say) to inspect the
   last 30 syscall_log entries interactively in gdb.

4) The syscall log records only entry/exit to the C layer from
   the Mythryl layer.  To record more detailed information, more
   like the regular log_if system, still in a circular ram buffer
   for speed, use the ramlog facility declared in
       src/c/h/runtime-base.h
   and defined in
       src/c/main/ramlog.c

   In practice this means inserting into C code calls to
       ramlog_printf("#%d...\n", syscalls_seen, ...);
   and then viewing them interactively in gdb via
       call debug_ramlog(30)
   (say) to view the last 30 entries.

   (There is currently no support for making ramlog entries
   from the Mythryl level;  possibly there should be.)


5) The Mythryl heap-allocation mechanism depends on allocating blindly
   99% of the time for speed, and only occasinally checking that there
   is sufficient room available in the agegroup0 buffer(s).  This mechanism
   is fragile and subject to breakage during C-layer maintainance coding,
   so tripwire buffers are placed at the end of each agegroup0 buffer to
   detect any buffer overrun bugs.  The tripwire buffers should always
   contain all zeros.  This is automatically checked before and after
   every heapcleaning and can also be checked by hand in gdb via the
       debug_tripwires() 
   in src/c/heapcleaner/heap-debug-stuff.c


As in any language, your first step in tracking down a hard segfault
bug will usually be to find the simplest and most reliable possible
way of reproducing the segfault -- ideally a two-line Mythryl script
or program.  Beyond that, just gather whatever clues you can to narrow
down the range of possibilities.  Play detective.  Persistence pays!


-- 2012-10-09 CrT
