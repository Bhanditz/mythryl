## opencv-construction.plan
#
# This file contains information read by
#
#     $ROOT/src/lib/make-library-glue/make-library-glue.pkg
#
# For documentation on the format of this file see Note[1]
# in above file.





       # The following fns are purely for selftest/checkout:

	    do: plain_fn
       fn-name: print_hello_world
       libcall: fprintf(stderr,"Hello, world!\n")
       fn-type: Session -> Void

	    do: plain_fn
       fn-name: negate_int
       libcall: -i0
       fn-type: (Session, Int) -> Int

	    do: plain_fn
       fn-name: negate_float
       libcall: -f0
       fn-type: (Session, Float) -> Float

	    do: plain_fn
       fn-name: negate_boolean
       libcall: !b0
       fn-type: (Session, Bool) -> Bool



###################################################################
# In   src/c/lib/opencv/cvCreateImage.c  I had the following, which
# at this point looks totally inscrutable, so for the moment I'm
# not trying to turn it into code:
#
# /* _lib7_OpenCV_cvCreateImage : String -> Image
#  *
#  */
# Val
# 
# _lib7_OpenCV_cvCreateImage (Task *task, Val arg)
# {
#  /*
#    int height =  700;
#    int width  = 1000;
#    cvCreateImage( cvSize(1000,700),8,3);
#    return HEAP_VOID;
#  */
#
#    IplImage img;
#    Val data   =  make_biwordslots_vector_sized_in_bytes__may_heapclean(  task, &img, sizeof(img), NULL);
#
#    return  make_vector_header(task,  UNT8_RO_VECTOR_TAGWORD, data, sizeof(img));
# }
#
#  //  IplImage      is defined in		cxcore/include/cxtypes.h
#  //  cvCreateImage is defined in		cxcore/src/cxarray.cpp
#
###################################################################


###################################################################
# In   src/c/lib/opencv/cvLoadImage.c  I had the following, which
# at the moment I'm not trying to turn it into code:
# 
# /* _lib7_OpenCV_cvLoadImage : String -> Image
#  *
#  */
# Val
# _lib7_OpenCV_cvLoadImage (Task *task, Val arg)
# {
# 
#     char*      filename  =  HEAP_STRING_AS_C_STRING( arg );				// Last use of 'arg'.
#     IplImage*  ipl_image =  cvLoadImage( filename, CV_LOAD_IMAGE_UNCHANGED );
# 
#     if (!ipl_image)   RAISE_ERROR__MAY_HEAPCLEAN(task, "cvLoadImage returned NULL", NULL);
# 
#     {   
# 	// Copy image into heap, so that it can be
# 	// garbage-collected when no longer needed:
# 	//
#         Val header_data  =  make_biwordslots_vector_sized_in_bytes__may_heapclean(  task, ipl_image, sizeof(IplImage), NULL);				Roots roots1 = { &header_data,   NULL };
#         Val header       =  make_vector_header(					    task, UNT8_RO_VECTOR_TAGWORD, header_data, sizeof(IplImage));	Roots roots2 = { &header,	&roots1 };
# 
# //	c_roots__global[c_roots_count__global++] = &header;			// Protect header from garbage collection while allocating image.  (Obsoleted by 'roots' mechanism.)
# 
# 	Val image_data   =  make_biwordslots_vector_sized_in_bytes__may_heapclean(  task,  ipl_image->imageData, ipl_image->imageSize, &roots2);
#         Val image        =  make_vector_header(               			    task,  UNT8_RO_VECTOR_TAGWORD, image_data, ipl_image->imageSize);
#         
# //	--c_roots_count__global;
# 	cvReleaseImage( &ipl_image );
# 
# 	return  make_two_slot_record( task, header, image );
#     }
# 
# }
# 
# 
# // Notes:
# //
# //   IplImage       is defined in		cxcore/include/cxtypes.h
# //
# //   cvCreateImage  is defined in		cxcore/src/cxarray.cpp
# //   cvCreateData   is defined in		cxcore/src/cxarray.cpp
# //   cvReleaseImage is defined in		cxcore/src/cxarray.cpp
# //
# //   cvLoadImage    is defined in		otherlibs/highgui/loadsave.cpp
# //
###################################################################


###################################################################
# In   src/c/lib/opencv/cvRNG.c  I had the following, which
# at the moment I'm not trying to turn it into code:
# 
# /* _lib7_OpenCV_cvRNG : Int -> Random_Number_Generator
#  *
#  */
# Val
# 
# _lib7_OpenCV_cvRNG (Task *task, Val arg)
# {
# 
# #if HAVE_OPENCV_CV_H && HAVE_LIBCV
#     //
#     int init  = TAGGED_INT_TO_C_INT( arg );								// Last use of 'arg'.
#     //
#     CvRNG rng = cvRNG( (unsigned) init);
# 
#     Val data  =  make_biwordslots_vector_sized_in_bytes__may_heapclean( task, &rng, sizeof(rng), NULL );
# 
#     return  make_vector_header(task,  UNT8_RO_VECTOR_TAGWORD, data, sizeof(rng));
# }
###################################################################


###################################################################
# In   src/c/lib/opencv/cvRNG.c  I had the following, which
# at the moment I'm not trying to turn it into code:
# 
# /* _lib7_OpenCV_cvRandInt : Random_Number_Generator -> Int
#  *
#  */
# Val
# 
# _lib7_OpenCV_cvRandInt (Task *task, Val arg)
# {
# #if HAVE_OPENCV_CV_H && HAVE_LIBCV
# 
#     CvRNG* rng
#         =
#         GET_VECTOR_DATACHUNK_AS( CvRNG*, arg);
# 
#     int result
#         =
#         cvRandInt( rng );
# 
#     return TAGGED_INT_FROM_C_INT( result );
# 
# #else
# 
#     extern char* no_opencv_support_in_runtime;
# 
#     return RAISE_ERROR__MAY_HEAPCLEAN(task, no_opencv_support_in_runtime, NULL);
# 
# #endif
# }
###################################################################


###################################################################
# In   src/c/lib/opencv/cvRNG.c  I had the following, which
# at the moment I'm not trying to turn it into code:
# 
# /* _lib7_OpenCV_cvRandReal : Random_Number_Generator -> Float
#  *
#  */
# Val
# 
# _lib7_OpenCV_cvRandReal (Task *task, Val arg)
# {
#     CvRNG* rng
#         =
#         GET_VECTOR_DATACHUNK_AS( CvRNG*, arg );
# 
#     double  random_float64
#         =
#         cvRandReal( rng );
# 
#     return  make_float64(task, random_float64 );
# }
###################################################################


# NB: Default tab-stops are every 8 chars in emacsen,
#     so by having the type-field ': ' in cols 14-15
#     in this file we ensure that tab-containing code
#     in code: and type: fields looks the same in this
#     file and in its destination file.



## Code by Jeff Prothero : Copyright (c) 2010,
## released per terms of SMLNJ-COPYRIGHT.
