Nomenclature: "bnd" == "library BiNDings"

This directory contains Mythryl bindings to various major C libraries like

   gtk:      The GNOME widget toolkit
   ncurses:  The Ncurses cursor-addressable display library.
   opencv:   The OpenCV computer vision library
   opengl:   The OpenGL 3D graphics library
   qqq:      This is a dummy template useful for creating new library glue modules. 

In general we support two binding versions for each library:

 o  One in which the C library code is linked into the main Mythryl executable, for speed and simplicity.
 o  One in which the C library code is linked into a subprocess controlled via pipes, for safety.

Why?

The Mythryl architecture is tightly engineered.  Linking vanilla C
libraries into it can easily degrade the behavior of both Mythryl
and the library, for a number of reasons.

For one, the Mythryl heap is much more complex and fragile than a
C-program heap.  in particular the Mythryl heapcleaner ("garbage
collector") moves things around in the heap about 200 times per
second.  Loose C pointers clobbering things are bad enough in a normal
C program but many times worse in the context of the Mythryl heap.

For another, Mythryl uses a 50Hz SIGALRM (via setitimer()) to drive
timeslicing.  This means that (under POSIX definitions), Mythryl
operation can be disrupted by any C library linked into it which
directly or indirectly uses any of:

    alarm()
    ualarm()
    setitimer()
    sleep()
    usleep()
    siglongjmp()
    longjmp()

For yet another, any 'slow' system call may be interrupted by the
sigalarm handler, in which case the call may return EINTR and need to
be retried.  Any C library which fails to do so (common!) may behave
erratically when linked into the main Mythryl process.

This includes any C library which calls any of:

    open()
    read()
    write()
    close()
    select()
    accept()
    connect()
    ftruncate()
    mkstemp()
    pathconf()
    dup()
    dup2()
    fcntl()
    sysconf()
    waitpid()
    recv()
    send()

Which is the overwhelming majority of C libraries. :-)

Consequently you should favor using the library-in-subprocess
binding whenever performance considerations permit.

(NB: On modern multi-core machines, the library-in-subprocess
implementation may actually be faster, due to increased opportunity
for parallel execution.)

Our libraries use the following general directory layout:

   c		C code.
   c/in-main	C code to be linked into the main Mythryl runtime executable bin/mythryl-runtime-intel32
   c/in-sub	C code for a helper executable to be run as a sub-process of bin/mythryl-runtime-intel32
   doc		Documentation
   doc/tex	Documentation in LaTeX format.  Currently this is everything.
   etc		Configuration
   sh		Support scripts.
   src		Mythryl code.
   try		Demo scripts to try.

