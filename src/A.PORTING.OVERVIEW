(At the moment this is less an actual porting guide than
some preliminary notes on eventually writing one.)

Porting the Mythryl system to a new platform involves
various subtasks including

 o Deciding how to support the current standard library.
   Some parts may simply not be applicable to some platforms.

 o Witing new library bindings to support important
   platform-specific capabilities.  On an smartphone,
   say, this might include the accelleration sensors
   and widget libraries.

We won't address that stuff in this document;  here we
focus only on support for the architecture.

The current codebase only supports 32-bit operation.
Most modern architectures are 64-bit, so porting to
64-bit operation is probably the first major task.
The codebase implicitly assumes 32-bit word sizes
in various places (or appears to):  As I find these
I mark them with a comment :

      # 64-bit issue

There is no guarantee that I have found all of them;
I suspect I have found the majority of them.

The C runtime may also have some 32- vs 64-bit issues;
I haven't looked carefully for them.  Certainly the
heapcleaner ("garbage collector") code is written
very specifically for 32-bits, complete with bitfield
layouts in tagwords etc, and will need to be modified
to support 64-bit operation.  For an overview of that
stuff see

    A.HEAPCLEANER.OVERVIEW


Machine-dependent issues relating to machine instruction
set and numbers of machine registers etc are confined
to the Mythryl compiler backend lowhalf, which lives in

    src/lib/compiler/back/low

In general, each supported architecture has its own filetree(s).
Currently this consists of three architectures:

  Intel32 (==x86):  src/lib/compiler/back/low/main/intel32
                    src/lib/compiler/back/low/intel32

  Pwrpc32:          src/lib/compiler/back/low/main/pwrpc32
                    src/lib/compiler/back/low/pwrpc32

  Sparc32:          src/lib/compiler/back/low/main/sparc32
                    src/lib/compiler/back/low/sparc32

From comments in the code, it is not clear to me that either
of the latter two ports ever actually worked, and if they
did bitrot may well have broken them;  the Intel32 port
is the only one that can be solidly trusted at present.

Mythryl is derived from SML/NJ, which also includes support
for architectures like Alpha which I have dropped as not
being worth the maintainance effort at this point;  the
SML/NJ codebase can be mined for the relevant code if need be.

The Mythryl compiler backend lowhalf is derived from the MLRISC project

   http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/index.html

an ambitious project which appears to have died a-borning, and
which apparently had the goal of being able to port to a new
architecture just by writing a single configuration file,
selecting between various alternate (e..g.) register allocation
algorithms, and then pushing the button.

Only a small part of that vision has come to pass, so the
current reality is a lot messier.

The central specification file in question exists:

    src/lib/compiler/back/low/intel32/intel32.architecture-description
    src/lib/compiler/back/low/pwrpc32/pwrpc32.architecture-description
    src/lib/compiler/back/low/sparc32/sparc32.architecture-description

These specify a few minor but critical details such as big-endian vs
little-endian, but mainly they specify the available hardware registers
and the set of machine instructions to be used by the compiler. (This
will typically be a subset of the full architecture instruction set,
which most likely includes instructions useful only in the kernel.
The Intel32 architecture in particular contains many instructions of
mainly historical interest.)

From these architecture description files a number of backend lowhalf
sourcecode files are automatically generated.  They are marked by
having 'codemade' in their filenames:

    src/lib/compiler/back/low/intel32/code/machcode-intel32.codemade.api
    src/lib/compiler/back/low/intel32/code/machcode-intel32-g.codemade.pkg
    src/lib/compiler/back/low/intel32/code/registerkinds-intel32.codemade.pkg
    src/lib/compiler/back/low/intel32/emit/translate-machcode-to-asmcode-intel32-g.codemade.pkg

    src/lib/compiler/back/low/pwrpc32/code/machcode-pwrpc32.codemade.api
    src/lib/compiler/back/low/pwrpc32/code/machcode-pwrpc32-g.codemade.pkg
    src/lib/compiler/back/low/pwrpc32/code/registerkinds-pwrpc32.codemade.pkg
    src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-asmcode-pwrpc32-g.codemade.pkg
    src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-execode-pwrpc32-g.codemade.pkg

    src/lib/compiler/back/low/sparc32/code/machcode-sparc32.codemade.api
    src/lib/compiler/back/low/sparc32/code/machcode-sparc32-g.codemade.pkg
    src/lib/compiler/back/low/sparc32/code/registerkinds-sparc32.codemade.pkg
    src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-execode-sparc32-g.codemade.pkg
    src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-asmcode-sparc32-g.codemade.pkg



		NOMENCLATURE:

		    machcode: 'abstract machine code' -- a representation in which 
			      each target architecture instructino is explicitly represented, but not
			      yet in its binary encoding.

		    asmcode:  Human-readable assembly-language representation of target-architecture code.

		    execode:  Absolute executable binary target machine code -- a bytevector.



The alert reader may note that 

    src/lib/compiler/back/low/pwrpc32/emit/translate-machcode-to-execode-pwrpc32-g.codemade.pkg
    src/lib/compiler/back/low/sparc32/emit/translate-machcode-to-execode-sparc32-g.codemade.pkg

are autogenerated but not

    src/lib/compiler/back/low/intel32/translate-machcode-to-execode-intel32-g.pkg

This is because the Intel32 encoding is too complex for the autogeneration logic to handle,
so on that architecture a handmade module is used instead.

Synthesis of the above *codemade* files is currently driven by a ../Makefile kludge:

backends:
	sh/make-sourcecode-for-backend-intel32
	sh/make-sourcecode-for-backend-pwrpc32
	sh/make-sourcecode-for-backend-sparc32

Any port to new architecture will need to clone-and-mutate one of those
and add a line there.

From a coding point of view, the central files putting together each
machine-dependent backend lowhalf are:

    src/lib/compiler/back/low/main/intel32/backend-lowhalf-intel32-g.pkg
    src/lib/compiler/back/low/main/pwrpc32/backend-lowhalf-pwrpc32.pkg
    src/lib/compiler/back/low/main/sparc32/backend-lowhalf-sparc32.pkg

These contain some additional configuration information which really
should be obtained instead from the architecture-description files
(e.g., platform_register_info*) and also selections between various
alternative algorithms on a per-architecture basis.



		NOMENCLATURE:

		    architecture:  Instruction-set etc, eg as defined by Intel CPU chip docs.
		    platform:      An architecture plus an operating system.


The distinction mainly important in that on Intel32 MacOSX and Posix
have a few critical differences that the compiler must know about:

  o When calling C, MacOSX returns small structs in EAX:EDX; Posix does not.
  o C stackframe alignment is 16 bytes on MacOSX but 4 bytes on Posix.

These differences are currently hacked into

    src/lib/compiler/toplevel/compiler/mythryl-compiler-for-intel32-posix.pkg

in fairly horrific fashion.



Any attempt to port will most likely involve doing cross-compilation.
The original SML/NJ facilities for doing this were too snarky for my
taste so I ripped out most of the logic;  replacement code has not yet
been written.

My preferred solution would be to add (for example) a ".intel64"
component into the names of files cross-compiled for that platform.

A good entrypoint into the relevant file-naming logic is:

    src/app/makelib/main/filename-policy.api
    src/app/makelib/main/filename-policy.pkg

(I believe an appropriate parameter is already being passed around,
so very little code re-plumbing should be needed.)

The Mythryl compiler supports indefinite-precision arithmetic, and
mostly uses indefinite-precision representations for integer constants
internally during compilation, so cross-compiling from a 32-bit to a
64-bit architecture should be quite practical, possibly even relatively
painless.



If I were doing a Mythryl port, I would seriously consider writing
a simple virtual machine of some sort in C and porting to it as the
first step.  This has a number of advantages:

 o We can then run Mythryl on basically any platform that C runs on,
   albeit at a roughly hundredfold slowdown due to interpretation.
   This is useful independent of porting issues.

 o The initial port from x86 to bytecode (or -- better -- wordcode)
   interpreter can be done on one machine.  This is much more convenient
   than shipping images over the net to a separate machine on every
   development cycle.

 o The initial port then does not have to deal with issues of different
   C library support on different machines, or of porting the Mythryl
   C runtime layer.  This factoring into smaller problems is very helpful.

 o Once the interpreter port is working on one machine, it can be ported
   to another machine just by porting the Mythryl C layer.  This is again
   good factorization.

 o The interpreter can be designed to function almost identically in
   32-bit and 64-bit C, simplifying the initial 32- to 64-bit porting
   problem.

 o The interpreter can later be tweaked to allow intermixing interpreted
   and native code on a module-by-module basis.  This can ease the problem
   of bringing up a new native-code generator (backend lowhalf) by helping
   localize any problems.
